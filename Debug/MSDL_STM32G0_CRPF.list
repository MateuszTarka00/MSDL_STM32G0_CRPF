
MSDL_STM32G0_CRPF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd38  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107c8  080107c8  000304f0  2**0
                  CONTENTS
  4 .ARM          00000000  080107c8  080107c8  000304f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080107c8  080107c8  000304f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107c8  080107c8  000207c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080107cc  080107cc  000207cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  080107d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005138  200004f0  08010cc0  000304f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005628  08010cc0  00035628  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000444ce  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b00  00000000  00000000  000749e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  0007c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c90  00000000  00000000  0007e368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d19  00000000  00000000  0007fff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7a4  00000000  00000000  000a4d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd747  00000000  00000000  000cf4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019cbfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007264  00000000  00000000  0019cc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004f0 	.word	0x200004f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800fde0 	.word	0x0800fde0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004f4 	.word	0x200004f4
 8000104:	0800fde0 	.word	0x0800fde0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	781a      	ldrb	r2, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000250:	210f      	movs	r1, #15
 8000252:	187b      	adds	r3, r7, r1
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	187b      	adds	r3, r7, r1
 8000258:	781b      	ldrb	r3, [r3, #0]
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	b004      	add	sp, #16
 8000260:	bd80      	pop	{r7, pc}

08000262 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	000a      	movs	r2, r1
 800026c:	1cfb      	adds	r3, r7, #3
 800026e:	701a      	strb	r2, [r3, #0]
 8000270:	1cfb      	adds	r3, r7, #3
 8000272:	781a      	ldrb	r2, [r3, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	2301      	movs	r3, #1
}
 800027a:	0018      	movs	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}

08000282 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8000282:	b580      	push	{r7, lr}
 8000284:	b082      	sub	sp, #8
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 800028c:	0039      	movs	r1, r7
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2204      	movs	r2, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f00e ff33 	bl	800f0fe <memmove>
 8000298:	2304      	movs	r3, #4
}
 800029a:	0018      	movs	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <OD_getIndex+0x14>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	e000      	b.n	80002b8 <OD_getIndex+0x16>
 80002b6:	2300      	movs	r3, #0
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d101      	bne.n	80002d4 <OD_extension_init+0x14>
 80002d0:	2305      	movs	r3, #5
 80002d2:	e003      	b.n	80002dc <OD_extension_init+0x1c>
    entry->extension = extension;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80002da:	2300      	movs	r3, #0
}
 80002dc:	0018      	movs	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	b002      	add	sp, #8
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af02      	add	r7, sp, #8
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	607a      	str	r2, [r7, #4]
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	200b      	movs	r0, #11
 80002f2:	183b      	adds	r3, r7, r0
 80002f4:	1c0a      	adds	r2, r1, #0
 80002f6:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	183b      	adds	r3, r7, r0
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	68f8      	ldr	r0, [r7, #12]
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	f001 fd27 	bl	8001d58 <OD_get_value>
 800030a:	0003      	movs	r3, r0
}
 800030c:	0018      	movs	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	b004      	add	sp, #16
 8000312:	bd80      	pop	{r7, pc}

08000314 <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00c      	beq.n	8000342 <OD_read_1014_default+0x2e>
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	7c5b      	ldrb	r3, [r3, #17]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d108      	bne.n	8000342 <OD_read_1014_default+0x2e>
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d005      	beq.n	8000342 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d902      	bls.n	8000342 <OD_read_1014_default+0x2e>
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d101      	bne.n	8000346 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000342:	2309      	movs	r3, #9
 8000344:	e01d      	b.n	8000382 <OD_read_1014_default+0x6e>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <OD_read_1014_default+0x44>
 8000354:	2300      	movs	r3, #0
 8000356:	e001      	b.n	800035c <OD_read_1014_default+0x48>
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	061b      	lsls	r3, r3, #24
 800035c:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2228      	movs	r2, #40	; 0x28
 8000362:	5c9b      	ldrb	r3, [r3, r2]
 8000364:	3380      	adds	r3, #128	; 0x80
 8000366:	001a      	movs	r2, r3
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	4313      	orrs	r3, r2
 800036c:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 800036e:	693a      	ldr	r2, [r7, #16]
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0011      	movs	r1, r2
 8000374:	0018      	movs	r0, r3
 8000376:	f7ff ff84 	bl	8000282 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2204      	movs	r2, #4
 800037e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000380:	2300      	movs	r3, #0
}
 8000382:	0018      	movs	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	b006      	add	sp, #24
 8000388:	bd80      	pop	{r7, pc}

0800038a <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b086      	sub	sp, #24
 800038e:	af00      	add	r7, sp, #0
 8000390:	60f8      	str	r0, [r7, #12]
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	607a      	str	r2, [r7, #4]
 8000396:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d00f      	beq.n	80003be <OD_read_1003+0x34>
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00c      	beq.n	80003be <OD_read_1003+0x34>
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d009      	beq.n	80003be <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d803      	bhi.n	80003b8 <OD_read_1003+0x2e>
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	7c5b      	ldrb	r3, [r3, #17]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <OD_read_1003+0x34>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d101      	bne.n	80003c2 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 80003be:	2309      	movs	r3, #9
 80003c0:	e058      	b.n	8000474 <OD_read_1003+0xea>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	7f1b      	ldrb	r3, [r3, #28]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d801      	bhi.n	80003d4 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80003d0:	2309      	movs	r3, #9
 80003d2:	e04f      	b.n	8000474 <OD_read_1003+0xea>
    }
    if (stream->subIndex == 0) {
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	7c5b      	ldrb	r3, [r3, #17]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d10c      	bne.n	80003f6 <OD_read_1003+0x6c>
        CO_setUint8(buf, em->fifoCount);
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	2220      	movs	r2, #32
 80003e0:	5c9a      	ldrb	r2, [r3, r2]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	0011      	movs	r1, r2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f7ff ff3b 	bl	8000262 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	2201      	movs	r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80003f2:	2300      	movs	r3, #0
 80003f4:	e03e      	b.n	8000474 <OD_read_1003+0xea>
    }
    else if (stream->subIndex <= em->fifoCount) {
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	7c5a      	ldrb	r2, [r3, #17]
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	2120      	movs	r1, #32
 80003fe:	5c5b      	ldrb	r3, [r3, r1]
 8000400:	429a      	cmp	r2, r3
 8000402:	d836      	bhi.n	8000472 <OD_read_1003+0xe8>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	7f5b      	ldrb	r3, [r3, #29]
 8000408:	b29a      	uxth	r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	7c5b      	ldrb	r3, [r3, #17]
 800040e:	b29b      	uxth	r3, r3
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29a      	uxth	r2, r3
 8000414:	2116      	movs	r1, #22
 8000416:	187b      	adds	r3, r7, r1
 8000418:	801a      	strh	r2, [r3, #0]
        if (index < 0) {
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	5e9b      	ldrsh	r3, [r3, r2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	da09      	bge.n	8000438 <OD_read_1003+0xae>
            index += em->fifoSize;
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	7f1b      	ldrb	r3, [r3, #28]
 8000428:	b29a      	uxth	r2, r3
 800042a:	187b      	adds	r3, r7, r1
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	18d3      	adds	r3, r2, r3
 8000430:	b29a      	uxth	r2, r3
 8000432:	187b      	adds	r3, r7, r1
 8000434:	801a      	strh	r2, [r3, #0]
 8000436:	e009      	b.n	800044c <OD_read_1003+0xc2>
        }
        else if (index >= (em->fifoSize)) {
 8000438:	2316      	movs	r3, #22
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	2200      	movs	r2, #0
 800043e:	5e9b      	ldrsh	r3, [r3, r2]
 8000440:	693a      	ldr	r2, [r7, #16]
 8000442:	7f12      	ldrb	r2, [r2, #28]
 8000444:	4293      	cmp	r3, r2
 8000446:	db01      	blt.n	800044c <OD_read_1003+0xc2>
            return ODR_DEV_INCOMPAT;
 8000448:	2309      	movs	r3, #9
 800044a:	e013      	b.n	8000474 <OD_read_1003+0xea>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	2316      	movs	r3, #22
 8000452:	18fb      	adds	r3, r7, r3
 8000454:	2100      	movs	r1, #0
 8000456:	5e5b      	ldrsh	r3, [r3, r1]
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	18d3      	adds	r3, r2, r3
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	0011      	movs	r1, r2
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff ff0d 	bl	8000282 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	2204      	movs	r2, #4
 800046c:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800046e:	2300      	movs	r3, #0
 8000470:	e000      	b.n	8000474 <OD_read_1003+0xea>
    }
    else {
        return ODR_NO_DATA;
 8000472:	2319      	movs	r3, #25
    }
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b006      	add	sp, #24
 800047a:	bd80      	pop	{r7, pc}

0800047c <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00c      	beq.n	80004aa <OD_write_1003+0x2e>
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	7c5b      	ldrb	r3, [r3, #17]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d108      	bne.n	80004aa <OD_write_1003+0x2e>
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d005      	beq.n	80004aa <OD_write_1003+0x2e>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d102      	bne.n	80004aa <OD_write_1003+0x2e>
        || countWritten == NULL)
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d101      	bne.n	80004ae <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80004aa:	2309      	movs	r3, #9
 80004ac:	e012      	b.n	80004d4 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff fec7 	bl	8000244 <CO_getUint8>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80004ba:	230f      	movs	r3, #15
 80004bc:	e00a      	b.n	80004d4 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	2220      	movs	r2, #32
 80004c8:	2100      	movs	r1, #0
 80004ca:	5499      	strb	r1, [r3, r2]

    *countWritten = sizeof(uint8_t);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b006      	add	sp, #24
 80004da:	bd80      	pop	{r7, pc}

080004dc <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80004ea:	2317      	movs	r3, #23
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d01d      	beq.n	8000534 <CO_EM_init+0x58>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d01a      	beq.n	8000534 <CO_EM_init+0x58>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d104      	bne.n	800050e <CO_EM_init+0x32>
 8000504:	2328      	movs	r3, #40	; 0x28
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d812      	bhi.n	8000534 <CO_EM_init+0x58>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 800050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000510:	2b00      	cmp	r3, #0
 8000512:	d00f      	beq.n	8000534 <CO_EM_init+0x58>
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00c      	beq.n	8000534 <CO_EM_init+0x58>
        || nodeId < 1 || nodeId > 127
 800051a:	2238      	movs	r2, #56	; 0x38
 800051c:	18bb      	adds	r3, r7, r2
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d007      	beq.n	8000534 <CO_EM_init+0x58>
 8000524:	18bb      	adds	r3, r7, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25b      	sxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	db02      	blt.n	8000534 <CO_EM_init+0x58>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 800052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <CO_EM_init+0x5e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000534:	2301      	movs	r3, #1
 8000536:	425b      	negs	r3, r3
 8000538:	e0c1      	b.n	80006be <CO_EM_init+0x1e2>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2250      	movs	r2, #80	; 0x50
 800053e:	2100      	movs	r1, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f00e fdef 	bl	800f124 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	2300      	movs	r3, #0
 8000550:	2201      	movs	r2, #1
 8000552:	2100      	movs	r1, #0
 8000554:	f001 fc78 	bl	8001e48 <OD_getPtr>
 8000558:	0002      	movs	r2, r0
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10d      	bne.n	8000582 <CO_EM_init+0xa6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 8000566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000568:	2b00      	cmp	r3, #0
 800056a:	d007      	beq.n	800057c <CO_EM_init+0xa0>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe97 	bl	80002a2 <OD_getIndex>
 8000574:	0003      	movs	r3, r0
 8000576:	001a      	movs	r2, r3
 8000578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800057a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800057c:	230c      	movs	r3, #12
 800057e:	425b      	negs	r3, r3
 8000580:	e09d      	b.n	80006be <CO_EM_init+0x1e2>
    }
    *em->errorRegister = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	2328      	movs	r3, #40	; 0x28
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	7713      	strb	r3, [r2, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 800059a:	2516      	movs	r5, #22
 800059c:	197c      	adds	r4, r7, r5
 800059e:	2310      	movs	r3, #16
 80005a0:	18fa      	adds	r2, r7, r3
 80005a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80005a4:	2301      	movs	r3, #1
 80005a6:	2100      	movs	r1, #0
 80005a8:	f7ff fe9c 	bl	80002e4 <OD_get_u32>
 80005ac:	0003      	movs	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80005b0:	197b      	adds	r3, r7, r5
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d103      	bne.n	80005c2 <CO_EM_init+0xe6>
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	4a42      	ldr	r2, [pc, #264]	; (80006c8 <CO_EM_init+0x1ec>)
 80005be:	4013      	ands	r3, r2
 80005c0:	d013      	beq.n	80005ea <CO_EM_init+0x10e>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80005c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d007      	beq.n	80005d8 <CO_EM_init+0xfc>
 80005c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff fe69 	bl	80002a2 <OD_getIndex>
 80005d0:	0003      	movs	r3, r0
 80005d2:	001a      	movs	r2, r3
 80005d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d6:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 80005d8:	2316      	movs	r3, #22
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <CO_EM_init+0x10e>
            return CO_ERROR_OD_PARAMETERS;
 80005e4:	230c      	movs	r3, #12
 80005e6:	425b      	negs	r3, r3
 80005e8:	e069      	b.n	80006be <CO_EM_init+0x1e2>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 80005ea:	2338      	movs	r3, #56	; 0x38
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	3280      	adds	r2, #128	; 0x80
 80005f8:	801a      	strh	r2, [r3, #0]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	43db      	mvns	r3, r3
 80005fe:	0fdb      	lsrs	r3, r3, #31
 8000600:	b2db      	uxtb	r3, r3
 8000602:	001a      	movs	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <CO_EM_init+0x1f0>)
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a2e      	ldr	r2, [pc, #184]	; (80006d0 <CO_EM_init+0x1f4>)
 8000618:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3330      	adds	r3, #48	; 0x30
 800061e:	001a      	movs	r2, r3
 8000620:	2516      	movs	r5, #22
 8000622:	197c      	adds	r4, r7, r5
 8000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f7ff fe49 	bl	80002c0 <OD_extension_init>
 800062e:	0003      	movs	r3, r0
 8000630:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8000632:	197b      	adds	r3, r7, r5
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b25b      	sxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00d      	beq.n	8000658 <CO_EM_init+0x17c>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800063c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <CO_EM_init+0x176>
 8000642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fe2c 	bl	80002a2 <OD_getIndex>
 800064a:	0003      	movs	r3, r0
 800064c:	001a      	movs	r2, r3
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000652:	230c      	movs	r3, #12
 8000654:	425b      	negs	r3, r3
 8000656:	e032      	b.n	80006be <CO_EM_init+0x1e2>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2238      	movs	r2, #56	; 0x38
 800065c:	18ba      	adds	r2, r7, r2
 800065e:	2128      	movs	r1, #40	; 0x28
 8000660:	7812      	ldrb	r2, [r2, #0]
 8000662:	545a      	strb	r2, [r3, r1]

    em->CANtxBuff = CO_CANtxBufferInit(
 8000664:	2314      	movs	r3, #20
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	2330      	movs	r3, #48	; 0x30
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	8819      	ldrh	r1, [r3, #0]
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2308      	movs	r3, #8
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	f007 fb90 	bl	8007da0 <CO_CANtxBufferInit>
 8000680:	0002      	movs	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <CO_EM_init+0x1b8>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800068e:	2301      	movs	r3, #1
 8000690:	425b      	negs	r3, r3
 8000692:	e014      	b.n	80006be <CO_EM_init+0x1e2>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <CO_EM_init+0x1f8>)
 800069e:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <CO_EM_init+0x1fc>)
 80006a4:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3340      	adds	r3, #64	; 0x40
 80006aa:	001a      	movs	r2, r3
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f7ff fe05 	bl	80002c0 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80006b6:	2317      	movs	r3, #23
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
}
 80006be:	0018      	movs	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b006      	add	sp, #24
 80006c4:	bdb0      	pop	{r4, r5, r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	7ffff800 	.word	0x7ffff800
 80006cc:	08000315 	.word	0x08000315
 80006d0:	08001929 	.word	0x08001929
 80006d4:	0800038b 	.word	0x0800038b
 80006d8:	0800047d 	.word	0x0800047d

080006dc <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	2014      	movs	r0, #20
 80006f0:	183b      	adds	r3, r7, r0
 80006f2:	8a52      	ldrh	r2, [r2, #18]
 80006f4:	801a      	strh	r2, [r3, #0]
    if (CANerrSt != em->CANerrorStatusOld) {
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	8a1b      	ldrh	r3, [r3, #16]
 80006fa:	183a      	adds	r2, r7, r0
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d100      	bne.n	8000704 <CO_EM_process+0x28>
 8000702:	e0af      	b.n	8000864 <CO_EM_process+0x188>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	8a19      	ldrh	r1, [r3, #16]
 8000708:	2412      	movs	r4, #18
 800070a:	193b      	adds	r3, r7, r4
 800070c:	183a      	adds	r2, r7, r0
 800070e:	8812      	ldrh	r2, [r2, #0]
 8000710:	404a      	eors	r2, r1
 8000712:	801a      	strh	r2, [r3, #0]
        em->CANerrorStatusOld = CANerrSt;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	0001      	movs	r1, r0
 8000718:	187a      	adds	r2, r7, r1
 800071a:	8812      	ldrh	r2, [r2, #0]
 800071c:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 800071e:	193b      	adds	r3, r7, r4
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	2302      	movs	r3, #2
 8000724:	33ff      	adds	r3, #255	; 0xff
 8000726:	4013      	ands	r3, r2
 8000728:	d00f      	beq.n	800074a <CO_EM_process+0x6e>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 800072a:	187b      	adds	r3, r7, r1
 800072c:	881a      	ldrh	r2, [r3, #0]
 800072e:	2302      	movs	r3, #2
 8000730:	33ff      	adds	r3, #255	; 0xff
 8000732:	4013      	ands	r3, r2
            CO_error(em,
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	4193      	sbcs	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	0019      	movs	r1, r3
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	2300      	movs	r3, #0
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	2201      	movs	r2, #1
 8000746:	f000 f945 	bl	80009d4 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 800074a:	2312      	movs	r3, #18
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	2202      	movs	r2, #2
 8000752:	4013      	ands	r3, r2
 8000754:	d010      	beq.n	8000778 <CO_EM_process+0x9c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000756:	2314      	movs	r3, #20
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	2202      	movs	r2, #2
 800075e:	4013      	ands	r3, r2
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	4193      	sbcs	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	0019      	movs	r1, r3
 8000768:	4a97      	ldr	r2, [pc, #604]	; (80009c8 <CO_EM_process+0x2ec>)
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	2300      	movs	r3, #0
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	0013      	movs	r3, r2
 8000772:	2207      	movs	r2, #7
 8000774:	f000 f92e 	bl	80009d4 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000778:	2312      	movs	r3, #18
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	2204      	movs	r2, #4
 8000780:	4013      	ands	r3, r2
 8000782:	d010      	beq.n	80007a6 <CO_EM_process+0xca>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000784:	2314      	movs	r3, #20
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2204      	movs	r2, #4
 800078c:	4013      	ands	r3, r2
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	4193      	sbcs	r3, r2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	0019      	movs	r1, r3
 8000796:	4a8d      	ldr	r2, [pc, #564]	; (80009cc <CO_EM_process+0x2f0>)
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	2300      	movs	r3, #0
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	0013      	movs	r3, r2
 80007a0:	2212      	movs	r2, #18
 80007a2:	f000 f917 	bl	80009d4 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80007a6:	2312      	movs	r3, #18
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	2208      	movs	r2, #8
 80007ae:	4013      	ands	r3, r2
 80007b0:	d010      	beq.n	80007d4 <CO_EM_process+0xf8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 80007b2:	2314      	movs	r3, #20
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	2208      	movs	r2, #8
 80007ba:	4013      	ands	r3, r2
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	0019      	movs	r1, r3
 80007c4:	4a82      	ldr	r2, [pc, #520]	; (80009d0 <CO_EM_process+0x2f4>)
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	2300      	movs	r3, #0
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	0013      	movs	r3, r2
 80007ce:	2214      	movs	r2, #20
 80007d0:	f000 f900 	bl	80009d4 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 80007d4:	2312      	movs	r3, #18
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	4013      	ands	r3, r2
 80007de:	d010      	beq.n	8000802 <CO_EM_process+0x126>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 80007e0:	2314      	movs	r3, #20
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	4013      	ands	r3, r2
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	4193      	sbcs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	0019      	movs	r1, r3
 80007f2:	2381      	movs	r3, #129	; 0x81
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	2215      	movs	r2, #21
 80007fe:	f000 f8e9 	bl	80009d4 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8000802:	2312      	movs	r3, #18
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	881a      	ldrh	r2, [r3, #0]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4013      	ands	r3, r2
 800080e:	d011      	beq.n	8000834 <CO_EM_process+0x158>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000810:	2314      	movs	r3, #20
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	881a      	ldrh	r2, [r3, #0]
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4013      	ands	r3, r2
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	4193      	sbcs	r3, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	0019      	movs	r1, r3
 8000824:	4a68      	ldr	r2, [pc, #416]	; (80009c8 <CO_EM_process+0x2ec>)
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	2300      	movs	r3, #0
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	0013      	movs	r3, r2
 800082e:	2206      	movs	r2, #6
 8000830:	f000 f8d0 	bl	80009d4 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000834:	2312      	movs	r3, #18
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	881a      	ldrh	r2, [r3, #0]
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4013      	ands	r3, r2
 8000840:	d010      	beq.n	8000864 <CO_EM_process+0x188>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000842:	2314      	movs	r3, #20
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	4013      	ands	r3, r2
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	4193      	sbcs	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	0019      	movs	r1, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	2300      	movs	r3, #0
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2313      	movs	r3, #19
 800085e:	2213      	movs	r2, #19
 8000860:	f000 f8b8 	bl	80009d4 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000864:	2117      	movs	r1, #23
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	795b      	ldrb	r3, [r3, #5]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <CO_EM_process+0x1a4>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	187a      	adds	r2, r7, r1
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	2101      	movs	r1, #1
 800087c:	430a      	orrs	r2, r1
 800087e:	701a      	strb	r2, [r3, #0]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	789b      	ldrb	r3, [r3, #2]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d103      	bne.n	8000890 <CO_EM_process+0x1b4>
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	78db      	ldrb	r3, [r3, #3]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d006      	beq.n	800089e <CO_EM_process+0x1c2>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000890:	2217      	movs	r2, #23
 8000892:	18bb      	adds	r3, r7, r2
 8000894:	18ba      	adds	r2, r7, r2
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	2110      	movs	r1, #16
 800089a:	430a      	orrs	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	7a1b      	ldrb	r3, [r3, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d103      	bne.n	80008ae <CO_EM_process+0x1d2>
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	7a5b      	ldrb	r3, [r3, #9]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <CO_EM_process+0x1e2>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 80008ae:	2217      	movs	r2, #23
 80008b0:	18bb      	adds	r3, r7, r2
 80008b2:	18ba      	adds	r2, r7, r2
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	4249      	negs	r1, r1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
    *em->errorRegister = errorRegister;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	2017      	movs	r0, #23
 80008c4:	183a      	adds	r2, r7, r0
 80008c6:	7812      	ldrb	r2, [r2, #0]
 80008c8:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d100      	bne.n	80008d2 <CO_EM_process+0x1f6>
 80008d0:	e073      	b.n	80009ba <CO_EM_process+0x2de>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7f1b      	ldrb	r3, [r3, #28]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d800      	bhi.n	80008dc <CO_EM_process+0x200>
 80008da:	e070      	b.n	80009be <CO_EM_process+0x2e2>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80008dc:	2411      	movs	r4, #17
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	7f92      	ldrb	r2, [r2, #30]
 80008e4:	701a      	strb	r2, [r3, #0]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	7f5b      	ldrb	r3, [r3, #29]
 80008ea:	193a      	adds	r2, r7, r4
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d065      	beq.n	80009be <CO_EM_process+0x2e2>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d160      	bne.n	80009be <CO_EM_process+0x2e2>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	193b      	adds	r3, r7, r4
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	183b      	adds	r3, r7, r0
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	041a      	lsls	r2, r3, #16
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6998      	ldr	r0, [r3, #24]
 8000914:	193b      	adds	r3, r7, r4
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	18c3      	adds	r3, r0, r3
 800091c:	430a      	orrs	r2, r1
 800091e:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	1d58      	adds	r0, r3, #5
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	193b      	adds	r3, r7, r4
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	2208      	movs	r2, #8
 8000934:	0019      	movs	r1, r3
 8000936:	f00e fbd9 	bl	800f0ec <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f007 faf3 	bl	8007f30 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	193a      	adds	r2, r7, r4
 800094e:	7812      	ldrb	r2, [r2, #0]
 8000950:	3201      	adds	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	7f1b      	ldrb	r3, [r3, #28]
 8000958:	193a      	adds	r2, r7, r4
 800095a:	7812      	ldrb	r2, [r2, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d202      	bcs.n	8000966 <CO_EM_process+0x28a>
 8000960:	193b      	adds	r3, r7, r4
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	e000      	b.n	8000968 <CO_EM_process+0x28c>
 8000966:	2200      	movs	r2, #0
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	7fdb      	ldrb	r3, [r3, #31]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10c      	bne.n	800098e <CO_EM_process+0x2b2>
                em->fifoOverflow = 2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2202      	movs	r2, #2
 8000978:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	2220      	movs	r2, #32
 8000986:	2101      	movs	r1, #1
 8000988:	f000 f824 	bl	80009d4 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 800098c:	e017      	b.n	80009be <CO_EM_process+0x2e2>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	7fdb      	ldrb	r3, [r3, #31]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d113      	bne.n	80009be <CO_EM_process+0x2e2>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	7f9a      	ldrb	r2, [r3, #30]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	7f5b      	ldrb	r3, [r3, #29]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d10d      	bne.n	80009be <CO_EM_process+0x2e2>
                em->fifoOverflow = 0;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	2300      	movs	r3, #0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	2220      	movs	r2, #32
 80009b2:	2100      	movs	r1, #0
 80009b4:	f000 f80e 	bl	80009d4 <CO_error>
    return;
 80009b8:	e001      	b.n	80009be <CO_EM_process+0x2e2>
        return;
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	e000      	b.n	80009c0 <CO_EM_process+0x2e4>
    return;
 80009be:	46c0      	nop			; (mov r8, r8)
}
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b007      	add	sp, #28
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	00008120 	.word	0x00008120
 80009cc:	00008140 	.word	0x00008140
 80009d0:	00008110 	.word	0x00008110

080009d4 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	0019      	movs	r1, r3
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	1c0a      	adds	r2, r1, #0
 80009e8:	801a      	strh	r2, [r3, #0]
    if (em == NULL) return;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d100      	bne.n	80009f2 <CO_error+0x1e>
 80009f0:	e0be      	b.n	8000b70 <CO_error+0x19c>

    uint8_t index = errorBit >> 3;
 80009f2:	212f      	movs	r1, #47	; 0x2f
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	08d2      	lsrs	r2, r2, #3
 80009fc:	701a      	strb	r2, [r3, #0]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2207      	movs	r2, #7
 8000a04:	4013      	ands	r3, r2
 8000a06:	2201      	movs	r2, #1
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	202e      	movs	r0, #46	; 0x2e
 8000a0c:	183b      	adds	r3, r7, r0
 8000a0e:	701a      	strb	r2, [r3, #0]

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b09      	cmp	r3, #9
 8000a16:	d90c      	bls.n	8000a32 <CO_error+0x5e>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	701a      	strb	r2, [r3, #0]
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000a1e:	183b      	adds	r3, r7, r0
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	22c2      	movs	r2, #194	; 0xc2
 8000a28:	01d2      	lsls	r2, r2, #7
 8000a2a:	801a      	strh	r2, [r3, #0]
        infoCode = errorBit;
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000a32:	232f      	movs	r3, #47	; 0x2f
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	18d3      	adds	r3, r2, r3
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	2027      	movs	r0, #39	; 0x27
 8000a44:	183b      	adds	r3, r7, r0
 8000a46:	212e      	movs	r1, #46	; 0x2e
 8000a48:	1879      	adds	r1, r7, r1
 8000a4a:	7809      	ldrb	r1, [r1, #0]
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d004      	beq.n	8000a60 <CO_error+0x8c>
        if (errorStatusBitMasked != 0) {
 8000a56:	183b      	adds	r3, r7, r0
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d009      	beq.n	8000a72 <CO_error+0x9e>
            return;
 8000a5e:	e08a      	b.n	8000b76 <CO_error+0x1a2>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000a60:	2327      	movs	r3, #39	; 0x27
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d100      	bne.n	8000a6c <CO_error+0x98>
 8000a6a:	e083      	b.n	8000b74 <CO_error+0x1a0>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	801a      	strh	r2, [r3, #0]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	061a      	lsls	r2, r3, #24
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a82:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a88:	f3ef 8210 	mrs	r2, PRIMASK
 8000a8c:	617a      	str	r2, [r7, #20]
  return(result);
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000a92:	b672      	cpsid	i
}
 8000a94:	46c0      	nop			; (mov r8, r8)
    if (setError) *errorStatusBits |= bitmask;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <CO_error+0xdc>
 8000a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	232e      	movs	r3, #46	; 0x2e
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e00d      	b.n	8000acc <CO_error+0xf8>
    else          *errorStatusBits &= ~bitmask;
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	222e      	movs	r2, #46	; 0x2e
 8000ab8:	18ba      	adds	r2, r7, r2
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	b252      	sxtb	r2, r2
 8000abe:	43d2      	mvns	r2, r2
 8000ac0:	b252      	sxtb	r2, r2
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aca:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	7f1b      	ldrb	r3, [r3, #28]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d945      	bls.n	8000b60 <CO_error+0x18c>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000ad4:	201b      	movs	r0, #27
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	7f52      	ldrb	r2, [r2, #29]
 8000adc:	701a      	strb	r2, [r3, #0]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000ade:	212d      	movs	r1, #45	; 0x2d
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	183a      	adds	r2, r7, r0
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
        if (fifoWrPtrNext >= em->fifoSize) {
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	7f1b      	ldrb	r3, [r3, #28]
 8000aee:	187a      	adds	r2, r7, r1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d302      	bcc.n	8000afc <CO_error+0x128>
            fifoWrPtrNext = 0;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	7f9b      	ldrb	r3, [r3, #30]
 8000b00:	222d      	movs	r2, #45	; 0x2d
 8000b02:	18ba      	adds	r2, r7, r2
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d103      	bne.n	8000b12 <CO_error+0x13e>
            em->fifoOverflow = 1;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	77da      	strb	r2, [r3, #31]
 8000b10:	e026      	b.n	8000b60 <CO_error+0x18c>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	211b      	movs	r1, #27
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	6a3a      	ldr	r2, [r7, #32]
 8000b22:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	18d3      	adds	r3, r2, r3
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	222d      	movs	r2, #45	; 0x2d
 8000b38:	18ba      	adds	r2, r7, r2
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2220      	movs	r2, #32
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	001a      	movs	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	7f1b      	ldrb	r3, [r3, #28]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	da07      	bge.n	8000b60 <CO_error+0x18c>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2220      	movs	r2, #32
 8000b54:	5c9b      	ldrb	r3, [r3, r2]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2d9      	uxtb	r1, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	5499      	strb	r1, [r3, r2]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	f383 8810 	msr	PRIMASK, r3
}
 8000b6e:	e002      	b.n	8000b76 <CO_error+0x1a2>
    if (em == NULL) return;
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	e000      	b.n	8000b76 <CO_error+0x1a2>
            return;
 8000b74:	46c0      	nop			; (mov r8, r8)
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b00c      	add	sp, #48	; 0x30
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	230c      	movs	r3, #12
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f00e fab6 	bl	800f0fe <memmove>
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <OD_getIndex+0x14>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	e000      	b.n	8000bb2 <OD_getIndex+0x16>
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <OD_extension_init>:
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <OD_extension_init+0x14>
 8000bca:	2305      	movs	r3, #5
 8000bcc:	e003      	b.n	8000bd6 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <OD_get_u32>:
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af02      	add	r7, sp, #8
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	200b      	movs	r0, #11
 8000bec:	183b      	adds	r3, r7, r0
 8000bee:	1c0a      	adds	r2, r1, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	183b      	adds	r3, r7, r0
 8000bf6:	7819      	ldrb	r1, [r3, #0]
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2304      	movs	r3, #4
 8000c00:	f001 f8aa 	bl	8001d58 <OD_get_value>
 8000c04:	0003      	movs	r3, r0
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000c1c:	2113      	movs	r1, #19
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	7912      	ldrb	r2, [r2, #4]
 8000c24:	701a      	strb	r2, [r3, #0]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	3305      	adds	r3, #5
 8000c2a:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d107      	bne.n	8000c44 <CO_HBcons_receive+0x36>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d012      	beq.n	8000c8c <OD_write_1016+0x40>
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00f      	beq.n	8000c8c <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	7c5b      	ldrb	r3, [r3, #17]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	7c5a      	ldrb	r2, [r3, #17]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	7a1b      	ldrb	r3, [r3, #8]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d805      	bhi.n	8000c8c <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d102      	bne.n	8000c8c <OD_write_1016+0x40>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	e02c      	b.n	8000cea <OD_write_1016+0x9e>
    }

    uint32_t val = CO_getUint32(buf);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff72 	bl	8000b7c <CO_getUint32>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	61bb      	str	r3, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	0c1a      	lsrs	r2, r3, #16
 8000ca0:	2017      	movs	r0, #23
 8000ca2:	183b      	adds	r3, r7, r0
 8000ca4:	701a      	strb	r2, [r3, #0]
    uint16_t time = val & 0xFFFF;
 8000ca6:	2514      	movs	r5, #20
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	7c5b      	ldrb	r3, [r3, #17]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b2d9      	uxtb	r1, r3
 8000cb6:	2613      	movs	r6, #19
 8000cb8:	19bc      	adds	r4, r7, r6
 8000cba:	197b      	adds	r3, r7, r5
 8000cbc:	881d      	ldrh	r5, [r3, #0]
 8000cbe:	183b      	adds	r3, r7, r0
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	69f8      	ldr	r0, [r7, #28]
 8000cc4:	002b      	movs	r3, r5
 8000cc6:	f000 f8ed 	bl	8000ea4 <CO_HBconsumer_initEntry>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	7023      	strb	r3, [r4, #0]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000cce:	19bb      	adds	r3, r7, r6
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <OD_write_1016+0x90>
        return ODR_PAR_INCOMPAT;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	e006      	b.n	8000cea <OD_write_1016+0x9e>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 fe20 	bl	8001928 <OD_writeOriginal>
 8000ce8:	0003      	movs	r3, r0
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b009      	add	sp, #36	; 0x24
 8000cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000cf4 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	001a      	movs	r2, r3
 8000d02:	1cfb      	adds	r3, r7, #3
 8000d04:	701a      	strb	r2, [r3, #0]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00b      	beq.n	8000d24 <CO_HBconsumer_init+0x30>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <CO_HBconsumer_init+0x30>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <CO_HBconsumer_init+0x30>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <CO_HBconsumer_init+0x30>
 8000d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <CO_HBconsumer_init+0x36>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	e0b4      	b.n	8000e94 <CO_HBconsumer_init+0x1a0>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2230      	movs	r2, #48	; 0x30
 8000d2e:	2100      	movs	r1, #0
 8000d30:	0018      	movs	r0, r3
 8000d32:	f00e f9f7 	bl	800f124 <memset>
    HBcons->em = em;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d46:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2238      	movs	r2, #56	; 0x38
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	468c      	mov	ip, r1
 8000d50:	44bc      	add	ip, r7
 8000d52:	4462      	add	r2, ip
 8000d54:	8812      	ldrh	r2, [r2, #0]
 8000d56:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d5a:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000d5c:	1cfa      	adds	r2, r7, #3
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d304      	bcc.n	8000d6e <CO_HBconsumer_init+0x7a>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d66:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	e001      	b.n	8000d72 <CO_HBconsumer_init+0x7e>
 8000d6e:	1cfb      	adds	r3, r7, #3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000d76:	231f      	movs	r3, #31
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e059      	b.n	8000e34 <CO_HBconsumer_init+0x140>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000d80:	231f      	movs	r3, #31
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2d9      	uxtb	r1, r3
 8000d8a:	251e      	movs	r5, #30
 8000d8c:	197c      	adds	r4, r7, r5
 8000d8e:	2314      	movs	r3, #20
 8000d90:	18fa      	adds	r2, r7, r3
 8000d92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d94:	2301      	movs	r3, #1
 8000d96:	f7ff ff22 	bl	8000bde <OD_get_u32>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 8000d9e:	197b      	adds	r3, r7, r5
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00d      	beq.n	8000dc4 <CO_HBconsumer_init+0xd0>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <CO_HBconsumer_init+0xca>
 8000dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fef3 	bl	8000b9c <OD_getIndex>
 8000db6:	0003      	movs	r3, r0
 8000db8:	001a      	movs	r2, r3
 8000dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dbc:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	e067      	b.n	8000e94 <CO_HBconsumer_init+0x1a0>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	0c1a      	lsrs	r2, r3, #16
 8000dc8:	211d      	movs	r1, #29
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
        uint16_t time = val & 0xFFFF;
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	201a      	movs	r0, #26
 8000dd2:	183b      	adds	r3, r7, r0
 8000dd4:	801a      	strh	r2, [r3, #0]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000dd6:	2619      	movs	r6, #25
 8000dd8:	19bc      	adds	r4, r7, r6
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	881d      	ldrh	r5, [r3, #0]
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	231f      	movs	r3, #31
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	7819      	ldrb	r1, [r3, #0]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	002b      	movs	r3, r5
 8000dec:	f000 f85a 	bl	8000ea4 <CO_HBconsumer_initEntry>
 8000df0:	0003      	movs	r3, r0
 8000df2:	7023      	strb	r3, [r4, #0]
        if (ret != CO_ERROR_NO) {
 8000df4:	19bb      	adds	r3, r7, r6
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d014      	beq.n	8000e28 <CO_HBconsumer_init+0x134>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <CO_HBconsumer_init+0x120>
 8000e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fec8 	bl	8000b9c <OD_getIndex>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	001a      	movs	r2, r3
 8000e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e12:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8000e14:	2219      	movs	r2, #25
 8000e16:	18bb      	adds	r3, r7, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	330c      	adds	r3, #12
 8000e1e:	d003      	beq.n	8000e28 <CO_HBconsumer_init+0x134>
                return ret;
 8000e20:	18bb      	adds	r3, r7, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	e035      	b.n	8000e94 <CO_HBconsumer_init+0x1a0>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e28:	211f      	movs	r1, #31
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	3201      	adds	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	7a1b      	ldrb	r3, [r3, #8]
 8000e38:	221f      	movs	r2, #31
 8000e3a:	18ba      	adds	r2, r7, r2
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d39e      	bcc.n	8000d80 <CO_HBconsumer_init+0x8c>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <CO_HBconsumer_init+0x1a8>)
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <CO_HBconsumer_init+0x1ac>)
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3320      	adds	r3, #32
 8000e58:	001a      	movs	r2, r3
 8000e5a:	251e      	movs	r5, #30
 8000e5c:	197c      	adds	r4, r7, r5
 8000e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff fea9 	bl	8000bba <OD_extension_init>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8000e6c:	197b      	adds	r3, r7, r5
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00d      	beq.n	8000e92 <CO_HBconsumer_init+0x19e>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <CO_HBconsumer_init+0x198>
 8000e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff fe8c 	bl	8000b9c <OD_getIndex>
 8000e84:	0003      	movs	r3, r0
 8000e86:	001a      	movs	r2, r3
 8000e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e8a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	425b      	negs	r3, r3
 8000e90:	e000      	b.n	8000e94 <CO_HBconsumer_init+0x1a0>
    }
#endif

    return CO_ERROR_NO;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b009      	add	sp, #36	; 0x24
 8000e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9c:	0800186b 	.word	0x0800186b
 8000ea0:	08000c4d 	.word	0x08000c4d

08000ea4 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	b08d      	sub	sp, #52	; 0x34
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	000c      	movs	r4, r1
 8000eae:	0010      	movs	r0, r2
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	1cfb      	adds	r3, r7, #3
 8000eb4:	1c22      	adds	r2, r4, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	1cbb      	adds	r3, r7, #2
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	1c0a      	adds	r2, r1, #0
 8000ec2:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000ec4:	231f      	movs	r3, #31
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <CO_HBconsumer_initEntry+0x3a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7a1b      	ldrb	r3, [r3, #8]
 8000ed6:	1cfa      	adds	r2, r7, #3
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d302      	bcc.n	8000ee4 <CO_HBconsumer_initEntry+0x40>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	e0a0      	b.n	8001026 <CO_HBconsumer_initEntry+0x182>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d036      	beq.n	8000f5a <CO_HBconsumer_initEntry+0xb6>
 8000eec:	1cbb      	adds	r3, r7, #2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d032      	beq.n	8000f5a <CO_HBconsumer_initEntry+0xb6>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000ef4:	231e      	movs	r3, #30
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e026      	b.n	8000f4c <CO_HBconsumer_initEntry+0xa8>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	201e      	movs	r0, #30
 8000f04:	183b      	adds	r3, r7, r0
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	18d2      	adds	r2, r2, r3
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000f12:	c370      	stmia	r3!, {r4, r5, r6}
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	601a      	str	r2, [r3, #0]
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8000f18:	1cfa      	adds	r2, r7, #3
 8000f1a:	183b      	adds	r3, r7, r0
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d00d      	beq.n	8000f40 <CO_HBconsumer_initEntry+0x9c>
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d009      	beq.n	8000f40 <CO_HBconsumer_initEntry+0x9c>
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	1cba      	adds	r2, r7, #2
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d103      	bne.n	8000f40 <CO_HBconsumer_initEntry+0x9c>
                ret = CO_ERROR_OD_PARAMETERS;
 8000f38:	231f      	movs	r3, #31
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	22f4      	movs	r2, #244	; 0xf4
 8000f3e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f40:	211e      	movs	r1, #30
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	3201      	adds	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7a1b      	ldrb	r3, [r3, #8]
 8000f50:	221e      	movs	r2, #30
 8000f52:	18ba      	adds	r2, r7, r2
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3d1      	bcc.n	8000efe <CO_HBconsumer_initEntry+0x5a>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d15b      	bne.n	800101e <CO_HBconsumer_initEntry+0x17a>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	1cfb      	adds	r3, r7, #3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	1cba      	adds	r2, r7, #2
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	0013      	movs	r3, r2
 8000f82:	015b      	lsls	r3, r3, #5
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	189b      	adds	r3, r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	22ff      	movs	r2, #255	; 0xff
 8000f96:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d011      	beq.n	8000fca <CO_HBconsumer_initEntry+0x126>
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00d      	beq.n	8000fca <CO_HBconsumer_initEntry+0x126>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	231c      	movs	r3, #28
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	21e0      	movs	r1, #224	; 0xe0
 8000fba:	00c9      	lsls	r1, r1, #3
 8000fbc:	468c      	mov	ip, r1
 8000fbe:	4462      	add	r2, ip
 8000fc0:	801a      	strh	r2, [r3, #0]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	709a      	strb	r2, [r3, #2]
 8000fc8:	e009      	b.n	8000fde <CO_HBconsumer_initEntry+0x13a>
        }
        else {
            COB_ID = 0;
 8000fca:	231c      	movs	r3, #28
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
            monitoredNode->time_us = 0;
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000fe6:	1cfb      	adds	r3, r7, #3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	1cfb      	adds	r3, r7, #3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	18d3      	adds	r3, r2, r3
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000ffc:	221f      	movs	r2, #31
 8000ffe:	18bc      	adds	r4, r7, r2
 8001000:	4e0b      	ldr	r6, [pc, #44]	; (8001030 <CO_HBconsumer_initEntry+0x18c>)
 8001002:	221c      	movs	r2, #28
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	8815      	ldrh	r5, [r2, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <CO_HBconsumer_initEntry+0x190>)
 800100a:	9202      	str	r2, [sp, #8]
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	0033      	movs	r3, r6
 8001014:	002a      	movs	r2, r5
 8001016:	f006 fe5b 	bl	8007cd0 <CO_CANrxBufferInit>
 800101a:	0003      	movs	r3, r0
 800101c:	7023      	strb	r3, [r4, #0]
                                 CO_HBcons_receive);
    }
    return ret;
 800101e:	231f      	movs	r3, #31
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
}
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	b009      	add	sp, #36	; 0x24
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	000007ff 	.word	0x000007ff
 8001034:	08000c0f 	.word	0x08000c0f

08001038 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001046:	2301      	movs	r3, #1
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 800104a:	2301      	movs	r3, #1
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d100      	bne.n	8001056 <CO_HBconsumer_process+0x1e>
 8001054:	e07d      	b.n	8001152 <CO_HBconsumer_process+0x11a>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <CO_HBconsumer_process+0x28>
 800105e:	e078      	b.n	8001152 <CO_HBconsumer_process+0x11a>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001060:	2327      	movs	r3, #39	; 0x27
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e06b      	b.n	8001142 <CO_HBconsumer_process+0x10a>
            uint32_t timeDifference_us_copy = timeDifference_us;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	2127      	movs	r1, #39	; 0x27
 8001074:	187b      	adds	r3, r7, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	18d3      	adds	r3, r2, r3
 800107c:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d056      	beq.n	8001134 <CO_HBconsumer_process+0xfc>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d022      	beq.n	80010d4 <CO_HBconsumer_process+0x9c>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	b25b      	sxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d112      	bne.n	80010be <CO_HBconsumer_process+0x86>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	789b      	ldrb	r3, [r3, #2]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d10a      	bne.n	80010b6 <CO_HBconsumer_process+0x7e>
                        CO_errorReport(HBcons->em,
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4a56      	ldr	r2, [pc, #344]	; (8001204 <CO_HBconsumer_process+0x1cc>)
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	0013      	movs	r3, r2
 80010ae:	221c      	movs	r2, #28
 80010b0:	2101      	movs	r1, #1
 80010b2:	f7ff fc8f 	bl	80009d4 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	2201      	movs	r2, #1
 80010ba:	709a      	strb	r2, [r3, #2]
 80010bc:	e007      	b.n	80010ce <CO_HBconsumer_process+0x96>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	2202      	movs	r2, #2
 80010c2:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d11d      	bne.n	8001118 <CO_HBconsumer_process+0xe0>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	18d2      	adds	r2, r2, r3
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d311      	bcc.n	8001118 <CO_HBconsumer_process+0xe0>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	2327      	movs	r3, #39	; 0x27
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4a41      	ldr	r2, [pc, #260]	; (8001204 <CO_HBconsumer_process+0x1cc>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	0013      	movs	r3, r2
 8001104:	221b      	movs	r2, #27
 8001106:	2101      	movs	r1, #1
 8001108:	f7ff fc64 	bl	80009d4 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2203      	movs	r2, #3
 8001116:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	789b      	ldrb	r3, [r3, #2]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d001      	beq.n	8001124 <CO_HBconsumer_process+0xec>
                allMonitoredActiveCurrent = false;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	2b05      	cmp	r3, #5
 800112c:	d003      	beq.n	8001136 <CO_HBconsumer_process+0xfe>
                allMonitoredOperationalCurrent = false;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
 8001132:	e000      	b.n	8001136 <CO_HBconsumer_process+0xfe>
                continue;
 8001134:	46c0      	nop			; (mov r8, r8)
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001136:	2127      	movs	r1, #39	; 0x27
 8001138:	187b      	adds	r3, r7, r1
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	187b      	adds	r3, r7, r1
 800113e:	3201      	adds	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	7a1b      	ldrb	r3, [r3, #8]
 8001146:	2227      	movs	r2, #39	; 0x27
 8001148:	18ba      	adds	r2, r7, r2
 800114a:	7812      	ldrb	r2, [r2, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d38c      	bcc.n	800106a <CO_HBconsumer_process+0x32>
 8001150:	e031      	b.n	80011b6 <CO_HBconsumer_process+0x17e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <CO_HBconsumer_process+0x128>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d02a      	beq.n	80011b6 <CO_HBconsumer_process+0x17e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001160:	231f      	movs	r3, #31
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e01a      	b.n	80011a0 <CO_HBconsumer_process+0x168>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	231f      	movs	r3, #31
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <CO_HBconsumer_process+0x15c>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2201      	movs	r2, #1
 8001192:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001194:	211f      	movs	r1, #31
 8001196:	187b      	adds	r3, r7, r1
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	187b      	adds	r3, r7, r1
 800119c:	3201      	adds	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	7a1b      	ldrb	r3, [r3, #8]
 80011a4:	221f      	movs	r2, #31
 80011a6:	18ba      	adds	r2, r7, r2
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3dd      	bcc.n	800116a <CO_HBconsumer_process+0x132>
            }
        }
        allMonitoredActiveCurrent = false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d114      	bne.n	80011e8 <CO_HBconsumer_process+0x1b0>
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d011      	beq.n	80011e8 <CO_HBconsumer_process+0x1b0>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	2300      	movs	r3, #0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2300      	movs	r3, #0
 80011ce:	221b      	movs	r2, #27
 80011d0:	2100      	movs	r1, #0
 80011d2:	f7ff fbff 	bl	80009d4 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	2300      	movs	r3, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2300      	movs	r3, #0
 80011e0:	221c      	movs	r2, #28
 80011e2:	2100      	movs	r1, #0
 80011e4:	f7ff fbf6 	bl	80009d4 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ec:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011f2:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	615a      	str	r2, [r3, #20]
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b00c      	add	sp, #48	; 0x30
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	00008130 	.word	0x00008130

08001208 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	240e      	movs	r4, #14
 8001214:	193b      	adds	r3, r7, r4
 8001216:	2202      	movs	r2, #2
 8001218:	0018      	movs	r0, r3
 800121a:	f00d ff70 	bl	800f0fe <memmove>
 800121e:	193b      	adds	r3, r7, r4
 8001220:	881b      	ldrh	r3, [r3, #0]
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b005      	add	sp, #20
 8001228:	bd90      	pop	{r4, r7, pc}

0800122a <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <OD_getIndex+0x14>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	e000      	b.n	8001240 <OD_getIndex+0x16>
 800123e:	2300      	movs	r3, #0
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}

08001248 <OD_extension_init>:
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <OD_extension_init+0x14>
 8001258:	2305      	movs	r3, #5
 800125a:	e003      	b.n	8001264 <OD_extension_init+0x1c>
    entry->extension = extension;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <OD_get_u16>:
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af02      	add	r7, sp, #8
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	200b      	movs	r0, #11
 800127a:	183b      	adds	r3, r7, r0
 800127c:	1c0a      	adds	r2, r1, #0
 800127e:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	183b      	adds	r3, r7, r0
 8001284:	7819      	ldrb	r1, [r3, #0]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2302      	movs	r3, #2
 800128e:	f000 fd63 	bl	8001d58 <OD_get_value>
 8001292:	0003      	movs	r3, r0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}

0800129c <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	000a      	movs	r2, r1
 80012a6:	1cfb      	adds	r3, r7, #3
 80012a8:	701a      	strb	r2, [r3, #0]
    uint8_t index = errorBit >> 3;
 80012aa:	210f      	movs	r1, #15
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	1cfa      	adds	r2, r7, #3
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	08d2      	lsrs	r2, r2, #3
 80012b4:	701a      	strb	r2, [r3, #0]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80012b6:	1cfb      	adds	r3, r7, #3
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2207      	movs	r2, #7
 80012bc:	4013      	ands	r3, r2
 80012be:	2201      	movs	r2, #1
 80012c0:	409a      	lsls	r2, r3
 80012c2:	200e      	movs	r0, #14
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	701a      	strb	r2, [r3, #0]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00d      	beq.n	80012ea <CO_isError+0x4e>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d809      	bhi.n	80012ea <CO_isError+0x4e>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	183a      	adds	r2, r7, r0
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4013      	ands	r3, r2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <CO_isError+0x52>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <CO_isError+0x54>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b004      	add	sp, #16
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <CO_getErrorRegister+0x1e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <CO_getErrorRegister+0x1e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	e000      	b.n	8001318 <CO_getErrorRegister+0x20>
 8001316:	2300      	movs	r3, #0
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800132a:	2017      	movs	r0, #23
 800132c:	183b      	adds	r3, r7, r0
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	7912      	ldrb	r2, [r2, #4]
 8001332:	701a      	strb	r2, [r3, #0]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3305      	adds	r3, #5
 8001338:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 800133a:	230f      	movs	r3, #15
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	701a      	strb	r2, [r3, #0]
    uint8_t nodeId = data[1];
 8001344:	210e      	movs	r1, #14
 8001346:	187b      	adds	r3, r7, r1
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	7852      	ldrb	r2, [r2, #1]
 800134c:	701a      	strb	r2, [r3, #0]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001352:	183b      	adds	r3, r7, r0
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d10e      	bne.n	8001378 <CO_NMT_receive+0x58>
 800135a:	187b      	adds	r3, r7, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <CO_NMT_receive+0x4e>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	78db      	ldrb	r3, [r3, #3]
 8001366:	187a      	adds	r2, r7, r1
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d104      	bne.n	8001378 <CO_NMT_receive+0x58>
        NMT->internalCommand = command;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	220f      	movs	r2, #15
 8001372:	18ba      	adds	r2, r7, r2
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b006      	add	sp, #24
 800137e:	bd80      	pop	{r7, pc}

08001380 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00c      	beq.n	80013ae <OD_write_1017+0x2e>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	7c5b      	ldrb	r3, [r3, #17]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d108      	bne.n	80013ae <OD_write_1017+0x2e>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d102      	bne.n	80013ae <OD_write_1017+0x2e>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80013ae:	2309      	movs	r3, #9
 80013b0:	e01b      	b.n	80013ea <OD_write_1017+0x6a>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff24 	bl	8001208 <CO_getUint16>
 80013c0:	0003      	movs	r3, r0
 80013c2:	001a      	movs	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	015b      	lsls	r3, r3, #5
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	189b      	adds	r3, r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	001a      	movs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 faa0 	bl	8001928 <OD_writeOriginal>
 80013e8:	0003      	movs	r3, r0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b006      	add	sp, #24
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	001a      	movs	r2, r3
 8001402:	1cfb      	adds	r3, r7, #3
 8001404:	701a      	strb	r2, [r3, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001406:	2317      	movs	r3, #23
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <CO_NMT_init+0x38>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <CO_NMT_init+0x38>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <CO_NMT_init+0x38>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <CO_NMT_init+0x38>
 8001426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <CO_NMT_init+0x3e>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800142c:	2301      	movs	r3, #1
 800142e:	425b      	negs	r3, r3
 8001430:	e0cf      	b.n	80015d2 <CO_NMT_init+0x1de>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2230      	movs	r2, #48	; 0x30
 8001436:	2100      	movs	r1, #0
 8001438:	0018      	movs	r0, r3
 800143a:	f00d fe73 	bl	800f124 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1cfa      	adds	r2, r7, #3
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	2328      	movs	r3, #40	; 0x28
 8001456:	2108      	movs	r1, #8
 8001458:	468c      	mov	ip, r1
 800145a:	44bc      	add	ip, r7
 800145c:	4463      	add	r3, ip
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	8093      	strh	r3, [r2, #4]
    NMT->em = em;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001468:	232c      	movs	r3, #44	; 0x2c
 800146a:	2208      	movs	r2, #8
 800146c:	4694      	mov	ip, r2
 800146e:	44bc      	add	ip, r7
 8001470:	4463      	add	r3, ip
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	0013      	movs	r3, r2
 8001476:	015b      	lsls	r3, r3, #5
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	189b      	adds	r3, r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	001a      	movs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001486:	2516      	movs	r5, #22
 8001488:	197c      	adds	r4, r7, r5
 800148a:	2314      	movs	r3, #20
 800148c:	18fa      	adds	r2, r7, r3
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	2301      	movs	r3, #1
 8001492:	2100      	movs	r1, #0
 8001494:	f7ff feea 	bl	800126c <OD_get_u16>
 8001498:	0003      	movs	r3, r0
 800149a:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 800149c:	197b      	adds	r3, r7, r5
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00d      	beq.n	80014c2 <CO_NMT_init+0xce>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80014a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <CO_NMT_init+0xc8>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff febb 	bl	800122a <OD_getIndex>
 80014b4:	0003      	movs	r3, r0
 80014b6:	001a      	movs	r2, r3
 80014b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ba:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80014bc:	230c      	movs	r3, #12
 80014be:	425b      	negs	r3, r3
 80014c0:	e087      	b.n	80015d2 <CO_NMT_init+0x1de>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80014c2:	2314      	movs	r3, #20
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	015b      	lsls	r3, r3, #5
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	189b      	adds	r3, r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	001a      	movs	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <CO_NMT_init+0x1e8>)
 80014e6:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <CO_NMT_init+0x1ec>)
 80014ec:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3310      	adds	r3, #16
 80014f2:	001a      	movs	r2, r3
 80014f4:	2516      	movs	r5, #22
 80014f6:	197c      	adds	r4, r7, r5
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	0011      	movs	r1, r2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff fea3 	bl	8001248 <OD_extension_init>
 8001502:	0003      	movs	r3, r0
 8001504:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8001506:	197b      	adds	r3, r7, r5
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b25b      	sxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <CO_NMT_init+0x138>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <CO_NMT_init+0x132>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fe86 	bl	800122a <OD_getIndex>
 800151e:	0003      	movs	r3, r0
 8001520:	001a      	movs	r2, r3
 8001522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001524:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001526:	230c      	movs	r3, #12
 8001528:	425b      	negs	r3, r3
 800152a:	e052      	b.n	80015d2 <CO_NMT_init+0x1de>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	429a      	cmp	r2, r3
 8001536:	d903      	bls.n	8001540 <CO_NMT_init+0x14c>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001540:	2617      	movs	r6, #23
 8001542:	19bc      	adds	r4, r7, r6
 8001544:	4d27      	ldr	r5, [pc, #156]	; (80015e4 <CO_NMT_init+0x1f0>)
 8001546:	2338      	movs	r3, #56	; 0x38
 8001548:	2208      	movs	r2, #8
 800154a:	4694      	mov	ip, r2
 800154c:	44bc      	add	ip, r7
 800154e:	4463      	add	r3, ip
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	2334      	movs	r3, #52	; 0x34
 8001554:	2108      	movs	r1, #8
 8001556:	468c      	mov	ip, r1
 8001558:	44bc      	add	ip, r7
 800155a:	4463      	add	r3, ip
 800155c:	8819      	ldrh	r1, [r3, #0]
 800155e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <CO_NMT_init+0x1f4>)
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	2300      	movs	r3, #0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	002b      	movs	r3, r5
 800156e:	f006 fbaf 	bl	8007cd0 <CO_CANrxBufferInit>
 8001572:	0003      	movs	r3, r0
 8001574:	7023      	strb	r3, [r4, #0]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001576:	19bb      	adds	r3, r7, r6
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <CO_NMT_init+0x194>
        return ret;
 8001580:	19bb      	adds	r3, r7, r6
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b25b      	sxtb	r3, r3
 8001586:	e024      	b.n	80015d2 <CO_NMT_init+0x1de>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 800158e:	2344      	movs	r3, #68	; 0x44
 8001590:	2208      	movs	r2, #8
 8001592:	4694      	mov	ip, r2
 8001594:	44bc      	add	ip, r7
 8001596:	4463      	add	r3, ip
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	2340      	movs	r3, #64	; 0x40
 800159c:	2108      	movs	r1, #8
 800159e:	468c      	mov	ip, r1
 80015a0:	44bc      	add	ip, r7
 80015a2:	4463      	add	r3, ip
 80015a4:	8819      	ldrh	r1, [r3, #0]
 80015a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80015a8:	2300      	movs	r3, #0
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2301      	movs	r3, #1
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	f006 fbf5 	bl	8007da0 <CO_CANtxBufferInit>
 80015b6:	0002      	movs	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <CO_NMT_init+0x1d6>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80015c4:	2301      	movs	r3, #1
 80015c6:	425b      	negs	r3, r3
 80015c8:	e003      	b.n	80015d2 <CO_NMT_init+0x1de>
    }

    return ret;
 80015ca:	2317      	movs	r3, #23
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b25b      	sxtb	r3, r3
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b007      	add	sp, #28
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	0800186b 	.word	0x0800186b
 80015e0:	08001381 	.word	0x08001381
 80015e4:	000007ff 	.word	0x000007ff
 80015e8:	08001321 	.word	0x08001321

080015ec <CO_NMT_initCallbackChanged>:

#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
/******************************************************************************/
void CO_NMT_initCallbackChanged(CO_NMT_t *NMT,
                                void (*pFunctNMT)(CO_NMT_internalState_t state))
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    if (NMT != NULL) {
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00d      	beq.n	8001618 <CO_NMT_initCallbackChanged+0x2c>
        NMT->pFunctNMT = pFunctNMT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
        if (NMT->pFunctNMT != NULL) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <CO_NMT_initCallbackChanged+0x2c>
            NMT->pFunctNMT(NMT->operatingState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	b252      	sxtb	r2, r2
 8001614:	0010      	movs	r0, r2
 8001616:	4798      	blx	r3
        }
    }
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800162e:	211f      	movs	r1, #31
 8001630:	187b      	adds	r3, r7, r1
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	701a      	strb	r2, [r3, #0]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001638:	231e      	movs	r3, #30
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	425a      	negs	r2, r3
 8001648:	4153      	adcs	r3, r2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	d204      	bcs.n	8001662 <CO_NMT_process+0x42>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	e000      	b.n	8001664 <CO_NMT_process+0x44>
 8001662:	2200      	movs	r2, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	60da      	str	r2, [r3, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d110      	bne.n	8001690 <CO_NMT_process+0x70>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d031      	beq.n	80016da <CO_NMT_process+0xba>
                    && (NMT->HBproducerTimer == 0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <CO_NMT_process+0x70>
                        || NMTstateCpy != NMT->operatingStatePrev)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	221f      	movs	r2, #31
 8001686:	18ba      	adds	r2, r7, r2
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	b252      	sxtb	r2, r2
 800168c:	429a      	cmp	r2, r3
 800168e:	d024      	beq.n	80016da <CO_NMT_process+0xba>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	241f      	movs	r4, #31
 8001696:	193a      	adds	r2, r7, r4
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	0019      	movs	r1, r3
 80016a6:	0010      	movs	r0, r2
 80016a8:	f006 fc42 	bl	8007f30 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10d      	bne.n	80016d2 <CO_NMT_process+0xb2>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	001a      	movs	r2, r3
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4013      	ands	r3, r2
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 80016c2:	d001      	beq.n	80016c8 <CO_NMT_process+0xa8>
 80016c4:	2205      	movs	r2, #5
 80016c6:	e000      	b.n	80016ca <CO_NMT_process+0xaa>
 80016c8:	227f      	movs	r2, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e003      	b.n	80016da <CO_NMT_process+0xba>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	221f      	movs	r2, #31
 80016de:	18ba      	adds	r2, r7, r2
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d02c      	beq.n	8001746 <CO_NMT_process+0x126>
        switch (NMT->internalCommand) {
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b82      	cmp	r3, #130	; 0x82
 80016f2:	d01f      	beq.n	8001734 <CO_NMT_process+0x114>
 80016f4:	dc23      	bgt.n	800173e <CO_NMT_process+0x11e>
 80016f6:	2b81      	cmp	r3, #129	; 0x81
 80016f8:	d017      	beq.n	800172a <CO_NMT_process+0x10a>
 80016fa:	dc20      	bgt.n	800173e <CO_NMT_process+0x11e>
 80016fc:	2b80      	cmp	r3, #128	; 0x80
 80016fe:	d00f      	beq.n	8001720 <CO_NMT_process+0x100>
 8001700:	dc1d      	bgt.n	800173e <CO_NMT_process+0x11e>
 8001702:	2b01      	cmp	r3, #1
 8001704:	d002      	beq.n	800170c <CO_NMT_process+0xec>
 8001706:	2b02      	cmp	r3, #2
 8001708:	d005      	beq.n	8001716 <CO_NMT_process+0xf6>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 800170a:	e018      	b.n	800173e <CO_NMT_process+0x11e>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 800170c:	231f      	movs	r3, #31
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2205      	movs	r2, #5
 8001712:	701a      	strb	r2, [r3, #0]
                break;
 8001714:	e014      	b.n	8001740 <CO_NMT_process+0x120>
                NMTstateCpy = CO_NMT_STOPPED;
 8001716:	231f      	movs	r3, #31
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	2204      	movs	r2, #4
 800171c:	701a      	strb	r2, [r3, #0]
                break;
 800171e:	e00f      	b.n	8001740 <CO_NMT_process+0x120>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8001720:	231f      	movs	r3, #31
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	227f      	movs	r2, #127	; 0x7f
 8001726:	701a      	strb	r2, [r3, #0]
                break;
 8001728:	e00a      	b.n	8001740 <CO_NMT_process+0x120>
                resetCommand = CO_RESET_APP;
 800172a:	231e      	movs	r3, #30
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
                break;
 8001732:	e005      	b.n	8001740 <CO_NMT_process+0x120>
                resetCommand = CO_RESET_COMM;
 8001734:	231e      	movs	r3, #30
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
                break;
 800173c:	e000      	b.n	8001740 <CO_NMT_process+0x120>
                break;
 800173e:	46c0      	nop			; (mov r8, r8)
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	001a      	movs	r2, r3
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	4013      	ands	r3, r2
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001752:	d019      	beq.n	8001788 <CO_NMT_process+0x168>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	2112      	movs	r1, #18
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff fd9e 	bl	800129c <CO_isError>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d10f      	bne.n	8001784 <CO_NMT_process+0x164>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	211b      	movs	r1, #27
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff fd96 	bl	800129c <CO_isError>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d107      	bne.n	8001784 <CO_NMT_process+0x164>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	211c      	movs	r1, #28
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff fd8e 	bl	800129c <CO_isError>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <CO_NMT_process+0x168>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <CO_NMT_process+0x16a>
 8001788:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 800178a:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	001a      	movs	r2, r3
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	4013      	ands	r3, r2
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001798:	d00c      	beq.n	80017b4 <CO_NMT_process+0x194>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff fdaa 	bl	80012f8 <CO_getErrorRegister>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	4013      	ands	r3, r2
 80017ae:	d001      	beq.n	80017b4 <CO_NMT_process+0x194>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <CO_NMT_process+0x196>
 80017b4:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 80017b6:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 80017b8:	231f      	movs	r3, #31
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d113      	bne.n	80017ec <CO_NMT_process+0x1cc>
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <CO_NMT_process+0x1b0>
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <CO_NMT_process+0x1cc>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	889b      	ldrh	r3, [r3, #4]
 80017d4:	001a      	movs	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	4013      	ands	r3, r2
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 80017dc:	d001      	beq.n	80017e2 <CO_NMT_process+0x1c2>
 80017de:	2204      	movs	r2, #4
 80017e0:	e000      	b.n	80017e4 <CO_NMT_process+0x1c4>
 80017e2:	227f      	movs	r2, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 80017e4:	231f      	movs	r3, #31
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e013      	b.n	8001814 <CO_NMT_process+0x1f4>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	889b      	ldrh	r3, [r3, #4]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da0e      	bge.n	8001814 <CO_NMT_process+0x1f4>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 80017f6:	221f      	movs	r2, #31
 80017f8:	18bb      	adds	r3, r7, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001800:	d108      	bne.n	8001814 <CO_NMT_process+0x1f4>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <CO_NMT_process+0x1f4>
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <CO_NMT_process+0x1f4>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 800180e:	18bb      	adds	r3, r7, r2
 8001810:	2205      	movs	r2, #5
 8001812:	701a      	strb	r2, [r3, #0]
    }

#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_CALLBACK_CHANGE
    /* Notify operating state change */
    if (NMT->operatingStatePrev != NMTstateCpy || NNTinit) {
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	221f      	movs	r2, #31
 800181c:	18ba      	adds	r2, r7, r2
 800181e:	7812      	ldrb	r2, [r2, #0]
 8001820:	b252      	sxtb	r2, r2
 8001822:	429a      	cmp	r2, r3
 8001824:	d102      	bne.n	800182c <CO_NMT_process+0x20c>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <CO_NMT_process+0x224>
        if (NMT->pFunctNMT != NULL) {
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <CO_NMT_process+0x224>
            NMT->pFunctNMT(NMTstateCpy);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	221f      	movs	r2, #31
 800183a:	18ba      	adds	r2, r7, r2
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	b252      	sxtb	r2, r2
 8001840:	0010      	movs	r0, r2
 8001842:	4798      	blx	r3
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	211f      	movs	r1, #31
 8001848:	187a      	adds	r2, r7, r1
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <CO_NMT_process+0x23c>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	187a      	adds	r2, r7, r1
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 800185c:	231e      	movs	r3, #30
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b009      	add	sp, #36	; 0x24
 8001868:	bd90      	pop	{r4, r7, pc}

0800186a <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b088      	sub	sp, #32
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <OD_readOriginal+0x20>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <OD_readOriginal+0x20>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800188a:	2309      	movs	r3, #9
 800188c:	e048      	b.n	8001920 <OD_readOriginal+0xb6>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018a0:	230e      	movs	r3, #14
 80018a2:	e03d      	b.n	8001920 <OD_readOriginal+0xb6>
    }

    ODR_t returnCode = ODR_OK;
 80018a4:	2317      	movs	r3, #23
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <OD_readOriginal+0x52>
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d924      	bls.n	8001906 <OD_readOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d801      	bhi.n	80018ca <OD_readOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80018c6:	2309      	movs	r3, #9
 80018c8:	e02a      	b.n	8001920 <OD_readOriginal+0xb6>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	18d3      	adds	r3, r2, r3
 80018dc:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d90c      	bls.n	8001900 <OD_readOriginal+0x96>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	18d2      	adds	r2, r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80018f6:	2317      	movs	r3, #23
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	22ff      	movs	r2, #255	; 0xff
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e002      	b.n	8001906 <OD_readOriginal+0x9c>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	69b9      	ldr	r1, [r7, #24]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	0018      	movs	r0, r3
 800190e:	f00d fbed 	bl	800f0ec <memcpy>

    *countRead = dataLenToCopy;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001918:	2317      	movs	r3, #23
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b25b      	sxtb	r3, r3
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b008      	add	sp, #32
 8001926:	bd80      	pop	{r7, pc}

08001928 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <OD_writeOriginal+0x20>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <OD_writeOriginal+0x20>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001948:	2309      	movs	r3, #9
 800194a:	e04e      	b.n	80019ea <OD_writeOriginal+0xc2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800195e:	230e      	movs	r3, #14
 8001960:	e043      	b.n	80019ea <OD_writeOriginal+0xc2>
    }

    ODR_t returnCode = ODR_OK;
 8001962:	2317      	movs	r3, #23
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <OD_writeOriginal+0x52>
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	d924      	bls.n	80019c4 <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	429a      	cmp	r2, r3
 8001982:	d801      	bhi.n	8001988 <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 8001984:	2309      	movs	r3, #9
 8001986:	e030      	b.n	80019ea <OD_writeOriginal+0xc2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	18d3      	adds	r3, r2, r3
 800199a:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d90c      	bls.n	80019be <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	18d2      	adds	r2, r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019b4:	2317      	movs	r3, #23
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e002      	b.n	80019c4 <OD_writeOriginal+0x9c>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d201      	bcs.n	80019d0 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80019cc:	230c      	movs	r3, #12
 80019ce:	e00c      	b.n	80019ea <OD_writeOriginal+0xc2>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	0018      	movs	r0, r3
 80019d8:	f00d fb88 	bl	800f0ec <memcpy>

    *countWritten = dataLenToCopy;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	601a      	str	r2, [r3, #0]
    return returnCode;
 80019e2:	2317      	movs	r3, #23
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b25b      	sxtb	r3, r3
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b008      	add	sp, #32
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8001a00:	2302      	movs	r3, #2
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a18:	2302      	movs	r3, #2
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	801a      	strh	r2, [r3, #0]
    if (od == NULL || od->size == 0) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <OD_find+0x1c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <OD_find+0x20>
        return NULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e066      	b.n	8001b10 <OD_find+0xee>
    }

    uint16_t min = 0;
 8001a42:	2316      	movs	r3, #22
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
    uint16_t max = od->size - 1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	881a      	ldrh	r2, [r3, #0]
 8001a4e:	2314      	movs	r3, #20
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	3a01      	subs	r2, #1
 8001a54:	801a      	strh	r2, [r3, #0]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001a56:	e03a      	b.n	8001ace <OD_find+0xac>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a58:	2316      	movs	r3, #22
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	2314      	movs	r3, #20
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	18d3      	adds	r3, r2, r3
 8001a66:	105a      	asrs	r2, r3, #1
 8001a68:	200e      	movs	r0, #14
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	801a      	strh	r2, [r3, #0]
        OD_entry_t* entry = &od->list[cur];
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	881a      	ldrh	r2, [r3, #0]
 8001a76:	0013      	movs	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	189b      	adds	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	18cb      	adds	r3, r1, r3
 8001a80:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	1cba      	adds	r2, r7, #2
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d101      	bne.n	8001a92 <OD_find+0x70>
            return entry;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	e03e      	b.n	8001b10 <OD_find+0xee>
        }

        if (index < entry->index) {
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	1cba      	adds	r2, r7, #2
 8001a98:	8812      	ldrh	r2, [r2, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d210      	bcs.n	8001ac0 <OD_find+0x9e>
            max = (cur > 0) ? (cur - 1) : cur;
 8001a9e:	220e      	movs	r2, #14
 8001aa0:	18bb      	adds	r3, r7, r2
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <OD_find+0x90>
 8001aa8:	18bb      	adds	r3, r7, r2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	e002      	b.n	8001ab8 <OD_find+0x96>
 8001ab2:	230e      	movs	r3, #14
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2214      	movs	r2, #20
 8001aba:	18ba      	adds	r2, r7, r2
 8001abc:	8013      	strh	r3, [r2, #0]
 8001abe:	e006      	b.n	8001ace <OD_find+0xac>
        }
        else {
            min = cur + 1;
 8001ac0:	2316      	movs	r3, #22
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	220e      	movs	r2, #14
 8001ac6:	18ba      	adds	r2, r7, r2
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	3201      	adds	r2, #1
 8001acc:	801a      	strh	r2, [r3, #0]
    while (min < max) {
 8001ace:	2016      	movs	r0, #22
 8001ad0:	183a      	adds	r2, r7, r0
 8001ad2:	2114      	movs	r1, #20
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	8812      	ldrh	r2, [r2, #0]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3bc      	bcc.n	8001a58 <OD_find+0x36>
        }
    }

    if (min == max) {
 8001ade:	183a      	adds	r2, r7, r0
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	8812      	ldrh	r2, [r2, #0]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d111      	bne.n	8001b0e <OD_find+0xec>
        OD_entry_t* entry = &od->list[min];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	183b      	adds	r3, r7, r0
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	0013      	movs	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	189b      	adds	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	18cb      	adds	r3, r1, r3
 8001afc:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	1cba      	adds	r2, r7, #2
 8001b04:	8812      	ldrh	r2, [r2, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d101      	bne.n	8001b0e <OD_find+0xec>
            return entry;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	e000      	b.n	8001b10 <OD_find+0xee>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b006      	add	sp, #24
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	230b      	movs	r3, #11
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	1c0a      	adds	r2, r1, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <OD_getSub+0x22>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <OD_getSub+0x26>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e0e1      	b.n	8001d02 <OD_getSub+0x1ea>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <OD_getSub+0x30>
 8001b44:	2309      	movs	r3, #9
 8001b46:	e0dc      	b.n	8001d02 <OD_getSub+0x1ea>

    OD_stream_t *stream = &io->stream;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	78db      	ldrb	r3, [r3, #3]
 8001b50:	001a      	movs	r2, r3
 8001b52:	230f      	movs	r3, #15
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d056      	beq.n	8001c08 <OD_getSub+0xf0>
 8001b5a:	dd00      	ble.n	8001b5e <OD_getSub+0x46>
 8001b5c:	e098      	b.n	8001c90 <OD_getSub+0x178>
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d002      	beq.n	8001b68 <OD_getSub+0x50>
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d017      	beq.n	8001b96 <OD_getSub+0x7e>
 8001b66:	e093      	b.n	8001c90 <OD_getSub+0x178>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001b68:	230b      	movs	r3, #11
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <OD_getSub+0x5e>
 8001b72:	230e      	movs	r3, #14
 8001b74:	e0c5      	b.n	8001d02 <OD_getSub+0x1ea>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	791a      	ldrb	r2, [r3, #4]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	609a      	str	r2, [r3, #8]
        break;
 8001b94:	e07e      	b.n	8001c94 <OD_getSub+0x17c>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	220b      	movs	r2, #11
 8001b9c:	18ba      	adds	r2, r7, r2
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d301      	bcc.n	8001ba8 <OD_getSub+0x90>
 8001ba4:	230e      	movs	r3, #14
 8001ba6:	e0ac      	b.n	8001d02 <OD_getSub+0x1ea>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001bae:	230b      	movs	r3, #11
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <OD_getSub+0xb8>
            stream->attribute = odo->attribute0;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	7a1a      	ldrb	r2, [r3, #8]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	2201      	movs	r2, #1
 8001bcc:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001bce:	e061      	b.n	8001c94 <OD_getSub+0x17c>
            stream->attribute = odo->attribute;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	7a5a      	ldrb	r2, [r3, #9]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d009      	beq.n	8001bf8 <OD_getSub+0xe0>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	220b      	movs	r2, #11
 8001bea:	18ba      	adds	r2, r7, r2
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	4353      	muls	r3, r2
            stream->dataOrig = ptr == NULL ? ptr
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	18d2      	adds	r2, r2, r3
 8001bf6:	e000      	b.n	8001bfa <OD_getSub+0xe2>
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataElementLength;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	609a      	str	r2, [r3, #8]
        break;
 8001c06:	e045      	b.n	8001c94 <OD_getSub+0x17c>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c12:	232b      	movs	r3, #43	; 0x2b
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	e020      	b.n	8001c5e <OD_getSub+0x146>
            if (odoArr[i].subIndex == subIndex) {
 8001c1c:	212b      	movs	r1, #43	; 0x2b
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	0013      	movs	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	189b      	adds	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	189b      	adds	r3, r3, r2
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	220b      	movs	r2, #11
 8001c34:	18ba      	adds	r2, r7, r2
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10a      	bne.n	8001c52 <OD_getSub+0x13a>
                odo = &odoArr[i];
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	0013      	movs	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	001a      	movs	r2, r3
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	189b      	adds	r3, r3, r2
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001c50:	e00c      	b.n	8001c6c <OD_getSub+0x154>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c52:	212b      	movs	r1, #43	; 0x2b
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	789b      	ldrb	r3, [r3, #2]
 8001c62:	222b      	movs	r2, #43	; 0x2b
 8001c64:	18ba      	adds	r2, r7, r2
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3d7      	bcc.n	8001c1c <OD_getSub+0x104>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <OD_getSub+0x15e>
 8001c72:	230e      	movs	r3, #14
 8001c74:	e045      	b.n	8001d02 <OD_getSub+0x1ea>

        stream->attribute = odo->attribute;
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	795a      	ldrb	r2, [r3, #5]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	609a      	str	r2, [r3, #8]
        break;
 8001c8e:	e001      	b.n	8001c94 <OD_getSub+0x17c>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001c90:	2309      	movs	r3, #9
 8001c92:	e036      	b.n	8001d02 <OD_getSub+0x1ea>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <OD_getSub+0x18a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <OD_getSub+0x19e>
        io->read = OD_readOriginal;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <OD_getSub+0x1f4>)
 8001ca6:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <OD_getSub+0x1f8>)
 8001cac:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	e01c      	b.n	8001cf0 <OD_getSub+0x1d8>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <OD_getSub+0x1b0>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	e000      	b.n	8001cca <OD_getSub+0x1b2>
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <OD_getSub+0x1fc>)
        io->read = entry->extension->read != NULL ?
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	615a      	str	r2, [r3, #20]
        io->write = entry->extension->write != NULL ?
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <OD_getSub+0x1c8>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	e000      	b.n	8001ce2 <OD_getSub+0x1ca>
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <OD_getSub+0x200>)
        io->write = entry->extension->write != NULL ?
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
        stream->object = entry->extension->object;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	220b      	movs	r2, #11
 8001cfa:	18ba      	adds	r2, r7, r2
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b00c      	add	sp, #48	; 0x30
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	0800186b 	.word	0x0800186b
 8001d10:	08001929 	.word	0x08001929
 8001d14:	080019f3 	.word	0x080019f3
 8001d18:	08001a0b 	.word	0x08001a0b

08001d1c <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	0002      	movs	r2, r0
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	701a      	strb	r2, [r3, #0]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2e:	d804      	bhi.n	8001d3a <OD_getSDOabCode+0x1e>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	2b19      	cmp	r3, #25
 8001d38:	dd02      	ble.n	8001d40 <OD_getSDOabCode+0x24>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <OD_getSDOabCode+0x38>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	e005      	b.n	8001d4c <OD_getSDOabCode+0x30>
 8001d40:	1dfb      	adds	r3, r7, #7
 8001d42:	2200      	movs	r2, #0
 8001d44:	569a      	ldrsb	r2, [r3, r2]
 8001d46:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <OD_getSDOabCode+0x38>)
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	58d3      	ldr	r3, [r2, r3]
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	08010034 	.word	0x08010034

08001d58 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	b08f      	sub	sp, #60	; 0x3c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	230b      	movs	r3, #11
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	1c0a      	adds	r2, r1, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <OD_get_value+0x1e>
 8001d72:	2309      	movs	r3, #9
 8001d74:	e02b      	b.n	8001dce <OD_get_value+0x76>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001d76:	2214      	movs	r2, #20
 8001d78:	18bb      	adds	r3, r7, r2
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d80:	2633      	movs	r6, #51	; 0x33
 8001d82:	19bc      	adds	r4, r7, r6
 8001d84:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8001d86:	18ba      	adds	r2, r7, r2
 8001d88:	230b      	movs	r3, #11
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	7819      	ldrb	r1, [r3, #0]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	002b      	movs	r3, r5
 8001d92:	f7ff fec1 	bl	8001b18 <OD_getSub>
 8001d96:	0003      	movs	r3, r0
 8001d98:	7023      	strb	r3, [r4, #0]

    if (ret != ODR_OK) return ret;
 8001d9a:	19bb      	adds	r3, r7, r6
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <OD_get_value+0x54>
 8001da4:	19bb      	adds	r3, r7, r6
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	e010      	b.n	8001dce <OD_get_value+0x76>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <OD_get_value+0x62>
 8001db6:	230b      	movs	r3, #11
 8001db8:	e009      	b.n	8001dce <OD_get_value+0x76>

    return io.read(stream, val, len, &countRd);
 8001dba:	2314      	movs	r3, #20
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	695c      	ldr	r4, [r3, #20]
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dca:	47a0      	blx	r4
 8001dcc:	0003      	movs	r3, r0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b00f      	add	sp, #60	; 0x3c
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd6 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd8:	b08f      	sub	sp, #60	; 0x3c
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	200b      	movs	r0, #11
 8001de4:	183b      	adds	r3, r7, r0
 8001de6:	1c0a      	adds	r2, r1, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001dea:	2214      	movs	r2, #20
 8001dec:	18bb      	adds	r3, r7, r2
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001df4:	2633      	movs	r6, #51	; 0x33
 8001df6:	19bc      	adds	r4, r7, r6
 8001df8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8001dfa:	18ba      	adds	r2, r7, r2
 8001dfc:	183b      	adds	r3, r7, r0
 8001dfe:	7819      	ldrb	r1, [r3, #0]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	002b      	movs	r3, r5
 8001e04:	f7ff fe88 	bl	8001b18 <OD_getSub>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	7023      	strb	r3, [r4, #0]

    if (ret != ODR_OK) return ret;
 8001e0c:	19bb      	adds	r3, r7, r6
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <OD_set_value+0x48>
 8001e16:	19bb      	adds	r3, r7, r6
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	e010      	b.n	8001e40 <OD_set_value+0x6a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <OD_set_value+0x56>
 8001e28:	230b      	movs	r3, #11
 8001e2a:	e009      	b.n	8001e40 <OD_set_value+0x6a>

    return io.write(stream, val, len, &countWritten);
 8001e2c:	2314      	movs	r3, #20
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	699c      	ldr	r4, [r3, #24]
 8001e32:	2310      	movs	r3, #16
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e3c:	47a0      	blx	r4
 8001e3e:	0003      	movs	r3, r0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b00f      	add	sp, #60	; 0x3c
 8001e46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e48 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	200b      	movs	r0, #11
 8001e56:	183b      	adds	r3, r7, r0
 8001e58:	1c0a      	adds	r2, r1, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001e5c:	2214      	movs	r2, #20
 8001e5e:	18bb      	adds	r3, r7, r2
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001e62:	2537      	movs	r5, #55	; 0x37
 8001e64:	197c      	adds	r4, r7, r5
 8001e66:	18ba      	adds	r2, r7, r2
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	7819      	ldrb	r1, [r3, #0]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f7ff fe52 	bl	8001b18 <OD_getSub>
 8001e74:	0003      	movs	r3, r0
 8001e76:	7023      	strb	r3, [r4, #0]

    if (errCopy == ODR_OK) {
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <OD_getPtr+0x6c>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <OD_getPtr+0x4a>
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d104      	bne.n	8001e9c <OD_getPtr+0x54>
            errCopy = ODR_DEV_INCOMPAT;
 8001e92:	2337      	movs	r3, #55	; 0x37
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2209      	movs	r2, #9
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e00b      	b.n	8001eb4 <OD_getPtr+0x6c>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <OD_getPtr+0x6c>
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d003      	beq.n	8001eb4 <OD_getPtr+0x6c>
            errCopy = ODR_TYPE_MISMATCH;
 8001eac:	2337      	movs	r3, #55	; 0x37
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	220b      	movs	r2, #11
 8001eb2:	701a      	strb	r2, [r3, #0]
        }
    }

    if (err != NULL) *err = errCopy;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <OD_getPtr+0x7c>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2237      	movs	r2, #55	; 0x37
 8001ebe:	18ba      	adds	r2, r7, r2
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001ec4:	2337      	movs	r3, #55	; 0x37
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <OD_getPtr+0x8e>
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e000      	b.n	8001ed8 <OD_getPtr+0x90>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b00e      	add	sp, #56	; 0x38
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}

08001ee0 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781a      	ldrb	r2, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001eec:	210f      	movs	r1, #15
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bd80      	pop	{r7, pc}

08001efe <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001efe:	b590      	push	{r4, r7, lr}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	240e      	movs	r4, #14
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f00d f8f5 	bl	800f0fe <memmove>
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	881b      	ldrh	r3, [r3, #0]
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b005      	add	sp, #20
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2204      	movs	r2, #4
 8001f30:	0018      	movs	r0, r3
 8001f32:	f00d f8e4 	bl	800f0fe <memmove>
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001f4a:	0039      	movs	r1, r7
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	0018      	movs	r0, r3
 8001f52:	f00d f8d4 	bl	800f0fe <memmove>
 8001f56:	2304      	movs	r3, #4
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <OD_getIndex+0x14>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	e000      	b.n	8001f76 <OD_getIndex+0x16>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <OD_extension_init>:
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <OD_extension_init+0x14>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e003      	b.n	8001f9a <OD_extension_init+0x1c>
    entry->extension = extension;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <OD_get_u8>:
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af02      	add	r7, sp, #8
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	200b      	movs	r0, #11
 8001fb0:	183b      	adds	r3, r7, r0
 8001fb2:	1c0a      	adds	r2, r1, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	183b      	adds	r3, r7, r0
 8001fba:	7819      	ldrb	r1, [r3, #0]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f7ff fec8 	bl	8001d58 <OD_get_value>
 8001fc8:	0003      	movs	r3, r0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <OD_get_u16>:
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af02      	add	r7, sp, #8
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	200b      	movs	r0, #11
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	1c0a      	adds	r2, r1, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	7819      	ldrb	r1, [r3, #0]
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f7ff feb0 	bl	8001d58 <OD_get_value>
 8001ff8:	0003      	movs	r3, r0
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b004      	add	sp, #16
 8002000:	bd80      	pop	{r7, pc}

08002002 <OD_get_u32>:
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af02      	add	r7, sp, #8
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	200b      	movs	r0, #11
 8002010:	183b      	adds	r3, r7, r0
 8002012:	1c0a      	adds	r2, r1, #0
 8002014:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	183b      	adds	r3, r7, r0
 800201a:	7819      	ldrb	r1, [r3, #0]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2304      	movs	r3, #4
 8002024:	f7ff fe98 	bl	8001d58 <OD_get_value>
 8002028:	0003      	movs	r3, r0
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}

08002032 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <OD_write_dummy+0x1a>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}

08002056 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <OD_read_dummy+0x20>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <OD_read_dummy+0x20>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002076:	2309      	movs	r3, #9
 8002078:	e011      	b.n	800209e <OD_read_dummy+0x48>
    }

    if (count > stream->dataLength) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d902      	bls.n	800208a <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2100      	movs	r1, #0
 8002090:	0018      	movs	r0, r3
 8002092:	f00d f847 	bl	800f124 <memset>

    *countRead = count;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b092      	sub	sp, #72	; 0x48
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	701a      	strb	r2, [r3, #0]
    uint16_t index = (uint16_t) (map >> 16);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	0c1a      	lsrs	r2, r3, #16
 80020bc:	2346      	movs	r3, #70	; 0x46
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	801a      	strh	r2, [r3, #0]
    uint8_t subIndex = (uint8_t) (map >> 8);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	0a1a      	lsrs	r2, r3, #8
 80020c6:	2345      	movs	r3, #69	; 0x45
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	701a      	strb	r2, [r3, #0]
    uint8_t mappedLengthBits = (uint8_t) map;
 80020cc:	2144      	movs	r1, #68	; 0x44
 80020ce:	187b      	adds	r3, r7, r1
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	701a      	strb	r2, [r3, #0]
    uint8_t mappedLength = mappedLengthBits >> 3;
 80020d4:	2043      	movs	r0, #67	; 0x43
 80020d6:	183b      	adds	r3, r7, r0
 80020d8:	187a      	adds	r2, r7, r1
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	08d2      	lsrs	r2, r2, #3
 80020de:	701a      	strb	r2, [r3, #0]
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	0013      	movs	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	3310      	adds	r3, #16
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	18d3      	adds	r3, r2, r3
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 80020f4:	183b      	adds	r3, r7, r0
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d901      	bls.n	8002100 <PDOconfigMap+0x58>
        return ODR_MAP_LEN; /* PDO length exceeded */
 80020fc:	2307      	movs	r3, #7
 80020fe:	e0a8      	b.n	8002252 <PDOconfigMap+0x1aa>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002100:	2346      	movs	r3, #70	; 0x46
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	2b1f      	cmp	r3, #31
 8002108:	d81d      	bhi.n	8002146 <PDOconfigMap+0x9e>
 800210a:	2345      	movs	r3, #69	; 0x45
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d118      	bne.n	8002146 <PDOconfigMap+0x9e>
        OD_stream_t *stream = &OD_IO->stream;
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211a:	2214      	movs	r2, #20
 800211c:	2100      	movs	r1, #0
 800211e:	0018      	movs	r0, r3
 8002120:	f00d f800 	bl	800f124 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002124:	2343      	movs	r3, #67	; 0x43
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002134:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <PDOconfigMap+0x1b4>)
 800213a:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	4a48      	ldr	r2, [pc, #288]	; (8002260 <PDOconfigMap+0x1b8>)
 8002140:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e085      	b.n	8002252 <PDOconfigMap+0x1aa>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002146:	2346      	movs	r3, #70	; 0x46
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800214e:	0011      	movs	r1, r2
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff fc66 	bl	8001a22 <OD_find>
 8002156:	0003      	movs	r3, r0
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 800215a:	2533      	movs	r5, #51	; 0x33
 800215c:	197c      	adds	r4, r7, r5
 800215e:	2314      	movs	r3, #20
 8002160:	18fa      	adds	r2, r7, r3
 8002162:	2345      	movs	r3, #69	; 0x45
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	7819      	ldrb	r1, [r3, #0]
 8002168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800216a:	2300      	movs	r3, #0
 800216c:	f7ff fcd4 	bl	8001b18 <OD_getSub>
 8002170:	0003      	movs	r3, r0
 8002172:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002174:	197b      	adds	r3, r7, r5
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b25b      	sxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <PDOconfigMap+0xde>
        return odRet;
 800217e:	197b      	adds	r3, r7, r5
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b25b      	sxtb	r3, r3
 8002184:	e065      	b.n	8002252 <PDOconfigMap+0x1aa>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <PDOconfigMap+0xe8>
 800218c:	2208      	movs	r2, #8
 800218e:	e000      	b.n	8002192 <PDOconfigMap+0xea>
 8002190:	2204      	movs	r2, #4
 8002192:	2132      	movs	r1, #50	; 0x32
 8002194:	187b      	adds	r3, r7, r1
 8002196:	701a      	strb	r2, [r3, #0]
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002198:	2014      	movs	r0, #20
 800219a:	183b      	adds	r3, r7, r0
 800219c:	7c1b      	ldrb	r3, [r3, #16]
 800219e:	187a      	adds	r2, r7, r1
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	4013      	ands	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00c      	beq.n	80021c4 <PDOconfigMap+0x11c>
        || (mappedLengthBits & 0x07) != 0
 80021aa:	2344      	movs	r3, #68	; 0x44
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	d106      	bne.n	80021c4 <PDOconfigMap+0x11c>
        || OD_IOcopy.stream.dataLength < mappedLength
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	2343      	movs	r3, #67	; 0x43
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d201      	bcs.n	80021c8 <PDOconfigMap+0x120>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80021c4:	2306      	movs	r3, #6
 80021c6:	e044      	b.n	8002252 <PDOconfigMap+0x1aa>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80021c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ca:	2214      	movs	r2, #20
 80021cc:	18ba      	adds	r2, r7, r2
 80021ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021d0:	c313      	stmia	r3!, {r0, r1, r4}
 80021d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021d4:	c313      	stmia	r3!, {r0, r1, r4}
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	601a      	str	r2, [r3, #0]
    OD_IO->stream.dataOffset = mappedLength;
 80021da:	2343      	movs	r3, #67	; 0x43
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e2:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d132      	bne.n	8002250 <PDOconfigMap+0x1a8>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 80021ea:	2445      	movs	r4, #69	; 0x45
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b1f      	cmp	r3, #31
 80021f2:	d826      	bhi.n	8002242 <PDOconfigMap+0x19a>
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d022      	beq.n	8002242 <PDOconfigMap+0x19a>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	193b      	adds	r3, r7, r4
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	0018      	movs	r0, r3
            PDO->flagPDObyte[mapIndex] =
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781a      	ldrb	r2, [r3, #0]
                    &entry->extension->flagsPDO[subIndex >> 3];
 800220e:	0003      	movs	r3, r0
 8002210:	3308      	adds	r3, #8
 8002212:	18cb      	adds	r3, r1, r3
 8002214:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	323c      	adds	r2, #60	; 0x3c
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	50d1      	str	r1, [r2, r3]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800221e:	193b      	adds	r3, r7, r4
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2207      	movs	r2, #7
 8002224:	4013      	ands	r3, r2
 8002226:	2201      	movs	r2, #1
 8002228:	409a      	lsls	r2, r3
 800222a:	0011      	movs	r1, r2
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	b2c8      	uxtb	r0, r1
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	2388      	movs	r3, #136	; 0x88
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	188a      	adds	r2, r1, r2
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	1c02      	adds	r2, r0, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e006      	b.n	8002250 <PDOconfigMap+0x1a8>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	323c      	adds	r2, #60	; 0x3c
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	2100      	movs	r1, #0
 800224e:	50d1      	str	r1, [r2, r3]
        }
    }
#endif

    return ODR_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b012      	add	sp, #72	; 0x48
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	08002057 	.word	0x08002057
 8002260:	08002033 	.word	0x08002033

08002264 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	b08d      	sub	sp, #52	; 0x34
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002276:	211b      	movs	r1, #27
 8002278:	187b      	adds	r3, r7, r1
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800227e:	2522      	movs	r5, #34	; 0x22
 8002280:	197c      	adds	r4, r7, r5
 8002282:	187a      	adds	r2, r7, r1
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	2301      	movs	r3, #1
 8002288:	2100      	movs	r1, #0
 800228a:	f7ff fe8a 	bl	8001fa2 <OD_get_u8>
 800228e:	0003      	movs	r3, r0
 8002290:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002292:	197b      	adds	r3, r7, r5
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <PDO_initMapping+0x54>
        if (errInfo != NULL) {
 800229c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <PDO_initMapping+0x4e>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff fe5b 	bl	8001f60 <OD_getIndex>
 80022aa:	0003      	movs	r3, r0
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80022b2:	230c      	movs	r3, #12
 80022b4:	425b      	negs	r3, r3
 80022b6:	e095      	b.n	80023e4 <PDO_initMapping+0x180>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80022b8:	2323      	movs	r3, #35	; 0x23
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e06b      	b.n	800239a <PDO_initMapping+0x136>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80022c2:	2523      	movs	r5, #35	; 0x23
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	0013      	movs	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	3310      	adds	r3, #16
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 80022dc:	197b      	adds	r3, r7, r5
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	2622      	movs	r6, #34	; 0x22
 80022e6:	19bc      	adds	r4, r7, r6
 80022e8:	2314      	movs	r3, #20
 80022ea:	18fa      	adds	r2, r7, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	2301      	movs	r3, #1
 80022f0:	f7ff fe87 	bl	8002002 <OD_get_u32>
 80022f4:	0003      	movs	r3, r0
 80022f6:	7023      	strb	r3, [r4, #0]
        if (odRet == ODR_SUB_NOT_EXIST) {
 80022f8:	19bb      	adds	r3, r7, r6
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	2b0e      	cmp	r3, #14
 8002300:	d044      	beq.n	800238c <PDO_initMapping+0x128>
            continue;
        }
        if (odRet != ODR_OK) {
 8002302:	19bb      	adds	r3, r7, r6
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d010      	beq.n	800232e <PDO_initMapping+0xca>
            if (errInfo != NULL) {
 800230c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <PDO_initMapping+0xc4>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff fe23 	bl	8001f60 <OD_getIndex>
 800231a:	0003      	movs	r3, r0
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	197b      	adds	r3, r7, r5
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	431a      	orrs	r2, r3
 8002324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002326:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002328:	230c      	movs	r3, #12
 800232a:	425b      	negs	r3, r3
 800232c:	e05a      	b.n	80023e4 <PDO_initMapping+0x180>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	2622      	movs	r6, #34	; 0x22
 8002332:	19bc      	adds	r4, r7, r6
 8002334:	683d      	ldr	r5, [r7, #0]
 8002336:	2323      	movs	r3, #35	; 0x23
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	002b      	movs	r3, r5
 8002344:	f7ff feb0 	bl	80020a8 <PDOconfigMap>
 8002348:	0003      	movs	r3, r0
 800234a:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 800234c:	19bb      	adds	r3, r7, r6
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b25b      	sxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <PDO_initMapping+0x10c>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <PDO_initMapping+0x10c>
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002370:	231b      	movs	r3, #27
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2223      	movs	r2, #35	; 0x23
 8002378:	18ba      	adds	r2, r7, r2
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d206      	bcs.n	800238e <PDO_initMapping+0x12a>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e000      	b.n	800238e <PDO_initMapping+0x12a>
            continue;
 800238c:	46c0      	nop			; (mov r8, r8)
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800238e:	2123      	movs	r1, #35	; 0x23
 8002390:	187b      	adds	r3, r7, r1
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	187b      	adds	r3, r7, r1
 8002396:	3201      	adds	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	2323      	movs	r3, #35	; 0x23
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b07      	cmp	r3, #7
 80023a2:	d98e      	bls.n	80022c2 <PDO_initMapping+0x5e>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d807      	bhi.n	80023ba <PDO_initMapping+0x156>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <PDO_initMapping+0x164>
 80023b0:	231b      	movs	r3, #27
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <PDO_initMapping+0x164>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 80023ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <PDO_initMapping+0x164>
 80023c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d108      	bne.n	80023e2 <PDO_initMapping+0x17e>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80023d8:	231b      	movs	r3, #27
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b00b      	add	sp, #44	; 0x2c
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ec <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ee:	b08f      	sub	sp, #60	; 0x3c
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <OD_write_PDO_mapping+0x28>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <OD_write_PDO_mapping+0x28>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	7c5b      	ldrb	r3, [r3, #17]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d901      	bls.n	8002418 <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002414:	2309      	movs	r3, #9
 8002416:	e098      	b.n	800254a <OD_write_PDO_mapping+0x15e>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <OD_write_PDO_mapping+0x4a>
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	7b5b      	ldrb	r3, [r3, #13]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <OD_write_PDO_mapping+0x4e>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	7c5b      	ldrb	r3, [r3, #17]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002436:	2302      	movs	r3, #2
 8002438:	e087      	b.n	800254a <OD_write_PDO_mapping+0x15e>
    }

    if (stream->subIndex == 0) {
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	7c5b      	ldrb	r3, [r3, #17]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d156      	bne.n	80024f0 <OD_write_PDO_mapping+0x104>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002442:	2522      	movs	r5, #34	; 0x22
 8002444:	197c      	adds	r4, r7, r5
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff fd49 	bl	8001ee0 <CO_getUint8>
 800244e:	0003      	movs	r3, r0
 8002450:	7023      	strb	r3, [r4, #0]
        size_t pdoDataLength = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002456:	197b      	adds	r3, r7, r5
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d901      	bls.n	8002462 <OD_write_PDO_mapping+0x76>
            return ODR_MAP_LEN;
 800245e:	2307      	movs	r3, #7
 8002460:	e073      	b.n	800254a <OD_write_PDO_mapping+0x15e>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002462:	232b      	movs	r3, #43	; 0x2b
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e020      	b.n	80024ae <OD_write_PDO_mapping+0xc2>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800246c:	232b      	movs	r3, #43	; 0x2b
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	0013      	movs	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3310      	adds	r3, #16
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	18d3      	adds	r3, r2, r3
 8002480:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	429a      	cmp	r2, r3
 8002494:	d901      	bls.n	800249a <OD_write_PDO_mapping+0xae>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002496:	2306      	movs	r3, #6
 8002498:	e057      	b.n	800254a <OD_write_PDO_mapping+0x15e>
            }
            pdoDataLength += mappedLength;
 800249a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80024a2:	212b      	movs	r1, #43	; 0x2b
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	3201      	adds	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	232b      	movs	r3, #43	; 0x2b
 80024b0:	18fa      	adds	r2, r7, r3
 80024b2:	2322      	movs	r3, #34	; 0x22
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d3d6      	bcc.n	800246c <OD_write_PDO_mapping+0x80>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d901      	bls.n	80024c8 <OD_write_PDO_mapping+0xdc>
            return ODR_MAP_LEN;
 80024c4:	2307      	movs	r3, #7
 80024c6:	e040      	b.n	800254a <OD_write_PDO_mapping+0x15e>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <OD_write_PDO_mapping+0xf0>
 80024ce:	2322      	movs	r3, #34	; 0x22
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <OD_write_PDO_mapping+0xf0>
            return ODR_INVALID_VALUE;
 80024d8:	230f      	movs	r3, #15
 80024da:	e036      	b.n	800254a <OD_write_PDO_mapping+0x15e>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2222      	movs	r2, #34	; 0x22
 80024e8:	18ba      	adds	r2, r7, r2
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	735a      	strb	r2, [r3, #13]
 80024ee:	e025      	b.n	800253c <OD_write_PDO_mapping+0x150>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff fd14 	bl	8001f20 <CO_getUint32>
 80024f8:	0006      	movs	r6, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	7c5b      	ldrb	r3, [r3, #17]
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2d9      	uxtb	r1, r3
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	238c      	movs	r3, #140	; 0x8c
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	58d5      	ldr	r5, [r2, r3]
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	238e      	movs	r3, #142	; 0x8e
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	58d3      	ldr	r3, [r2, r3]
 8002512:	2223      	movs	r2, #35	; 0x23
 8002514:	18bc      	adds	r4, r7, r2
 8002516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	002b      	movs	r3, r5
 800251c:	000a      	movs	r2, r1
 800251e:	0031      	movs	r1, r6
 8002520:	f7ff fdc2 	bl	80020a8 <PDOconfigMap>
 8002524:	0003      	movs	r3, r0
 8002526:	7023      	strb	r3, [r4, #0]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002528:	2223      	movs	r2, #35	; 0x23
 800252a:	18bb      	adds	r3, r7, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b25b      	sxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <OD_write_PDO_mapping+0x150>
            return odRet;
 8002534:	18bb      	adds	r3, r7, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	e006      	b.n	800254a <OD_write_PDO_mapping+0x15e>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7ff f9f0 	bl	8001928 <OD_writeOriginal>
 8002548:	0003      	movs	r3, r0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b00d      	add	sp, #52	; 0x34
 8002550:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002554 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002562:	251b      	movs	r5, #27
 8002564:	197c      	adds	r4, r7, r5
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff f97c 	bl	800186a <OD_readOriginal>
 8002572:	0003      	movs	r3, r0
 8002574:	7023      	strb	r3, [r4, #0]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002576:	197b      	adds	r3, r7, r5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b25b      	sxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d13e      	bne.n	80025fe <OD_read_PDO_commParam+0xaa>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	7c5b      	ldrb	r3, [r3, #17]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d13a      	bne.n	80025fe <OD_read_PDO_commParam+0xaa>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d136      	bne.n	80025fe <OD_read_PDO_commParam+0xaa>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fcc1 	bl	8001f20 <CO_getUint32>
 800259e:	0003      	movs	r3, r0
 80025a0:	61fb      	str	r3, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	2112      	movs	r1, #18
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	0552      	lsls	r2, r2, #21
 80025ac:	0d52      	lsrs	r2, r2, #21
 80025ae:	801a      	strh	r2, [r3, #0]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <OD_read_PDO_commParam+0x8c>
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	2391      	movs	r3, #145	; 0x91
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	5acb      	ldrh	r3, [r1, r3]
 80025c4:	0019      	movs	r1, r3
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <OD_read_PDO_commParam+0xbc>)
 80025c8:	400b      	ands	r3, r1
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d108      	bne.n	80025e0 <OD_read_PDO_commParam+0x8c>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	2291      	movs	r2, #145	; 0x91
 80025d8:	0052      	lsls	r2, r2, #1
 80025da:	5a8a      	ldrh	r2, [r1, r2]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d104      	bne.n	80025f2 <OD_read_PDO_commParam+0x9e>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0612      	lsls	r2, r2, #24
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fca1 	bl	8001f40 <CO_setUint32>
    }

    return returnCode;
 80025fe:	231b      	movs	r3, #27
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b25b      	sxtb	r3, r3
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b008      	add	sp, #32
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	0000ff80 	.word	0x0000ff80

08002614 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002626:	2013      	movs	r0, #19
 8002628:	183b      	adds	r3, r7, r0
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	7912      	ldrb	r2, [r2, #4]
 800262e:	701a      	strb	r2, [r3, #0]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	3305      	adds	r3, #5
 8002634:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002636:	241f      	movs	r4, #31
 8002638:	193b      	adds	r3, r7, r4
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	22b0      	movs	r2, #176	; 0xb0
 800263e:	0052      	lsls	r2, r2, #1
 8002640:	5c8a      	ldrb	r2, [r1, r2]
 8002642:	701a      	strb	r2, [r3, #0]

    if (PDO->valid) {
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d051      	beq.n	80026f0 <CO_PDO_receive+0xdc>
        if (DLC >= PDO->dataLength) {
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	7b1b      	ldrb	r3, [r3, #12]
 8002650:	183a      	adds	r2, r7, r0
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d343      	bcc.n	80026e0 <CO_PDO_receive+0xcc>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	7b1b      	ldrb	r3, [r3, #12]
 800265c:	183a      	adds	r2, r7, r0
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <CO_PDO_receive+0x60>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10b      	bne.n	8002684 <CO_PDO_receive+0x70>
 800266c:	193b      	adds	r3, r7, r4
 800266e:	220b      	movs	r2, #11
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e007      	b.n	8002684 <CO_PDO_receive+0x70>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002674:	221f      	movs	r2, #31
 8002676:	18bb      	adds	r3, r7, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <CO_PDO_receive+0x70>
 800267e:	18bb      	adds	r3, r7, r2
 8002680:	220d      	movs	r2, #13
 8002682:	701a      	strb	r2, [r3, #0]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002684:	211e      	movs	r1, #30
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	23b4      	movs	r3, #180	; 0xb4
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	58d3      	ldr	r3, [r2, r3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <CO_PDO_receive+0xa4>
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	23b2      	movs	r3, #178	; 0xb2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	58d3      	ldr	r3, [r2, r3]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <CO_PDO_receive+0xa4>
                && RPDO->SYNC->CANrxToggle
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	23b2      	movs	r3, #178	; 0xb2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	58d3      	ldr	r3, [r2, r3]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <CO_PDO_receive+0xa4>
            ) {
                bufNo = 1;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 80026b8:	241e      	movs	r4, #30
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	332a      	adds	r3, #42	; 0x2a
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	2208      	movs	r2, #8
 80026ca:	0018      	movs	r0, r3
 80026cc:	f00c fd0e 	bl	800f0ec <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	3252      	adds	r2, #82	; 0x52
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	2101      	movs	r1, #1
 80026dc:	50d1      	str	r1, [r2, r3]
 80026de:	e007      	b.n	80026f0 <CO_PDO_receive+0xdc>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 80026e0:	221f      	movs	r2, #31
 80026e2:	18bb      	adds	r3, r7, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <CO_PDO_receive+0xdc>
            err = CO_RPDO_RX_SHORT;
 80026ea:	18bb      	adds	r3, r7, r2
 80026ec:	220c      	movs	r2, #12
 80026ee:	701a      	strb	r2, [r3, #0]
        }
    }

    RPDO->receiveError = err;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	231f      	movs	r3, #31
 80026f4:	18f9      	adds	r1, r7, r3
 80026f6:	23b0      	movs	r3, #176	; 0xb0
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	7809      	ldrb	r1, [r1, #0]
 80026fc:	54d1      	strb	r1, [r2, r3]
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b009      	add	sp, #36	; 0x24
 8002704:	bd90      	pop	{r4, r7, pc}
	...

08002708 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	b093      	sub	sp, #76	; 0x4c
 800270c:	af04      	add	r7, sp, #16
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <OD_write_14xx+0x26>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <OD_write_14xx+0x26>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <OD_write_14xx+0x26>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d901      	bls.n	8002732 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800272e:	2309      	movs	r3, #9
 8002730:	e13f      	b.n	80029b2 <OD_write_14xx+0x2aa>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	2310      	movs	r3, #16
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	0018      	movs	r0, r3
 8002746:	f00c fcd1 	bl	800f0ec <memcpy>

    switch (stream->subIndex) {
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	7c5b      	ldrb	r3, [r3, #17]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d100      	bne.n	8002754 <OD_write_14xx+0x4c>
 8002752:	e10d      	b.n	8002970 <OD_write_14xx+0x268>
 8002754:	dd00      	ble.n	8002758 <OD_write_14xx+0x50>
 8002756:	e124      	b.n	80029a2 <OD_write_14xx+0x29a>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d003      	beq.n	8002764 <OD_write_14xx+0x5c>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d100      	bne.n	8002762 <OD_write_14xx+0x5a>
 8002760:	e0d9      	b.n	8002916 <OD_write_14xx+0x20e>
 8002762:	e11e      	b.n	80029a2 <OD_write_14xx+0x29a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0018      	movs	r0, r3
 8002768:	f7ff fbda 	bl	8001f20 <CO_getUint32>
 800276c:	0003      	movs	r3, r0
 800276e:	61fb      	str	r3, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2136      	movs	r1, #54	; 0x36
 8002776:	187b      	adds	r3, r7, r1
 8002778:	0552      	lsls	r2, r2, #21
 800277a:	0d52      	lsrs	r2, r2, #21
 800277c:	801a      	strh	r2, [r3, #0]
        bool_t valid = (COB_ID & 0x80000000) == 0;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	43db      	mvns	r3, r3
 8002782:	0fdb      	lsrs	r3, r3, #31
 8002784:	b2db      	uxtb	r3, r3
 8002786:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4a8c      	ldr	r2, [pc, #560]	; (80029bc <OD_write_14xx+0x2b4>)
 800278c:	4013      	ands	r3, r2
 800278e:	d000      	beq.n	8002792 <OD_write_14xx+0x8a>
 8002790:	e057      	b.n	8002842 <OD_write_14xx+0x13a>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <OD_write_14xx+0xa8>
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <OD_write_14xx+0xa8>
 80027a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a2:	2392      	movs	r3, #146	; 0x92
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	5ad3      	ldrh	r3, [r2, r3]
 80027a8:	187a      	adds	r2, r7, r1
 80027aa:	8812      	ldrh	r2, [r2, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d148      	bne.n	8002842 <OD_write_14xx+0x13a>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03e      	beq.n	8002834 <OD_write_14xx+0x12c>
 80027b6:	2136      	movs	r1, #54	; 0x36
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	2b7f      	cmp	r3, #127	; 0x7f
 80027be:	d940      	bls.n	8002842 <OD_write_14xx+0x13a>
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d905      	bls.n	80027d8 <OD_write_14xx+0xd0>
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	23c0      	movs	r3, #192	; 0xc0
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d934      	bls.n	8002842 <OD_write_14xx+0x13a>
 80027d8:	2136      	movs	r1, #54	; 0x36
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	23b0      	movs	r3, #176	; 0xb0
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d905      	bls.n	80027f2 <OD_write_14xx+0xea>
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	23c0      	movs	r3, #192	; 0xc0
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d327      	bcc.n	8002842 <OD_write_14xx+0x13a>
 80027f2:	2136      	movs	r1, #54	; 0x36
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d905      	bls.n	800280c <OD_write_14xx+0x104>
 8002800:	187b      	adds	r3, r7, r1
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	23d0      	movs	r3, #208	; 0xd0
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	429a      	cmp	r2, r3
 800280a:	d31a      	bcc.n	8002842 <OD_write_14xx+0x13a>
 800280c:	2136      	movs	r1, #54	; 0x36
 800280e:	187b      	adds	r3, r7, r1
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	23dc      	movs	r3, #220	; 0xdc
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	429a      	cmp	r2, r3
 8002818:	d305      	bcc.n	8002826 <OD_write_14xx+0x11e>
 800281a:	187b      	adds	r3, r7, r1
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	23e0      	movs	r3, #224	; 0xe0
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	429a      	cmp	r2, r3
 8002824:	d30d      	bcc.n	8002842 <OD_write_14xx+0x13a>
 8002826:	2336      	movs	r3, #54	; 0x36
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	23e0      	movs	r3, #224	; 0xe0
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	429a      	cmp	r2, r3
 8002832:	d806      	bhi.n	8002842 <OD_write_14xx+0x13a>
            || (valid && PDO->mappedObjectsCount == 0)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <OD_write_14xx+0x13e>
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	7b5b      	ldrb	r3, [r3, #13]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <OD_write_14xx+0x13e>
        ) {
            return ODR_INVALID_VALUE;
 8002842:	230f      	movs	r3, #15
 8002844:	e0b5      	b.n	80029b2 <OD_write_14xx+0x2aa>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	429a      	cmp	r2, r3
 800284e:	d109      	bne.n	8002864 <OD_write_14xx+0x15c>
 8002850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002852:	2392      	movs	r3, #146	; 0x92
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	5ad3      	ldrh	r3, [r2, r3]
 8002858:	2236      	movs	r2, #54	; 0x36
 800285a:	18ba      	adds	r2, r7, r2
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d100      	bne.n	8002864 <OD_write_14xx+0x15c>
 8002862:	e09d      	b.n	80029a0 <OD_write_14xx+0x298>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002866:	2391      	movs	r3, #145	; 0x91
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	5ad3      	ldrh	r3, [r2, r3]
 800286c:	2236      	movs	r2, #54	; 0x36
 800286e:	18ba      	adds	r2, r7, r2
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d109      	bne.n	800288a <OD_write_14xx+0x182>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	227f      	movs	r2, #127	; 0x7f
 800287a:	4393      	bics	r3, r2
 800287c:	001a      	movs	r2, r3
 800287e:	2310      	movs	r3, #16
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff fb5b 	bl	8001f40 <CO_setUint32>
            }
            if (!valid) {
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <OD_write_14xx+0x190>
                CAN_ID = 0;
 8002890:	2336      	movs	r3, #54	; 0x36
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2200      	movs	r2, #0
 8002896:	801a      	strh	r2, [r3, #0]
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	6858      	ldr	r0, [r3, #4]
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	2390      	movs	r3, #144	; 0x90
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	5ad1      	ldrh	r1, [r2, r3]
 80028a4:	2617      	movs	r6, #23
 80028a6:	19bc      	adds	r4, r7, r6
 80028a8:	4d45      	ldr	r5, [pc, #276]	; (80029c0 <OD_write_14xx+0x2b8>)
 80028aa:	2336      	movs	r3, #54	; 0x36
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	4b44      	ldr	r3, [pc, #272]	; (80029c4 <OD_write_14xx+0x2bc>)
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2300      	movs	r3, #0
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	002b      	movs	r3, r5
 80028be:	f005 fa07 	bl	8007cd0 <CO_CANrxBufferInit>
 80028c2:	0003      	movs	r3, r0
 80028c4:	7023      	strb	r3, [r4, #0]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00f      	beq.n	80028ec <OD_write_14xx+0x1e4>
 80028cc:	19bb      	adds	r3, r7, r6
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <OD_write_14xx+0x1e4>
                PDO->valid = true;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2201      	movs	r2, #1
 80028da:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80028dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028de:	2336      	movs	r3, #54	; 0x36
 80028e0:	18f9      	adds	r1, r7, r3
 80028e2:	2392      	movs	r3, #146	; 0x92
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	8809      	ldrh	r1, [r1, #0]
 80028e8:	52d1      	strh	r1, [r2, r3]
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 80028ea:	e059      	b.n	80029a0 <OD_write_14xx+0x298>
                PDO->valid = false;
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80028f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f4:	23a4      	movs	r3, #164	; 0xa4
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2100      	movs	r1, #0
 80028fa:	50d1      	str	r1, [r2, r3]
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80028fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fe:	23a6      	movs	r3, #166	; 0xa6
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2100      	movs	r1, #0
 8002904:	50d1      	str	r1, [r2, r3]
                if (ret != CO_ERROR_NO) {
 8002906:	2317      	movs	r3, #23
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b25b      	sxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d046      	beq.n	80029a0 <OD_write_14xx+0x298>
                    return ODR_DEV_INCOMPAT;
 8002912:	2309      	movs	r3, #9
 8002914:	e04d      	b.n	80029b2 <OD_write_14xx+0x2aa>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002916:	2527      	movs	r5, #39	; 0x27
 8002918:	197c      	adds	r4, r7, r5
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fadf 	bl	8001ee0 <CO_getUint8>
 8002922:	0003      	movs	r3, r0
 8002924:	7023      	strb	r3, [r4, #0]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002926:	197b      	adds	r3, r7, r5
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2bf0      	cmp	r3, #240	; 0xf0
 800292c:	d905      	bls.n	800293a <OD_write_14xx+0x232>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800292e:	197b      	adds	r3, r7, r5
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2bfd      	cmp	r3, #253	; 0xfd
 8002934:	d801      	bhi.n	800293a <OD_write_14xx+0x232>
        ) {
            return ODR_INVALID_VALUE;
 8002936:	230f      	movs	r3, #15
 8002938:	e03b      	b.n	80029b2 <OD_write_14xx+0x2aa>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800293a:	2327      	movs	r3, #39	; 0x27
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	21f0      	movs	r1, #240	; 0xf0
 8002942:	2300      	movs	r3, #0
 8002944:	4291      	cmp	r1, r2
 8002946:	415b      	adcs	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 800294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294e:	23b4      	movs	r3, #180	; 0xb4
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	58d3      	ldr	r3, [r2, r3]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	429a      	cmp	r2, r3
 8002958:	d004      	beq.n	8002964 <OD_write_14xx+0x25c>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800295a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295c:	23a6      	movs	r3, #166	; 0xa6
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2100      	movs	r1, #0
 8002962:	50d1      	str	r1, [r2, r3]
        }

        RPDO->synchronous = synchronous;
 8002964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002966:	23b4      	movs	r3, #180	; 0xb4
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	6a39      	ldr	r1, [r7, #32]
 800296c:	50d1      	str	r1, [r2, r3]
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 800296e:	e018      	b.n	80029a2 <OD_write_14xx+0x29a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff fac3 	bl	8001efe <CO_getUint16>
 8002978:	0003      	movs	r3, r0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 800297c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297e:	0013      	movs	r3, r2
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	189b      	adds	r3, r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	0019      	movs	r1, r3
 800298c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298e:	23b6      	movs	r3, #182	; 0xb6
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	50d1      	str	r1, [r2, r3]
        RPDO->timeoutTimer = 0;
 8002994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002996:	23b8      	movs	r3, #184	; 0xb8
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2100      	movs	r1, #0
 800299c:	50d1      	str	r1, [r2, r3]
        break;
 800299e:	e000      	b.n	80029a2 <OD_write_14xx+0x29a>
        break;
 80029a0:	46c0      	nop			; (mov r8, r8)
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	2110      	movs	r1, #16
 80029a8:	1879      	adds	r1, r7, r1
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7fe ffbc 	bl	8001928 <OD_writeOriginal>
 80029b0:	0003      	movs	r3, r0
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b00f      	add	sp, #60	; 0x3c
 80029b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	3ffff800 	.word	0x3ffff800
 80029c0:	000007ff 	.word	0x000007ff
 80029c4:	08002615 	.word	0x08002615

080029c8 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 80029c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ca:	b091      	sub	sp, #68	; 0x44
 80029cc:	af04      	add	r7, sp, #16
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <CO_RPDO_init+0x36>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <CO_RPDO_init+0x36>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <CO_RPDO_init+0x36>
 80029ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 80029f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <CO_RPDO_init+0x36>
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80029fe:	2301      	movs	r3, #1
 8002a00:	425b      	negs	r3, r3
 8002a02:	e15f      	b.n	8002cc4 <CO_RPDO_init+0x2fc>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002a04:	23ba      	movs	r3, #186	; 0xba
 8002a06:	005a      	lsls	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f00c fb89 	bl	800f124 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a1c:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8002a22:	2523      	movs	r5, #35	; 0x23
 8002a24:	197c      	adds	r4, r7, r5
 8002a26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a2c:	231c      	movs	r3, #28
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	f7ff fc14 	bl	8002264 <PDO_initMapping>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	7023      	strb	r3, [r4, #0]
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002a40:	197b      	adds	r3, r7, r5
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <CO_RPDO_init+0x8a>
        return ret;
 8002a4a:	197b      	adds	r3, r7, r5
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	e138      	b.n	8002cc4 <CO_RPDO_init+0x2fc>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8002a56:	2522      	movs	r5, #34	; 0x22
 8002a58:	197c      	adds	r4, r7, r5
 8002a5a:	2318      	movs	r3, #24
 8002a5c:	18fa      	adds	r2, r7, r3
 8002a5e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002a60:	2301      	movs	r3, #1
 8002a62:	2101      	movs	r1, #1
 8002a64:	f7ff facd 	bl	8002002 <OD_get_u32>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002a6c:	197b      	adds	r3, r7, r5
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00f      	beq.n	8002a96 <CO_RPDO_init+0xce>
        if (errInfo != NULL) {
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d009      	beq.n	8002a90 <CO_RPDO_init+0xc8>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7ff fa6e 	bl	8001f60 <OD_getIndex>
 8002a84:	0003      	movs	r3, r0
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	2201      	movs	r2, #1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002a90:	230c      	movs	r3, #12
 8002a92:	425b      	negs	r3, r3
 8002a94:	e116      	b.n	8002cc4 <CO_RPDO_init+0x2fc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	0fdb      	lsrs	r3, r3, #31
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	212a      	movs	r1, #42	; 0x2a
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	0552      	lsls	r2, r2, #21
 8002aaa:	0d52      	lsrs	r2, r2, #21
 8002aac:	801a      	strh	r2, [r3, #0]
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <CO_RPDO_init+0x10a>
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	7b5b      	ldrb	r3, [r3, #13]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <CO_RPDO_init+0xfc>
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <CO_RPDO_init+0x10a>
        valid = false;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <CO_RPDO_init+0x10a>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00f      	beq.n	8002af8 <CO_RPDO_init+0x130>
        CO_errorReport(PDO->em,
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <CO_RPDO_init+0x11e>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	e000      	b.n	8002ae8 <CO_RPDO_init+0x120>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2282      	movs	r2, #130	; 0x82
 8002aea:	0212      	lsls	r2, r2, #8
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	0013      	movs	r3, r2
 8002af0:	221a      	movs	r2, #26
 8002af2:	2101      	movs	r1, #1
 8002af4:	f7fd ff6e 	bl	80009d4 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <CO_RPDO_init+0x13e>
        CAN_ID = 0;
 8002afe:	232a      	movs	r3, #42	; 0x2a
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2200      	movs	r2, #0
 8002b04:	801a      	strh	r2, [r3, #0]
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002b06:	202a      	movs	r0, #42	; 0x2a
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00f      	beq.n	8002b30 <CO_RPDO_init+0x168>
 8002b10:	183b      	adds	r3, r7, r0
 8002b12:	881a      	ldrh	r2, [r3, #0]
 8002b14:	2440      	movs	r4, #64	; 0x40
 8002b16:	2508      	movs	r5, #8
 8002b18:	197b      	adds	r3, r7, r5
 8002b1a:	191b      	adds	r3, r3, r4
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	496b      	ldr	r1, [pc, #428]	; (8002ccc <CO_RPDO_init+0x304>)
 8002b20:	400b      	ands	r3, r1
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d104      	bne.n	8002b30 <CO_RPDO_init+0x168>
        CAN_ID = preDefinedCanId;
 8002b26:	183a      	adds	r2, r7, r0
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	191b      	adds	r3, r3, r4
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	8013      	strh	r3, [r2, #0]
    }

    ret = CO_CANrxBufferInit(
 8002b30:	2623      	movs	r6, #35	; 0x23
 8002b32:	19bc      	adds	r4, r7, r6
 8002b34:	4d66      	ldr	r5, [pc, #408]	; (8002cd0 <CO_RPDO_init+0x308>)
 8002b36:	232a      	movs	r3, #42	; 0x2a
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	2350      	movs	r3, #80	; 0x50
 8002b3e:	2108      	movs	r1, #8
 8002b40:	468c      	mov	ip, r1
 8002b42:	44bc      	add	ip, r7
 8002b44:	4463      	add	r3, ip
 8002b46:	8819      	ldrh	r1, [r3, #0]
 8002b48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002b4a:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <CO_RPDO_init+0x30c>)
 8002b4c:	9302      	str	r3, [sp, #8]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	2300      	movs	r3, #0
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	002b      	movs	r3, r5
 8002b58:	f005 f8ba 	bl	8007cd0 <CO_CANrxBufferInit>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	7023      	strb	r3, [r4, #0]
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8002b60:	19bb      	adds	r3, r7, r6
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <CO_RPDO_init+0x1aa>
        return ret;
 8002b6a:	19bb      	adds	r3, r7, r6
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	e0a8      	b.n	8002cc4 <CO_RPDO_init+0x2fc>
    }

    PDO->valid = valid;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002b78:	2117      	movs	r1, #23
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	22fe      	movs	r2, #254	; 0xfe
 8002b7e:	701a      	strb	r2, [r3, #0]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8002b80:	2522      	movs	r5, #34	; 0x22
 8002b82:	197c      	adds	r4, r7, r5
 8002b84:	187a      	adds	r2, r7, r1
 8002b86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b88:	2301      	movs	r3, #1
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	f7ff fa09 	bl	8001fa2 <OD_get_u8>
 8002b90:	0003      	movs	r3, r0
 8002b92:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8002b94:	197b      	adds	r3, r7, r5
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00f      	beq.n	8002bbe <CO_RPDO_init+0x1f6>
        if (errInfo != NULL) {
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <CO_RPDO_init+0x1f0>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8002ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff f9da 	bl	8001f60 <OD_getIndex>
 8002bac:	0003      	movs	r3, r0
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002bb8:	230c      	movs	r3, #12
 8002bba:	425b      	negs	r3, r3
 8002bbc:	e082      	b.n	8002cc4 <CO_RPDO_init+0x2fc>
    }

    RPDO->SYNC = SYNC;
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	23b2      	movs	r3, #178	; 0xb2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	50d1      	str	r1, [r2, r3]
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002bc8:	2317      	movs	r3, #23
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	21f0      	movs	r1, #240	; 0xf0
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4291      	cmp	r1, r2
 8002bd4:	415b      	adcs	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	0019      	movs	r1, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	23b4      	movs	r3, #180	; 0xb4
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	50d1      	str	r1, [r2, r3]
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8002be2:	2514      	movs	r5, #20
 8002be4:	197b      	adds	r3, r7, r5
 8002be6:	2200      	movs	r2, #0
 8002be8:	801a      	strh	r2, [r3, #0]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002bea:	2322      	movs	r3, #34	; 0x22
 8002bec:	18fc      	adds	r4, r7, r3
 8002bee:	197a      	adds	r2, r7, r5
 8002bf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	f7ff f9ec 	bl	8001fd2 <OD_get_u16>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	7023      	strb	r3, [r4, #0]
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8002bfe:	197b      	adds	r3, r7, r5
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	001a      	movs	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	015b      	lsls	r3, r3, #5
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	189b      	adds	r3, r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	0019      	movs	r1, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	23b6      	movs	r3, #182	; 0xb6
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	50d1      	str	r1, [r2, r3]
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	238c      	movs	r3, #140	; 0x8c
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2101      	movs	r1, #1
 8002c22:	50d1      	str	r1, [r2, r3]
    PDO->OD = OD;
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	238e      	movs	r3, #142	; 0x8e
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	50d1      	str	r1, [r2, r3]
    PDO->CANdevIdx = CANdevRxIdx;
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	2350      	movs	r3, #80	; 0x50
 8002c32:	2108      	movs	r1, #8
 8002c34:	1879      	adds	r1, r7, r1
 8002c36:	18c9      	adds	r1, r1, r3
 8002c38:	2390      	movs	r3, #144	; 0x90
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	8809      	ldrh	r1, [r1, #0]
 8002c3e:	52d1      	strh	r1, [r2, r3]
    PDO->preDefinedCanId = preDefinedCanId;
 8002c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c42:	2340      	movs	r3, #64	; 0x40
 8002c44:	2208      	movs	r2, #8
 8002c46:	4694      	mov	ip, r2
 8002c48:	44bc      	add	ip, r7
 8002c4a:	4463      	add	r3, ip
 8002c4c:	2291      	movs	r2, #145	; 0x91
 8002c4e:	0052      	lsls	r2, r2, #1
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	528b      	strh	r3, [r1, r2]
    PDO->configuredCanId = CAN_ID;
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	232a      	movs	r3, #42	; 0x2a
 8002c58:	18f9      	adds	r1, r7, r3
 8002c5a:	2392      	movs	r3, #146	; 0x92
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	8809      	ldrh	r1, [r1, #0]
 8002c60:	52d1      	strh	r1, [r2, r3]
    PDO->OD_communicationParam_ext.object = RPDO;
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	2394      	movs	r3, #148	; 0x94
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	68f9      	ldr	r1, [r7, #12]
 8002c6a:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	2396      	movs	r3, #150	; 0x96
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4919      	ldr	r1, [pc, #100]	; (8002cd8 <CO_RPDO_init+0x310>)
 8002c74:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	2398      	movs	r3, #152	; 0x98
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4917      	ldr	r1, [pc, #92]	; (8002cdc <CO_RPDO_init+0x314>)
 8002c7e:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.object = RPDO;
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	239c      	movs	r3, #156	; 0x9c
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	68f9      	ldr	r1, [r7, #12]
 8002c88:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	239e      	movs	r3, #158	; 0x9e
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4913      	ldr	r1, [pc, #76]	; (8002ce0 <CO_RPDO_init+0x318>)
 8002c92:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4912      	ldr	r1, [pc, #72]	; (8002ce4 <CO_RPDO_init+0x31c>)
 8002c9c:	50d1      	str	r1, [r2, r3]
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	3329      	adds	r3, #41	; 0x29
 8002ca2:	33ff      	adds	r3, #255	; 0xff
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff f967 	bl	8001f7e <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	3339      	adds	r3, #57	; 0x39
 8002cb4:	33ff      	adds	r3, #255	; 0xff
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	0011      	movs	r1, r2
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff f95e 	bl	8001f7e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b00d      	add	sp, #52	; 0x34
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ccc:	0000ff80 	.word	0x0000ff80
 8002cd0:	000007ff 	.word	0x000007ff
 8002cd4:	08002615 	.word	0x08002615
 8002cd8:	08002555 	.word	0x08002555
 8002cdc:	08002709 	.word	0x08002709
 8002ce0:	0800186b 	.word	0x0800186b
 8002ce4:	080023ed 	.word	0x080023ed

08002ce8 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b096      	sub	sp, #88	; 0x58
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d100      	bne.n	8002d04 <CO_RPDO_process+0x1c>
 8002d02:	e126      	b.n	8002f52 <CO_RPDO_process+0x26a>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d100      	bne.n	8002d0c <CO_RPDO_process+0x24>
 8002d0a:	e122      	b.n	8002f52 <CO_RPDO_process+0x26a>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <CO_RPDO_process+0x38>
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	23b4      	movs	r3, #180	; 0xb4
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	58d3      	ldr	r3, [r2, r3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d000      	beq.n	8002d20 <CO_RPDO_process+0x38>
 8002d1e:	e118      	b.n	8002f52 <CO_RPDO_process+0x26a>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	23b0      	movs	r3, #176	; 0xb0
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	2b0a      	cmp	r3, #10
 8002d2a:	d929      	bls.n	8002d80 <CO_RPDO_process+0x98>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	23b0      	movs	r3, #176	; 0xb0
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	3b0b      	subs	r3, #11
 8002d36:	1e5a      	subs	r2, r3, #1
 8002d38:	4193      	sbcs	r3, r2
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	23b0      	movs	r3, #176	; 0xb0
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d101      	bne.n	8002d4e <CO_RPDO_process+0x66>
 8002d4a:	4a90      	ldr	r2, [pc, #576]	; (8002f8c <CO_RPDO_process+0x2a4>)
 8002d4c:	e000      	b.n	8002d50 <CO_RPDO_process+0x68>
 8002d4e:	4a90      	ldr	r2, [pc, #576]	; (8002f90 <CO_RPDO_process+0x2a8>)
 8002d50:	212e      	movs	r1, #46	; 0x2e
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	801a      	strh	r2, [r3, #0]
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002d5e:	001a      	movs	r2, r3
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d66:	9200      	str	r2, [sp, #0]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	f7fd fe33 	bl	80009d4 <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	4193      	sbcs	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	0019      	movs	r1, r3
            RPDO->receiveError = setError
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	23b0      	movs	r3, #176	; 0xb0
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	54d1      	strb	r1, [r2, r3]
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002d80:	214f      	movs	r1, #79	; 0x4f
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	23b4      	movs	r3, #180	; 0xb4
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	58d3      	ldr	r3, [r2, r3]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00f      	beq.n	8002db4 <CO_RPDO_process+0xcc>
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	23b2      	movs	r3, #178	; 0xb2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	58d3      	ldr	r3, [r2, r3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <CO_RPDO_process+0xcc>
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	23b2      	movs	r3, #178	; 0xb2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	58d3      	ldr	r3, [r2, r3]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <CO_RPDO_process+0xcc>
            bufNo = 1;
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002db4:	2300      	movs	r3, #0
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002db8:	e06b      	b.n	8002e92 <CO_RPDO_process+0x1aa>
            rpdoReceived = true;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8002dbe:	214f      	movs	r1, #79	; 0x4f
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	332a      	adds	r3, #42	; 0x2a
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3252      	adds	r2, #82	; 0x52
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	2100      	movs	r1, #0
 8002dda:	50d1      	str	r1, [r2, r3]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002ddc:	2343      	movs	r3, #67	; 0x43
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e04e      	b.n	8002e84 <CO_RPDO_process+0x19c>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002de6:	2343      	movs	r3, #67	; 0x43
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	0013      	movs	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3310      	adds	r3, #16
 8002df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	330c      	adds	r3, #12
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	2323      	movs	r3, #35	; 0x23
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	701a      	strb	r2, [r3, #0]

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8002e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d901      	bls.n	8002e1c <CO_RPDO_process+0x134>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002e18:	2308      	movs	r3, #8
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8002e1c:	2523      	movs	r5, #35	; 0x23
 8002e1e:	197b      	adds	r3, r7, r5
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d910      	bls.n	8002e4a <CO_RPDO_process+0x162>
                    memset(buf, 0, sizeof(buf));
 8002e28:	2418      	movs	r4, #24
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	2100      	movs	r1, #0
 8002e30:	0018      	movs	r0, r3
 8002e32:	f00c f977 	bl	800f124 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8002e36:	197b      	adds	r3, r7, r5
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f00c f954 	bl	800f0ec <memcpy>
                    dataOD = buf;
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e48:	e001      	b.n	8002e4e <CO_RPDO_process+0x166>
                }
                else {
                    dataOD = dataRPDO;
 8002e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	699c      	ldr	r4, [r3, #24]
 8002e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e5a:	2314      	movs	r3, #20
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e62:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8002e64:	2123      	movs	r1, #35	; 0x23
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002e78:	2143      	movs	r1, #67	; 0x43
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	3201      	adds	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e86:	7b5b      	ldrb	r3, [r3, #13]
 8002e88:	2243      	movs	r2, #67	; 0x43
 8002e8a:	18ba      	adds	r2, r7, r2
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3a9      	bcc.n	8002de6 <CO_RPDO_process+0xfe>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002e92:	234f      	movs	r3, #79	; 0x4f
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3252      	adds	r2, #82	; 0x52
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	58d3      	ldr	r3, [r2, r3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d18a      	bne.n	8002dba <CO_RPDO_process+0xd2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	23b6      	movs	r3, #182	; 0xb6
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	58d3      	ldr	r3, [r2, r3]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d067      	beq.n	8002f80 <CO_RPDO_process+0x298>
            if (rpdoReceived) {
 8002eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01b      	beq.n	8002eee <CO_RPDO_process+0x206>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	23b8      	movs	r3, #184	; 0xb8
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	58d2      	ldr	r2, [r2, r3]
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	23b6      	movs	r3, #182	; 0xb6
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	58cb      	ldr	r3, [r1, r3]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d90b      	bls.n	8002ee2 <CO_RPDO_process+0x1fa>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	23b8      	movs	r3, #184	; 0xb8
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	58d3      	ldr	r3, [r2, r3]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2217      	movs	r2, #23
 8002edc:	2100      	movs	r1, #0
 8002ede:	f7fd fd79 	bl	80009d4 <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	23b8      	movs	r3, #184	; 0xb8
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2101      	movs	r1, #1
 8002eea:	50d1      	str	r1, [r2, r3]
    ) {
 8002eec:	e048      	b.n	8002f80 <CO_RPDO_process+0x298>
            }
            else if (RPDO->timeoutTimer > 0
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	23b8      	movs	r3, #184	; 0xb8
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	58d3      	ldr	r3, [r2, r3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d042      	beq.n	8002f80 <CO_RPDO_process+0x298>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	23b8      	movs	r3, #184	; 0xb8
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	58d2      	ldr	r2, [r2, r3]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	23b6      	movs	r3, #182	; 0xb6
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	58cb      	ldr	r3, [r1, r3]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d238      	bcs.n	8002f80 <CO_RPDO_process+0x298>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	23b8      	movs	r3, #184	; 0xb8
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	58d2      	ldr	r2, [r2, r3]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	18d1      	adds	r1, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	23b8      	movs	r3, #184	; 0xb8
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	50d1      	str	r1, [r2, r3]

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	23b8      	movs	r3, #184	; 0xb8
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	58d2      	ldr	r2, [r2, r3]
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	23b6      	movs	r3, #182	; 0xb6
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	58cb      	ldr	r3, [r1, r3]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d924      	bls.n	8002f80 <CO_RPDO_process+0x298>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	23b8      	movs	r3, #184	; 0xb8
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	58d3      	ldr	r3, [r2, r3]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <CO_RPDO_process+0x2ac>)
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	0013      	movs	r3, r2
 8002f48:	2217      	movs	r2, #23
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	f7fd fd42 	bl	80009d4 <CO_error>
    ) {
 8002f50:	e016      	b.n	8002f80 <CO_RPDO_process+0x298>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <CO_RPDO_process+0x278>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d110      	bne.n	8002f82 <CO_RPDO_process+0x29a>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	23a4      	movs	r3, #164	; 0xa4
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2100      	movs	r1, #0
 8002f68:	50d1      	str	r1, [r2, r3]
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	23a6      	movs	r3, #166	; 0xa6
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2100      	movs	r1, #0
 8002f72:	50d1      	str	r1, [r2, r3]
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	23b8      	movs	r3, #184	; 0xb8
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	50d1      	str	r1, [r2, r3]
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8002f7e:	e000      	b.n	8002f82 <CO_RPDO_process+0x29a>
    ) {
 8002f80:	46c0      	nop			; (mov r8, r8)
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b014      	add	sp, #80	; 0x50
 8002f88:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	00008210 	.word	0x00008210
 8002f90:	00008220 	.word	0x00008220
 8002f94:	00008250 	.word	0x00008250

08002f98 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b092      	sub	sp, #72	; 0x48
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <OD_write_18xx+0x26>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <OD_write_18xx+0x26>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <OD_write_18xx+0x26>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d901      	bls.n	8002fc2 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002fbe:	2309      	movs	r3, #9
 8002fc0:	e175      	b.n	80032ae <OD_write_18xx+0x316>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	2314      	movs	r3, #20
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f00c f889 	bl	800f0ec <memcpy>

    switch (stream->subIndex) {
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	7c5b      	ldrb	r3, [r3, #17]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d900      	bls.n	8002fe4 <OD_write_18xx+0x4c>
 8002fe2:	e15c      	b.n	800329e <OD_write_18xx+0x306>
 8002fe4:	009a      	lsls	r2, r3, #2
 8002fe6:	4bb4      	ldr	r3, [pc, #720]	; (80032b8 <OD_write_18xx+0x320>)
 8002fe8:	18d3      	adds	r3, r2, r3
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	469f      	mov	pc, r3
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fe ff95 	bl	8001f20 <CO_getUint32>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	623b      	str	r3, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	213e      	movs	r1, #62	; 0x3e
 8003000:	187b      	adds	r3, r7, r1
 8003002:	0552      	lsls	r2, r2, #21
 8003004:	0d52      	lsrs	r2, r2, #21
 8003006:	801a      	strh	r2, [r3, #0]
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	43db      	mvns	r3, r3
 800300c:	0fdb      	lsrs	r3, r3, #31
 800300e:	b2db      	uxtb	r3, r3
 8003010:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	4aa9      	ldr	r2, [pc, #676]	; (80032bc <OD_write_18xx+0x324>)
 8003016:	4013      	ands	r3, r2
 8003018:	d000      	beq.n	800301c <OD_write_18xx+0x84>
 800301a:	e057      	b.n	80030cc <OD_write_18xx+0x134>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <OD_write_18xx+0xa2>
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <OD_write_18xx+0xa2>
 800302a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800302c:	2392      	movs	r3, #146	; 0x92
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	5ad3      	ldrh	r3, [r2, r3]
 8003032:	187a      	adds	r2, r7, r1
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d148      	bne.n	80030cc <OD_write_18xx+0x134>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03e      	beq.n	80030be <OD_write_18xx+0x126>
 8003040:	213e      	movs	r1, #62	; 0x3e
 8003042:	187b      	adds	r3, r7, r1
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b7f      	cmp	r3, #127	; 0x7f
 8003048:	d940      	bls.n	80030cc <OD_write_18xx+0x134>
 800304a:	187b      	adds	r3, r7, r1
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	429a      	cmp	r2, r3
 8003054:	d905      	bls.n	8003062 <OD_write_18xx+0xca>
 8003056:	187b      	adds	r3, r7, r1
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	23c0      	movs	r3, #192	; 0xc0
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	429a      	cmp	r2, r3
 8003060:	d934      	bls.n	80030cc <OD_write_18xx+0x134>
 8003062:	213e      	movs	r1, #62	; 0x3e
 8003064:	187b      	adds	r3, r7, r1
 8003066:	881a      	ldrh	r2, [r3, #0]
 8003068:	23b0      	movs	r3, #176	; 0xb0
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	429a      	cmp	r2, r3
 800306e:	d905      	bls.n	800307c <OD_write_18xx+0xe4>
 8003070:	187b      	adds	r3, r7, r1
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	23c0      	movs	r3, #192	; 0xc0
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	429a      	cmp	r2, r3
 800307a:	d327      	bcc.n	80030cc <OD_write_18xx+0x134>
 800307c:	213e      	movs	r1, #62	; 0x3e
 800307e:	187b      	adds	r3, r7, r1
 8003080:	881a      	ldrh	r2, [r3, #0]
 8003082:	23c0      	movs	r3, #192	; 0xc0
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	429a      	cmp	r2, r3
 8003088:	d905      	bls.n	8003096 <OD_write_18xx+0xfe>
 800308a:	187b      	adds	r3, r7, r1
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	23d0      	movs	r3, #208	; 0xd0
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	429a      	cmp	r2, r3
 8003094:	d31a      	bcc.n	80030cc <OD_write_18xx+0x134>
 8003096:	213e      	movs	r1, #62	; 0x3e
 8003098:	187b      	adds	r3, r7, r1
 800309a:	881a      	ldrh	r2, [r3, #0]
 800309c:	23dc      	movs	r3, #220	; 0xdc
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d305      	bcc.n	80030b0 <OD_write_18xx+0x118>
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	881a      	ldrh	r2, [r3, #0]
 80030a8:	23e0      	movs	r3, #224	; 0xe0
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d30d      	bcc.n	80030cc <OD_write_18xx+0x134>
 80030b0:	233e      	movs	r3, #62	; 0x3e
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	23e0      	movs	r3, #224	; 0xe0
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d806      	bhi.n	80030cc <OD_write_18xx+0x134>
            || (valid && PDO->mappedObjectsCount == 0)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <OD_write_18xx+0x138>
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	7b5b      	ldrb	r3, [r3, #13]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <OD_write_18xx+0x138>
        ) {
            return ODR_INVALID_VALUE;
 80030cc:	230f      	movs	r3, #15
 80030ce:	e0ee      	b.n	80032ae <OD_write_18xx+0x316>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d109      	bne.n	80030ee <OD_write_18xx+0x156>
 80030da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030dc:	2392      	movs	r3, #146	; 0x92
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	5ad3      	ldrh	r3, [r2, r3]
 80030e2:	223e      	movs	r2, #62	; 0x3e
 80030e4:	18ba      	adds	r2, r7, r2
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d100      	bne.n	80030ee <OD_write_18xx+0x156>
 80030ec:	e0d6      	b.n	800329c <OD_write_18xx+0x304>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 80030ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f0:	2391      	movs	r3, #145	; 0x91
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	5ad3      	ldrh	r3, [r2, r3]
 80030f6:	223e      	movs	r2, #62	; 0x3e
 80030f8:	18ba      	adds	r2, r7, r2
 80030fa:	8812      	ldrh	r2, [r2, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d109      	bne.n	8003114 <OD_write_18xx+0x17c>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	227f      	movs	r2, #127	; 0x7f
 8003104:	4393      	bics	r3, r2
 8003106:	001a      	movs	r2, r3
 8003108:	2314      	movs	r3, #20
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	0011      	movs	r1, r2
 800310e:	0018      	movs	r0, r3
 8003110:	f7fe ff16 	bl	8001f40 <CO_setUint32>
            }
            if (!valid) {
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <OD_write_18xx+0x18a>
                CAN_ID = 0;
 800311a:	233e      	movs	r3, #62	; 0x3e
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2200      	movs	r2, #0
 8003120:	801a      	strh	r2, [r3, #0]
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	6858      	ldr	r0, [r3, #4]
 8003126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003128:	2390      	movs	r3, #144	; 0x90
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	5ad4      	ldrh	r4, [r2, r3]
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	7b1a      	ldrb	r2, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003134:	23a6      	movs	r3, #166	; 0xa6
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	5cc9      	ldrb	r1, [r1, r3]
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 800313a:	25f0      	movs	r5, #240	; 0xf0
 800313c:	2300      	movs	r3, #0
 800313e:	428d      	cmp	r5, r1
 8003140:	415b      	adcs	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	001d      	movs	r5, r3
 8003146:	233e      	movs	r3, #62	; 0x3e
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	8819      	ldrh	r1, [r3, #0]
 800314c:	9501      	str	r5, [sp, #4]
 800314e:	9200      	str	r2, [sp, #0]
 8003150:	2300      	movs	r3, #0
 8003152:	000a      	movs	r2, r1
 8003154:	0021      	movs	r1, r4
 8003156:	f004 fe23 	bl	8007da0 <CO_CANtxBufferInit>
 800315a:	0003      	movs	r3, r0
 800315c:	61bb      	str	r3, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <OD_write_18xx+0x1d0>
                return ODR_DEV_INCOMPAT;
 8003164:	2309      	movs	r3, #9
 8003166:	e0a2      	b.n	80032ae <OD_write_18xx+0x316>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8003168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800316a:	23a4      	movs	r3, #164	; 0xa4
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	50d1      	str	r1, [r2, r3]
            PDO->valid = valid;
 8003172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8003178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800317a:	233e      	movs	r3, #62	; 0x3e
 800317c:	18f9      	adds	r1, r7, r3
 800317e:	2392      	movs	r3, #146	; 0x92
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	8809      	ldrh	r1, [r1, #0]
 8003184:	52d1      	strh	r1, [r2, r3]
        }
        break;
 8003186:	e089      	b.n	800329c <OD_write_18xx+0x304>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8003188:	2527      	movs	r5, #39	; 0x27
 800318a:	197c      	adds	r4, r7, r5
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	0018      	movs	r0, r3
 8003190:	f7fe fea6 	bl	8001ee0 <CO_getUint8>
 8003194:	0003      	movs	r3, r0
 8003196:	7023      	strb	r3, [r4, #0]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003198:	197b      	adds	r3, r7, r5
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2bf0      	cmp	r3, #240	; 0xf0
 800319e:	d905      	bls.n	80031ac <OD_write_18xx+0x214>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80031a0:	197b      	adds	r3, r7, r5
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2bfd      	cmp	r3, #253	; 0xfd
 80031a6:	d801      	bhi.n	80031ac <OD_write_18xx+0x214>
        ) {
            return ODR_INVALID_VALUE;
 80031a8:	230f      	movs	r3, #15
 80031aa:	e080      	b.n	80032ae <OD_write_18xx+0x316>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80031ac:	2027      	movs	r0, #39	; 0x27
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	21f0      	movs	r1, #240	; 0xf0
 80031b4:	2300      	movs	r3, #0
 80031b6:	4291      	cmp	r1, r2
 80031b8:	415b      	adcs	r3, r3
 80031ba:	b2d9      	uxtb	r1, r3
        TPDO->CANtxBuff->syncFlag =
 80031bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031be:	23a4      	movs	r3, #164	; 0xa4
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	58d3      	ldr	r3, [r2, r3]
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80031c4:	000a      	movs	r2, r1
        TPDO->CANtxBuff->syncFlag =
 80031c6:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 80031c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ca:	235a      	movs	r3, #90	; 0x5a
 80031cc:	33ff      	adds	r3, #255	; 0xff
 80031ce:	21ff      	movs	r1, #255	; 0xff
 80031d0:	54d1      	strb	r1, [r2, r3]
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 80031d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d4:	1839      	adds	r1, r7, r0
 80031d6:	23a6      	movs	r3, #166	; 0xa6
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	7809      	ldrb	r1, [r1, #0]
 80031dc:	54d1      	strb	r1, [r2, r3]
        TPDO->sendRequest = true;
 80031de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e0:	23a8      	movs	r3, #168	; 0xa8
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	2101      	movs	r1, #1
 80031e6:	50d1      	str	r1, [r2, r3]
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 80031e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ea:	23b4      	movs	r3, #180	; 0xb4
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2100      	movs	r1, #0
 80031f0:	50d1      	str	r1, [r2, r3]
 80031f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f4:	23b4      	movs	r3, #180	; 0xb4
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	58d1      	ldr	r1, [r2, r3]
 80031fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fc:	23b2      	movs	r3, #178	; 0xb2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	50d1      	str	r1, [r2, r3]
#endif
        break;
 8003202:	e04c      	b.n	800329e <OD_write_18xx+0x306>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <OD_write_18xx+0x278>
            return ODR_INVALID_VALUE;
 800320c:	230f      	movs	r3, #15
 800320e:	e04e      	b.n	80032ae <OD_write_18xx+0x316>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	0018      	movs	r0, r3
 8003214:	f7fe fe73 	bl	8001efe <CO_getUint16>
 8003218:	0003      	movs	r3, r0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2264      	movs	r2, #100	; 0x64
 8003220:	435a      	muls	r2, r3
 8003222:	0011      	movs	r1, r2
 8003224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003226:	23ae      	movs	r3, #174	; 0xae
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	50d1      	str	r1, [r2, r3]
        TPDO->inhibitTimer = 0;
 800322c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800322e:	23b2      	movs	r3, #178	; 0xb2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2100      	movs	r1, #0
 8003234:	50d1      	str	r1, [r2, r3]
        break;
 8003236:	e032      	b.n	800329e <OD_write_18xx+0x306>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	0018      	movs	r0, r3
 800323c:	f7fe fe5f 	bl	8001efe <CO_getUint16>
 8003240:	0003      	movs	r3, r0
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8003244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003246:	0013      	movs	r3, r2
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	189b      	adds	r3, r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	0019      	movs	r1, r3
 8003254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003256:	23b0      	movs	r3, #176	; 0xb0
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	50d1      	str	r1, [r2, r3]
        TPDO->eventTimer = 0;
 800325c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800325e:	23b4      	movs	r3, #180	; 0xb4
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2100      	movs	r1, #0
 8003264:	50d1      	str	r1, [r2, r3]
        break;
 8003266:	e01a      	b.n	800329e <OD_write_18xx+0x306>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8003268:	2533      	movs	r5, #51	; 0x33
 800326a:	197c      	adds	r4, r7, r5
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0018      	movs	r0, r3
 8003270:	f7fe fe36 	bl	8001ee0 <CO_getUint8>
 8003274:	0003      	movs	r3, r0
 8003276:	7023      	strb	r3, [r4, #0]

        if (PDO->valid || syncStartValue > 240) {
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <OD_write_18xx+0x2f0>
 8003280:	197b      	adds	r3, r7, r5
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2bf0      	cmp	r3, #240	; 0xf0
 8003286:	d901      	bls.n	800328c <OD_write_18xx+0x2f4>
            return ODR_INVALID_VALUE;
 8003288:	230f      	movs	r3, #15
 800328a:	e010      	b.n	80032ae <OD_write_18xx+0x316>
        }
        TPDO->syncStartValue = syncStartValue;
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	2333      	movs	r3, #51	; 0x33
 8003290:	18f9      	adds	r1, r7, r3
 8003292:	23ac      	movs	r3, #172	; 0xac
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	7809      	ldrb	r1, [r1, #0]
 8003298:	54d1      	strb	r1, [r2, r3]
        break;
 800329a:	e000      	b.n	800329e <OD_write_18xx+0x306>
        break;
 800329c:	46c0      	nop			; (mov r8, r8)
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	2114      	movs	r1, #20
 80032a4:	1879      	adds	r1, r7, r1
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7fe fb3e 	bl	8001928 <OD_writeOriginal>
 80032ac:	0003      	movs	r3, r0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b010      	add	sp, #64	; 0x40
 80032b4:	bdb0      	pop	{r4, r5, r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	0801009c 	.word	0x0801009c
 80032bc:	3ffff800 	.word	0x3ffff800

080032c0 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 80032c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c2:	b08f      	sub	sp, #60	; 0x3c
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <CO_TPDO_init+0x36>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <CO_TPDO_init+0x36>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <CO_TPDO_init+0x36>
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 80032ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <CO_TPDO_init+0x36>
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80032f6:	2301      	movs	r3, #1
 80032f8:	425b      	negs	r3, r3
 80032fa:	e1a2      	b.n	8003642 <CO_TPDO_init+0x382>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 80032fc:	23b6      	movs	r3, #182	; 0xb6
 80032fe:	005a      	lsls	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2100      	movs	r1, #0
 8003304:	0018      	movs	r0, r3
 8003306:	f00b ff0d 	bl	800f124 <memset>

    /* Configure object variables */
    PDO->em = em;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003314:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 800331a:	2523      	movs	r5, #35	; 0x23
 800331c:	197c      	adds	r4, r7, r5
 800331e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003324:	231c      	movs	r3, #28
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	f7fe ff98 	bl	8002264 <PDO_initMapping>
 8003334:	0003      	movs	r3, r0
 8003336:	7023      	strb	r3, [r4, #0]
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8003338:	197b      	adds	r3, r7, r5
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b25b      	sxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <CO_TPDO_init+0x8a>
        return ret;
 8003342:	197b      	adds	r3, r7, r5
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b25b      	sxtb	r3, r3
 8003348:	e17b      	b.n	8003642 <CO_TPDO_init+0x382>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800334a:	211b      	movs	r1, #27
 800334c:	187b      	adds	r3, r7, r1
 800334e:	22fe      	movs	r2, #254	; 0xfe
 8003350:	701a      	strb	r2, [r3, #0]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8003352:	2522      	movs	r5, #34	; 0x22
 8003354:	197c      	adds	r4, r7, r5
 8003356:	187a      	adds	r2, r7, r1
 8003358:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800335a:	2301      	movs	r3, #1
 800335c:	2102      	movs	r1, #2
 800335e:	f7fe fe20 	bl	8001fa2 <OD_get_u8>
 8003362:	0003      	movs	r3, r0
 8003364:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8003366:	197b      	adds	r3, r7, r5
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b25b      	sxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00f      	beq.n	8003390 <CO_TPDO_init+0xd0>
        if (errInfo != NULL) {
 8003370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <CO_TPDO_init+0xca>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	0018      	movs	r0, r3
 800337a:	f7fe fdf1 	bl	8001f60 <OD_getIndex>
 800337e:	0003      	movs	r3, r0
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	2202      	movs	r2, #2
 8003384:	431a      	orrs	r2, r3
 8003386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003388:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800338a:	230c      	movs	r3, #12
 800338c:	425b      	negs	r3, r3
 800338e:	e158      	b.n	8003642 <CO_TPDO_init+0x382>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003390:	221b      	movs	r2, #27
 8003392:	18bb      	adds	r3, r7, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2bfd      	cmp	r3, #253	; 0xfd
 8003398:	d806      	bhi.n	80033a8 <CO_TPDO_init+0xe8>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800339a:	18bb      	adds	r3, r7, r2
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2bf0      	cmp	r3, #240	; 0xf0
 80033a0:	d902      	bls.n	80033a8 <CO_TPDO_init+0xe8>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80033a2:	18bb      	adds	r3, r7, r2
 80033a4:	22fe      	movs	r2, #254	; 0xfe
 80033a6:	701a      	strb	r2, [r3, #0]
    }
    TPDO->transmissionType = transmissionType;
 80033a8:	231b      	movs	r3, #27
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	7819      	ldrb	r1, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	23a6      	movs	r3, #166	; 0xa6
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	54d1      	strb	r1, [r2, r3]
    TPDO->sendRequest = true;
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	23a8      	movs	r3, #168	; 0xa8
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2101      	movs	r1, #1
 80033be:	50d1      	str	r1, [r2, r3]

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80033c4:	2522      	movs	r5, #34	; 0x22
 80033c6:	197c      	adds	r4, r7, r5
 80033c8:	2314      	movs	r3, #20
 80033ca:	18fa      	adds	r2, r7, r3
 80033cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80033ce:	2301      	movs	r3, #1
 80033d0:	2101      	movs	r1, #1
 80033d2:	f7fe fe16 	bl	8002002 <OD_get_u32>
 80033d6:	0003      	movs	r3, r0
 80033d8:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 80033da:	197b      	adds	r3, r7, r5
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	b25b      	sxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00f      	beq.n	8003404 <CO_TPDO_init+0x144>
        if (errInfo != NULL) {
 80033e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <CO_TPDO_init+0x13e>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 80033ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fe fdb7 	bl	8001f60 <OD_getIndex>
 80033f2:	0003      	movs	r3, r0
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	2201      	movs	r2, #1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80033fe:	230c      	movs	r3, #12
 8003400:	425b      	negs	r3, r3
 8003402:	e11e      	b.n	8003642 <CO_TPDO_init+0x382>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	43db      	mvns	r3, r3
 8003408:	0fdb      	lsrs	r3, r3, #31
 800340a:	b2db      	uxtb	r3, r3
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	b29a      	uxth	r2, r3
 8003412:	212a      	movs	r1, #42	; 0x2a
 8003414:	187b      	adds	r3, r7, r1
 8003416:	0552      	lsls	r2, r2, #21
 8003418:	0d52      	lsrs	r2, r2, #21
 800341a:	801a      	strh	r2, [r3, #0]
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <CO_TPDO_init+0x180>
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	7b5b      	ldrb	r3, [r3, #13]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <CO_TPDO_init+0x172>
 800342a:	187b      	adds	r3, r7, r1
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <CO_TPDO_init+0x180>
        valid = false;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <CO_TPDO_init+0x180>
 800343c:	2301      	movs	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00f      	beq.n	8003466 <CO_TPDO_init+0x1a6>
        CO_errorReport(PDO->em,
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <CO_TPDO_init+0x194>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	e000      	b.n	8003456 <CO_TPDO_init+0x196>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2282      	movs	r2, #130	; 0x82
 8003458:	0212      	lsls	r2, r2, #8
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	0013      	movs	r3, r2
 800345e:	221a      	movs	r2, #26
 8003460:	2101      	movs	r1, #1
 8003462:	f7fd fab7 	bl	80009d4 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d103      	bne.n	8003474 <CO_TPDO_init+0x1b4>
        CAN_ID = 0;
 800346c:	232a      	movs	r3, #42	; 0x2a
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2200      	movs	r2, #0
 8003472:	801a      	strh	r2, [r3, #0]
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8003474:	202a      	movs	r0, #42	; 0x2a
 8003476:	183b      	adds	r3, r7, r0
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00f      	beq.n	800349e <CO_TPDO_init+0x1de>
 800347e:	183b      	adds	r3, r7, r0
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	2440      	movs	r4, #64	; 0x40
 8003484:	2508      	movs	r5, #8
 8003486:	197b      	adds	r3, r7, r5
 8003488:	191b      	adds	r3, r3, r4
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	496f      	ldr	r1, [pc, #444]	; (800364c <CO_TPDO_init+0x38c>)
 800348e:	400b      	ands	r3, r1
 8003490:	429a      	cmp	r2, r3
 8003492:	d104      	bne.n	800349e <CO_TPDO_init+0x1de>
        CAN_ID = preDefinedCanId;
 8003494:	183a      	adds	r2, r7, r0
 8003496:	197b      	adds	r3, r7, r5
 8003498:	191b      	adds	r3, r3, r4
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	8013      	strh	r3, [r2, #0]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	7b1a      	ldrb	r2, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	23a6      	movs	r3, #166	; 0xa6
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	5cc9      	ldrb	r1, [r1, r3]
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80034aa:	20f0      	movs	r0, #240	; 0xf0
 80034ac:	2300      	movs	r3, #0
 80034ae:	4288      	cmp	r0, r1
 80034b0:	415b      	adcs	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	001d      	movs	r5, r3
 80034b6:	232a      	movs	r3, #42	; 0x2a
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	881c      	ldrh	r4, [r3, #0]
 80034bc:	2350      	movs	r3, #80	; 0x50
 80034be:	2108      	movs	r1, #8
 80034c0:	468c      	mov	ip, r1
 80034c2:	44bc      	add	ip, r7
 80034c4:	4463      	add	r3, ip
 80034c6:	8819      	ldrh	r1, [r3, #0]
 80034c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80034ca:	9501      	str	r5, [sp, #4]
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	0022      	movs	r2, r4
 80034d2:	f004 fc65 	bl	8007da0 <CO_CANtxBufferInit>
 80034d6:	0001      	movs	r1, r0
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	23a4      	movs	r3, #164	; 0xa4
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	50d1      	str	r1, [r2, r3]
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	23a4      	movs	r3, #164	; 0xa4
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	58d3      	ldr	r3, [r2, r3]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <CO_TPDO_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80034ec:	2301      	movs	r3, #1
 80034ee:	425b      	negs	r3, r3
 80034f0:	e0a7      	b.n	8003642 <CO_TPDO_init+0x382>
    }

    PDO->valid = valid;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f6:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 80034f8:	2512      	movs	r5, #18
 80034fa:	197b      	adds	r3, r7, r5
 80034fc:	2200      	movs	r2, #0
 80034fe:	801a      	strh	r2, [r3, #0]
    uint16_t eventTime = 0;
 8003500:	2610      	movs	r6, #16
 8003502:	19bb      	adds	r3, r7, r6
 8003504:	2200      	movs	r2, #0
 8003506:	801a      	strh	r2, [r3, #0]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003508:	2322      	movs	r3, #34	; 0x22
 800350a:	18fc      	adds	r4, r7, r3
 800350c:	197a      	adds	r2, r7, r5
 800350e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003510:	2301      	movs	r3, #1
 8003512:	2103      	movs	r1, #3
 8003514:	f7fe fd5d 	bl	8001fd2 <OD_get_u16>
 8003518:	0003      	movs	r3, r0
 800351a:	7023      	strb	r3, [r4, #0]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800351c:	2322      	movs	r3, #34	; 0x22
 800351e:	18fc      	adds	r4, r7, r3
 8003520:	19ba      	adds	r2, r7, r6
 8003522:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003524:	2301      	movs	r3, #1
 8003526:	2105      	movs	r1, #5
 8003528:	f7fe fd53 	bl	8001fd2 <OD_get_u16>
 800352c:	0003      	movs	r3, r0
 800352e:	7023      	strb	r3, [r4, #0]
    TPDO->inhibitTime_us = inhibitTime * 100;
 8003530:	197b      	adds	r3, r7, r5
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	001a      	movs	r2, r3
 8003536:	2364      	movs	r3, #100	; 0x64
 8003538:	4353      	muls	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	23ae      	movs	r3, #174	; 0xae
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	50d1      	str	r1, [r2, r3]
    TPDO->eventTime_us = eventTime * 1000;
 8003544:	19bb      	adds	r3, r7, r6
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	001a      	movs	r2, r3
 800354a:	0013      	movs	r3, r2
 800354c:	015b      	lsls	r3, r3, #5
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	189b      	adds	r3, r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	0019      	movs	r1, r3
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	23b0      	movs	r3, #176	; 0xb0
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	50d1      	str	r1, [r2, r3]
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	23ac      	movs	r3, #172	; 0xac
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2100      	movs	r1, #0
 8003568:	54d1      	strb	r1, [r2, r3]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	001a      	movs	r2, r3
 800356e:	3259      	adds	r2, #89	; 0x59
 8003570:	32ff      	adds	r2, #255	; 0xff
 8003572:	2322      	movs	r3, #34	; 0x22
 8003574:	18fc      	adds	r4, r7, r3
 8003576:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003578:	2301      	movs	r3, #1
 800357a:	2106      	movs	r1, #6
 800357c:	f7fe fd11 	bl	8001fa2 <OD_get_u8>
 8003580:	0003      	movs	r3, r0
 8003582:	7023      	strb	r3, [r4, #0]
    TPDO->SYNC = SYNC;
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	23aa      	movs	r3, #170	; 0xaa
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	6839      	ldr	r1, [r7, #0]
 800358c:	50d1      	str	r1, [r2, r3]
    TPDO->syncCounter = 255;
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	235a      	movs	r3, #90	; 0x5a
 8003592:	33ff      	adds	r3, #255	; 0xff
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	54d1      	strb	r1, [r2, r3]
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	238c      	movs	r3, #140	; 0x8c
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2100      	movs	r1, #0
 80035a0:	50d1      	str	r1, [r2, r3]
    PDO->OD = OD;
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	238e      	movs	r3, #142	; 0x8e
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	50d1      	str	r1, [r2, r3]
    PDO->CANdevIdx = CANdevTxIdx;
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	2350      	movs	r3, #80	; 0x50
 80035b0:	2108      	movs	r1, #8
 80035b2:	1879      	adds	r1, r7, r1
 80035b4:	18c9      	adds	r1, r1, r3
 80035b6:	2390      	movs	r3, #144	; 0x90
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	8809      	ldrh	r1, [r1, #0]
 80035bc:	52d1      	strh	r1, [r2, r3]
    PDO->preDefinedCanId = preDefinedCanId;
 80035be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	2208      	movs	r2, #8
 80035c4:	4694      	mov	ip, r2
 80035c6:	44bc      	add	ip, r7
 80035c8:	4463      	add	r3, ip
 80035ca:	2291      	movs	r2, #145	; 0x91
 80035cc:	0052      	lsls	r2, r2, #1
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	528b      	strh	r3, [r1, r2]
    PDO->configuredCanId = CAN_ID;
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	232a      	movs	r3, #42	; 0x2a
 80035d6:	18f9      	adds	r1, r7, r3
 80035d8:	2392      	movs	r3, #146	; 0x92
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	8809      	ldrh	r1, [r1, #0]
 80035de:	52d1      	strh	r1, [r2, r3]
    PDO->OD_communicationParam_ext.object = TPDO;
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	2394      	movs	r3, #148	; 0x94
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	2396      	movs	r3, #150	; 0x96
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4917      	ldr	r1, [pc, #92]	; (8003650 <CO_TPDO_init+0x390>)
 80035f2:	50d1      	str	r1, [r2, r3]
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	2398      	movs	r3, #152	; 0x98
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4916      	ldr	r1, [pc, #88]	; (8003654 <CO_TPDO_init+0x394>)
 80035fc:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.object = TPDO;
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	239c      	movs	r3, #156	; 0x9c
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	239e      	movs	r3, #158	; 0x9e
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4912      	ldr	r1, [pc, #72]	; (8003658 <CO_TPDO_init+0x398>)
 8003610:	50d1      	str	r1, [r2, r3]
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	23a0      	movs	r3, #160	; 0xa0
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4910      	ldr	r1, [pc, #64]	; (800365c <CO_TPDO_init+0x39c>)
 800361a:	50d1      	str	r1, [r2, r3]
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	3329      	adds	r3, #41	; 0x29
 8003620:	33ff      	adds	r3, #255	; 0xff
 8003622:	001a      	movs	r2, r3
 8003624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f7fe fca8 	bl	8001f7e <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	3339      	adds	r3, #57	; 0x39
 8003632:	33ff      	adds	r3, #255	; 0xff
 8003634:	001a      	movs	r2, r3
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	0011      	movs	r1, r2
 800363a:	0018      	movs	r0, r3
 800363c:	f7fe fc9f 	bl	8001f7e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003640:	2300      	movs	r3, #0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b00d      	add	sp, #52	; 0x34
 8003648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	0000ff80 	.word	0x0000ff80
 8003650:	08002555 	.word	0x08002555
 8003654:	08002f99 	.word	0x08002f99
 8003658:	0800186b 	.word	0x0800186b
 800365c:	080023ed 	.word	0x080023ed

08003660 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b091      	sub	sp, #68	; 0x44
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	23a4      	movs	r3, #164	; 0xa4
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	58d3      	ldr	r3, [r2, r3]
 8003674:	3305      	adds	r3, #5
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	23a6      	movs	r3, #166	; 0xa6
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	5cd3      	ldrb	r3, [r2, r3]
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <CO_TPDOsend+0x30>
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	23a6      	movs	r3, #166	; 0xa6
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	2bfd      	cmp	r3, #253	; 0xfd
 800368e:	d901      	bls.n	8003694 <CO_TPDOsend+0x34>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <CO_TPDOsend+0x36>
 8003694:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003698:	233b      	movs	r3, #59	; 0x3b
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e070      	b.n	8003784 <CO_TPDOsend+0x124>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80036a2:	233b      	movs	r3, #59	; 0x3b
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	0013      	movs	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3310      	adds	r3, #16
 80036b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	231f      	movs	r3, #31
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	701a      	strb	r2, [r3, #0]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 80036cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d901      	bls.n	80036d6 <CO_TPDOsend+0x76>
            ODdataLength = CO_PDO_MAX_SIZE;
 80036d2:	2308      	movs	r3, #8
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 80036d6:	231f      	movs	r3, #31
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036de:	429a      	cmp	r2, r3
 80036e0:	d909      	bls.n	80036f6 <CO_TPDOsend+0x96>
            memset(buf, 0, sizeof(buf));
 80036e2:	2410      	movs	r4, #16
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	2208      	movs	r2, #8
 80036e8:	2100      	movs	r1, #0
 80036ea:	0018      	movs	r0, r3
 80036ec:	f00b fd1a 	bl	800f124 <memset>
            dataTPDOCopy = buf;
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
 80036f4:	e001      	b.n	80036fa <CO_TPDOsend+0x9a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	695c      	ldr	r4, [r3, #20]
 8003704:	230c      	movs	r3, #12
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800370a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800370c:	6a38      	ldr	r0, [r7, #32]
 800370e:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003710:	211f      	movs	r1, #31
 8003712:	187b      	adds	r3, r7, r1
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 800371a:	187b      	adds	r3, r7, r1
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003720:	429a      	cmp	r2, r3
 8003722:	d907      	bls.n	8003734 <CO_TPDOsend+0xd4>
            memcpy(dataTPDO, buf, mappedLength);
 8003724:	187b      	adds	r3, r7, r1
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	2310      	movs	r3, #16
 800372a:	18f9      	adds	r1, r7, r3
 800372c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372e:	0018      	movs	r0, r3
 8003730:	f00b fcdc 	bl	800f0ec <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003734:	213b      	movs	r1, #59	; 0x3b
 8003736:	187b      	adds	r3, r7, r1
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	323c      	adds	r2, #60	; 0x3c
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	58d3      	ldr	r3, [r2, r3]
 8003742:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <CO_TPDOsend+0x10c>
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <CO_TPDOsend+0x10c>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	187b      	adds	r3, r7, r1
 8003756:	7819      	ldrb	r1, [r3, #0]
 8003758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800375a:	2388      	movs	r3, #136	; 0x88
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	1841      	adds	r1, r0, r1
 8003760:	18cb      	adds	r3, r1, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	b2da      	uxtb	r2, r3
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 800376c:	231f      	movs	r3, #31
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003778:	213b      	movs	r1, #59	; 0x3b
 800377a:	187b      	adds	r3, r7, r1
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	187b      	adds	r3, r7, r1
 8003780:	3201      	adds	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	7b5b      	ldrb	r3, [r3, #13]
 8003788:	223b      	movs	r2, #59	; 0x3b
 800378a:	18ba      	adds	r2, r7, r2
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d387      	bcc.n	80036a2 <CO_TPDOsend+0x42>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	23a8      	movs	r3, #168	; 0xa8
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	2100      	movs	r1, #0
 800379a:	50d1      	str	r1, [r2, r3]
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	23b0      	movs	r3, #176	; 0xb0
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	58d1      	ldr	r1, [r2, r3]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	23b4      	movs	r3, #180	; 0xb4
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	50d1      	str	r1, [r2, r3]
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	23ae      	movs	r3, #174	; 0xae
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	58d1      	ldr	r1, [r2, r3]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	23b2      	movs	r3, #178	; 0xb2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	50d1      	str	r1, [r2, r3]
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	6858      	ldr	r0, [r3, #4]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	23a4      	movs	r3, #164	; 0xa4
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	58d3      	ldr	r3, [r2, r3]
 80037c8:	0019      	movs	r1, r3
 80037ca:	f004 fbb1 	bl	8007f30 <CO_CANsend>
 80037ce:	0003      	movs	r3, r0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b011      	add	sp, #68	; 0x44
 80037d6:	bd90      	pop	{r4, r7, pc}

080037d8 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d100      	bne.n	80037f4 <CO_TPDO_process+0x1c>
 80037f2:	e113      	b.n	8003a1c <CO_TPDO_process+0x244>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d100      	bne.n	80037fc <CO_TPDO_process+0x24>
 80037fa:	e10f      	b.n	8003a1c <CO_TPDO_process+0x244>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	23a6      	movs	r3, #166	; 0xa6
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	5cd3      	ldrb	r3, [r2, r3]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <CO_TPDO_process+0x3c>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	23a6      	movs	r3, #166	; 0xa6
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	2bfd      	cmp	r3, #253	; 0xfd
 8003812:	d95a      	bls.n	80038ca <CO_TPDO_process+0xf2>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	23b0      	movs	r3, #176	; 0xb0
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	58d3      	ldr	r3, [r2, r3]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01d      	beq.n	800385c <CO_TPDO_process+0x84>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	23b4      	movs	r3, #180	; 0xb4
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	58d3      	ldr	r3, [r2, r3]
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d206      	bcs.n	800383c <CO_TPDO_process+0x64>
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	23b4      	movs	r3, #180	; 0xb4
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	58d2      	ldr	r2, [r2, r3]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	e000      	b.n	800383e <CO_TPDO_process+0x66>
 800383c:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	22b4      	movs	r2, #180	; 0xb4
 8003842:	0052      	lsls	r2, r2, #1
 8003844:	508b      	str	r3, [r1, r2]
                if (TPDO->eventTimer == 0) {
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	23b4      	movs	r3, #180	; 0xb4
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	58d3      	ldr	r3, [r2, r3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <CO_TPDO_process+0x84>
                    TPDO->sendRequest = true;
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	23a8      	movs	r3, #168	; 0xa8
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2101      	movs	r1, #1
 800385a:	50d1      	str	r1, [r2, r3]
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	23a8      	movs	r3, #168	; 0xa8
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	58d3      	ldr	r3, [r2, r3]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d130      	bne.n	80038ca <CO_TPDO_process+0xf2>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003868:	231f      	movs	r3, #31
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e024      	b.n	80038bc <CO_TPDO_process+0xe4>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003872:	211f      	movs	r1, #31
 8003874:	187b      	adds	r3, r7, r1
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	323c      	adds	r2, #60	; 0x3c
 800387c:	0092      	lsls	r2, r2, #2
 800387e:	58d3      	ldr	r3, [r2, r3]
 8003880:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <CO_TPDO_process+0xd8>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	187a      	adds	r2, r7, r1
 800388e:	7811      	ldrb	r1, [r2, #0]
 8003890:	69b8      	ldr	r0, [r7, #24]
 8003892:	2288      	movs	r2, #136	; 0x88
 8003894:	0052      	lsls	r2, r2, #1
 8003896:	1841      	adds	r1, r0, r1
 8003898:	188a      	adds	r2, r1, r2
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	4013      	ands	r3, r2
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <CO_TPDO_process+0xd8>
                            TPDO->sendRequest = true;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	23a8      	movs	r3, #168	; 0xa8
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2101      	movs	r1, #1
 80038ac:	50d1      	str	r1, [r2, r3]
                            break;
 80038ae:	e00c      	b.n	80038ca <CO_TPDO_process+0xf2>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80038b0:	211f      	movs	r1, #31
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	3201      	adds	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	7b5b      	ldrb	r3, [r3, #13]
 80038c0:	221f      	movs	r2, #31
 80038c2:	18ba      	adds	r2, r7, r2
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3d3      	bcc.n	8003872 <CO_TPDO_process+0x9a>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	23a6      	movs	r3, #166	; 0xa6
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	2bfd      	cmp	r3, #253	; 0xfd
 80038d4:	d925      	bls.n	8003922 <CO_TPDO_process+0x14a>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	23b2      	movs	r3, #178	; 0xb2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	58d3      	ldr	r3, [r2, r3]
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d206      	bcs.n	80038f2 <CO_TPDO_process+0x11a>
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	23b2      	movs	r3, #178	; 0xb2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	58d2      	ldr	r2, [r2, r3]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	e000      	b.n	80038f4 <CO_TPDO_process+0x11c>
 80038f2:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	22b2      	movs	r2, #178	; 0xb2
 80038f8:	0052      	lsls	r2, r2, #1
 80038fa:	508b      	str	r3, [r1, r2]

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	23a8      	movs	r3, #168	; 0xa8
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	58d3      	ldr	r3, [r2, r3]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d100      	bne.n	800390a <CO_TPDO_process+0x132>
 8003908:	e0a0      	b.n	8003a4c <CO_TPDO_process+0x274>
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	23b2      	movs	r3, #178	; 0xb2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	58d3      	ldr	r3, [r2, r3]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d000      	beq.n	8003918 <CO_TPDO_process+0x140>
 8003916:	e099      	b.n	8003a4c <CO_TPDO_process+0x274>
                CO_TPDOsend(TPDO);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	0018      	movs	r0, r3
 800391c:	f7ff fea0 	bl	8003660 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003920:	e094      	b.n	8003a4c <CO_TPDO_process+0x274>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	23aa      	movs	r3, #170	; 0xaa
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	58d3      	ldr	r3, [r2, r3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d100      	bne.n	8003930 <CO_TPDO_process+0x158>
 800392e:	e08d      	b.n	8003a4c <CO_TPDO_process+0x274>
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d100      	bne.n	8003938 <CO_TPDO_process+0x160>
 8003936:	e089      	b.n	8003a4c <CO_TPDO_process+0x274>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	23a6      	movs	r3, #166	; 0xa6
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <CO_TPDO_process+0x184>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	23a8      	movs	r3, #168	; 0xa8
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	58d3      	ldr	r3, [r2, r3]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d100      	bne.n	8003952 <CO_TPDO_process+0x17a>
 8003950:	e07c      	b.n	8003a4c <CO_TPDO_process+0x274>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff fe83 	bl	8003660 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800395a:	e077      	b.n	8003a4c <CO_TPDO_process+0x274>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	235a      	movs	r3, #90	; 0x5a
 8003960:	33ff      	adds	r3, #255	; 0xff
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	2bff      	cmp	r3, #255	; 0xff
 8003966:	d11e      	bne.n	80039a6 <CO_TPDO_process+0x1ce>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	23aa      	movs	r3, #170	; 0xaa
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	58d3      	ldr	r3, [r2, r3]
 8003970:	7c5b      	ldrb	r3, [r3, #17]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <CO_TPDO_process+0x1b6>
                        && TPDO->syncStartValue != 0
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	23ac      	movs	r3, #172	; 0xac
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <CO_TPDO_process+0x1b6>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	235a      	movs	r3, #90	; 0x5a
 8003986:	33ff      	adds	r3, #255	; 0xff
 8003988:	21fe      	movs	r1, #254	; 0xfe
 800398a:	54d1      	strb	r1, [r2, r3]
 800398c:	e00b      	b.n	80039a6 <CO_TPDO_process+0x1ce>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	23a6      	movs	r3, #166	; 0xa6
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	5cd3      	ldrb	r3, [r2, r3]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	b2d9      	uxtb	r1, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	235a      	movs	r3, #90	; 0x5a
 80039a2:	33ff      	adds	r3, #255	; 0xff
 80039a4:	54d1      	strb	r1, [r2, r3]
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	235a      	movs	r3, #90	; 0x5a
 80039aa:	33ff      	adds	r3, #255	; 0xff
 80039ac:	5cd3      	ldrb	r3, [r2, r3]
 80039ae:	2bfe      	cmp	r3, #254	; 0xfe
 80039b0:	d117      	bne.n	80039e2 <CO_TPDO_process+0x20a>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	23aa      	movs	r3, #170	; 0xaa
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	58d3      	ldr	r3, [r2, r3]
 80039ba:	7c9a      	ldrb	r2, [r3, #18]
 80039bc:	68f9      	ldr	r1, [r7, #12]
 80039be:	23ac      	movs	r3, #172	; 0xac
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d141      	bne.n	8003a4c <CO_TPDO_process+0x274>
                        TPDO->syncCounter = TPDO->transmissionType;
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	23a6      	movs	r3, #166	; 0xa6
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	5cd1      	ldrb	r1, [r2, r3]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	235a      	movs	r3, #90	; 0x5a
 80039d4:	33ff      	adds	r3, #255	; 0xff
 80039d6:	54d1      	strb	r1, [r2, r3]
                        CO_TPDOsend(TPDO);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7ff fe40 	bl	8003660 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80039e0:	e034      	b.n	8003a4c <CO_TPDO_process+0x274>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	235a      	movs	r3, #90	; 0x5a
 80039e6:	33ff      	adds	r3, #255	; 0xff
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b2d9      	uxtb	r1, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	235a      	movs	r3, #90	; 0x5a
 80039f2:	33ff      	adds	r3, #255	; 0xff
 80039f4:	54d1      	strb	r1, [r2, r3]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	235a      	movs	r3, #90	; 0x5a
 80039fa:	33ff      	adds	r3, #255	; 0xff
 80039fc:	5cd3      	ldrb	r3, [r2, r3]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d124      	bne.n	8003a4c <CO_TPDO_process+0x274>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	23a6      	movs	r3, #166	; 0xa6
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	5cd1      	ldrb	r1, [r2, r3]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	235a      	movs	r3, #90	; 0x5a
 8003a0e:	33ff      	adds	r3, #255	; 0xff
 8003a10:	54d1      	strb	r1, [r2, r3]
                    CO_TPDOsend(TPDO);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff fe23 	bl	8003660 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003a1a:	e017      	b.n	8003a4c <CO_TPDO_process+0x274>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	23a8      	movs	r3, #168	; 0xa8
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2101      	movs	r1, #1
 8003a24:	50d1      	str	r1, [r2, r3]
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	23b4      	movs	r3, #180	; 0xb4
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	50d1      	str	r1, [r2, r3]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	23b4      	movs	r3, #180	; 0xb4
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	58d1      	ldr	r1, [r2, r3]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	23b2      	movs	r3, #178	; 0xb2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	50d1      	str	r1, [r2, r3]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	235a      	movs	r3, #90	; 0x5a
 8003a44:	33ff      	adds	r3, #255	; 0xff
 8003a46:	21ff      	movs	r1, #255	; 0xff
 8003a48:	54d1      	strb	r1, [r2, r3]
#endif
    }
}
 8003a4a:	e000      	b.n	8003a4e <CO_TPDO_process+0x276>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003a4c:	46c0      	nop			; (mov r8, r8)
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b008      	add	sp, #32
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	781a      	ldrb	r2, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003a62:	210f      	movs	r1, #15
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	781b      	ldrb	r3, [r3, #0]
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b004      	add	sp, #16
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	230c      	movs	r3, #12
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2204      	movs	r2, #4
 8003a84:	0018      	movs	r0, r3
 8003a86:	f00b fb3a 	bl	800f0fe <memmove>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <OD_getIndex+0x14>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	e000      	b.n	8003aaa <OD_getIndex+0x16>
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <OD_mappable+0x1e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7c1b      	ldrb	r3, [r3, #16]
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	233c      	movs	r3, #60	; 0x3c
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d001      	beq.n	8003ad0 <OD_mappable+0x1e>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <OD_mappable+0x20>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <OD_extension_init>:
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <OD_extension_init+0x14>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e003      	b.n	8003af6 <OD_extension_init+0x1c>
    entry->extension = extension;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}

08003afe <OD_get_u8>:
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af02      	add	r7, sp, #8
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	200b      	movs	r0, #11
 8003b0c:	183b      	adds	r3, r7, r0
 8003b0e:	1c0a      	adds	r2, r1, #0
 8003b10:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	183b      	adds	r3, r7, r0
 8003b16:	7819      	ldrb	r1, [r3, #0]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f7fe f91a 	bl	8001d58 <OD_get_value>
 8003b24:	0003      	movs	r3, r0
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b004      	add	sp, #16
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <OD_get_u32>:
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af02      	add	r7, sp, #8
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	200b      	movs	r0, #11
 8003b3c:	183b      	adds	r3, r7, r0
 8003b3e:	1c0a      	adds	r2, r1, #0
 8003b40:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	183b      	adds	r3, r7, r0
 8003b46:	7819      	ldrb	r1, [r3, #0]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2304      	movs	r3, #4
 8003b50:	f7fe f902 	bl	8001d58 <OD_get_value>
 8003b54:	0003      	movs	r3, r0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	200b      	movs	r0, #11
 8003b6c:	183b      	adds	r3, r7, r0
 8003b6e:	1c0a      	adds	r2, r1, #0
 8003b70:	701a      	strb	r2, [r3, #0]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003b72:	1d3a      	adds	r2, r7, #4
 8003b74:	183b      	adds	r3, r7, r0
 8003b76:	7819      	ldrb	r1, [r3, #0]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2304      	movs	r3, #4
 8003b80:	f7fe f929 	bl	8001dd6 <OD_set_value>
 8003b84:	0003      	movs	r3, r0
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b004      	add	sp, #16
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003b9c:	2113      	movs	r1, #19
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	7912      	ldrb	r2, [r2, #4]
 8003ba4:	701a      	strb	r2, [r3, #0]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	3305      	adds	r3, #5
 8003baa:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d118      	bne.n	8003be6 <CO_SDO_receive+0x58>
        if (data[0] == 0x80) {
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d103      	bne.n	8003bc4 <CO_SDO_receive+0x36>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003bc2:	e010      	b.n	8003be6 <CO_SDO_receive+0x58>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <CO_SDO_receive+0x58>
            memcpy(SDO->CANrxData, data, DLC);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	333c      	adds	r3, #60	; 0x3c
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	2313      	movs	r3, #19
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0019      	movs	r1, r3
 8003bdc:	f00b fa86 	bl	800f0ec <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2201      	movs	r2, #1
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b006      	add	sp, #24
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	b08b      	sub	sp, #44	; 0x2c
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	1c0a      	adds	r2, r1, #0
 8003c04:	801a      	strh	r2, [r3, #0]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d106      	bne.n	8003c1e <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d101      	bne.n	8003c1e <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e064      	b.n	8003ce8 <CO_SDOserver_init_canRxTx+0xf8>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c22:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c28:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	db02      	blt.n	8003c36 <CO_SDOserver_init_canRxTx+0x46>
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	e000      	b.n	8003c38 <CO_SDOserver_init_canRxTx+0x48>
 8003c36:	2200      	movs	r2, #0
 8003c38:	2316      	movs	r3, #22
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	801a      	strh	r2, [r3, #0]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db02      	blt.n	8003c4a <CO_SDOserver_init_canRxTx+0x5a>
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	e000      	b.n	8003c4c <CO_SDOserver_init_canRxTx+0x5c>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2114      	movs	r1, #20
 8003c4e:	187b      	adds	r3, r7, r1
 8003c50:	801a      	strh	r2, [r3, #0]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8003c52:	2316      	movs	r3, #22
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <CO_SDOserver_init_canRxTx+0x7c>
 8003c5c:	187b      	adds	r3, r7, r1
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <CO_SDOserver_init_canRxTx+0x7c>
        SDO->valid = true;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	611a      	str	r2, [r3, #16]
 8003c6a:	e00a      	b.n	8003c82 <CO_SDOserver_init_canRxTx+0x92>
    }
    else {
        idC2S = 0;
 8003c6c:	2316      	movs	r3, #22
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	801a      	strh	r2, [r3, #0]
        idS2C = 0;
 8003c74:	2314      	movs	r3, #20
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2200      	movs	r2, #0
 8003c7a:	801a      	strh	r2, [r3, #0]
        SDO->valid = false;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003c82:	2613      	movs	r6, #19
 8003c84:	19bc      	adds	r4, r7, r6
 8003c86:	4d1a      	ldr	r5, [pc, #104]	; (8003cf0 <CO_SDOserver_init_canRxTx+0x100>)
 8003c88:	2316      	movs	r3, #22
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	1dbb      	adds	r3, r7, #6
 8003c90:	8819      	ldrh	r1, [r3, #0]
 8003c92:	68b8      	ldr	r0, [r7, #8]
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <CO_SDOserver_init_canRxTx+0x104>)
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	002b      	movs	r3, r5
 8003ca2:	f004 f815 	bl	8007cd0 <CO_CANrxBufferInit>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	7023      	strb	r3, [r4, #0]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	2314      	movs	r3, #20
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	881a      	ldrh	r2, [r3, #0]
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	8819      	ldrh	r1, [r3, #0]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f004 f86d 	bl	8007da0 <CO_CANtxBufferInit>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <CO_SDOserver_init_canRxTx+0xf0>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003cd4:	19bb      	adds	r3, r7, r6
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	701a      	strb	r2, [r3, #0]
        SDO->valid = false;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003ce0:	2313      	movs	r3, #19
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b25b      	sxtb	r3, r3
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b007      	add	sp, #28
 8003cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf0:	000007ff 	.word	0x000007ff
 8003cf4:	08003b8f 	.word	0x08003b8f

08003cf8 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b08e      	sub	sp, #56	; 0x38
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <OD_write_1201_additional+0x20>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <OD_write_1201_additional+0x20>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003d18:	2309      	movs	r3, #9
 8003d1a:	e13a      	b.n	8003f92 <OD_write_1201_additional+0x29a>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	7c5b      	ldrb	r3, [r3, #17]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d100      	bne.n	8003d2c <OD_write_1201_additional+0x34>
 8003d2a:	e110      	b.n	8003f4e <OD_write_1201_additional+0x256>
 8003d2c:	dd00      	ble.n	8003d30 <OD_write_1201_additional+0x38>
 8003d2e:	e126      	b.n	8003f7e <OD_write_1201_additional+0x286>
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d100      	bne.n	8003d36 <OD_write_1201_additional+0x3e>
 8003d34:	e089      	b.n	8003e4a <OD_write_1201_additional+0x152>
 8003d36:	dd00      	ble.n	8003d3a <OD_write_1201_additional+0x42>
 8003d38:	e121      	b.n	8003f7e <OD_write_1201_additional+0x286>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <OD_write_1201_additional+0x4c>
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d002      	beq.n	8003d48 <OD_write_1201_additional+0x50>
 8003d42:	e11c      	b.n	8003f7e <OD_write_1201_additional+0x286>
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8003d44:	2304      	movs	r3, #4
 8003d46:	e124      	b.n	8003f92 <OD_write_1201_additional+0x29a>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff fe92 	bl	8003a74 <CO_getUint32>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	2116      	movs	r1, #22
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	0552      	lsls	r2, r2, #21
 8003d5e:	0d52      	lsrs	r2, r2, #21
 8003d60:	801a      	strh	r2, [r3, #0]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	2014      	movs	r0, #20
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	0552      	lsls	r2, r2, #21
 8003d6e:	0d52      	lsrs	r2, r2, #21
 8003d70:	801a      	strh	r2, [r3, #0]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	0fdb      	lsrs	r3, r3, #31
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4a87      	ldr	r2, [pc, #540]	; (8003f9c <OD_write_1201_additional+0x2a4>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	d14e      	bne.n	8003e22 <OD_write_1201_additional+0x12a>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <OD_write_1201_additional+0xa6>
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <OD_write_1201_additional+0xa6>
 8003d92:	187a      	adds	r2, r7, r1
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d141      	bne.n	8003e22 <OD_write_1201_additional+0x12a>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d040      	beq.n	8003e26 <OD_write_1201_additional+0x12e>
 8003da4:	2116      	movs	r1, #22
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	2b7f      	cmp	r3, #127	; 0x7f
 8003dac:	d939      	bls.n	8003e22 <OD_write_1201_additional+0x12a>
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d905      	bls.n	8003dc6 <OD_write_1201_additional+0xce>
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	881a      	ldrh	r2, [r3, #0]
 8003dbe:	23c0      	movs	r3, #192	; 0xc0
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d92d      	bls.n	8003e22 <OD_write_1201_additional+0x12a>
 8003dc6:	2116      	movs	r1, #22
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	23b0      	movs	r3, #176	; 0xb0
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d905      	bls.n	8003de0 <OD_write_1201_additional+0xe8>
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	23c0      	movs	r3, #192	; 0xc0
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d320      	bcc.n	8003e22 <OD_write_1201_additional+0x12a>
 8003de0:	2116      	movs	r1, #22
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	23c0      	movs	r3, #192	; 0xc0
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d905      	bls.n	8003dfa <OD_write_1201_additional+0x102>
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	23d0      	movs	r3, #208	; 0xd0
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d313      	bcc.n	8003e22 <OD_write_1201_additional+0x12a>
 8003dfa:	2116      	movs	r1, #22
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	23dc      	movs	r3, #220	; 0xdc
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d305      	bcc.n	8003e14 <OD_write_1201_additional+0x11c>
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	23e0      	movs	r3, #224	; 0xe0
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d306      	bcc.n	8003e22 <OD_write_1201_additional+0x12a>
 8003e14:	2316      	movs	r3, #22
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	23e0      	movs	r3, #224	; 0xe0
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d901      	bls.n	8003e26 <OD_write_1201_additional+0x12e>
            ) {
                return ODR_INVALID_VALUE;
 8003e22:	230f      	movs	r3, #15
 8003e24:	e0b5      	b.n	8003f92 <OD_write_1201_additional+0x29a>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2248      	movs	r2, #72	; 0x48
 8003e2e:	5a9a      	ldrh	r2, [r3, r2]
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	204a      	movs	r0, #74	; 0x4a
 8003e34:	5a1c      	ldrh	r4, [r3, r0]
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	0023      	movs	r3, r4
 8003e44:	f7ff fed4 	bl	8003bf0 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8003e48:	e09c      	b.n	8003f84 <OD_write_1201_additional+0x28c>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff fe11 	bl	8003a74 <CO_getUint32>
 8003e52:	0003      	movs	r3, r0
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	2122      	movs	r1, #34	; 0x22
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	0552      	lsls	r2, r2, #21
 8003e60:	0d52      	lsrs	r2, r2, #21
 8003e62:	801a      	strh	r2, [r3, #0]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	2020      	movs	r0, #32
 8003e6c:	183b      	adds	r3, r7, r0
 8003e6e:	0552      	lsls	r2, r2, #21
 8003e70:	0d52      	lsrs	r2, r2, #21
 8003e72:	801a      	strh	r2, [r3, #0]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	43db      	mvns	r3, r3
 8003e78:	0fdb      	lsrs	r3, r3, #31
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	4a46      	ldr	r2, [pc, #280]	; (8003f9c <OD_write_1201_additional+0x2a4>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	d14e      	bne.n	8003f24 <OD_write_1201_additional+0x22c>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <OD_write_1201_additional+0x1a8>
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <OD_write_1201_additional+0x1a8>
 8003e94:	187a      	adds	r2, r7, r1
 8003e96:	183b      	adds	r3, r7, r0
 8003e98:	8812      	ldrh	r2, [r2, #0]
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d141      	bne.n	8003f24 <OD_write_1201_additional+0x22c>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d040      	beq.n	8003f28 <OD_write_1201_additional+0x230>
 8003ea6:	2122      	movs	r1, #34	; 0x22
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	2b7f      	cmp	r3, #127	; 0x7f
 8003eae:	d939      	bls.n	8003f24 <OD_write_1201_additional+0x22c>
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d905      	bls.n	8003ec8 <OD_write_1201_additional+0x1d0>
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	23c0      	movs	r3, #192	; 0xc0
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d92d      	bls.n	8003f24 <OD_write_1201_additional+0x22c>
 8003ec8:	2122      	movs	r1, #34	; 0x22
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	23b0      	movs	r3, #176	; 0xb0
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d905      	bls.n	8003ee2 <OD_write_1201_additional+0x1ea>
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	23c0      	movs	r3, #192	; 0xc0
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d320      	bcc.n	8003f24 <OD_write_1201_additional+0x22c>
 8003ee2:	2122      	movs	r1, #34	; 0x22
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	23c0      	movs	r3, #192	; 0xc0
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d905      	bls.n	8003efc <OD_write_1201_additional+0x204>
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	23d0      	movs	r3, #208	; 0xd0
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d313      	bcc.n	8003f24 <OD_write_1201_additional+0x22c>
 8003efc:	2122      	movs	r1, #34	; 0x22
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	23dc      	movs	r3, #220	; 0xdc
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d305      	bcc.n	8003f16 <OD_write_1201_additional+0x21e>
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	23e0      	movs	r3, #224	; 0xe0
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d306      	bcc.n	8003f24 <OD_write_1201_additional+0x22c>
 8003f16:	2322      	movs	r3, #34	; 0x22
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	23e0      	movs	r3, #224	; 0xe0
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d901      	bls.n	8003f28 <OD_write_1201_additional+0x230>
            ) {
                return ODR_INVALID_VALUE;
 8003f24:	230f      	movs	r3, #15
 8003f26:	e034      	b.n	8003f92 <OD_write_1201_additional+0x29a>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	2248      	movs	r2, #72	; 0x48
 8003f30:	5a9c      	ldrh	r4, [r3, r2]
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	224a      	movs	r2, #74	; 0x4a
 8003f36:	5a9d      	ldrh	r5, [r3, r2]
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	9201      	str	r2, [sp, #4]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	002b      	movs	r3, r5
 8003f46:	0022      	movs	r2, r4
 8003f48:	f7ff fe52 	bl	8003bf0 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8003f4c:	e01a      	b.n	8003f84 <OD_write_1201_additional+0x28c>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d001      	beq.n	8003f58 <OD_write_1201_additional+0x260>
                return ODR_TYPE_MISMATCH;
 8003f54:	230b      	movs	r3, #11
 8003f56:	e01c      	b.n	8003f92 <OD_write_1201_additional+0x29a>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003f58:	252b      	movs	r5, #43	; 0x2b
 8003f5a:	197c      	adds	r4, r7, r5
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fd79 	bl	8003a56 <CO_getUint8>
 8003f64:	0003      	movs	r3, r0
 8003f66:	7023      	strb	r3, [r4, #0]
            if (nodeId < 1 || nodeId > 127) {
 8003f68:	197b      	adds	r3, r7, r5
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <OD_write_1201_additional+0x282>
 8003f70:	197b      	adds	r3, r7, r5
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da03      	bge.n	8003f82 <OD_write_1201_additional+0x28a>
                return ODR_INVALID_VALUE;
 8003f7a:	230f      	movs	r3, #15
 8003f7c:	e009      	b.n	8003f92 <OD_write_1201_additional+0x29a>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8003f7e:	230e      	movs	r3, #14
 8003f80:	e007      	b.n	8003f92 <OD_write_1201_additional+0x29a>
            break;
 8003f82:	46c0      	nop			; (mov r8, r8)
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7fd fccc 	bl	8001928 <OD_writeOriginal>
 8003f90:	0003      	movs	r3, r0
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b00c      	add	sp, #48	; 0x30
 8003f98:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	3ffff800 	.word	0x3ffff800

08003fa0 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	b08d      	sub	sp, #52	; 0x34
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	001a      	movs	r2, r3
 8003fae:	1cfb      	adds	r3, r7, #3
 8003fb0:	701a      	strb	r2, [r3, #0]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <CO_SDOserver_init+0x2a>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <CO_SDOserver_init+0x2a>
 8003fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <CO_SDOserver_init+0x2a>
 8003fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <CO_SDOserver_init+0x30>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	425b      	negs	r3, r3
 8003fce:	e14a      	b.n	8004266 <CO_SDOserver_init+0x2c6>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1cfa      	adds	r2, r7, #3
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003fde:	2338      	movs	r3, #56	; 0x38
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4694      	mov	ip, r2
 8003fe4:	44bc      	add	ip, r7
 8003fe6:	4463      	add	r3, ip
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	0013      	movs	r3, r2
 8003fec:	015b      	lsls	r3, r3, #5
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	189b      	adds	r3, r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	001a      	movs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d123      	bne.n	8004050 <CO_SDOserver_init+0xb0>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004008:	1cfb      	adds	r3, r7, #3
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <CO_SDOserver_init+0x7a>
 8004010:	1cfb      	adds	r3, r7, #3
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b25b      	sxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	da02      	bge.n	8004020 <CO_SDOserver_init+0x80>
 800401a:	2301      	movs	r3, #1
 800401c:	425b      	negs	r3, r3
 800401e:	e122      	b.n	8004266 <CO_SDOserver_init+0x2c6>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8004020:	1cfb      	adds	r3, r7, #3
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	2326      	movs	r3, #38	; 0x26
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	21c0      	movs	r1, #192	; 0xc0
 800402c:	00c9      	lsls	r1, r1, #3
 800402e:	468c      	mov	ip, r1
 8004030:	4462      	add	r2, ip
 8004032:	801a      	strh	r2, [r3, #0]
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004034:	1cfb      	adds	r3, r7, #3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b29a      	uxth	r2, r3
 800403a:	2324      	movs	r3, #36	; 0x24
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	21b0      	movs	r1, #176	; 0xb0
 8004040:	00c9      	lsls	r1, r1, #3
 8004042:	468c      	mov	ip, r1
 8004044:	4462      	add	r2, ip
 8004046:	801a      	strh	r2, [r3, #0]
        SDO->valid = true;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	611a      	str	r2, [r3, #16]
 800404e:	e0d6      	b.n	80041fe <CO_SDOserver_init+0x25e>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8004050:	2522      	movs	r5, #34	; 0x22
 8004052:	197c      	adds	r4, r7, r5
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff fd1c 	bl	8003a94 <OD_getIndex>
 800405c:	0003      	movs	r3, r0
 800405e:	8023      	strh	r3, [r4, #0]

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8004060:	197b      	adds	r3, r7, r5
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	2390      	movs	r3, #144	; 0x90
 8004066:	015b      	lsls	r3, r3, #5
 8004068:	429a      	cmp	r2, r3
 800406a:	d131      	bne.n	80040d0 <CO_SDOserver_init+0x130>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 800406c:	1cfb      	adds	r3, r7, #3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <CO_SDOserver_init+0xde>
 8004074:	1cfb      	adds	r3, r7, #3
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b25b      	sxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	da02      	bge.n	8004084 <CO_SDOserver_init+0xe4>
 800407e:	2301      	movs	r3, #1
 8004080:	425b      	negs	r3, r3
 8004082:	e0f0      	b.n	8004266 <CO_SDOserver_init+0x2c6>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8004084:	1cfb      	adds	r3, r7, #3
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	b29a      	uxth	r2, r3
 800408a:	2126      	movs	r1, #38	; 0x26
 800408c:	187b      	adds	r3, r7, r1
 800408e:	20c0      	movs	r0, #192	; 0xc0
 8004090:	00c0      	lsls	r0, r0, #3
 8004092:	4684      	mov	ip, r0
 8004094:	4462      	add	r2, ip
 8004096:	801a      	strh	r2, [r3, #0]
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004098:	1cfb      	adds	r3, r7, #3
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b29a      	uxth	r2, r3
 800409e:	2424      	movs	r4, #36	; 0x24
 80040a0:	193b      	adds	r3, r7, r4
 80040a2:	20b0      	movs	r0, #176	; 0xb0
 80040a4:	00c0      	lsls	r0, r0, #3
 80040a6:	4684      	mov	ip, r0
 80040a8:	4462      	add	r2, ip
 80040aa:	801a      	strh	r2, [r3, #0]
            SDO->valid = true;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	881a      	ldrh	r2, [r3, #0]
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	2301      	movs	r3, #1
 80040ba:	2101      	movs	r1, #1
 80040bc:	f7ff fd4f 	bl	8003b5e <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80040c0:	193b      	adds	r3, r7, r4
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	2301      	movs	r3, #1
 80040c8:	2102      	movs	r1, #2
 80040ca:	f7ff fd48 	bl	8003b5e <OD_set_u32>
 80040ce:	e096      	b.n	80041fe <CO_SDOserver_init+0x25e>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 80040d0:	2122      	movs	r1, #34	; 0x22
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	2390      	movs	r3, #144	; 0x90
 80040d8:	015b      	lsls	r3, r3, #5
 80040da:	429a      	cmp	r2, r3
 80040dc:	d800      	bhi.n	80040e0 <CO_SDOserver_init+0x140>
 80040de:	e08a      	b.n	80041f6 <CO_SDOserver_init+0x256>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 80040e0:	187b      	adds	r3, r7, r1
 80040e2:	881a      	ldrh	r2, [r3, #0]
 80040e4:	2394      	movs	r3, #148	; 0x94
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d300      	bcc.n	80040ee <CO_SDOserver_init+0x14e>
 80040ec:	e083      	b.n	80041f6 <CO_SDOserver_init+0x256>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 80040ee:	2621      	movs	r6, #33	; 0x21
 80040f0:	19bc      	adds	r4, r7, r6
 80040f2:	251d      	movs	r5, #29
 80040f4:	197a      	adds	r2, r7, r5
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	2301      	movs	r3, #1
 80040fa:	2100      	movs	r1, #0
 80040fc:	f7ff fcff 	bl	8003afe <OD_get_u8>
 8004100:	0003      	movs	r3, r0
 8004102:	7023      	strb	r3, [r4, #0]
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8004104:	2320      	movs	r3, #32
 8004106:	18fc      	adds	r4, r7, r3
 8004108:	2318      	movs	r3, #24
 800410a:	18fa      	adds	r2, r7, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	2301      	movs	r3, #1
 8004110:	2101      	movs	r1, #1
 8004112:	f7ff fd0c 	bl	8003b2e <OD_get_u32>
 8004116:	0003      	movs	r3, r0
 8004118:	7023      	strb	r3, [r4, #0]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 800411a:	231f      	movs	r3, #31
 800411c:	18fc      	adds	r4, r7, r3
 800411e:	2314      	movs	r3, #20
 8004120:	18fa      	adds	r2, r7, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	2301      	movs	r3, #1
 8004126:	2102      	movs	r1, #2
 8004128:	f7ff fd01 	bl	8003b2e <OD_get_u32>
 800412c:	0003      	movs	r3, r0
 800412e:	7023      	strb	r3, [r4, #0]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8004130:	19bb      	adds	r3, r7, r6
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b25b      	sxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d113      	bne.n	8004162 <CO_SDOserver_init+0x1c2>
 800413a:	197b      	adds	r3, r7, r5
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <CO_SDOserver_init+0x1aa>
 8004142:	197b      	adds	r3, r7, r5
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b03      	cmp	r3, #3
 8004148:	d10b      	bne.n	8004162 <CO_SDOserver_init+0x1c2>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 800414a:	2320      	movs	r3, #32
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b25b      	sxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <CO_SDOserver_init+0x1c2>
 8004156:	231f      	movs	r3, #31
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b25b      	sxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <CO_SDOserver_init+0x1d8>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8004162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <CO_SDOserver_init+0x1d2>
 8004168:	2322      	movs	r3, #34	; 0x22
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	881a      	ldrh	r2, [r3, #0]
 800416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004170:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8004172:	230c      	movs	r3, #12
 8004174:	425b      	negs	r3, r3
 8004176:	e076      	b.n	8004266 <CO_SDOserver_init+0x2c6>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	db05      	blt.n	800418a <CO_SDOserver_init+0x1ea>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8004182:	055b      	lsls	r3, r3, #21
 8004184:	0d5b      	lsrs	r3, r3, #21
 8004186:	b29a      	uxth	r2, r3
 8004188:	e000      	b.n	800418c <CO_SDOserver_init+0x1ec>
 800418a:	2200      	movs	r2, #0
 800418c:	2326      	movs	r3, #38	; 0x26
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	801a      	strh	r2, [r3, #0]
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db05      	blt.n	80041a4 <CO_SDOserver_init+0x204>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 800419c:	055b      	lsls	r3, r3, #21
 800419e:	0d5b      	lsrs	r3, r3, #21
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	e000      	b.n	80041a6 <CO_SDOserver_init+0x206>
 80041a4:	2200      	movs	r2, #0
 80041a6:	2324      	movs	r3, #36	; 0x24
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	801a      	strh	r2, [r3, #0]

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a2e      	ldr	r2, [pc, #184]	; (8004270 <CO_SDOserver_init+0x2d0>)
 80041b6:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a2e      	ldr	r2, [pc, #184]	; (8004274 <CO_SDOserver_init+0x2d4>)
 80041bc:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3354      	adds	r3, #84	; 0x54
 80041c2:	001a      	movs	r2, r3
 80041c4:	251e      	movs	r5, #30
 80041c6:	197c      	adds	r4, r7, r5
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0011      	movs	r1, r2
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff fc84 	bl	8003ada <OD_extension_init>
 80041d2:	0003      	movs	r3, r0
 80041d4:	7023      	strb	r3, [r4, #0]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 80041d6:	197b      	adds	r3, r7, r5
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <CO_SDOserver_init+0x25c>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80041e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <CO_SDOserver_init+0x250>
 80041e6:	2322      	movs	r3, #34	; 0x22
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80041f0:	230c      	movs	r3, #12
 80041f2:	425b      	negs	r3, r3
 80041f4:	e037      	b.n	8004266 <CO_SDOserver_init+0x2c6>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80041f6:	2301      	movs	r3, #1
 80041f8:	425b      	negs	r3, r3
 80041fa:	e034      	b.n	8004266 <CO_SDOserver_init+0x2c6>
        ) {
 80041fc:	46c0      	nop			; (mov r8, r8)
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2040      	movs	r0, #64	; 0x40
 800420e:	2508      	movs	r5, #8
 8004210:	197a      	adds	r2, r7, r5
 8004212:	1812      	adds	r2, r2, r0
 8004214:	2148      	movs	r1, #72	; 0x48
 8004216:	8812      	ldrh	r2, [r2, #0]
 8004218:	525a      	strh	r2, [r3, r1]
    SDO->CANdevTxIdx = CANdevTxIdx;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2448      	movs	r4, #72	; 0x48
 800421e:	197a      	adds	r2, r7, r5
 8004220:	1912      	adds	r2, r2, r4
 8004222:	214a      	movs	r1, #74	; 0x4a
 8004224:	8812      	ldrh	r2, [r2, #0]
 8004226:	525a      	strh	r2, [r3, r1]
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004238:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 800423a:	2326      	movs	r3, #38	; 0x26
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	2224      	movs	r2, #36	; 0x24
 8004242:	18ba      	adds	r2, r7, r2
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	002e      	movs	r6, r5
 8004248:	1979      	adds	r1, r7, r5
 800424a:	1909      	adds	r1, r1, r4
 800424c:	880d      	ldrh	r5, [r1, #0]
 800424e:	19b9      	adds	r1, r7, r6
 8004250:	1809      	adds	r1, r1, r0
 8004252:	880c      	ldrh	r4, [r1, #0]
 8004254:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	9201      	str	r2, [sp, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	002b      	movs	r3, r5
 800425e:	0022      	movs	r2, r4
 8004260:	f7ff fcc6 	bl	8003bf0 <CO_SDOserver_init_canRxTx>
 8004264:	0003      	movs	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b00b      	add	sp, #44	; 0x2c
 800426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	0800186b 	.word	0x0800186b
 8004274:	08003cf9 	.word	0x08003cf9

08004278 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8004278:	b5b0      	push	{r4, r5, r7, lr}
 800427a:	b08c      	sub	sp, #48	; 0x30
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	0019      	movs	r1, r3
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	1c0a      	adds	r2, r1, #0
 800428c:	801a      	strh	r2, [r3, #0]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	22a0      	movs	r2, #160	; 0xa0
 8004292:	589b      	ldr	r3, [r3, r2]
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (SDO->finished) {
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	2b00      	cmp	r3, #0
 800429c:	d100      	bne.n	80042a0 <validateAndWriteToOD+0x28>
 800429e:	e07d      	b.n	800439c <validateAndWriteToOD+0x124>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <validateAndWriteToOD+0x5c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d00f      	beq.n	80042d4 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80042bc:	429a      	cmp	r2, r3
 80042be:	d901      	bls.n	80042c4 <validateAndWriteToOD+0x4c>
 80042c0:	4a7b      	ldr	r2, [pc, #492]	; (80044b0 <validateAndWriteToOD+0x238>)
 80042c2:	e000      	b.n	80042c6 <validateAndWriteToOD+0x4e>
 80042c4:	4a7b      	ldr	r2, [pc, #492]	; (80044b4 <validateAndWriteToOD+0x23c>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	751a      	strb	r2, [r3, #20]
            return false;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e0e9      	b.n	80044a8 <validateAndWriteToOD+0x230>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2228      	movs	r2, #40	; 0x28
 80042de:	5c9b      	ldrb	r3, [r3, r2]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da3e      	bge.n	8004364 <validateAndWriteToOD+0xec>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <validateAndWriteToOD+0x7e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d936      	bls.n	8004364 <validateAndWriteToOD+0xec>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22a0      	movs	r2, #160	; 0xa0
 80042fa:	589b      	ldr	r3, [r3, r2]
 80042fc:	3302      	adds	r3, #2
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d830      	bhi.n	8004364 <validateAndWriteToOD+0xec>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22a0      	movs	r2, #160	; 0xa0
 8004306:	589b      	ldr	r3, [r3, r2]
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	20a0      	movs	r0, #160	; 0xa0
 800430e:	5011      	str	r1, [r2, r0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	217c      	movs	r1, #124	; 0x7c
 8004314:	18d3      	adds	r3, r2, r3
 8004316:	185b      	adds	r3, r3, r1
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
            SDO->sizeTran++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <validateAndWriteToOD+0xbe>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004332:	429a      	cmp	r2, r3
 8004334:	d911      	bls.n	800435a <validateAndWriteToOD+0xe2>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22a0      	movs	r2, #160	; 0xa0
 800433a:	589b      	ldr	r3, [r3, r2]
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	20a0      	movs	r0, #160	; 0xa0
 8004342:	5011      	str	r1, [r2, r0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	217c      	movs	r1, #124	; 0x7c
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	185b      	adds	r3, r3, r1
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
                SDO->sizeTran++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
 8004362:	e02d      	b.n	80043c0 <validateAndWriteToOD+0x148>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <validateAndWriteToOD+0xfc>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
 8004372:	e025      	b.n	80043c0 <validateAndWriteToOD+0x148>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437a:	429a      	cmp	r2, r3
 800437c:	d020      	beq.n	80043c0 <validateAndWriteToOD+0x148>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004384:	429a      	cmp	r2, r3
 8004386:	d201      	bcs.n	800438c <validateAndWriteToOD+0x114>
 8004388:	4a49      	ldr	r2, [pc, #292]	; (80044b0 <validateAndWriteToOD+0x238>)
 800438a:	e000      	b.n	800438e <validateAndWriteToOD+0x116>
 800438c:	4a49      	ldr	r2, [pc, #292]	; (80044b4 <validateAndWriteToOD+0x23c>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	751a      	strb	r2, [r3, #20]
            return false;
 8004398:	2300      	movs	r3, #0
 800439a:	e085      	b.n	80044a8 <validateAndWriteToOD+0x230>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <validateAndWriteToOD+0x148>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d907      	bls.n	80043c0 <validateAndWriteToOD+0x148>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a3f      	ldr	r2, [pc, #252]	; (80044b0 <validateAndWriteToOD+0x238>)
 80043b4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	751a      	strb	r2, [r3, #20]
            return false;
 80043bc:	2300      	movs	r3, #0
 80043be:	e073      	b.n	80044a8 <validateAndWriteToOD+0x230>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3318      	adds	r3, #24
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff fb72 	bl	8003ab2 <OD_mappable>
 80043ce:	0003      	movs	r3, r0
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <validateAndWriteToOD+0x172>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043dc:	f3ef 8210 	mrs	r2, PRIMASK
 80043e0:	61fa      	str	r2, [r7, #28]
  return(result);
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80043e6:	b672      	cpsid	i
}
 80043e8:	46c0      	nop			; (mov r8, r8)
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3318      	adds	r3, #24
 80043f2:	0018      	movs	r0, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	337c      	adds	r3, #124	; 0x7c
 80043f8:	0019      	movs	r1, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	22a0      	movs	r2, #160	; 0xa0
 80043fe:	589a      	ldr	r2, [r3, r2]
 8004400:	2323      	movs	r3, #35	; 0x23
 8004402:	18fc      	adds	r4, r7, r3
 8004404:	2314      	movs	r3, #20
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	47a8      	blx	r5
 800440a:	0003      	movs	r3, r0
 800440c:	7023      	strb	r3, [r4, #0]
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <validateAndWriteToOD+0x1ac>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f383 8810 	msr	PRIMASK, r3
}
 8004422:	46c0      	nop			; (mov r8, r8)

    SDO->bufOffsetWr = 0;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	22a0      	movs	r2, #160	; 0xa0
 8004428:	2100      	movs	r1, #0
 800442a:	5099      	str	r1, [r3, r2]

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 800442c:	2223      	movs	r2, #35	; 0x23
 800442e:	18bb      	adds	r3, r7, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b25b      	sxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <validateAndWriteToOD+0x1e6>
 8004438:	18bb      	adds	r3, r7, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b25b      	sxtb	r3, r3
 800443e:	3301      	adds	r3, #1
 8004440:	d00d      	beq.n	800445e <validateAndWriteToOD+0x1e6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004442:	18bb      	adds	r3, r7, r2
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b25b      	sxtb	r3, r3
 8004448:	0018      	movs	r0, r3
 800444a:	f7fd fc67 	bl	8001d1c <OD_getSDOabCode>
 800444e:	0002      	movs	r2, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	751a      	strb	r2, [r3, #20]
        return false;
 800445a:	2300      	movs	r3, #0
 800445c:	e024      	b.n	80044a8 <validateAndWriteToOD+0x230>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <validateAndWriteToOD+0x20a>
 8004466:	2323      	movs	r3, #35	; 0x23
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b25b      	sxtb	r3, r3
 800446e:	3301      	adds	r3, #1
 8004470:	d107      	bne.n	8004482 <validateAndWriteToOD+0x20a>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <validateAndWriteToOD+0x23c>)
 8004476:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	751a      	strb	r2, [r3, #20]
        return false;
 800447e:	2300      	movs	r3, #0
 8004480:	e012      	b.n	80044a8 <validateAndWriteToOD+0x230>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <validateAndWriteToOD+0x22e>
 800448a:	2323      	movs	r3, #35	; 0x23
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b25b      	sxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <validateAndWriteToOD+0x22e>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <validateAndWriteToOD+0x238>)
 800449a:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	751a      	strb	r2, [r3, #20]
        return false;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <validateAndWriteToOD+0x230>
    }

    return true;
 80044a6:	2301      	movs	r3, #1
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b00c      	add	sp, #48	; 0x30
 80044ae:	bdb0      	pop	{r4, r5, r7, pc}
 80044b0:	06070012 	.word	0x06070012
 80044b4:	06070013 	.word	0x06070013

080044b8 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 80044b8:	b5b0      	push	{r4, r5, r7, lr}
 80044ba:	b08e      	sub	sp, #56	; 0x38
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	22a0      	movs	r2, #160	; 0xa0
 80044ca:	589a      	ldr	r2, [r3, r2]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	21a4      	movs	r1, #164	; 0xa4
 80044d0:	585b      	ldr	r3, [r3, r1]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d000      	beq.n	80044e0 <readFromOd+0x28>
 80044de:	e0b9      	b.n	8004654 <readFromOd+0x19c>
 80044e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d300      	bcc.n	80044ea <readFromOd+0x32>
 80044e8:	e0b4      	b.n	8004654 <readFromOd+0x19c>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	337c      	adds	r3, #124	; 0x7c
 80044ee:	0018      	movs	r0, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	337c      	adds	r3, #124	; 0x7c
 80044f4:	001a      	movs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	21a4      	movs	r1, #164	; 0xa4
 80044fa:	585b      	ldr	r3, [r3, r1]
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004500:	0019      	movs	r1, r3
 8004502:	f00a fdfc 	bl	800f0fe <memmove>
        SDO->bufOffsetRd = 0;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	22a4      	movs	r2, #164	; 0xa4
 800450a:	2100      	movs	r1, #0
 800450c:	5099      	str	r1, [r3, r2]
        SDO->bufOffsetWr = countRemain;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	21a0      	movs	r1, #160	; 0xa0
 8004512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004514:	505a      	str	r2, [r3, r1]

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	2220      	movs	r2, #32
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	337c      	adds	r3, #124	; 0x7c
 8004526:	001a      	movs	r2, r3
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3318      	adds	r3, #24
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff fabd 	bl	8003ab2 <OD_mappable>
 8004538:	0003      	movs	r3, r0
 800453a:	623b      	str	r3, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <readFromOd+0x9c>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004546:	f3ef 8210 	mrs	r2, PRIMASK
 800454a:	61fa      	str	r2, [r7, #28]
  return(result);
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	46c0      	nop			; (mov r8, r8)
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3318      	adds	r3, #24
 800455c:	0018      	movs	r0, r3
 800455e:	2337      	movs	r3, #55	; 0x37
 8004560:	18fc      	adds	r4, r7, r3
 8004562:	2314      	movs	r3, #20
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800456a:	47a8      	blx	r5
 800456c:	0003      	movs	r3, r0
 800456e:	7023      	strb	r3, [r4, #0]
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <readFromOd+0xce>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f383 8810 	msr	PRIMASK, r3
}
 8004584:	46c0      	nop			; (mov r8, r8)

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004586:	2237      	movs	r2, #55	; 0x37
 8004588:	18bb      	adds	r3, r7, r2
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b25b      	sxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d012      	beq.n	80045b8 <readFromOd+0x100>
 8004592:	18bb      	adds	r3, r7, r2
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b25b      	sxtb	r3, r3
 8004598:	3301      	adds	r3, #1
 800459a:	d00d      	beq.n	80045b8 <readFromOd+0x100>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800459c:	18bb      	adds	r3, r7, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7fd fbba 	bl	8001d1c <OD_getSDOabCode>
 80045a8:	0002      	movs	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	751a      	strb	r2, [r3, #20]
            return false;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e04e      	b.n	8004656 <readFromOd+0x19e>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d025      	beq.n	800460a <readFromOd+0x152>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2228      	movs	r2, #40	; 0x28
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b25b      	sxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da1f      	bge.n	800460a <readFromOd+0x152>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	0018      	movs	r0, r3
 80045d8:	f7fb fd96 	bl	8000108 <strlen>
 80045dc:	0003      	movs	r3, r0
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <readFromOd+0x132>
 80045e6:	2301      	movs	r3, #1
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr < countRd) {
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20b      	bcs.n	800460a <readFromOd+0x152>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 80045f6:	2337      	movs	r3, #55	; 0x37
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	18d2      	adds	r2, r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	18d2      	adds	r2, r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	21a0      	movs	r1, #160	; 0xa0
 8004614:	505a      	str	r2, [r3, r1]
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22a0      	movs	r2, #160	; 0xa0
 800461a:	589b      	ldr	r3, [r3, r2]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <readFromOd+0x174>
 8004620:	2337      	movs	r3, #55	; 0x37
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b25b      	sxtb	r3, r3
 8004628:	3301      	adds	r3, #1
 800462a:	d110      	bne.n	800464e <readFromOd+0x196>
            SDO->finished = false;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	22a0      	movs	r2, #160	; 0xa0
 8004636:	589b      	ldr	r3, [r3, r2]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d90a      	bls.n	8004654 <readFromOd+0x19c>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4a07      	ldr	r2, [pc, #28]	; (8004660 <readFromOd+0x1a8>)
 8004642:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	751a      	strb	r2, [r3, #20]
                return false;
 800464a:	2300      	movs	r3, #0
 800464c:	e003      	b.n	8004656 <readFromOd+0x19e>
            }
        }
        else {
            SDO->finished = true;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8004654:	2301      	movs	r3, #1
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b00e      	add	sp, #56	; 0x38
 800465c:	bdb0      	pop	{r4, r5, r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	06040047 	.word	0x06040047

08004664 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b09a      	sub	sp, #104	; 0x68
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004678:	2302      	movs	r3, #2
 800467a:	425b      	negs	r3, r3
 800467c:	f000 fcec 	bl	8005058 <CO_SDOserver_process+0x9f4>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004680:	2167      	movs	r1, #103	; 0x67
 8004682:	187b      	adds	r3, r7, r1
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004688:	2300      	movs	r3, #0
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	1e5a      	subs	r2, r3, #1
 8004692:	4193      	sbcs	r3, r2
 8004694:	b2db      	uxtb	r3, r3
 8004696:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <CO_SDOserver_process+0x54>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	7d1b      	ldrb	r3, [r3, #20]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <CO_SDOserver_process+0x54>
 80046aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d103      	bne.n	80046b8 <CO_SDOserver_process+0x54>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e2c3      	b.n	8004c40 <CO_SDOserver_process+0x5dc>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <CO_SDOserver_process+0x62>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 80046d2:	2367      	movs	r3, #103	; 0x67
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e2b1      	b.n	8004c40 <CO_SDOserver_process+0x5dc>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 80046dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d100      	bne.n	80046e4 <CO_SDOserver_process+0x80>
 80046e2:	e2ad      	b.n	8004c40 <CO_SDOserver_process+0x5dc>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	7d1b      	ldrb	r3, [r3, #20]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d000      	beq.n	80046f0 <CO_SDOserver_process+0x8c>
 80046ee:	e0d0      	b.n	8004892 <CO_SDOserver_process+0x22e>
            bool_t upload = false;
 80046f0:	2300      	movs	r3, #0
 80046f2:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	223c      	movs	r2, #60	; 0x3c
 80046f8:	5c9b      	ldrb	r3, [r3, r2]
 80046fa:	001a      	movs	r2, r3
 80046fc:	23f0      	movs	r3, #240	; 0xf0
 80046fe:	4013      	ands	r3, r2
 8004700:	2b20      	cmp	r3, #32
 8004702:	d103      	bne.n	800470c <CO_SDOserver_process+0xa8>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2211      	movs	r2, #17
 8004708:	751a      	strb	r2, [r3, #20]
 800470a:	e00f      	b.n	800472c <CO_SDOserver_process+0xc8>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	223c      	movs	r2, #60	; 0x3c
 8004710:	5c9b      	ldrb	r3, [r3, r2]
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d105      	bne.n	8004722 <CO_SDOserver_process+0xbe>
                upload = true;
 8004716:	2301      	movs	r3, #1
 8004718:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	751a      	strb	r2, [r3, #20]
 8004720:	e004      	b.n	800472c <CO_SDOserver_process+0xc8>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004722:	4bc5      	ldr	r3, [pc, #788]	; (8004a38 <CO_SDOserver_process+0x3d4>)
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d165      	bne.n	80047fe <CO_SDOserver_process+0x19a>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	223e      	movs	r2, #62	; 0x3e
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 800473a:	b21a      	sxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	213d      	movs	r1, #61	; 0x3d
 8004740:	5c5b      	ldrb	r3, [r3, r1]
 8004742:	b21b      	sxth	r3, r3
 8004744:	4313      	orrs	r3, r2
 8004746:	b21b      	sxth	r3, r3
 8004748:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	223f      	movs	r2, #63	; 0x3f
 8004752:	5c99      	ldrb	r1, [r3, r2]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2236      	movs	r2, #54	; 0x36
 8004758:	5499      	strb	r1, [r3, r2]
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004762:	0019      	movs	r1, r3
 8004764:	0010      	movs	r0, r2
 8004766:	f7fd f95c 	bl	8001a22 <OD_find>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2236      	movs	r2, #54	; 0x36
 800476e:	5c99      	ldrb	r1, [r3, r2]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3318      	adds	r3, #24
 8004774:	001a      	movs	r2, r3
 8004776:	2553      	movs	r5, #83	; 0x53
 8004778:	197c      	adds	r4, r7, r5
 800477a:	2300      	movs	r3, #0
 800477c:	f7fd f9cc 	bl	8001b18 <OD_getSub>
 8004780:	0003      	movs	r3, r0
 8004782:	7023      	strb	r3, [r4, #0]
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004784:	197b      	adds	r3, r7, r5
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b25b      	sxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <CO_SDOserver_process+0x142>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800478e:	197b      	adds	r3, r7, r5
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b25b      	sxtb	r3, r3
 8004794:	0018      	movs	r0, r3
 8004796:	f7fd fac1 	bl	8001d1c <OD_getSDOabCode>
 800479a:	0003      	movs	r3, r0
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	751a      	strb	r2, [r3, #20]
 80047a4:	e02b      	b.n	80047fe <CO_SDOserver_process+0x19a>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2228      	movs	r2, #40	; 0x28
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	001a      	movs	r2, r3
 80047ae:	2303      	movs	r3, #3
 80047b0:	4013      	ands	r3, r2
 80047b2:	d105      	bne.n	80047c0 <CO_SDOserver_process+0x15c>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80047b4:	4ba1      	ldr	r3, [pc, #644]	; (8004a3c <CO_SDOserver_process+0x3d8>)
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	751a      	strb	r2, [r3, #20]
 80047be:	e01e      	b.n	80047fe <CO_SDOserver_process+0x19a>
                    }
                    else if (upload
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <CO_SDOserver_process+0x17c>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2228      	movs	r2, #40	; 0x28
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	001a      	movs	r2, r3
 80047ce:	2301      	movs	r3, #1
 80047d0:	4013      	ands	r3, r2
 80047d2:	d105      	bne.n	80047e0 <CO_SDOserver_process+0x17c>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 80047d4:	4b9a      	ldr	r3, [pc, #616]	; (8004a40 <CO_SDOserver_process+0x3dc>)
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	751a      	strb	r2, [r3, #20]
 80047de:	e00e      	b.n	80047fe <CO_SDOserver_process+0x19a>
                    }
                    else if (!upload
 80047e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <CO_SDOserver_process+0x19a>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2228      	movs	r2, #40	; 0x28
 80047ea:	5c9b      	ldrb	r3, [r3, r2]
 80047ec:	001a      	movs	r2, r3
 80047ee:	2302      	movs	r3, #2
 80047f0:	4013      	ands	r3, r2
 80047f2:	d104      	bne.n	80047fe <CO_SDOserver_process+0x19a>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 80047f4:	4b93      	ldr	r3, [pc, #588]	; (8004a44 <CO_SDOserver_process+0x3e0>)
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 80047fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004800:	2b00      	cmp	r3, #0
 8004802:	d046      	beq.n	8004892 <CO_SDOserver_process+0x22e>
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d143      	bne.n	8004892 <CO_SDOserver_process+0x22e>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22a0      	movs	r2, #160	; 0xa0
 800480e:	2100      	movs	r1, #0
 8004810:	5099      	str	r1, [r3, r2]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	22a0      	movs	r2, #160	; 0xa0
 8004816:	589a      	ldr	r2, [r3, r2]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	21a4      	movs	r1, #164	; 0xa4
 800481c:	505a      	str	r2, [r3, r1]
                SDO->sizeTran = 0;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800482a:	2328      	movs	r3, #40	; 0x28
 800482c:	18f9      	adds	r1, r7, r3
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	2300      	movs	r3, #0
 8004832:	2207      	movs	r2, #7
 8004834:	f7ff fe40 	bl	80044b8 <readFromOd>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d02a      	beq.n	8004892 <CO_SDOserver_process+0x22e>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <CO_SDOserver_process+0x216>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <CO_SDOserver_process+0x1fc>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	22a0      	movs	r2, #160	; 0xa0
 8004858:	589a      	ldr	r2, [r3, r2]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	665a      	str	r2, [r3, #100]	; 0x64
 800485e:	e018      	b.n	8004892 <CO_SDOserver_process+0x22e>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	21a0      	movs	r1, #160	; 0xa0
 8004868:	585b      	ldr	r3, [r3, r1]
 800486a:	429a      	cmp	r2, r3
 800486c:	d011      	beq.n	8004892 <CO_SDOserver_process+0x22e>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800486e:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <CO_SDOserver_process+0x3e4>)
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	751a      	strb	r2, [r3, #20]
 8004878:	e00b      	b.n	8004892 <CO_SDOserver_process+0x22e>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2228      	movs	r2, #40	; 0x28
 800487e:	5c9b      	ldrb	r3, [r3, r2]
 8004880:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8004882:	2b00      	cmp	r3, #0
 8004884:	db02      	blt.n	800488c <CO_SDOserver_process+0x228>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	e000      	b.n	800488e <CO_SDOserver_process+0x22a>
 800488c:	2200      	movs	r2, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	665a      	str	r2, [r3, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	7d1b      	ldrb	r3, [r3, #20]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d100      	bne.n	800489e <CO_SDOserver_process+0x23a>
 800489c:	e1c5      	b.n	8004c2a <CO_SDOserver_process+0x5c6>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	7d1b      	ldrb	r3, [r3, #20]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d100      	bne.n	80048aa <CO_SDOserver_process+0x246>
 80048a8:	e1bf      	b.n	8004c2a <CO_SDOserver_process+0x5c6>
        switch (SDO->state) {
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	7d1b      	ldrb	r3, [r3, #20]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b23      	cmp	r3, #35	; 0x23
 80048b2:	d100      	bne.n	80048b6 <CO_SDOserver_process+0x252>
 80048b4:	e18c      	b.n	8004bd0 <CO_SDOserver_process+0x56c>
 80048b6:	dd00      	ble.n	80048ba <CO_SDOserver_process+0x256>
 80048b8:	e1b1      	b.n	8004c1e <CO_SDOserver_process+0x5ba>
 80048ba:	2b21      	cmp	r3, #33	; 0x21
 80048bc:	d100      	bne.n	80048c0 <CO_SDOserver_process+0x25c>
 80048be:	e183      	b.n	8004bc8 <CO_SDOserver_process+0x564>
 80048c0:	dd00      	ble.n	80048c4 <CO_SDOserver_process+0x260>
 80048c2:	e1ac      	b.n	8004c1e <CO_SDOserver_process+0x5ba>
 80048c4:	2b11      	cmp	r3, #17
 80048c6:	d003      	beq.n	80048d0 <CO_SDOserver_process+0x26c>
 80048c8:	2b13      	cmp	r3, #19
 80048ca:	d100      	bne.n	80048ce <CO_SDOserver_process+0x26a>
 80048cc:	e101      	b.n	8004ad2 <CO_SDOserver_process+0x46e>
 80048ce:	e1a6      	b.n	8004c1e <CO_SDOserver_process+0x5ba>
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	223c      	movs	r2, #60	; 0x3c
 80048d4:	5c9b      	ldrb	r3, [r3, r2]
 80048d6:	001a      	movs	r2, r3
 80048d8:	2302      	movs	r3, #2
 80048da:	4013      	ands	r3, r2
 80048dc:	d100      	bne.n	80048e0 <CO_SDOserver_process+0x27c>
 80048de:	e0b9      	b.n	8004a54 <CO_SDOserver_process+0x3f0>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 80048e6:	2304      	movs	r3, #4
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	223c      	movs	r2, #60	; 0x3c
 80048ee:	5c9b      	ldrb	r3, [r3, r2]
 80048f0:	001a      	movs	r2, r3
 80048f2:	2301      	movs	r3, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d00b      	beq.n	8004910 <CO_SDOserver_process+0x2ac>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	223c      	movs	r2, #60	; 0x3c
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	b2db      	uxtb	r3, r3
 8004902:	001a      	movs	r2, r3
 8004904:	2303      	movs	r3, #3
 8004906:	4013      	ands	r3, r2
 8004908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490e:	e007      	b.n	8004920 <CO_SDOserver_process+0x2bc>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8004910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <CO_SDOserver_process+0x2bc>
 8004916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004918:	2b03      	cmp	r3, #3
 800491a:	d801      	bhi.n	8004920 <CO_SDOserver_process+0x2bc>
                    dataSizeToWrite = sizeInOd;
 800491c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8004920:	2020      	movs	r0, #32
 8004922:	183b      	adds	r3, r7, r0
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	2200      	movs	r2, #0
 800492a:	809a      	strh	r2, [r3, #4]
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3340      	adds	r3, #64	; 0x40
 8004930:	0019      	movs	r1, r3
 8004932:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004934:	183b      	adds	r3, r7, r0
 8004936:	0018      	movs	r0, r3
 8004938:	f00a fbd8 	bl	800f0ec <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2228      	movs	r2, #40	; 0x28
 8004940:	5c9b      	ldrb	r3, [r3, r2]
 8004942:	b25b      	sxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	da17      	bge.n	8004978 <CO_SDOserver_process+0x314>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <CO_SDOserver_process+0x2f2>
 800494e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	429a      	cmp	r2, r3
 8004954:	d210      	bcs.n	8004978 <CO_SDOserver_process+0x314>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 800495e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <CO_SDOserver_process+0x304>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <CO_SDOserver_process+0x306>
 8004968:	2302      	movs	r3, #2
 800496a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800496c:	18d3      	adds	r3, r2, r3
 800496e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004974:	621a      	str	r2, [r3, #32]
                ) {
 8004976:	e016      	b.n	80049a6 <CO_SDOserver_process+0x342>
                }
                else if (sizeInOd == 0) {
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <CO_SDOserver_process+0x322>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004982:	621a      	str	r2, [r3, #32]
 8004984:	e00f      	b.n	80049a6 <CO_SDOserver_process+0x342>
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004986:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	429a      	cmp	r2, r3
 800498c:	d00b      	beq.n	80049a6 <CO_SDOserver_process+0x342>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800498e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	429a      	cmp	r2, r3
 8004994:	d901      	bls.n	800499a <CO_SDOserver_process+0x336>
 8004996:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <CO_SDOserver_process+0x3e8>)
 8004998:	e000      	b.n	800499c <CO_SDOserver_process+0x338>
 800499a:	4b2d      	ldr	r3, [pc, #180]	; (8004a50 <CO_SDOserver_process+0x3ec>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	751a      	strb	r2, [r3, #20]
                    break;
 80049a4:	e144      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3318      	adds	r3, #24
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7ff f87f 	bl	8003ab2 <OD_mappable>
 80049b4:	0003      	movs	r3, r0
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <CO_SDOserver_process+0x36c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c2:	f3ef 8210 	mrs	r2, PRIMASK
 80049c6:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 80049c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80049cc:	b672      	cpsid	i
}
 80049ce:	46c0      	nop			; (mov r8, r8)
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3318      	adds	r3, #24
 80049d8:	0018      	movs	r0, r3
 80049da:	233b      	movs	r3, #59	; 0x3b
 80049dc:	18fc      	adds	r4, r7, r3
 80049de:	231c      	movs	r3, #28
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049e4:	2120      	movs	r1, #32
 80049e6:	1879      	adds	r1, r7, r1
 80049e8:	47a8      	blx	r5
 80049ea:	0003      	movs	r3, r0
 80049ec:	7023      	strb	r3, [r4, #0]
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80049ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <CO_SDOserver_process+0x3a0>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	f383 8810 	msr	PRIMASK, r3
}
 8004a02:	46c0      	nop			; (mov r8, r8)

                if (odRet != ODR_OK) {
 8004a04:	223b      	movs	r2, #59	; 0x3b
 8004a06:	18bb      	adds	r3, r7, r2
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <CO_SDOserver_process+0x3c4>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004a10:	18bb      	adds	r3, r7, r2
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7fd f980 	bl	8001d1c <OD_getSDOabCode>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	751a      	strb	r2, [r3, #20]
                    break;
 8004a26:	e103      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2212      	movs	r2, #18
 8004a2c:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8004a34:	e0fc      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	05040001 	.word	0x05040001
 8004a3c:	06010000 	.word	0x06010000
 8004a40:	06010001 	.word	0x06010001
 8004a44:	06010002 	.word	0x06010002
 8004a48:	06040047 	.word	0x06040047
 8004a4c:	06070012 	.word	0x06070012
 8004a50:	06070013 	.word	0x06070013
                if (SDO->CANrxData[0] & 0x01) {
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	223c      	movs	r2, #60	; 0x3c
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d02d      	beq.n	8004abe <CO_SDOserver_process+0x45a>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3340      	adds	r3, #64	; 0x40
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	2318      	movs	r3, #24
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	2204      	movs	r2, #4
 8004a74:	0018      	movs	r0, r3
 8004a76:	f00a fb39 	bl	800f0ec <memcpy>
                    SDO->sizeInd = CO_SWAP_32(size);
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01e      	beq.n	8004ac4 <CO_SDOserver_process+0x460>
                        if (SDO->sizeInd > sizeInOd) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d205      	bcs.n	8004a9c <CO_SDOserver_process+0x438>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004a90:	4bc7      	ldr	r3, [pc, #796]	; (8004db0 <CO_SDOserver_process+0x74c>)
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	751a      	strb	r2, [r3, #20]
                            break;
 8004a9a:	e0c9      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                        else if (SDO->sizeInd < sizeInOd
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d90e      	bls.n	8004ac4 <CO_SDOserver_process+0x460>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2228      	movs	r2, #40	; 0x28
 8004aaa:	5c9b      	ldrb	r3, [r3, r2]
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	db08      	blt.n	8004ac4 <CO_SDOserver_process+0x460>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004ab2:	4bc0      	ldr	r3, [pc, #768]	; (8004db4 <CO_SDOserver_process+0x750>)
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	751a      	strb	r2, [r3, #20]
                            break;
 8004abc:	e0b8      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                    SDO->sizeInd = 0;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2212      	movs	r2, #18
 8004ac8:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004ad0:	e0ae      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	223c      	movs	r2, #60	; 0x3c
 8004ad6:	5c9b      	ldrb	r3, [r3, r2]
 8004ad8:	001a      	movs	r2, r3
 8004ada:	23e0      	movs	r3, #224	; 0xe0
 8004adc:	4013      	ands	r3, r2
 8004ade:	d16d      	bne.n	8004bbc <CO_SDOserver_process+0x558>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	223c      	movs	r2, #60	; 0x3c
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4013      	ands	r3, r2
 8004aec:	1e5a      	subs	r2, r3, #1
 8004aee:	4193      	sbcs	r3, r2
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	001a      	movs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	223c      	movs	r2, #60	; 0x3c
 8004afc:	5c9a      	ldrb	r2, [r3, r2]
 8004afe:	2051      	movs	r0, #81	; 0x51
 8004b00:	183b      	adds	r3, r7, r0
 8004b02:	2110      	movs	r1, #16
 8004b04:	400a      	ands	r2, r1
 8004b06:	701a      	strb	r2, [r3, #0]
                if (toggle != SDO->toggle) {
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	226c      	movs	r2, #108	; 0x6c
 8004b0c:	5c9b      	ldrb	r3, [r3, r2]
 8004b0e:	183a      	adds	r2, r7, r0
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d005      	beq.n	8004b22 <CO_SDOserver_process+0x4be>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004b16:	4ba8      	ldr	r3, [pc, #672]	; (8004db8 <CO_SDOserver_process+0x754>)
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	751a      	strb	r2, [r3, #20]
                    break;
 8004b20:	e086      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	223c      	movs	r2, #60	; 0x3c
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	001a      	movs	r2, r3
 8004b30:	2307      	movs	r3, #7
 8004b32:	4013      	ands	r3, r2
 8004b34:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	337c      	adds	r3, #124	; 0x7c
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	21a0      	movs	r1, #160	; 0xa0
 8004b40:	585b      	ldr	r3, [r3, r1]
 8004b42:	18d0      	adds	r0, r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	333d      	adds	r3, #61	; 0x3d
 8004b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	f00a face 	bl	800f0ec <memcpy>
                SDO->bufOffsetWr += count;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	22a0      	movs	r2, #160	; 0xa0
 8004b54:	589a      	ldr	r2, [r3, r2]
 8004b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b58:	18d2      	adds	r2, r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	21a0      	movs	r1, #160	; 0xa0
 8004b5e:	505a      	str	r2, [r3, r1]
                SDO->sizeTran += count;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b66:	18d2      	adds	r2, r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <CO_SDOserver_process+0x528>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d905      	bls.n	8004b8c <CO_SDOserver_process+0x528>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004b80:	4b8b      	ldr	r3, [pc, #556]	; (8004db0 <CO_SDOserver_process+0x74c>)
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	751a      	strb	r2, [r3, #20]
                    break;
 8004b8a:	e051      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <CO_SDOserver_process+0x53e>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	22a0      	movs	r2, #160	; 0xa0
 8004b98:	589b      	ldr	r3, [r3, r2]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d808      	bhi.n	8004bb4 <CO_SDOserver_process+0x550>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004ba2:	2328      	movs	r3, #40	; 0x28
 8004ba4:	18f9      	adds	r1, r7, r3
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2200      	movs	r2, #0
 8004bac:	f7ff fb64 	bl	8004278 <validateAndWriteToOD>
 8004bb0:	1e03      	subs	r3, r0, #0
 8004bb2:	d03c      	beq.n	8004c2e <CO_SDOserver_process+0x5ca>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2214      	movs	r2, #20
 8004bb8:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004bba:	e039      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                abortCode = CO_SDO_AB_CMD;
 8004bbc:	4b7f      	ldr	r3, [pc, #508]	; (8004dbc <CO_SDOserver_process+0x758>)
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	751a      	strb	r2, [r3, #20]
            break;
 8004bc6:	e033      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2222      	movs	r2, #34	; 0x22
 8004bcc:	751a      	strb	r2, [r3, #20]
            break;
 8004bce:	e02f      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	223c      	movs	r2, #60	; 0x3c
 8004bd4:	5c9b      	ldrb	r3, [r3, r2]
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	23ef      	movs	r3, #239	; 0xef
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d118      	bne.n	8004c12 <CO_SDOserver_process+0x5ae>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	223c      	movs	r2, #60	; 0x3c
 8004be4:	5c9a      	ldrb	r2, [r3, r2]
 8004be6:	2052      	movs	r0, #82	; 0x52
 8004be8:	183b      	adds	r3, r7, r0
 8004bea:	2110      	movs	r1, #16
 8004bec:	400a      	ands	r2, r1
 8004bee:	701a      	strb	r2, [r3, #0]
                if (toggle != SDO->toggle) {
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	226c      	movs	r2, #108	; 0x6c
 8004bf4:	5c9b      	ldrb	r3, [r3, r2]
 8004bf6:	183a      	adds	r2, r7, r0
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d005      	beq.n	8004c0a <CO_SDOserver_process+0x5a6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004bfe:	4b6e      	ldr	r3, [pc, #440]	; (8004db8 <CO_SDOserver_process+0x754>)
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	751a      	strb	r2, [r3, #20]
                    break;
 8004c08:	e012      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2224      	movs	r2, #36	; 0x24
 8004c0e:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004c10:	e00e      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                abortCode = CO_SDO_AB_CMD;
 8004c12:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <CO_SDOserver_process+0x758>)
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	751a      	strb	r2, [r3, #20]
            break;
 8004c1c:	e008      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8004c1e:	4b67      	ldr	r3, [pc, #412]	; (8004dbc <CO_SDOserver_process+0x758>)
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	751a      	strb	r2, [r3, #20]
 8004c28:	e002      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	e000      	b.n	8004c30 <CO_SDOserver_process+0x5cc>
                        break;
 8004c2e:	46c0      	nop			; (mov r8, r8)
        SDO->timeoutTimer = 0;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8004c40:	2367      	movs	r3, #103	; 0x67
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d11f      	bne.n	8004c8c <CO_SDOserver_process+0x628>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d205      	bcs.n	8004c64 <CO_SDOserver_process+0x600>
            SDO->timeoutTimer += timeDifference_us;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	18d2      	adds	r2, r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d304      	bcc.n	8004c7a <CO_SDOserver_process+0x616>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004c70:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <CO_SDOserver_process+0x75c>)
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <CO_SDOserver_process+0x628>
            ret = CO_SDO_RT_transmittBufferFull;
 8004c84:	2367      	movs	r3, #103	; 0x67
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	2204      	movs	r2, #4
 8004c8a:	701a      	strb	r2, [r3, #0]
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004c8c:	2367      	movs	r3, #103	; 0x67
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d000      	beq.n	8004c9a <CO_SDOserver_process+0x636>
 8004c98:	e199      	b.n	8004fce <CO_SDOserver_process+0x96a>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	3305      	adds	r3, #5
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f00a fa3d 	bl	800f124 <memset>

        switch (SDO->state) {
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	7d1b      	ldrb	r3, [r3, #20]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b24      	cmp	r3, #36	; 0x24
 8004cb2:	d100      	bne.n	8004cb6 <CO_SDOserver_process+0x652>
 8004cb4:	e0f2      	b.n	8004e9c <CO_SDOserver_process+0x838>
 8004cb6:	dd00      	ble.n	8004cba <CO_SDOserver_process+0x656>
 8004cb8:	e18b      	b.n	8004fd2 <CO_SDOserver_process+0x96e>
 8004cba:	2b22      	cmp	r3, #34	; 0x22
 8004cbc:	d100      	bne.n	8004cc0 <CO_SDOserver_process+0x65c>
 8004cbe:	e081      	b.n	8004dc4 <CO_SDOserver_process+0x760>
 8004cc0:	dd00      	ble.n	8004cc4 <CO_SDOserver_process+0x660>
 8004cc2:	e186      	b.n	8004fd2 <CO_SDOserver_process+0x96e>
 8004cc4:	2b12      	cmp	r3, #18
 8004cc6:	d002      	beq.n	8004cce <CO_SDOserver_process+0x66a>
 8004cc8:	2b14      	cmp	r3, #20
 8004cca:	d042      	beq.n	8004d52 <CO_SDOserver_process+0x6ee>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 8004ccc:	e181      	b.n	8004fd2 <CO_SDOserver_process+0x96e>
            SDO->CANtxBuff->data[0] = 0x60;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2260      	movs	r2, #96	; 0x60
 8004cd4:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	2136      	movs	r1, #54	; 0x36
 8004cfa:	5c52      	ldrb	r2, [r2, r1]
 8004cfc:	721a      	strb	r2, [r3, #8]
            SDO->timeoutTimer = 0;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	0010      	movs	r0, r2
 8004d10:	f003 f90e 	bl	8007f30 <CO_CANsend>
            if (SDO->finished) {
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <CO_SDOserver_process+0x6c8>
                SDO->state = CO_SDO_ST_IDLE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004d22:	2367      	movs	r3, #103	; 0x67
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
            break;
 8004d2a:	e155      	b.n	8004fd8 <CO_SDOserver_process+0x974>
                SDO->toggle = 0x00;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	226c      	movs	r2, #108	; 0x6c
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]
                SDO->sizeTran = 0;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22a0      	movs	r2, #160	; 0xa0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	5099      	str	r1, [r3, r2]
                SDO->bufOffsetRd = 0;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	22a4      	movs	r2, #164	; 0xa4
 8004d46:	2100      	movs	r1, #0
 8004d48:	5099      	str	r1, [r3, r2]
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2213      	movs	r2, #19
 8004d4e:	751a      	strb	r2, [r3, #20]
            break;
 8004d50:	e142      	b.n	8004fd8 <CO_SDOserver_process+0x974>
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	226c      	movs	r2, #108	; 0x6c
 8004d56:	5c9a      	ldrb	r2, [r3, r2]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2120      	movs	r1, #32
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	226c      	movs	r2, #108	; 0x6c
 8004d68:	5c9b      	ldrb	r3, [r3, r2]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <CO_SDOserver_process+0x70e>
 8004d6e:	2110      	movs	r1, #16
 8004d70:	e000      	b.n	8004d74 <CO_SDOserver_process+0x710>
 8004d72:	2100      	movs	r1, #0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	226c      	movs	r2, #108	; 0x6c
 8004d78:	5499      	strb	r1, [r3, r2]
            SDO->timeoutTimer = 0;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0019      	movs	r1, r3
 8004d8a:	0010      	movs	r0, r2
 8004d8c:	f003 f8d0 	bl	8007f30 <CO_CANsend>
            if (SDO->finished) {
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <CO_SDOserver_process+0x744>
                SDO->state = CO_SDO_ST_IDLE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004d9e:	2367      	movs	r3, #103	; 0x67
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
            break;
 8004da6:	e117      	b.n	8004fd8 <CO_SDOserver_process+0x974>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2213      	movs	r2, #19
 8004dac:	751a      	strb	r2, [r3, #20]
            break;
 8004dae:	e113      	b.n	8004fd8 <CO_SDOserver_process+0x974>
 8004db0:	06070012 	.word	0x06070012
 8004db4:	06070013 	.word	0x06070013
 8004db8:	05030000 	.word	0x05030000
 8004dbc:	05040001 	.word	0x05040001
 8004dc0:	05040000 	.word	0x05040000
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d025      	beq.n	8004e18 <CO_SDOserver_process+0x7b4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d821      	bhi.n	8004e18 <CO_SDOserver_process+0x7b4>
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2204      	movs	r2, #4
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2143      	movs	r1, #67	; 0x43
 8004dea:	430a      	orrs	r2, r1
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	3309      	adds	r3, #9
 8004df6:	0018      	movs	r0, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	337c      	adds	r3, #124	; 0x7c
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e02:	001a      	movs	r2, r3
 8004e04:	f00a f972 	bl	800f0ec <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004e0e:	2367      	movs	r3, #103	; 0x67
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e024      	b.n	8004e62 <CO_SDOserver_process+0x7fe>
                if (SDO->sizeInd > 0) {
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d012      	beq.n	8004e46 <CO_SDOserver_process+0x7e2>
                    uint32_t sizeInd = SDO->sizeInd;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2241      	movs	r2, #65	; 0x41
 8004e30:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	3309      	adds	r3, #9
 8004e38:	2214      	movs	r2, #20
 8004e3a:	18b9      	adds	r1, r7, r2
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f00a f954 	bl	800f0ec <memcpy>
 8004e44:	e003      	b.n	8004e4e <CO_SDOserver_process+0x7ea>
                    SDO->CANtxBuff->data[0] = 0x40;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	715a      	strb	r2, [r3, #5]
                SDO->toggle = 0x00;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	226c      	movs	r2, #108	; 0x6c
 8004e52:	2100      	movs	r1, #0
 8004e54:	5499      	strb	r1, [r3, r2]
                SDO->timeoutTimer = 0;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2223      	movs	r2, #35	; 0x23
 8004e60:	751a      	strb	r2, [r3, #20]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	2136      	movs	r1, #54	; 0x36
 8004e86:	5c52      	ldrb	r2, [r2, r1]
 8004e88:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0019      	movs	r1, r3
 8004e94:	0010      	movs	r0, r2
 8004e96:	f003 f84b 	bl	8007f30 <CO_CANsend>
            break;
 8004e9a:	e09d      	b.n	8004fd8 <CO_SDOserver_process+0x974>
            if (!readFromOd(SDO, &abortCode, 7, false))
 8004e9c:	2328      	movs	r3, #40	; 0x28
 8004e9e:	18f9      	adds	r1, r7, r3
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	f7ff fb07 	bl	80044b8 <readFromOd>
 8004eaa:	1e03      	subs	r3, r0, #0
 8004eac:	d100      	bne.n	8004eb0 <CO_SDOserver_process+0x84c>
 8004eae:	e092      	b.n	8004fd6 <CO_SDOserver_process+0x972>
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	216c      	movs	r1, #108	; 0x6c
 8004eb8:	5c52      	ldrb	r2, [r2, r1]
 8004eba:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	226c      	movs	r2, #108	; 0x6c
 8004ec0:	5c9b      	ldrb	r3, [r3, r2]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <CO_SDOserver_process+0x866>
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	e000      	b.n	8004ecc <CO_SDOserver_process+0x868>
 8004eca:	2100      	movs	r1, #0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	226c      	movs	r2, #108	; 0x6c
 8004ed0:	5499      	strb	r1, [r3, r2]
            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	22a0      	movs	r2, #160	; 0xa0
 8004ed6:	589a      	ldr	r2, [r3, r2]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	21a4      	movs	r1, #164	; 0xa4
 8004edc:	585b      	ldr	r3, [r3, r1]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	65bb      	str	r3, [r7, #88]	; 0x58
            if (count < 7 || (SDO->finished && count == 7)) {
 8004ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee4:	2b06      	cmp	r3, #6
 8004ee6:	d906      	bls.n	8004ef6 <CO_SDOserver_process+0x892>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01c      	beq.n	8004f2a <CO_SDOserver_process+0x8c6>
 8004ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	d119      	bne.n	8004f2a <CO_SDOserver_process+0x8c6>
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	795a      	ldrb	r2, [r3, #5]
 8004efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2107      	movs	r1, #7
 8004f02:	1acb      	subs	r3, r1, r3
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	18db      	adds	r3, r3, r3
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2101      	movs	r1, #1
 8004f14:	430a      	orrs	r2, r1
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004f20:	2367      	movs	r3, #103	; 0x67
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e007      	b.n	8004f3a <CO_SDOserver_process+0x8d6>
                SDO->timeoutTimer = 0;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2223      	movs	r2, #35	; 0x23
 8004f34:	751a      	strb	r2, [r3, #20]
                count = 7;
 8004f36:	2307      	movs	r3, #7
 8004f38:	65bb      	str	r3, [r7, #88]	; 0x58
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	1d98      	adds	r0, r3, #6
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	337c      	adds	r3, #124	; 0x7c
 8004f44:	001a      	movs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	21a4      	movs	r1, #164	; 0xa4
 8004f4a:	585b      	ldr	r3, [r3, r1]
 8004f4c:	18d3      	adds	r3, r2, r3
 8004f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f50:	0019      	movs	r1, r3
 8004f52:	f00a f8cb 	bl	800f0ec <memcpy>
            SDO->bufOffsetRd += count;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22a4      	movs	r2, #164	; 0xa4
 8004f5a:	589a      	ldr	r2, [r3, r2]
 8004f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5e:	18d2      	adds	r2, r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	21a4      	movs	r1, #164	; 0xa4
 8004f64:	505a      	str	r2, [r3, r1]
            SDO->sizeTran += count;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6c:	18d2      	adds	r2, r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	669a      	str	r2, [r3, #104]	; 0x68
            if (SDO->sizeInd > 0) {
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <CO_SDOserver_process+0x958>
                if (SDO->sizeTran > SDO->sizeInd) {
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d905      	bls.n	8004f92 <CO_SDOserver_process+0x92e>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <CO_SDOserver_process+0x9fc>)
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	751a      	strb	r2, [r3, #20]
                    break;
 8004f90:	e022      	b.n	8004fd8 <CO_SDOserver_process+0x974>
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8004f92:	2167      	movs	r1, #103	; 0x67
 8004f94:	187b      	adds	r3, r7, r1
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <CO_SDOserver_process+0x958>
                         && SDO->sizeTran < SDO->sizeInd
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d208      	bcs.n	8004fbc <CO_SDOserver_process+0x958>
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8004faa:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <CO_SDOserver_process+0xa00>)
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_waitingResponse;
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]
                    SDO->state = CO_SDO_ST_ABORT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	751a      	strb	r2, [r3, #20]
                    break;
 8004fba:	e00d      	b.n	8004fd8 <CO_SDOserver_process+0x974>
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	f002 ffb2 	bl	8007f30 <CO_CANsend>
            break;
 8004fcc:	e004      	b.n	8004fd8 <CO_SDOserver_process+0x974>
        }
        } /* switch (SDO->state) */
    }
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	e002      	b.n	8004fd8 <CO_SDOserver_process+0x974>
            break;
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	e000      	b.n	8004fd8 <CO_SDOserver_process+0x974>
                break;
 8004fd6:	46c0      	nop			; (mov r8, r8)

    if (ret == CO_SDO_RT_waitingResponse) {
 8004fd8:	2467      	movs	r4, #103	; 0x67
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d135      	bne.n	8005050 <CO_SDOserver_process+0x9ec>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	7d1b      	ldrb	r3, [r3, #20]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d130      	bne.n	8005050 <CO_SDOserver_process+0x9ec>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	2136      	movs	r1, #54	; 0x36
 800501e:	5c52      	ldrb	r2, [r2, r1]
 8005020:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	3309      	adds	r3, #9
 8005028:	2210      	movs	r2, #16
 800502a:	18b9      	adds	r1, r7, r2
 800502c:	2204      	movs	r2, #4
 800502e:	0018      	movs	r0, r3
 8005030:	f00a f85c 	bl	800f0ec <memcpy>
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	0019      	movs	r1, r3
 800503e:	0010      	movs	r0, r2
 8005040:	f002 ff76 	bl	8007f30 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800504a:	193b      	adds	r3, r7, r4
 800504c:	22f6      	movs	r2, #246	; 0xf6
 800504e:	701a      	strb	r2, [r3, #0]
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8005050:	2367      	movs	r3, #103	; 0x67
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b25b      	sxtb	r3, r3
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b01a      	add	sp, #104	; 0x68
 800505e:	bdb0      	pop	{r4, r5, r7, pc}
 8005060:	06070012 	.word	0x06070012
 8005064:	06070013 	.word	0x06070013

08005068 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	781a      	ldrb	r2, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8005074:	210f      	movs	r1, #15
 8005076:	187b      	adds	r3, r7, r1
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	187b      	adds	r3, r7, r1
 800507c:	781b      	ldrb	r3, [r3, #0]
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b004      	add	sp, #16
 8005084:	bd80      	pop	{r7, pc}

08005086 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	230c      	movs	r3, #12
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	2204      	movs	r2, #4
 8005096:	0018      	movs	r0, r3
 8005098:	f00a f831 	bl	800f0fe <memmove>
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <OD_getIndex+0x14>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	e000      	b.n	80050bc <OD_getIndex+0x16>
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <OD_extension_init>:
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <OD_extension_init+0x14>
 80050d4:	2305      	movs	r3, #5
 80050d6:	e003      	b.n	80050e0 <OD_extension_init+0x1c>
    entry->extension = extension;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	0018      	movs	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b002      	add	sp, #8
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <OD_get_u8>:
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	200b      	movs	r0, #11
 80050f6:	183b      	adds	r3, r7, r0
 80050f8:	1c0a      	adds	r2, r1, #0
 80050fa:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	183b      	adds	r3, r7, r0
 8005100:	7819      	ldrb	r1, [r3, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2301      	movs	r3, #1
 800510a:	f7fc fe25 	bl	8001d58 <OD_get_value>
 800510e:	0003      	movs	r3, r0
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	b004      	add	sp, #16
 8005116:	bd80      	pop	{r7, pc}

08005118 <OD_get_u32>:
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	200b      	movs	r0, #11
 8005126:	183b      	adds	r3, r7, r0
 8005128:	1c0a      	adds	r2, r1, #0
 800512a:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	183b      	adds	r3, r7, r0
 8005130:	7819      	ldrb	r1, [r3, #0]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2304      	movs	r3, #4
 800513a:	f7fc fe0d 	bl	8001d58 <OD_get_value>
 800513e:	0003      	movs	r3, r0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}

08005148 <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	7c9b      	ldrb	r3, [r3, #18]
 8005154:	3301      	adds	r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	749a      	strb	r2, [r3, #18]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7c9a      	ldrb	r2, [r3, #18]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7c5b      	ldrb	r3, [r3, #17]
 8005164:	429a      	cmp	r2, r3
 8005166:	d902      	bls.n	800516e <CO_SYNCsend+0x26>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	425a      	negs	r2, r3
 800517a:	4153      	adcs	r3, r2
 800517c:	b2db      	uxtb	r3, r3
 800517e:	001a      	movs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	7c92      	ldrb	r2, [r2, #18]
 800518c:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	0019      	movs	r1, r3
 8005198:	0010      	movs	r0, r2
 800519a:	f002 fec9 	bl	8007f30 <CO_CANsend>
 800519e:	0003      	movs	r3, r0
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80051b6:	210f      	movs	r1, #15
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	7912      	ldrb	r2, [r2, #4]
 80051be:	701a      	strb	r2, [r3, #0]
    bool_t syncReceived = false;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	7c5b      	ldrb	r3, [r3, #17]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10f      	bne.n	80051ec <CO_SYNC_receive+0x44>
        if (DLC == 0) {
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <CO_SYNC_receive+0x32>
            syncReceived = true;
 80051d4:	2301      	movs	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e020      	b.n	800521c <CO_SYNC_receive+0x74>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 80051da:	230f      	movs	r3, #15
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2240      	movs	r2, #64	; 0x40
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	721a      	strb	r2, [r3, #8]
 80051ea:	e017      	b.n	800521c <CO_SYNC_receive+0x74>
        }
    }
    else {
        if (DLC == 1) {
 80051ec:	230f      	movs	r3, #15
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d109      	bne.n	800520a <CO_SYNC_receive+0x62>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	3305      	adds	r3, #5
 80051fa:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8005204:	2301      	movs	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e008      	b.n	800521c <CO_SYNC_receive+0x74>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 800520a:	230f      	movs	r3, #15
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	4252      	negs	r2, r2
 8005214:	4313      	orrs	r3, r2
 8005216:	b2da      	uxtb	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <CO_SYNC_receive+0x90>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	425a      	negs	r2, r3
 8005228:	4153      	adcs	r3, r2
 800522a:	b2db      	uxtb	r3, r3
 800522c:	001a      	movs	r2, r3
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2201      	movs	r2, #1
 8005236:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b006      	add	sp, #24
 800523e:	bd80      	pop	{r7, pc}

08005240 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005242:	b08f      	sub	sp, #60	; 0x3c
 8005244:	af04      	add	r7, sp, #16
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <OD_write_1005+0x2e>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	7c5b      	ldrb	r3, [r3, #17]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <OD_write_1005+0x2e>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d102      	bne.n	800526e <OD_write_1005+0x2e>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800526e:	2309      	movs	r3, #9
 8005270:	e0c6      	b.n	8005400 <OD_write_1005+0x1c0>
    }

    CO_SYNC_t *SYNC = stream->object;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff ff03 	bl	8005086 <CO_getUint32>
 8005280:	0003      	movs	r3, r0
 8005282:	623b      	str	r3, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	b29a      	uxth	r2, r3
 8005288:	211e      	movs	r1, #30
 800528a:	187b      	adds	r3, r7, r1
 800528c:	0552      	lsls	r2, r2, #21
 800528e:	0d52      	lsrs	r2, r2, #21
 8005290:	801a      	strh	r2, [r3, #0]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	05db      	lsls	r3, r3, #23
 8005298:	4013      	ands	r3, r2
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	4193      	sbcs	r3, r2
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	4a58      	ldr	r2, [pc, #352]	; (8005408 <OD_write_1005+0x1c8>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	d14b      	bne.n	8005342 <OD_write_1005+0x102>
 80052aa:	187b      	adds	r3, r7, r1
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b7f      	cmp	r3, #127	; 0x7f
 80052b0:	d947      	bls.n	8005342 <OD_write_1005+0x102>
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d905      	bls.n	80052ca <OD_write_1005+0x8a>
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	881a      	ldrh	r2, [r3, #0]
 80052c2:	23c0      	movs	r3, #192	; 0xc0
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d93b      	bls.n	8005342 <OD_write_1005+0x102>
 80052ca:	211e      	movs	r1, #30
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	881a      	ldrh	r2, [r3, #0]
 80052d0:	23b0      	movs	r3, #176	; 0xb0
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d905      	bls.n	80052e4 <OD_write_1005+0xa4>
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	881a      	ldrh	r2, [r3, #0]
 80052dc:	23c0      	movs	r3, #192	; 0xc0
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d32e      	bcc.n	8005342 <OD_write_1005+0x102>
 80052e4:	211e      	movs	r1, #30
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	881a      	ldrh	r2, [r3, #0]
 80052ea:	23c0      	movs	r3, #192	; 0xc0
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d905      	bls.n	80052fe <OD_write_1005+0xbe>
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	881a      	ldrh	r2, [r3, #0]
 80052f6:	23d0      	movs	r3, #208	; 0xd0
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d321      	bcc.n	8005342 <OD_write_1005+0x102>
 80052fe:	211e      	movs	r1, #30
 8005300:	187b      	adds	r3, r7, r1
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	23dc      	movs	r3, #220	; 0xdc
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	429a      	cmp	r2, r3
 800530a:	d305      	bcc.n	8005318 <OD_write_1005+0xd8>
 800530c:	187b      	adds	r3, r7, r1
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	23e0      	movs	r3, #224	; 0xe0
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	429a      	cmp	r2, r3
 8005316:	d314      	bcc.n	8005342 <OD_write_1005+0x102>
 8005318:	211e      	movs	r1, #30
 800531a:	187b      	adds	r3, r7, r1
 800531c:	881a      	ldrh	r2, [r3, #0]
 800531e:	23e0      	movs	r3, #224	; 0xe0
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	429a      	cmp	r2, r3
 8005324:	d80d      	bhi.n	8005342 <OD_write_1005+0x102>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <OD_write_1005+0x106>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <OD_write_1005+0x106>
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	2244      	movs	r2, #68	; 0x44
 8005338:	5a9b      	ldrh	r3, [r3, r2]
 800533a:	187a      	adds	r2, r7, r1
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d001      	beq.n	8005346 <OD_write_1005+0x106>
    ) {
        return ODR_INVALID_VALUE;
 8005342:	230f      	movs	r3, #15
 8005344:	e05c      	b.n	8005400 <OD_write_1005+0x1c0>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2244      	movs	r2, #68	; 0x44
 800534a:	5a9b      	ldrh	r3, [r3, r2]
 800534c:	261e      	movs	r6, #30
 800534e:	19ba      	adds	r2, r7, r6
 8005350:	8812      	ldrh	r2, [r2, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d041      	beq.n	80053da <OD_write_1005+0x19a>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800535e:	2317      	movs	r3, #23
 8005360:	18fc      	adds	r4, r7, r3
 8005362:	4d2a      	ldr	r5, [pc, #168]	; (800540c <OD_write_1005+0x1cc>)
 8005364:	19bb      	adds	r3, r7, r6
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	4b29      	ldr	r3, [pc, #164]	; (8005410 <OD_write_1005+0x1d0>)
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	2300      	movs	r3, #0
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	002b      	movs	r3, r5
 8005376:	f002 fcab 	bl	8007cd0 <CO_CANrxBufferInit>
 800537a:	0003      	movs	r3, r0
 800537c:	7023      	strb	r3, [r4, #0]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 800537e:	2317      	movs	r3, #23
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b25b      	sxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <OD_write_1005+0x14e>
            return ODR_DEV_INCOMPAT;
 800538a:	2309      	movs	r3, #9
 800538c:	e038      	b.n	8005400 <OD_write_1005+0x1c0>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	224c      	movs	r2, #76	; 0x4c
 8005396:	5a99      	ldrh	r1, [r3, r2]
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	4193      	sbcs	r3, r2
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	001c      	movs	r4, r3
 80053a4:	231e      	movs	r3, #30
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	9400      	str	r4, [sp, #0]
 80053b0:	2300      	movs	r3, #0
 80053b2:	f002 fcf5 	bl	8007da0 <CO_CANtxBufferInit>
 80053b6:	0002      	movs	r2, r0
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <OD_write_1005+0x18e>
            SYNC->isProducer = false;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2200      	movs	r2, #0
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 80053ca:	2309      	movs	r3, #9
 80053cc:	e018      	b.n	8005400 <OD_write_1005+0x1c0>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	221e      	movs	r2, #30
 80053d2:	18ba      	adds	r2, r7, r2
 80053d4:	2144      	movs	r1, #68	; 0x44
 80053d6:	8812      	ldrh	r2, [r2, #0]
 80053d8:	525a      	strh	r2, [r3, r1]
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <OD_write_1005+0x1b2>
        SYNC->counter = 0;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	2200      	movs	r2, #0
 80053ea:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	2200      	movs	r2, #0
 80053f0:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7fc fa95 	bl	8001928 <OD_writeOriginal>
 80053fe:	0003      	movs	r3, r0
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b00b      	add	sp, #44	; 0x2c
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005408:	bffff800 	.word	0xbffff800
 800540c:	000007ff 	.word	0x000007ff
 8005410:	080051a9 	.word	0x080051a9

08005414 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005414:	b5b0      	push	{r4, r5, r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <OD_write_1019+0x2e>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	7c5b      	ldrb	r3, [r3, #17]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <OD_write_1019+0x2e>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <OD_write_1019+0x2e>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005442:	2309      	movs	r3, #9
 8005444:	e048      	b.n	80054d8 <OD_write_1019+0xc4>
    }

    CO_SYNC_t *SYNC = stream->object;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 800544c:	2513      	movs	r5, #19
 800544e:	197c      	adds	r4, r7, r5
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	0018      	movs	r0, r3
 8005454:	f7ff fe08 	bl	8005068 <CO_getUint8>
 8005458:	0003      	movs	r3, r0
 800545a:	7023      	strb	r3, [r4, #0]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 800545c:	197b      	adds	r3, r7, r5
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d003      	beq.n	800546c <OD_write_1019+0x58>
 8005464:	197b      	adds	r3, r7, r5
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2bf0      	cmp	r3, #240	; 0xf0
 800546a:	d901      	bls.n	8005470 <OD_write_1019+0x5c>
        return ODR_INVALID_VALUE;
 800546c:	230f      	movs	r3, #15
 800546e:	e033      	b.n	80054d8 <OD_write_1019+0xc4>
    }
    if (*SYNC->OD_1006_period != 0) {
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <OD_write_1019+0x6a>
        return ODR_DATA_DEV_STATE;
 800547a:	2317      	movs	r3, #23
 800547c:	e02c      	b.n	80054d8 <OD_write_1019+0xc4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	224c      	movs	r2, #76	; 0x4c
 8005486:	5a99      	ldrh	r1, [r3, r2]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2244      	movs	r2, #68	; 0x44
 800548c:	5a9a      	ldrh	r2, [r3, r2]
 800548e:	2313      	movs	r3, #19
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	1e5c      	subs	r4, r3, #1
 8005496:	41a3      	sbcs	r3, r4
 8005498:	b2db      	uxtb	r3, r3
 800549a:	001c      	movs	r4, r3
 800549c:	2300      	movs	r3, #0
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	9400      	str	r4, [sp, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	f002 fc7c 	bl	8007da0 <CO_CANtxBufferInit>
 80054a8:	0002      	movs	r2, r0
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <OD_write_1019+0xac>
        SYNC->isProducer = false;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80054bc:	2309      	movs	r3, #9
 80054be:	e00b      	b.n	80054d8 <OD_write_1019+0xc4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2213      	movs	r2, #19
 80054c4:	18ba      	adds	r2, r7, r2
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fc fa29 	bl	8001928 <OD_writeOriginal>
 80054d6:	0003      	movs	r3, r0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b006      	add	sp, #24
 80054de:	bdb0      	pop	{r4, r5, r7, pc}

080054e0 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80054e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e2:	b08d      	sub	sp, #52	; 0x34
 80054e4:	af04      	add	r7, sp, #16
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00e      	beq.n	8005512 <CO_SYNC_init+0x32>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <CO_SYNC_init+0x32>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <CO_SYNC_init+0x32>
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005512:	2301      	movs	r3, #1
 8005514:	425b      	negs	r3, r3
 8005516:	e12a      	b.n	800576e <CO_SYNC_init+0x28e>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2260      	movs	r2, #96	; 0x60
 800551c:	2100      	movs	r1, #0
 800551e:	0018      	movs	r0, r3
 8005520:	f009 fe00 	bl	800f124 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8005528:	251f      	movs	r5, #31
 800552a:	197c      	adds	r4, r7, r5
 800552c:	2318      	movs	r3, #24
 800552e:	18fa      	adds	r2, r7, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	2301      	movs	r3, #1
 8005534:	2100      	movs	r1, #0
 8005536:	f7ff fdef 	bl	8005118 <OD_get_u32>
 800553a:	0003      	movs	r3, r0
 800553c:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 800553e:	197b      	adds	r3, r7, r5
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b25b      	sxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <CO_SYNC_init+0x84>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8005548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <CO_SYNC_init+0x7e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	0018      	movs	r0, r3
 8005552:	f7ff fda8 	bl	80050a6 <OD_getIndex>
 8005556:	0003      	movs	r3, r0
 8005558:	001a      	movs	r2, r3
 800555a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800555e:	230c      	movs	r3, #12
 8005560:	425b      	negs	r3, r3
 8005562:	e104      	b.n	800576e <CO_SYNC_init+0x28e>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a82      	ldr	r2, [pc, #520]	; (8005778 <CO_SYNC_init+0x298>)
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a82      	ldr	r2, [pc, #520]	; (800577c <CO_SYNC_init+0x29c>)
 8005574:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3334      	adds	r3, #52	; 0x34
 800557a:	001a      	movs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0011      	movs	r1, r2
 8005580:	0018      	movs	r0, r3
 8005582:	f7ff fd9f 	bl	80050c4 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8005586:	6838      	ldr	r0, [r7, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	2204      	movs	r2, #4
 800558c:	2100      	movs	r1, #0
 800558e:	f7fc fc5b 	bl	8001e48 <OD_getPtr>
 8005592:	0002      	movs	r2, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <CO_SYNC_init+0xdc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80055a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <CO_SYNC_init+0xd6>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7ff fd7c 	bl	80050a6 <OD_getIndex>
 80055ae:	0003      	movs	r3, r0
 80055b0:	001a      	movs	r2, r3
 80055b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80055b6:	230c      	movs	r3, #12
 80055b8:	425b      	negs	r3, r3
 80055ba:	e0d8      	b.n	800576e <CO_SYNC_init+0x28e>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80055bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055be:	2300      	movs	r3, #0
 80055c0:	2204      	movs	r2, #4
 80055c2:	2100      	movs	r1, #0
 80055c4:	f7fc fc40 	bl	8001e48 <OD_getPtr>
 80055c8:	0002      	movs	r2, r0
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d011      	beq.n	80055f8 <CO_SYNC_init+0x118>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <CO_SYNC_init+0x118>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80055dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <CO_SYNC_init+0x112>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7ff fd5e 	bl	80050a6 <OD_getIndex>
 80055ea:	0003      	movs	r3, r0
 80055ec:	001a      	movs	r2, r3
 80055ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80055f2:	230c      	movs	r3, #12
 80055f4:	425b      	negs	r3, r3
 80055f6:	e0ba      	b.n	800576e <CO_SYNC_init+0x28e>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 80055f8:	2117      	movs	r1, #23
 80055fa:	187b      	adds	r3, r7, r1
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]

    if (OD_1019_syncCounterOvf != NULL) {
 8005600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03e      	beq.n	8005684 <CO_SYNC_init+0x1a4>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8005606:	251f      	movs	r5, #31
 8005608:	197c      	adds	r4, r7, r5
 800560a:	187a      	adds	r2, r7, r1
 800560c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800560e:	2301      	movs	r3, #1
 8005610:	2100      	movs	r1, #0
 8005612:	f7ff fd69 	bl	80050e8 <OD_get_u8>
 8005616:	0003      	movs	r3, r0
 8005618:	7023      	strb	r3, [r4, #0]
        if (odRet != ODR_OK) {
 800561a:	197b      	adds	r3, r7, r5
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b25b      	sxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <CO_SYNC_init+0x160>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8005624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <CO_SYNC_init+0x15a>
 800562a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff fd3a 	bl	80050a6 <OD_getIndex>
 8005632:	0003      	movs	r3, r0
 8005634:	001a      	movs	r2, r3
 8005636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005638:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800563a:	230c      	movs	r3, #12
 800563c:	425b      	negs	r3, r3
 800563e:	e096      	b.n	800576e <CO_SYNC_init+0x28e>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8005640:	2217      	movs	r2, #23
 8005642:	18bb      	adds	r3, r7, r2
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d103      	bne.n	8005652 <CO_SYNC_init+0x172>
 800564a:	18bb      	adds	r3, r7, r2
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e007      	b.n	8005662 <CO_SYNC_init+0x182>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8005652:	2217      	movs	r2, #23
 8005654:	18bb      	adds	r3, r7, r2
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2bf0      	cmp	r3, #240	; 0xf0
 800565a:	d902      	bls.n	8005662 <CO_SYNC_init+0x182>
 800565c:	18bb      	adds	r3, r7, r2
 800565e:	22f0      	movs	r2, #240	; 0xf0
 8005660:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a43      	ldr	r2, [pc, #268]	; (8005778 <CO_SYNC_init+0x298>)
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a43      	ldr	r2, [pc, #268]	; (8005780 <CO_SYNC_init+0x2a0>)
 8005672:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3350      	adds	r3, #80	; 0x50
 8005678:	001a      	movs	r2, r3
 800567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567c:	0011      	movs	r1, r2
 800567e:	0018      	movs	r0, r3
 8005680:	f7ff fd20 	bl	80050c4 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005684:	2317      	movs	r3, #23
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	781a      	ldrb	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	05db      	lsls	r3, r3, #23
 800569a:	4013      	ands	r3, r2
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	4193      	sbcs	r3, r2
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	001a      	movs	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	055b      	lsls	r3, r3, #21
 80056ae:	0d5b      	lsrs	r3, r3, #21
 80056b0:	b299      	uxth	r1, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2244      	movs	r2, #68	; 0x44
 80056b6:	5299      	strh	r1, [r3, r2]
    SYNC->CANdevRx = CANdevRx;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056bc:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	203c      	movs	r0, #60	; 0x3c
 80056c2:	2208      	movs	r2, #8
 80056c4:	18b9      	adds	r1, r7, r2
 80056c6:	180a      	adds	r2, r1, r0
 80056c8:	8812      	ldrh	r2, [r2, #0]
 80056ca:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d0:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2244      	movs	r2, #68	; 0x44
 80056d6:	2108      	movs	r1, #8
 80056d8:	468c      	mov	ip, r1
 80056da:	44bc      	add	ip, r7
 80056dc:	4462      	add	r2, ip
 80056de:	214c      	movs	r1, #76	; 0x4c
 80056e0:	8812      	ldrh	r2, [r2, #0]
 80056e2:	525a      	strh	r2, [r3, r1]
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	055b      	lsls	r3, r3, #21
 80056ea:	0d5b      	lsrs	r3, r3, #21
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	261e      	movs	r6, #30
 80056f0:	19bc      	adds	r4, r7, r6
 80056f2:	4d24      	ldr	r5, [pc, #144]	; (8005784 <CO_SYNC_init+0x2a4>)
 80056f4:	2308      	movs	r3, #8
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	181b      	adds	r3, r3, r0
 80056fa:	8819      	ldrh	r1, [r3, #0]
 80056fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80056fe:	4b22      	ldr	r3, [pc, #136]	; (8005788 <CO_SYNC_init+0x2a8>)
 8005700:	9302      	str	r3, [sp, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	2300      	movs	r3, #0
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	002b      	movs	r3, r5
 800570c:	f002 fae0 	bl	8007cd0 <CO_CANrxBufferInit>
 8005710:	0003      	movs	r3, r0
 8005712:	7023      	strb	r3, [r4, #0]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8005714:	19bb      	adds	r3, r7, r6
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b25b      	sxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <CO_SYNC_init+0x246>
        return ret;
 800571e:	19bb      	adds	r3, r7, r6
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	b25b      	sxtb	r3, r3
 8005724:	e023      	b.n	800576e <CO_SYNC_init+0x28e>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	b29b      	uxth	r3, r3
 800572a:	055b      	lsls	r3, r3, #21
 800572c:	0d5b      	lsrs	r3, r3, #21
 800572e:	b29a      	uxth	r2, r3
 8005730:	2317      	movs	r3, #23
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	1e59      	subs	r1, r3, #1
 8005738:	418b      	sbcs	r3, r1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	001c      	movs	r4, r3
 800573e:	2344      	movs	r3, #68	; 0x44
 8005740:	2108      	movs	r1, #8
 8005742:	468c      	mov	ip, r1
 8005744:	44bc      	add	ip, r7
 8005746:	4463      	add	r3, ip
 8005748:	8819      	ldrh	r1, [r3, #0]
 800574a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800574c:	2300      	movs	r3, #0
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	9400      	str	r4, [sp, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	f002 fb24 	bl	8007da0 <CO_CANtxBufferInit>
 8005758:	0002      	movs	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <CO_SYNC_init+0x28c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005766:	2301      	movs	r3, #1
 8005768:	425b      	negs	r3, r3
 800576a:	e000      	b.n	800576e <CO_SYNC_init+0x28e>
#endif

    return CO_ERROR_NO;
 800576c:	2300      	movs	r3, #0
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b009      	add	sp, #36	; 0x24
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	0800186b 	.word	0x0800186b
 800577c:	08005241 	.word	0x08005241
 8005780:	08005415 	.word	0x08005415
 8005784:	000007ff 	.word	0x000007ff
 8005788:	080051a9 	.word	0x080051a9

0800578c <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800579a:	231f      	movs	r3, #31
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]

    if (NMTisPreOrOperational) {
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d100      	bne.n	80057aa <CO_SYNC_process+0x1e>
 80057a8:	e08f      	b.n	80058ca <CO_SYNC_process+0x13e>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	18d3      	adds	r3, r2, r3
 80057b2:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d902      	bls.n	80057c4 <CO_SYNC_process+0x38>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <CO_SYNC_process+0x54>
            SYNC->timer = 0;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 80057d2:	231f      	movs	r3, #31
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	2201      	movs	r2, #1
 80057d8:	701a      	strb	r2, [r3, #0]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <CO_SYNC_process+0x64>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	e000      	b.n	80057f2 <CO_SYNC_process+0x66>
 80057f0:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80057f2:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d035      	beq.n	8005866 <CO_SYNC_process+0xda>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <CO_SYNC_process+0x92>
                if (SYNC->timer >= OD_1006_period) {
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	429a      	cmp	r2, r3
 800580a:	d82c      	bhi.n	8005866 <CO_SYNC_process+0xda>
                    syncStatus = CO_SYNC_RX_TX;
 800580c:	231f      	movs	r3, #31
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]
                    CO_SYNCsend(SYNC);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fc96 	bl	8005148 <CO_SYNCsend>
 800581c:	e023      	b.n	8005866 <CO_SYNC_process+0xda>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	7c1b      	ldrb	r3, [r3, #16]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d11f      	bne.n	8005866 <CO_SYNC_process+0xda>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	429a      	cmp	r2, r3
 8005836:	d202      	bcs.n	800583e <CO_SYNC_process+0xb2>
 8005838:	2301      	movs	r3, #1
 800583a:	425b      	negs	r3, r3
 800583c:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	429a      	cmp	r2, r3
 8005846:	d20e      	bcs.n	8005866 <CO_SYNC_process+0xda>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2281      	movs	r2, #129	; 0x81
 8005852:	0212      	lsls	r2, r2, #8
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	0013      	movs	r3, r2
 8005858:	2218      	movs	r2, #24
 800585a:	2101      	movs	r1, #1
 800585c:	f7fb f8ba 	bl	80009d4 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2202      	movs	r2, #2
 8005864:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d017      	beq.n	800589e <CO_SYNC_process+0x112>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d012      	beq.n	800589e <CO_SYNC_process+0x112>
            && SYNC->timer > *SYNC->OD_1007_window
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90b      	bls.n	800589e <CO_SYNC_process+0x112>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <CO_SYNC_process+0x10a>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800588e:	231f      	movs	r3, #31
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	2202      	movs	r2, #2
 8005894:	701a      	strb	r2, [r3, #0]
            }
            SYNC->syncIsOutsideWindow = true;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	615a      	str	r2, [r3, #20]
 800589c:	e002      	b.n	80058a4 <CO_SYNC_process+0x118>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	7a1b      	ldrb	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01a      	beq.n	80058e2 <CO_SYNC_process+0x156>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	7a1b      	ldrb	r3, [r3, #8]
 80058b4:	001a      	movs	r2, r3
 80058b6:	4b19      	ldr	r3, [pc, #100]	; (800591c <CO_SYNC_process+0x190>)
 80058b8:	9200      	str	r2, [sp, #0]
 80058ba:	2219      	movs	r2, #25
 80058bc:	2101      	movs	r1, #1
 80058be:	f7fb f889 	bl	80009d4 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	721a      	strb	r2, [r3, #8]
 80058c8:	e00b      	b.n	80058e2 <CO_SYNC_process+0x156>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 80058e2:	231f      	movs	r3, #31
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10f      	bne.n	800590c <CO_SYNC_process+0x180>
        if (SYNC->timeoutError == 2) {
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	7c1b      	ldrb	r3, [r3, #16]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d108      	bne.n	8005906 <CO_SYNC_process+0x17a>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	2218      	movs	r2, #24
 8005900:	2100      	movs	r1, #0
 8005902:	f7fb f867 	bl	80009d4 <CO_error>
        }
        SYNC->timeoutError = 1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 800590c:	231f      	movs	r3, #31
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	781b      	ldrb	r3, [r3, #0]
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b008      	add	sp, #32
 8005918:	bd80      	pop	{r7, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	00008240 	.word	0x00008240

08005920 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8005920:	b590      	push	{r4, r7, lr}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	240e      	movs	r4, #14
 800592c:	193b      	adds	r3, r7, r4
 800592e:	2202      	movs	r2, #2
 8005930:	0018      	movs	r0, r3
 8005932:	f009 fbe4 	bl	800f0fe <memmove>
 8005936:	193b      	adds	r3, r7, r4
 8005938:	881b      	ldrh	r3, [r3, #0]
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b005      	add	sp, #20
 8005940:	bd90      	pop	{r4, r7, pc}

08005942 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	230c      	movs	r3, #12
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	2204      	movs	r2, #4
 8005952:	0018      	movs	r0, r3
 8005954:	f009 fbd3 	bl	800f0fe <memmove>
 8005958:	68fb      	ldr	r3, [r7, #12]
}
 800595a:	0018      	movs	r0, r3
 800595c:	46bd      	mov	sp, r7
 800595e:	b004      	add	sp, #16
 8005960:	bd80      	pop	{r7, pc}

08005962 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <OD_getIndex+0x14>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	e000      	b.n	8005978 <OD_getIndex+0x16>
 8005976:	2300      	movs	r3, #0
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b002      	add	sp, #8
 800597e:	bd80      	pop	{r7, pc}

08005980 <OD_extension_init>:
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <OD_extension_init+0x14>
 8005990:	2305      	movs	r3, #5
 8005992:	e003      	b.n	800599c <OD_extension_init+0x1c>
    entry->extension = extension;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <OD_get_u32>:
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	200b      	movs	r0, #11
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	1c0a      	adds	r2, r1, #0
 80059b6:	701a      	strb	r2, [r3, #0]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	183b      	adds	r3, r7, r0
 80059bc:	7819      	ldrb	r1, [r3, #0]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2304      	movs	r3, #4
 80059c6:	f7fc f9c7 	bl	8001d58 <OD_get_value>
 80059ca:	0003      	movs	r3, r0
}
 80059cc:	0018      	movs	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b004      	add	sp, #16
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80059e2:	2113      	movs	r1, #19
 80059e4:	187b      	adds	r3, r7, r1
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	7912      	ldrb	r2, [r2, #4]
 80059ea:	701a      	strb	r2, [r3, #0]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	3305      	adds	r3, #5
 80059f0:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 80059f2:	187b      	adds	r3, r7, r1
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d108      	bne.n	8005a0c <CO_TIME_receive+0x38>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	68f9      	ldr	r1, [r7, #12]
 80059fe:	2206      	movs	r2, #6
 8005a00:	0018      	movs	r0, r3
 8005a02:	f009 fb73 	bl	800f0ec <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b006      	add	sp, #24
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <OD_write_1012+0x2e>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	7c5b      	ldrb	r3, [r3, #17]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d108      	bne.n	8005a42 <OD_write_1012+0x2e>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d102      	bne.n	8005a42 <OD_write_1012+0x2e>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005a42:	2309      	movs	r3, #9
 8005a44:	e06a      	b.n	8005b1c <OD_write_1012+0x108>
    }

    CO_TIME_t *TIME = stream->object;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7ff ff77 	bl	8005942 <CO_getUint32>
 8005a54:	0003      	movs	r3, r0
 8005a56:	61bb      	str	r3, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	2116      	movs	r1, #22
 8005a5e:	187b      	adds	r3, r7, r1
 8005a60:	0552      	lsls	r2, r2, #21
 8005a62:	0d52      	lsrs	r2, r2, #21
 8005a64:	801a      	strh	r2, [r3, #0]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	; (8005b24 <OD_write_1012+0x110>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d13d      	bne.n	8005aea <OD_write_1012+0xd6>
 8005a6e:	187b      	adds	r3, r7, r1
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	2b7f      	cmp	r3, #127	; 0x7f
 8005a74:	d939      	bls.n	8005aea <OD_write_1012+0xd6>
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	881a      	ldrh	r2, [r3, #0]
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d905      	bls.n	8005a8e <OD_write_1012+0x7a>
 8005a82:	187b      	adds	r3, r7, r1
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	23c0      	movs	r3, #192	; 0xc0
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d92d      	bls.n	8005aea <OD_write_1012+0xd6>
 8005a8e:	2116      	movs	r1, #22
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	23b0      	movs	r3, #176	; 0xb0
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d905      	bls.n	8005aa8 <OD_write_1012+0x94>
 8005a9c:	187b      	adds	r3, r7, r1
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	23c0      	movs	r3, #192	; 0xc0
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d320      	bcc.n	8005aea <OD_write_1012+0xd6>
 8005aa8:	2116      	movs	r1, #22
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	881a      	ldrh	r2, [r3, #0]
 8005aae:	23c0      	movs	r3, #192	; 0xc0
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d905      	bls.n	8005ac2 <OD_write_1012+0xae>
 8005ab6:	187b      	adds	r3, r7, r1
 8005ab8:	881a      	ldrh	r2, [r3, #0]
 8005aba:	23d0      	movs	r3, #208	; 0xd0
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d313      	bcc.n	8005aea <OD_write_1012+0xd6>
 8005ac2:	2116      	movs	r1, #22
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	23dc      	movs	r3, #220	; 0xdc
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d305      	bcc.n	8005adc <OD_write_1012+0xc8>
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	23e0      	movs	r3, #224	; 0xe0
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d306      	bcc.n	8005aea <OD_write_1012+0xd6>
 8005adc:	2316      	movs	r3, #22
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	23e0      	movs	r3, #224	; 0xe0
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d901      	bls.n	8005aee <OD_write_1012+0xda>
        return ODR_INVALID_VALUE;
 8005aea:	230f      	movs	r3, #15
 8005aec:	e016      	b.n	8005b1c <OD_write_1012+0x108>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	0fdb      	lsrs	r3, r3, #31
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	001a      	movs	r2, r3
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	05db      	lsls	r3, r3, #23
 8005b00:	4013      	ands	r3, r2
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4193      	sbcs	r3, r2
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	001a      	movs	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7fb ff07 	bl	8001928 <OD_writeOriginal>
 8005b1a:	0003      	movs	r3, r0
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b008      	add	sp, #32
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	3ffff800 	.word	0x3ffff800

08005b28 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2a:	b08d      	sub	sp, #52	; 0x34
 8005b2c:	af04      	add	r7, sp, #16
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	001a      	movs	r2, r3
 8005b36:	1cbb      	adds	r3, r7, #2
 8005b38:	801a      	strh	r2, [r3, #0]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <CO_TIME_init+0x24>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <CO_TIME_init+0x24>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <CO_TIME_init+0x2a>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	425b      	negs	r3, r3
 8005b50:	e06f      	b.n	8005c32 <CO_TIME_init+0x10a>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	222c      	movs	r2, #44	; 0x2c
 8005b56:	2100      	movs	r1, #0
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f009 fae3 	bl	800f124 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8005b5e:	251f      	movs	r5, #31
 8005b60:	197c      	adds	r4, r7, r5
 8005b62:	2314      	movs	r3, #20
 8005b64:	18fa      	adds	r2, r7, r3
 8005b66:	68b8      	ldr	r0, [r7, #8]
 8005b68:	2301      	movs	r3, #1
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	f7ff ff1a 	bl	80059a4 <OD_get_u32>
 8005b70:	0003      	movs	r3, r0
 8005b72:	7023      	strb	r3, [r4, #0]
    if (odRet != ODR_OK) {
 8005b74:	197b      	adds	r3, r7, r5
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <CO_TIME_init+0x72>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <CO_TIME_init+0x6c>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff feeb 	bl	8005962 <OD_getIndex>
 8005b8c:	0003      	movs	r3, r0
 8005b8e:	001a      	movs	r2, r3
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005b94:	230c      	movs	r3, #12
 8005b96:	425b      	negs	r3, r3
 8005b98:	e04b      	b.n	8005c32 <CO_TIME_init+0x10a>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a26      	ldr	r2, [pc, #152]	; (8005c3c <CO_TIME_init+0x114>)
 8005ba4:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a25      	ldr	r2, [pc, #148]	; (8005c40 <CO_TIME_init+0x118>)
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	331c      	adds	r3, #28
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	0011      	movs	r1, r2
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff fee2 	bl	8005980 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	211c      	movs	r1, #28
 8005bc2:	187b      	adds	r3, r7, r1
 8005bc4:	0552      	lsls	r2, r2, #21
 8005bc6:	0d52      	lsrs	r2, r2, #21
 8005bc8:	801a      	strh	r2, [r3, #0]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	0fdb      	lsrs	r3, r3, #31
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	001a      	movs	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	05db      	lsls	r3, r3, #23
 8005bdc:	4013      	ands	r3, r2
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	4193      	sbcs	r3, r2
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	001a      	movs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <CO_TIME_init+0x108>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005bf8:	261b      	movs	r6, #27
 8005bfa:	19bc      	adds	r4, r7, r6
 8005bfc:	4d11      	ldr	r5, [pc, #68]	; (8005c44 <CO_TIME_init+0x11c>)
 8005bfe:	187b      	adds	r3, r7, r1
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	1cbb      	adds	r3, r7, #2
 8005c04:	8819      	ldrh	r1, [r3, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <CO_TIME_init+0x120>)
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	002b      	movs	r3, r5
 8005c16:	f002 f85b 	bl	8007cd0 <CO_CANrxBufferInit>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	7023      	strb	r3, [r4, #0]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005c1e:	19bb      	adds	r3, r7, r6
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <CO_TIME_init+0x108>
            return ret;
 8005c28:	19bb      	adds	r3, r7, r6
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	e000      	b.n	8005c32 <CO_TIME_init+0x10a>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b009      	add	sp, #36	; 0x24
 8005c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	0800186b 	.word	0x0800186b
 8005c40:	08005a15 	.word	0x08005a15
 8005c44:	000007ff 	.word	0x000007ff
 8005c48:	080059d5 	.word	0x080059d5

08005c4c <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8005c4c:	b5b0      	push	{r4, r5, r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d028      	beq.n	8005cb4 <CO_TIME_process+0x68>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d024      	beq.n	8005cb4 <CO_TIME_process+0x68>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d023      	beq.n	8005cba <CO_TIME_process+0x6e>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7ff fe64 	bl	8005942 <CO_getUint32>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	623b      	str	r3, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3304      	adds	r3, #4
 8005c82:	251e      	movs	r5, #30
 8005c84:	197c      	adds	r4, r7, r5
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7ff fe4a 	bl	8005920 <CO_getUint16>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	8023      	strh	r3, [r4, #0]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	091a      	lsrs	r2, r3, #4
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	197a      	adds	r2, r7, r5
 8005c9e:	8812      	ldrh	r2, [r2, #0]
 8005ca0:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005cb2:	e002      	b.n	8005cba <CO_TIME_process+0x6e>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d131      	bne.n	8005d28 <CO_TIME_process+0xdc>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d02e      	beq.n	8005d28 <CO_TIME_process+0xdc>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	89db      	ldrh	r3, [r3, #14]
 8005cce:	001a      	movs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	22fa      	movs	r2, #250	; 0xfa
 8005cda:	0091      	lsls	r1, r2, #2
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fa fa25 	bl	800012c <__udivsi3>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	22fa      	movs	r2, #250	; 0xfa
 8005cea:	0091      	lsls	r1, r2, #2
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7fa faa3 	bl	8000238 <__aeabi_uidivmod>
 8005cf2:	000b      	movs	r3, r1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	18d2      	adds	r2, r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <CO_TIME_process+0xe8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d90b      	bls.n	8005d28 <CO_TIME_process+0xdc>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <CO_TIME_process+0xec>)
 8005d16:	189a      	adds	r2, r3, r2
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	609a      	str	r2, [r3, #8]
            TIME->days += 1;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	899b      	ldrh	r3, [r3, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b00a      	add	sp, #40	; 0x28
 8005d30:	bdb0      	pop	{r4, r5, r7, pc}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	05265bff 	.word	0x05265bff
 8005d38:	fad9a400 	.word	0xfad9a400

08005d3c <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005d44:	230f      	movs	r3, #15
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if (LEDs == NULL) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <CO_LEDs_init+0x1c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005d52:	2301      	movs	r3, #1
 8005d54:	425b      	negs	r3, r3
 8005d56:	e009      	b.n	8005d6c <CO_LEDs_init+0x30>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	220c      	movs	r2, #12
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f009 f9e0 	bl	800f124 <memset>

    return ret;
 8005d64:	230f      	movs	r3, #15
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b25b      	sxtb	r3, r3
}
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b004      	add	sp, #16
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	1dfb      	adds	r3, r7, #7
 8005d82:	701a      	strb	r2, [r3, #0]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005d84:	231f      	movs	r3, #31
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
    uint8_t gr = 0;
 8005d8c:	231e      	movs	r3, #30
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
    bool_t tick = false;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	18d2      	adds	r2, r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005da4:	e0ed      	b.n	8005f82 <CO_LEDs_process+0x20e>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	7a5b      	ldrb	r3, [r3, #9]
 8005daa:	001a      	movs	r2, r3
 8005dac:	2301      	movs	r3, #1
 8005dae:	4013      	ands	r3, r2
 8005db0:	425a      	negs	r2, r3
 8005db2:	4153      	adcs	r3, r2
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	613b      	str	r3, [r7, #16]

        tick = true;
 8005db8:	2301      	movs	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4abf      	ldr	r2, [pc, #764]	; (80060c0 <CO_LEDs_process+0x34c>)
 8005dc2:	189a      	adds	r2, r3, r2
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	791b      	ldrb	r3, [r3, #4]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	711a      	strb	r2, [r3, #4]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	791b      	ldrb	r3, [r3, #4]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d800      	bhi.n	8005dde <CO_LEDs_process+0x6a>
 8005ddc:	e0af      	b.n	8005f3e <CO_LEDs_process+0x1ca>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8005de4:	201e      	movs	r0, #30
 8005de6:	183b      	adds	r3, r7, r0
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	211f      	movs	r1, #31
 8005dee:	187b      	adds	r3, r7, r1
 8005df0:	183a      	adds	r2, r7, r0
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	701a      	strb	r2, [r3, #0]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	7a5b      	ldrb	r3, [r3, #9]
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d106      	bne.n	8005e10 <CO_LEDs_process+0x9c>
 8005e02:	187b      	adds	r3, r7, r1
 8005e04:	187a      	adds	r2, r7, r1
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	2102      	movs	r1, #2
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e006      	b.n	8005e1e <CO_LEDs_process+0xaa>
            else                                    gr |= CO_LED_blink;
 8005e10:	221e      	movs	r2, #30
 8005e12:	18bb      	adds	r3, r7, r2
 8005e14:	18ba      	adds	r2, r7, r2
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	2102      	movs	r1, #2
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	701a      	strb	r2, [r3, #0]

            switch (++LEDs->LEDtmrflash_1) {
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	795b      	ldrb	r3, [r3, #5]
 8005e22:	3301      	adds	r3, #1
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	715a      	strb	r2, [r3, #5]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	795b      	ldrb	r3, [r3, #5]
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d015      	beq.n	8005e5e <CO_LEDs_process+0xea>
 8005e32:	dc18      	bgt.n	8005e66 <CO_LEDs_process+0xf2>
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d002      	beq.n	8005e3e <CO_LEDs_process+0xca>
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d008      	beq.n	8005e4e <CO_LEDs_process+0xda>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8005e3c:	e013      	b.n	8005e66 <CO_LEDs_process+0xf2>
                case 1: rd |= CO_LED_flash_1; break;
 8005e3e:	221f      	movs	r2, #31
 8005e40:	18bb      	adds	r3, r7, r2
 8005e42:	18ba      	adds	r2, r7, r2
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	2104      	movs	r1, #4
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e00c      	b.n	8005e68 <CO_LEDs_process+0xf4>
                case 2: gr |= CO_LED_flash_1; break;
 8005e4e:	221e      	movs	r2, #30
 8005e50:	18bb      	adds	r3, r7, r2
 8005e52:	18ba      	adds	r2, r7, r2
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	2104      	movs	r1, #4
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	e004      	b.n	8005e68 <CO_LEDs_process+0xf4>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	715a      	strb	r2, [r3, #5]
 8005e64:	e000      	b.n	8005e68 <CO_LEDs_process+0xf4>
                default: break;
 8005e66:	46c0      	nop			; (mov r8, r8)
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	799b      	ldrb	r3, [r3, #6]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	719a      	strb	r2, [r3, #6]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	799b      	ldrb	r3, [r3, #6]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d818      	bhi.n	8005eae <CO_LEDs_process+0x13a>
 8005e7c:	009a      	lsls	r2, r3, #2
 8005e7e:	4b91      	ldr	r3, [pc, #580]	; (80060c4 <CO_LEDs_process+0x350>)
 8005e80:	18d3      	adds	r3, r2, r3
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	469f      	mov	pc, r3
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8005e86:	221f      	movs	r2, #31
 8005e88:	18bb      	adds	r3, r7, r2
 8005e8a:	18ba      	adds	r2, r7, r2
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	2108      	movs	r1, #8
 8005e90:	430a      	orrs	r2, r1
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e00c      	b.n	8005eb0 <CO_LEDs_process+0x13c>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8005e96:	221e      	movs	r2, #30
 8005e98:	18bb      	adds	r3, r7, r2
 8005e9a:	18ba      	adds	r2, r7, r2
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	2108      	movs	r1, #8
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e004      	b.n	8005eb0 <CO_LEDs_process+0x13c>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	719a      	strb	r2, [r3, #6]
 8005eac:	e000      	b.n	8005eb0 <CO_LEDs_process+0x13c>
                default: break;
 8005eae:	46c0      	nop			; (mov r8, r8)
            }
            switch (++LEDs->LEDtmrflash_3) {
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	79db      	ldrb	r3, [r3, #7]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	71da      	strb	r2, [r3, #7]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	79db      	ldrb	r3, [r3, #7]
 8005ec0:	2b0a      	cmp	r3, #10
 8005ec2:	d818      	bhi.n	8005ef6 <CO_LEDs_process+0x182>
 8005ec4:	009a      	lsls	r2, r3, #2
 8005ec6:	4b80      	ldr	r3, [pc, #512]	; (80060c8 <CO_LEDs_process+0x354>)
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	469f      	mov	pc, r3
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8005ece:	221f      	movs	r2, #31
 8005ed0:	18bb      	adds	r3, r7, r2
 8005ed2:	18ba      	adds	r2, r7, r2
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	2110      	movs	r1, #16
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e00c      	b.n	8005ef8 <CO_LEDs_process+0x184>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8005ede:	221e      	movs	r2, #30
 8005ee0:	18bb      	adds	r3, r7, r2
 8005ee2:	18ba      	adds	r2, r7, r2
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	2110      	movs	r1, #16
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e004      	b.n	8005ef8 <CO_LEDs_process+0x184>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	71da      	strb	r2, [r3, #7]
 8005ef4:	e000      	b.n	8005ef8 <CO_LEDs_process+0x184>
                default: break;
 8005ef6:	46c0      	nop			; (mov r8, r8)
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	7a1b      	ldrb	r3, [r3, #8]
 8005efc:	3301      	adds	r3, #1
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	721a      	strb	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	7a1b      	ldrb	r3, [r3, #8]
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d827      	bhi.n	8005f5c <CO_LEDs_process+0x1e8>
 8005f0c:	009a      	lsls	r2, r3, #2
 8005f0e:	4b6f      	ldr	r3, [pc, #444]	; (80060cc <CO_LEDs_process+0x358>)
 8005f10:	18d3      	adds	r3, r2, r3
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	469f      	mov	pc, r3
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8005f16:	221f      	movs	r2, #31
 8005f18:	18bb      	adds	r3, r7, r2
 8005f1a:	18ba      	adds	r2, r7, r2
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	2120      	movs	r1, #32
 8005f20:	430a      	orrs	r2, r1
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	e01b      	b.n	8005f5e <CO_LEDs_process+0x1ea>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8005f26:	221e      	movs	r2, #30
 8005f28:	18bb      	adds	r3, r7, r2
 8005f2a:	18ba      	adds	r2, r7, r2
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	2120      	movs	r1, #32
 8005f30:	430a      	orrs	r2, r1
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e013      	b.n	8005f5e <CO_LEDs_process+0x1ea>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	721a      	strb	r2, [r3, #8]
 8005f3c:	e00f      	b.n	8005f5e <CO_LEDs_process+0x1ea>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	7a5a      	ldrb	r2, [r3, #9]
 8005f42:	231f      	movs	r3, #31
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	217e      	movs	r1, #126	; 0x7e
 8005f48:	400a      	ands	r2, r1
 8005f4a:	701a      	strb	r2, [r3, #0]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	7a9a      	ldrb	r2, [r3, #10]
 8005f50:	231e      	movs	r3, #30
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	217e      	movs	r1, #126	; 0x7e
 8005f56:	400a      	ands	r2, r1
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e000      	b.n	8005f5e <CO_LEDs_process+0x1ea>
                default: break;
 8005f5c:	46c0      	nop			; (mov r8, r8)
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <CO_LEDs_process+0x200>
 8005f64:	221f      	movs	r2, #31
 8005f66:	18bb      	adds	r3, r7, r2
 8005f68:	18ba      	adds	r2, r7, r2
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e006      	b.n	8005f82 <CO_LEDs_process+0x20e>
        else               gr |= CO_LED_flicker;
 8005f74:	221e      	movs	r2, #30
 8005f76:	18bb      	adds	r3, r7, r2
 8005f78:	18ba      	adds	r2, r7, r2
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	701a      	strb	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a52      	ldr	r2, [pc, #328]	; (80060d0 <CO_LEDs_process+0x35c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d900      	bls.n	8005f8e <CO_LEDs_process+0x21a>
 8005f8c:	e70b      	b.n	8005da6 <CO_LEDs_process+0x32>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d100      	bne.n	8005f96 <CO_LEDs_process+0x222>
 8005f94:	e0c6      	b.n	8006124 <CO_LEDs_process+0x3b0>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <CO_LEDs_process+0x232>
 8005f9c:	2317      	movs	r3, #23
 8005f9e:	18fb      	adds	r3, r7, r3
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	e04d      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8005fa6:	1dfb      	adds	r3, r7, #7
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b25b      	sxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d108      	bne.n	8005fc2 <CO_LEDs_process+0x24e>
 8005fb0:	2317      	movs	r3, #23
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	221f      	movs	r2, #31
 8005fb6:	18ba      	adds	r2, r7, r2
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	2101      	movs	r1, #1
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e03f      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <CO_LEDs_process+0x266>
 8005fc8:	2317      	movs	r3, #23
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	221f      	movs	r2, #31
 8005fce:	18ba      	adds	r2, r7, r2
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	2120      	movs	r1, #32
 8005fd4:	400a      	ands	r2, r1
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e033      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8005fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <CO_LEDs_process+0x27e>
 8005fe0:	2317      	movs	r3, #23
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	221f      	movs	r2, #31
 8005fe6:	18ba      	adds	r2, r7, r2
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	2110      	movs	r1, #16
 8005fec:	400a      	ands	r2, r1
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	e027      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <CO_LEDs_process+0x296>
 8005ff8:	2317      	movs	r3, #23
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	221f      	movs	r2, #31
 8005ffe:	18ba      	adds	r2, r7, r2
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	2108      	movs	r1, #8
 8006004:	400a      	ands	r2, r1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e01b      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <CO_LEDs_process+0x2ae>
 8006010:	2317      	movs	r3, #23
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	221f      	movs	r2, #31
 8006016:	18ba      	adds	r2, r7, r2
 8006018:	7812      	ldrb	r2, [r2, #0]
 800601a:	2104      	movs	r1, #4
 800601c:	400a      	ands	r2, r1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e00f      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <CO_LEDs_process+0x2c6>
 8006028:	2317      	movs	r3, #23
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	221f      	movs	r2, #31
 800602e:	18ba      	adds	r2, r7, r2
 8006030:	7812      	ldrb	r2, [r2, #0]
 8006032:	2102      	movs	r1, #2
 8006034:	400a      	ands	r2, r1
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	e003      	b.n	8006042 <CO_LEDs_process+0x2ce>
        else                                        rd_co = 0;
 800603a:	2317      	movs	r3, #23
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <CO_LEDs_process+0x2e6>
 8006048:	2316      	movs	r3, #22
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	221e      	movs	r2, #30
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	2101      	movs	r1, #1
 8006054:	400a      	ands	r2, r1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e040      	b.n	80060dc <CO_LEDs_process+0x368>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 800605a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <CO_LEDs_process+0x2fe>
 8006060:	2316      	movs	r3, #22
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	221e      	movs	r2, #30
 8006066:	18ba      	adds	r2, r7, r2
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	2110      	movs	r1, #16
 800606c:	400a      	ands	r2, r1
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e034      	b.n	80060dc <CO_LEDs_process+0x368>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 8006072:	1dfb      	adds	r3, r7, #7
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b25b      	sxtb	r3, r3
 8006078:	2b04      	cmp	r3, #4
 800607a:	d108      	bne.n	800608e <CO_LEDs_process+0x31a>
 800607c:	2316      	movs	r3, #22
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	221e      	movs	r2, #30
 8006082:	18ba      	adds	r2, r7, r2
 8006084:	7812      	ldrb	r2, [r2, #0]
 8006086:	2104      	movs	r1, #4
 8006088:	400a      	ands	r2, r1
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e026      	b.n	80060dc <CO_LEDs_process+0x368>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 800608e:	1dfb      	adds	r3, r7, #7
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b25b      	sxtb	r3, r3
 8006094:	2b7f      	cmp	r3, #127	; 0x7f
 8006096:	d108      	bne.n	80060aa <CO_LEDs_process+0x336>
 8006098:	2316      	movs	r3, #22
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	221e      	movs	r2, #30
 800609e:	18ba      	adds	r2, r7, r2
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	2102      	movs	r1, #2
 80060a4:	400a      	ands	r2, r1
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e018      	b.n	80060dc <CO_LEDs_process+0x368>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 80060aa:	1dfb      	adds	r3, r7, #7
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	2b05      	cmp	r3, #5
 80060b2:	d10f      	bne.n	80060d4 <CO_LEDs_process+0x360>
 80060b4:	2316      	movs	r3, #22
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e00e      	b.n	80060dc <CO_LEDs_process+0x368>
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	ffff3cb0 	.word	0xffff3cb0
 80060c4:	080100b8 	.word	0x080100b8
 80060c8:	080100dc 	.word	0x080100dc
 80060cc:	08010108 	.word	0x08010108
 80060d0:	0000c34f 	.word	0x0000c34f
        else                                        gr_co = 0;
 80060d4:	2316      	movs	r3, #22
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 80060dc:	2317      	movs	r3, #23
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <CO_LEDs_process+0x382>
 80060e6:	221f      	movs	r2, #31
 80060e8:	18bb      	adds	r3, r7, r2
 80060ea:	18ba      	adds	r2, r7, r2
 80060ec:	7812      	ldrb	r2, [r2, #0]
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	4249      	negs	r1, r1
 80060f2:	430a      	orrs	r2, r1
 80060f4:	701a      	strb	r2, [r3, #0]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 80060f6:	2316      	movs	r3, #22
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <CO_LEDs_process+0x39c>
 8006100:	221e      	movs	r2, #30
 8006102:	18bb      	adds	r3, r7, r2
 8006104:	18ba      	adds	r2, r7, r2
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	2180      	movs	r1, #128	; 0x80
 800610a:	4249      	negs	r1, r1
 800610c:	430a      	orrs	r2, r1
 800610e:	701a      	strb	r2, [r3, #0]
        LEDs->LEDred = rd;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	221f      	movs	r2, #31
 8006114:	18ba      	adds	r2, r7, r2
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	221e      	movs	r2, #30
 800611e:	18ba      	adds	r2, r7, r2
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8006124:	46c0      	nop			; (mov r8, r8)
 8006126:	46bd      	mov	sp, r7
 8006128:	b008      	add	sp, #32
 800612a:	bd80      	pop	{r7, pc}

0800612c <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 800612c:	b5b0      	push	{r4, r5, r7, lr}
 800612e:	b090      	sub	sp, #64	; 0x40
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800613a:	2133      	movs	r1, #51	; 0x33
 800613c:	187b      	adds	r3, r7, r1
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7912      	ldrb	r2, [r2, #4]
 8006142:	701a      	strb	r2, [r3, #0]

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8006144:	187b      	adds	r3, r7, r1
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d000      	beq.n	800614e <CO_LSSslave_receive+0x22>
 800614c:	e150      	b.n	80063f0 <CO_LSSslave_receive+0x2c4>
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	2b00      	cmp	r3, #0
 8006154:	d000      	beq.n	8006158 <CO_LSSslave_receive+0x2c>
 8006156:	e14b      	b.n	80063f0 <CO_LSSslave_receive+0x2c4>
        bool_t request_LSSslave_process = false;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	3305      	adds	r3, #5
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8006162:	212b      	movs	r1, #43	; 0x2b
 8006164:	187b      	adds	r3, r7, r1
 8006166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	701a      	strb	r2, [r3, #0]

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 800616c:	187b      	adds	r3, r7, r1
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b04      	cmp	r3, #4
 8006172:	d130      	bne.n	80061d6 <CO_LSSslave_receive+0xaa>
            uint8_t mode = data[1];
 8006174:	211f      	movs	r1, #31
 8006176:	187b      	adds	r3, r7, r1
 8006178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617a:	7852      	ldrb	r2, [r2, #1]
 800617c:	701a      	strb	r2, [r3, #0]

            switch (mode) {
 800617e:	187b      	adds	r3, r7, r1
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <CO_LSSslave_receive+0x60>
 8006186:	2b01      	cmp	r3, #1
 8006188:	d021      	beq.n	80061ce <CO_LSSslave_receive+0xa2>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 800618a:	e12b      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	7c1b      	ldrb	r3, [r3, #16]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d111      	bne.n	80061b8 <CO_LSSslave_receive+0x8c>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	2240      	movs	r2, #64	; 0x40
 8006198:	5c9b      	ldrb	r3, [r3, r2]
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800619a:	2bff      	cmp	r3, #255	; 0xff
 800619c:	d10c      	bne.n	80061b8 <CO_LSSslave_receive+0x8c>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80061a4:	2bff      	cmp	r3, #255	; 0xff
 80061a6:	d007      	beq.n	80061b8 <CO_LSSslave_receive+0x8c>
                        LSSslave->service = cs;
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	222b      	movs	r2, #43	; 0x2b
 80061ac:	18ba      	adds	r2, r7, r2
 80061ae:	2148      	movs	r1, #72	; 0x48
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	545a      	strb	r2, [r3, r1]
                        request_LSSslave_process = true;
 80061b4:	2301      	movs	r3, #1
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	2200      	movs	r2, #0
 80061bc:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	3314      	adds	r3, #20
 80061c2:	2210      	movs	r2, #16
 80061c4:	2100      	movs	r1, #0
 80061c6:	0018      	movs	r0, r3
 80061c8:	f008 ffac 	bl	800f124 <memset>
                    break;
 80061cc:	e10a      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	2201      	movs	r2, #1
 80061d2:	741a      	strb	r2, [r3, #16]
                    break;
 80061d4:	e106      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80061d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d8:	7c1b      	ldrb	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d000      	beq.n	80061e0 <CO_LSSslave_receive+0xb4>
 80061de:	e0ec      	b.n	80063ba <CO_LSSslave_receive+0x28e>
            switch (cs) {
 80061e0:	232b      	movs	r3, #43	; 0x2b
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	3b40      	subs	r3, #64	; 0x40
 80061e8:	2b11      	cmp	r3, #17
 80061ea:	d900      	bls.n	80061ee <CO_LSSslave_receive+0xc2>
 80061ec:	e0f5      	b.n	80063da <CO_LSSslave_receive+0x2ae>
 80061ee:	009a      	lsls	r2, r3, #2
 80061f0:	4b81      	ldr	r3, [pc, #516]	; (80063f8 <CO_LSSslave_receive+0x2cc>)
 80061f2:	18d3      	adds	r3, r2, r3
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	469f      	mov	pc, r3
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	1c59      	adds	r1, r3, #1
 80061fc:	2318      	movs	r3, #24
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2204      	movs	r2, #4
 8006202:	0018      	movs	r0, r3
 8006204:	f008 ff72 	bl	800f0ec <memcpy>
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	615a      	str	r2, [r3, #20]
                break;
 800620e:	e0e9      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	1c59      	adds	r1, r3, #1
 8006214:	2314      	movs	r3, #20
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2204      	movs	r2, #4
 800621a:	0018      	movs	r0, r3
 800621c:	f008 ff66 	bl	800f0ec <memcpy>
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	619a      	str	r2, [r3, #24]
                break;
 8006226:	e0dd      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	1c59      	adds	r1, r3, #1
 800622c:	2310      	movs	r3, #16
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2204      	movs	r2, #4
 8006232:	0018      	movs	r0, r3
 8006234:	f008 ff5a 	bl	800f0ec <memcpy>
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	61da      	str	r2, [r3, #28]
                break;
 800623e:	e0d1      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	230c      	movs	r3, #12
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	2204      	movs	r2, #4
 800624a:	0018      	movs	r0, r3
 800624c:	f008 ff4e 	bl	800f0ec <memcpy>
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006254:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	429a      	cmp	r2, r3
 8006260:	d000      	beq.n	8006264 <CO_LSSslave_receive+0x138>
 8006262:	e0bc      	b.n	80063de <CO_LSSslave_receive+0x2b2>
 8006264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	429a      	cmp	r2, r3
 800626e:	d000      	beq.n	8006272 <CO_LSSslave_receive+0x146>
 8006270:	e0b5      	b.n	80063de <CO_LSSslave_receive+0x2b2>
 8006272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	429a      	cmp	r2, r3
 800627c:	d000      	beq.n	8006280 <CO_LSSslave_receive+0x154>
 800627e:	e0ae      	b.n	80063de <CO_LSSslave_receive+0x2b2>
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	429a      	cmp	r2, r3
 800628a:	d000      	beq.n	800628e <CO_LSSslave_receive+0x162>
 800628c:	e0a7      	b.n	80063de <CO_LSSslave_receive+0x2b2>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	2201      	movs	r2, #1
 8006292:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8006294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006296:	222b      	movs	r2, #43	; 0x2b
 8006298:	18ba      	adds	r2, r7, r2
 800629a:	2148      	movs	r1, #72	; 0x48
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	545a      	strb	r2, [r3, r1]
                    request_LSSslave_process = true;
 80062a0:	2301      	movs	r3, #1
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 80062a4:	e09b      	b.n	80063de <CO_LSSslave_receive+0x2b2>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	d000      	beq.n	80062b2 <CO_LSSslave_receive+0x186>
 80062b0:	e097      	b.n	80063e2 <CO_LSSslave_receive+0x2b6>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	5c9b      	ldrb	r3, [r3, r2]
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80062b8:	2bff      	cmp	r3, #255	; 0xff
 80062ba:	d000      	beq.n	80062be <CO_LSSslave_receive+0x192>
 80062bc:	e091      	b.n	80063e2 <CO_LSSslave_receive+0x2b6>
                {
                    uint8_t bitCheck = data[5];
 80062be:	212a      	movs	r1, #42	; 0x2a
 80062c0:	187b      	adds	r3, r7, r1
 80062c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c4:	7952      	ldrb	r2, [r2, #5]
 80062c6:	701a      	strb	r2, [r3, #0]
                    uint8_t lssSub = data[6];
 80062c8:	2329      	movs	r3, #41	; 0x29
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ce:	7992      	ldrb	r2, [r2, #6]
 80062d0:	701a      	strb	r2, [r3, #0]
                    uint8_t lssNext = data[7];
 80062d2:	2328      	movs	r3, #40	; 0x28
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d8:	79d2      	ldrb	r2, [r2, #7]
 80062da:	701a      	strb	r2, [r3, #0]
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80062dc:	187b      	adds	r3, r7, r1
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b1f      	cmp	r3, #31
 80062e2:	d904      	bls.n	80062ee <CO_LSSslave_receive+0x1c2>
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d000      	beq.n	80062ee <CO_LSSslave_receive+0x1c2>
 80062ec:	e07a      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
 80062ee:	2329      	movs	r3, #41	; 0x29
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d900      	bls.n	80062fa <CO_LSSslave_receive+0x1ce>
 80062f8:	e074      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 80062fa:	2328      	movs	r3, #40	; 0x28
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d900      	bls.n	8006306 <CO_LSSslave_receive+0x1da>
 8006304:	e06e      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	2308      	movs	r3, #8
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	2204      	movs	r2, #4
 8006310:	0018      	movs	r0, r3
 8006312:	f008 feeb 	bl	800f0ec <memcpy>
                    idNumber = CO_SWAP_32(valSw);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 800631a:	2300      	movs	r3, #0
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800631e:	232a      	movs	r3, #42	; 0x2a
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d10d      	bne.n	8006344 <CO_LSSslave_receive+0x218>
                        /* Confirm, Reset */
                        ack = true;
 8006328:	2301      	movs	r3, #1
 800632a:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	2234      	movs	r2, #52	; 0x34
 8006330:	2100      	movs	r1, #0
 8006332:	5499      	strb	r1, [r3, r2]
                        memset(&LSSslave->lssFastscan, 0,
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	3324      	adds	r3, #36	; 0x24
 8006338:	2210      	movs	r2, #16
 800633a:	2100      	movs	r1, #0
 800633c:	0018      	movs	r0, r3
 800633e:	f008 fef1 	bl	800f124 <memset>
 8006342:	e02e      	b.n	80063a2 <CO_LSSslave_receive+0x276>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8006344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006346:	2234      	movs	r2, #52	; 0x34
 8006348:	5c9b      	ldrb	r3, [r3, r2]
 800634a:	2029      	movs	r0, #41	; 0x29
 800634c:	183a      	adds	r2, r7, r0
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d126      	bne.n	80063a2 <CO_LSSslave_receive+0x276>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8006354:	242a      	movs	r4, #42	; 0x2a
 8006356:	193b      	adds	r3, r7, r4
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	4252      	negs	r2, r2
 800635e:	409a      	lsls	r2, r3
 8006360:	0013      	movs	r3, r2
 8006362:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006364:	183b      	adds	r3, r7, r0
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	0092      	lsls	r2, r2, #2
 800636c:	58d2      	ldr	r2, [r2, r3]
                            == (idNumber & mask))
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	4053      	eors	r3, r2
 8006372:	6a3a      	ldr	r2, [r7, #32]
 8006374:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006376:	d114      	bne.n	80063a2 <CO_LSSslave_receive+0x276>
                        {
                            /* all requested bits match */
                            ack = true;
 8006378:	2301      	movs	r3, #1
 800637a:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	2528      	movs	r5, #40	; 0x28
 8006380:	197a      	adds	r2, r7, r5
 8006382:	2134      	movs	r1, #52	; 0x34
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	545a      	strb	r2, [r3, r1]

                            if (bitCheck == 0 && lssNext < lssSub) {
 8006388:	193b      	adds	r3, r7, r4
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <CO_LSSslave_receive+0x276>
 8006390:	197a      	adds	r2, r7, r5
 8006392:	183b      	adds	r3, r7, r0
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d202      	bcs.n	80063a2 <CO_LSSslave_receive+0x276>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	2201      	movs	r2, #1
 80063a0:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01c      	beq.n	80063e2 <CO_LSSslave_receive+0x2b6>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	222b      	movs	r2, #43	; 0x2b
 80063ac:	18ba      	adds	r2, r7, r2
 80063ae:	2148      	movs	r1, #72	; 0x48
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	545a      	strb	r2, [r3, r1]
                        request_LSSslave_process = true;
 80063b4:	2301      	movs	r3, #1
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 80063b8:	e013      	b.n	80063e2 <CO_LSSslave_receive+0x2b6>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	3349      	adds	r3, #73	; 0x49
 80063be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c0:	2208      	movs	r2, #8
 80063c2:	0018      	movs	r0, r3
 80063c4:	f008 fe92 	bl	800f0ec <memcpy>
            LSSslave->service = cs;
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	222b      	movs	r2, #43	; 0x2b
 80063cc:	18ba      	adds	r2, r7, r2
 80063ce:	2148      	movs	r1, #72	; 0x48
 80063d0:	7812      	ldrb	r2, [r2, #0]
 80063d2:	545a      	strb	r2, [r3, r1]
            request_LSSslave_process = true;
 80063d4:	2301      	movs	r3, #1
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d8:	e004      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                break;
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	e002      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                break;
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	e000      	b.n	80063e4 <CO_LSSslave_receive+0x2b8>
                break;
 80063e2:	46c0      	nop			; (mov r8, r8)
        }

        if (request_LSSslave_process) {
 80063e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <CO_LSSslave_receive+0x2c4>
            CO_FLAG_SET(LSSslave->sendResponse);
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	2201      	movs	r2, #1
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b010      	add	sp, #64	; 0x40
 80063f6:	bdb0      	pop	{r4, r5, r7, pc}
 80063f8:	08010150 	.word	0x08010150

080063fc <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 80063fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fe:	b08b      	sub	sp, #44	; 0x2c
 8006400:	af04      	add	r7, sp, #16
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800640a:	2317      	movs	r3, #23
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d018      	beq.n	800644a <CO_LSSslave_init+0x4e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d015      	beq.n	800644a <CO_LSSslave_init+0x4e>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d012      	beq.n	800644a <CO_LSSslave_init+0x4e>
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00f      	beq.n	800644a <CO_LSSslave_init+0x4e>
        CANdevRx==NULL || CANdevTx==NULL ||
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <CO_LSSslave_init+0x4e>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <CO_LSSslave_init+0x46>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	b25b      	sxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	da06      	bge.n	8006450 <CO_LSSslave_init+0x54>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2bff      	cmp	r3, #255	; 0xff
 8006448:	d002      	beq.n	8006450 <CO_LSSslave_init+0x54>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800644a:	2301      	movs	r3, #1
 800644c:	425b      	negs	r3, r3
 800644e:	e060      	b.n	8006512 <CO_LSSslave_init+0x116>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2274      	movs	r2, #116	; 0x74
 8006454:	2100      	movs	r1, #0
 8006456:	0018      	movs	r0, r3
 8006458:	f008 fe64 	bl	800f124 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	2210      	movs	r2, #16
 8006462:	0018      	movs	r0, r3
 8006464:	f008 fe42 	bl	800f0ec <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2234      	movs	r2, #52	; 0x34
 8006472:	2100      	movs	r1, #0
 8006474:	5499      	strb	r1, [r3, r2]

    LSSslave->pendingBitRate = pendingBitRate;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	7819      	ldrb	r1, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2240      	movs	r2, #64	; 0x40
 800648a:	5499      	strb	r1, [r3, r2]
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8006492:	2617      	movs	r6, #23
 8006494:	19bc      	adds	r4, r7, r6
 8006496:	4d21      	ldr	r5, [pc, #132]	; (800651c <CO_LSSslave_init+0x120>)
 8006498:	2330      	movs	r3, #48	; 0x30
 800649a:	2208      	movs	r2, #8
 800649c:	4694      	mov	ip, r2
 800649e:	44bc      	add	ip, r7
 80064a0:	4463      	add	r3, ip
 80064a2:	881a      	ldrh	r2, [r3, #0]
 80064a4:	232c      	movs	r3, #44	; 0x2c
 80064a6:	2108      	movs	r1, #8
 80064a8:	468c      	mov	ip, r1
 80064aa:	44bc      	add	ip, r7
 80064ac:	4463      	add	r3, ip
 80064ae:	8819      	ldrh	r1, [r3, #0]
 80064b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b2:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <CO_LSSslave_init+0x124>)
 80064b4:	9302      	str	r3, [sp, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	002b      	movs	r3, r5
 80064c0:	f001 fc06 	bl	8007cd0 <CO_CANrxBufferInit>
 80064c4:	0003      	movs	r3, r0
 80064c6:	7023      	strb	r3, [r4, #0]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064cc:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 80064ce:	233c      	movs	r3, #60	; 0x3c
 80064d0:	2208      	movs	r2, #8
 80064d2:	4694      	mov	ip, r2
 80064d4:	44bc      	add	ip, r7
 80064d6:	4463      	add	r3, ip
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	2338      	movs	r3, #56	; 0x38
 80064dc:	2108      	movs	r1, #8
 80064de:	468c      	mov	ip, r1
 80064e0:	44bc      	add	ip, r7
 80064e2:	4463      	add	r3, ip
 80064e4:	8819      	ldrh	r1, [r3, #0]
 80064e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80064e8:	2300      	movs	r3, #0
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	2308      	movs	r3, #8
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	f001 fc55 	bl	8007da0 <CO_CANtxBufferInit>
 80064f6:	0002      	movs	r2, r0
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <CO_LSSslave_init+0x10e>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006504:	19bb      	adds	r3, r7, r6
 8006506:	22ff      	movs	r2, #255	; 0xff
 8006508:	701a      	strb	r2, [r3, #0]
    }

    return ret;
 800650a:	2317      	movs	r3, #23
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b25b      	sxtb	r3, r3
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b007      	add	sp, #28
 8006518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	000007ff 	.word	0x000007ff
 8006520:	0800612d 	.word	0x0800612d

08006524 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b08d      	sub	sp, #52	; 0x34
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 800652c:	2300      	movs	r3, #0
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006534:	2b00      	cmp	r3, #0
 8006536:	d100      	bne.n	800653a <CO_LSSslave_process+0x16>
 8006538:	e186      	b.n	8006848 <CO_LSSslave_process+0x324>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800653a:	2300      	movs	r3, #0
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	3305      	adds	r3, #5
 8006544:	2208      	movs	r2, #8
 8006546:	2100      	movs	r1, #0
 8006548:	0018      	movs	r0, r3
 800654a:	f008 fdeb 	bl	800f124 <memset>

        switch (LSSslave->service) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2248      	movs	r2, #72	; 0x48
 8006552:	5c9b      	ldrb	r3, [r3, r2]
 8006554:	3b04      	subs	r3, #4
 8006556:	2b5a      	cmp	r3, #90	; 0x5a
 8006558:	d900      	bls.n	800655c <CO_LSSslave_process+0x38>
 800655a:	e160      	b.n	800681e <CO_LSSslave_process+0x2fa>
 800655c:	009a      	lsls	r2, r3, #2
 800655e:	4bbd      	ldr	r3, [pc, #756]	; (8006854 <CO_LSSslave_process+0x330>)
 8006560:	18d3      	adds	r3, r2, r3
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	469f      	mov	pc, r3
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8006566:	2301      	movs	r3, #1
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800656a:	e15f      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	2244      	movs	r2, #68	; 0x44
 8006572:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006574:	2301      	movs	r3, #1
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006578:	e158      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 800657a:	2013      	movs	r0, #19
 800657c:	183b      	adds	r3, r7, r0
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	214a      	movs	r1, #74	; 0x4a
 8006582:	5c52      	ldrb	r2, [r2, r1]
 8006584:	701a      	strb	r2, [r3, #0]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8006586:	232b      	movs	r3, #43	; 0x2b
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]

            if (CO_LSS_NODE_ID_VALID(nid)) {
 800658e:	183b      	adds	r3, r7, r0
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <CO_LSSslave_process+0x7c>
 8006596:	183b      	adds	r3, r7, r0
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	da04      	bge.n	80065aa <CO_LSSslave_process+0x86>
 80065a0:	2313      	movs	r3, #19
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2bff      	cmp	r3, #255	; 0xff
 80065a8:	d106      	bne.n	80065b8 <CO_LSSslave_process+0x94>
                *LSSslave->pendingNodeID = nid;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	2213      	movs	r2, #19
 80065b0:	18ba      	adds	r2, r7, r2
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e003      	b.n	80065c0 <CO_LSSslave_process+0x9c>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 80065b8:	232b      	movs	r3, #43	; 0x2b
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	2148      	movs	r1, #72	; 0x48
 80065c8:	5c52      	ldrb	r2, [r2, r1]
 80065ca:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d0:	222b      	movs	r2, #43	; 0x2b
 80065d2:	18ba      	adds	r2, r7, r2
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80065d8:	2301      	movs	r3, #1
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80065dc:	e126      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d100      	bne.n	80065e8 <CO_LSSslave_process+0xc4>
 80065e6:	e11c      	b.n	8006822 <CO_LSSslave_process+0x2fe>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 80065e8:	241d      	movs	r4, #29
 80065ea:	193b      	adds	r3, r7, r4
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	214a      	movs	r1, #74	; 0x4a
 80065f0:	5c52      	ldrb	r2, [r2, r1]
 80065f2:	701a      	strb	r2, [r3, #0]
            tableIndex = LSSslave->CANdata[2];
 80065f4:	201c      	movs	r0, #28
 80065f6:	183b      	adds	r3, r7, r0
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	214b      	movs	r1, #75	; 0x4b
 80065fc:	5c52      	ldrb	r2, [r2, r1]
 80065fe:	701a      	strb	r2, [r3, #0]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006600:	232b      	movs	r3, #43	; 0x2b
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8006608:	232a      	movs	r3, #42	; 0x2a
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006610:	193b      	adds	r3, r7, r4
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d12b      	bne.n	8006670 <CO_LSSslave_process+0x14c>
 8006618:	183b      	adds	r3, r7, r0
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b05      	cmp	r3, #5
 800661e:	d027      	beq.n	8006670 <CO_LSSslave_process+0x14c>
 8006620:	183b      	adds	r3, r7, r0
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b09      	cmp	r3, #9
 8006626:	d823      	bhi.n	8006670 <CO_LSSslave_process+0x14c>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8006628:	183b      	adds	r3, r7, r0
 800662a:	7819      	ldrb	r1, [r3, #0]
 800662c:	241a      	movs	r4, #26
 800662e:	193b      	adds	r3, r7, r4
 8006630:	4a89      	ldr	r2, [pc, #548]	; (8006858 <CO_LSSslave_process+0x334>)
 8006632:	0049      	lsls	r1, r1, #1
 8006634:	5a8a      	ldrh	r2, [r1, r2]
 8006636:	801a      	strh	r2, [r3, #0]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006640:	193b      	adds	r3, r7, r4
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	0019      	movs	r1, r3
 8006646:	4790      	blx	r2
 8006648:	0003      	movs	r3, r0
 800664a:	617b      	str	r3, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <CO_LSSslave_process+0x13a>
                    *LSSslave->pendingBitRate = bit;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	193a      	adds	r2, r7, r4
 8006658:	8812      	ldrh	r2, [r2, #0]
 800665a:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800665c:	e00c      	b.n	8006678 <CO_LSSslave_process+0x154>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 800665e:	232b      	movs	r3, #43	; 0x2b
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	22ff      	movs	r2, #255	; 0xff
 8006664:	701a      	strb	r2, [r3, #0]
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006666:	232a      	movs	r3, #42	; 0x2a
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800666e:	e003      	b.n	8006678 <CO_LSSslave_process+0x154>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006670:	232b      	movs	r3, #43	; 0x2b
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	2148      	movs	r1, #72	; 0x48
 8006680:	5c52      	ldrb	r2, [r2, r1]
 8006682:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	222b      	movs	r2, #43	; 0x2b
 800668a:	18ba      	adds	r2, r7, r2
 800668c:	7812      	ldrb	r2, [r2, #0]
 800668e:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	222a      	movs	r2, #42	; 0x2a
 8006696:	18ba      	adds	r2, r7, r2
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 800669c:	2301      	movs	r3, #1
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066a0:	e0c4      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d100      	bne.n	80066ac <CO_LSSslave_process+0x188>
 80066aa:	e0bc      	b.n	8006826 <CO_LSSslave_process+0x302>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d100      	bne.n	80066b6 <CO_LSSslave_process+0x192>
 80066b4:	e0b9      	b.n	800682a <CO_LSSslave_process+0x306>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	224b      	movs	r2, #75	; 0x4b
 80066ba:	5c9b      	ldrb	r3, [r3, r2]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	241e      	movs	r4, #30
 80066c0:	193b      	adds	r3, r7, r4
 80066c2:	0212      	lsls	r2, r2, #8
 80066c4:	801a      	strh	r2, [r3, #0]
                delay |= LSSslave->CANdata[1];
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	224a      	movs	r2, #74	; 0x4a
 80066ca:	5c9b      	ldrb	r3, [r3, r2]
 80066cc:	b299      	uxth	r1, r3
 80066ce:	193b      	adds	r3, r7, r4
 80066d0:	193a      	adds	r2, r7, r4
 80066d2:	8812      	ldrh	r2, [r2, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	801a      	strh	r2, [r3, #0]
                LSSslave->pFunctLSSactivateBitRate(
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80066e0:	193b      	adds	r3, r7, r4
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	0019      	movs	r1, r3
 80066e6:	4790      	blx	r2
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 80066e8:	e09f      	b.n	800682a <CO_LSSslave_process+0x306>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 80066ea:	212b      	movs	r1, #43	; 0x2b
 80066ec:	187b      	adds	r3, r7, r1
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]

            if (LSSslave->pFunctLSScfgStore == NULL) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <CO_LSSslave_process+0x1de>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 80066fa:	187b      	adds	r3, r7, r1
 80066fc:	2201      	movs	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	e014      	b.n	800672c <CO_LSSslave_process+0x208>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e98      	ldr	r0, [r3, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 800670e:	7819      	ldrb	r1, [r3, #0]
                                               *LSSslave->pendingBitRate);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	001a      	movs	r2, r3
 8006718:	47a0      	blx	r4
 800671a:	0003      	movs	r3, r0
 800671c:	623b      	str	r3, [r7, #32]
                if (!result) {
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <CO_LSSslave_process+0x208>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8006724:	232b      	movs	r3, #43	; 0x2b
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	2202      	movs	r2, #2
 800672a:	701a      	strb	r2, [r3, #0]
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	2148      	movs	r1, #72	; 0x48
 8006734:	5c52      	ldrb	r2, [r2, r1]
 8006736:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	222b      	movs	r2, #43	; 0x2b
 800673e:	18ba      	adds	r2, r7, r2
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006744:	2301      	movs	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006748:	e070      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	2148      	movs	r1, #72	; 0x48
 8006752:	5c52      	ldrb	r2, [r2, r1]
 8006754:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	3306      	adds	r3, #6
 8006762:	220c      	movs	r2, #12
 8006764:	18b9      	adds	r1, r7, r2
 8006766:	2204      	movs	r2, #4
 8006768:	0018      	movs	r0, r3
 800676a:	f008 fcbf 	bl	800f0ec <memcpy>
            CANsend = true;
 800676e:	2301      	movs	r3, #1
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006772:	e05b      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	2148      	movs	r1, #72	; 0x48
 800677c:	5c52      	ldrb	r2, [r2, r1]
 800677e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	3306      	adds	r3, #6
 800678c:	220c      	movs	r2, #12
 800678e:	18b9      	adds	r1, r7, r2
 8006790:	2204      	movs	r2, #4
 8006792:	0018      	movs	r0, r3
 8006794:	f008 fcaa 	bl	800f0ec <memcpy>
            CANsend = true;
 8006798:	2301      	movs	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800679c:	e046      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	2148      	movs	r1, #72	; 0x48
 80067a6:	5c52      	ldrb	r2, [r2, r1]
 80067a8:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	3306      	adds	r3, #6
 80067b6:	220c      	movs	r2, #12
 80067b8:	18b9      	adds	r1, r7, r2
 80067ba:	2204      	movs	r2, #4
 80067bc:	0018      	movs	r0, r3
 80067be:	f008 fc95 	bl	800f0ec <memcpy>
            CANsend = true;
 80067c2:	2301      	movs	r3, #1
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80067c6:	e031      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	2148      	movs	r1, #72	; 0x48
 80067d0:	5c52      	ldrb	r2, [r2, r1]
 80067d2:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	3306      	adds	r3, #6
 80067e0:	220c      	movs	r2, #12
 80067e2:	18b9      	adds	r1, r7, r2
 80067e4:	2204      	movs	r2, #4
 80067e6:	0018      	movs	r0, r3
 80067e8:	f008 fc80 	bl	800f0ec <memcpy>
            CANsend = true;
 80067ec:	2301      	movs	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80067f0:	e01c      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	2148      	movs	r1, #72	; 0x48
 80067fa:	5c52      	ldrb	r2, [r2, r1]
 80067fc:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	2140      	movs	r1, #64	; 0x40
 8006806:	5c52      	ldrb	r2, [r2, r1]
 8006808:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 800680a:	2301      	movs	r3, #1
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800680e:	e00d      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	224f      	movs	r2, #79	; 0x4f
 8006816:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006818:	2301      	movs	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800681c:	e006      	b.n	800682c <CO_LSSslave_process+0x308>
        }
        default: {
            break;
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	e004      	b.n	800682c <CO_LSSslave_process+0x308>
                break;
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	e002      	b.n	800682c <CO_LSSslave_process+0x308>
                break;
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	e000      	b.n	800682c <CO_LSSslave_process+0x308>
            break;
 800682a:	46c0      	nop			; (mov r8, r8)
        }
        }

        if(CANsend) {
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <CO_LSSslave_process+0x31e>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	0019      	movs	r1, r3
 800683c:	0010      	movs	r0, r2
 800683e:	f001 fb77 	bl	8007f30 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800684a:	0018      	movs	r0, r3
 800684c:	46bd      	mov	sp, r7
 800684e:	b00d      	add	sp, #52	; 0x34
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	08010198 	.word	0x08010198
 8006858:	0801013c 	.word	0x0801013c

0800685c <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	000a      	movs	r2, r1
 8006866:	1cfb      	adds	r3, r7, #3
 8006868:	701a      	strb	r2, [r3, #0]
    uint8_t index = errorBit >> 3;
 800686a:	210f      	movs	r1, #15
 800686c:	187b      	adds	r3, r7, r1
 800686e:	1cfa      	adds	r2, r7, #3
 8006870:	7812      	ldrb	r2, [r2, #0]
 8006872:	08d2      	lsrs	r2, r2, #3
 8006874:	701a      	strb	r2, [r3, #0]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8006876:	1cfb      	adds	r3, r7, #3
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2207      	movs	r2, #7
 800687c:	4013      	ands	r3, r2
 800687e:	2201      	movs	r2, #1
 8006880:	409a      	lsls	r2, r3
 8006882:	200e      	movs	r0, #14
 8006884:	183b      	adds	r3, r7, r0
 8006886:	701a      	strb	r2, [r3, #0]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00d      	beq.n	80068aa <CO_isError+0x4e>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800688e:	187b      	adds	r3, r7, r1
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b09      	cmp	r3, #9
 8006894:	d809      	bhi.n	80068aa <CO_isError+0x4e>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006896:	187b      	adds	r3, r7, r1
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	5cd3      	ldrb	r3, [r2, r3]
 800689e:	183a      	adds	r2, r7, r0
 80068a0:	7812      	ldrb	r2, [r2, #0]
 80068a2:	4013      	ands	r3, r2
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <CO_isError+0x52>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <CO_isError+0x54>
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	0018      	movs	r0, r3
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b004      	add	sp, #16
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <CO_getErrorRegister+0x1e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <CO_getErrorRegister+0x1e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	e000      	b.n	80068d8 <CO_getErrorRegister+0x20>
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b002      	add	sp, #8
 80068de:	bd80      	pop	{r7, pc}

080068e0 <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <CO_NMT_getInternalState+0x16>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	e000      	b.n	80068f8 <CO_NMT_getInternalState+0x18>
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b002      	add	sp, #8
 80068fe:	bd80      	pop	{r7, pc}

08006900 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <CO_LSSslave_getState+0x14>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7c1b      	ldrb	r3, [r3, #16]
 8006912:	e000      	b.n	8006916 <CO_LSSslave_getState+0x16>
 8006914:	2300      	movs	r3, #0
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b002      	add	sp, #8
 800691c:	bd80      	pop	{r7, pc}

0800691e <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 800691e:	b590      	push	{r4, r7, lr}
 8006920:	b087      	sub	sp, #28
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	2001      	movs	r0, #1
 8006938:	f008 f99a 	bl	800ec70 <calloc>
 800693c:	0003      	movs	r3, r0
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d100      	bne.n	8006948 <CO_new+0x2a>
 8006946:	e10e      	b.n	8006b66 <CO_new+0x248>
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3340      	adds	r3, #64	; 0x40
 800694c:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 800694e:	2130      	movs	r1, #48	; 0x30
 8006950:	2001      	movs	r0, #1
 8006952:	f008 f98d 	bl	800ec70 <calloc>
 8006956:	0003      	movs	r3, r0
 8006958:	001a      	movs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	611a      	str	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d100      	bne.n	8006968 <CO_new+0x4a>
 8006966:	e100      	b.n	8006b6a <CO_new+0x24c>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3330      	adds	r3, #48	; 0x30
 800696c:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 800696e:	240b      	movs	r4, #11
 8006970:	193b      	adds	r3, r7, r4
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006976:	2130      	movs	r1, #48	; 0x30
 8006978:	2001      	movs	r0, #1
 800697a:	f008 f979 	bl	800ec70 <calloc>
 800697e:	0003      	movs	r3, r0
 8006980:	001a      	movs	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	615a      	str	r2, [r3, #20]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d100      	bne.n	8006990 <CO_new+0x72>
 800698e:	e0ee      	b.n	8006b6e <CO_new+0x250>
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3330      	adds	r3, #48	; 0x30
 8006994:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006996:	193b      	adds	r3, r7, r4
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2110      	movs	r1, #16
 800699c:	0018      	movs	r0, r3
 800699e:	f008 f967 	bl	800ec70 <calloc>
 80069a2:	0003      	movs	r3, r0
 80069a4:	001a      	movs	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	619a      	str	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d100      	bne.n	80069b4 <CO_new+0x96>
 80069b2:	e0de      	b.n	8006b72 <CO_new+0x254>
 80069b4:	193b      	adds	r3, r7, r4
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	18d3      	adds	r3, r2, r3
 80069be:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80069c0:	2150      	movs	r1, #80	; 0x50
 80069c2:	2001      	movs	r0, #1
 80069c4:	f008 f954 	bl	800ec70 <calloc>
 80069c8:	0003      	movs	r3, r0
 80069ca:	001a      	movs	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	61da      	str	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d100      	bne.n	80069da <CO_new+0xbc>
 80069d8:	e0cd      	b.n	8006b76 <CO_new+0x258>
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3350      	adds	r3, #80	; 0x50
 80069de:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 80069e0:	240a      	movs	r4, #10
 80069e2:	193b      	adds	r3, r7, r4
 80069e4:	2211      	movs	r2, #17
 80069e6:	701a      	strb	r2, [r3, #0]
            if (fifoSize >= 2) {
 80069e8:	193b      	adds	r3, r7, r4
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d914      	bls.n	8006a1a <CO_new+0xfc>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 80069f0:	193b      	adds	r3, r7, r4
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2108      	movs	r1, #8
 80069f6:	0018      	movs	r0, r3
 80069f8:	f008 f93a 	bl	800ec70 <calloc>
 80069fc:	0003      	movs	r3, r0
 80069fe:	001a      	movs	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	621a      	str	r2, [r3, #32]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d100      	bne.n	8006a0e <CO_new+0xf0>
 8006a0c:	e0b5      	b.n	8006b7a <CO_new+0x25c>
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	18d3      	adds	r3, r2, r3
 8006a18:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006a1a:	21a8      	movs	r1, #168	; 0xa8
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f008 f927 	bl	800ec70 <calloc>
 8006a22:	0003      	movs	r3, r0
 8006a24:	001a      	movs	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d100      	bne.n	8006a34 <CO_new+0x116>
 8006a32:	e0a4      	b.n	8006b7e <CO_new+0x260>
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	33a8      	adds	r3, #168	; 0xa8
 8006a38:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006a3a:	212c      	movs	r1, #44	; 0x2c
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f008 f917 	bl	800ec70 <calloc>
 8006a42:	0003      	movs	r3, r0
 8006a44:	001a      	movs	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d100      	bne.n	8006a54 <CO_new+0x136>
 8006a52:	e096      	b.n	8006b82 <CO_new+0x264>
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	332c      	adds	r3, #44	; 0x2c
 8006a58:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006a5a:	2160      	movs	r1, #96	; 0x60
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f008 f907 	bl	800ec70 <calloc>
 8006a62:	0003      	movs	r3, r0
 8006a64:	001a      	movs	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d100      	bne.n	8006a74 <CO_new+0x156>
 8006a72:	e088      	b.n	8006b86 <CO_new+0x268>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	3360      	adds	r3, #96	; 0x60
 8006a78:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006a7a:	23ba      	movs	r3, #186	; 0xba
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	0019      	movs	r1, r3
 8006a80:	2001      	movs	r0, #1
 8006a82:	f008 f8f5 	bl	800ec70 <calloc>
 8006a86:	0003      	movs	r3, r0
 8006a88:	001a      	movs	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d100      	bne.n	8006a98 <CO_new+0x17a>
 8006a96:	e078      	b.n	8006b8a <CO_new+0x26c>
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	3375      	adds	r3, #117	; 0x75
 8006a9c:	33ff      	adds	r3, #255	; 0xff
 8006a9e:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006aa0:	23b6      	movs	r3, #182	; 0xb6
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	0019      	movs	r1, r3
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	f008 f8e2 	bl	800ec70 <calloc>
 8006aac:	0003      	movs	r3, r0
 8006aae:	001a      	movs	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d068      	beq.n	8006b8e <CO_new+0x270>
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	336d      	adds	r3, #109	; 0x6d
 8006ac0:	33ff      	adds	r3, #255	; 0xff
 8006ac2:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006ac4:	210c      	movs	r1, #12
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f008 f8d2 	bl	800ec70 <calloc>
 8006acc:	0003      	movs	r3, r0
 8006ace:	001a      	movs	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d05a      	beq.n	8006b92 <CO_new+0x274>
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006ae2:	2174      	movs	r1, #116	; 0x74
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	f008 f8c3 	bl	800ec70 <calloc>
 8006aea:	0003      	movs	r3, r0
 8006aec:	001a      	movs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	63da      	str	r2, [r3, #60]	; 0x3c
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d04d      	beq.n	8006b96 <CO_new+0x278>
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3374      	adds	r3, #116	; 0x74
 8006afe:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006b00:	2138      	movs	r1, #56	; 0x38
 8006b02:	2001      	movs	r0, #1
 8006b04:	f008 f8b4 	bl	800ec70 <calloc>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	001a      	movs	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	605a      	str	r2, [r3, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d040      	beq.n	8006b9a <CO_new+0x27c>
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3338      	adds	r3, #56	; 0x38
 8006b1c:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006b1e:	210c      	movs	r1, #12
 8006b20:	2007      	movs	r0, #7
 8006b22:	f008 f8a5 	bl	800ec70 <calloc>
 8006b26:	0003      	movs	r3, r0
 8006b28:	001a      	movs	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	609a      	str	r2, [r3, #8]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d033      	beq.n	8006b9e <CO_new+0x280>
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3354      	adds	r3, #84	; 0x54
 8006b3a:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006b3c:	2118      	movs	r1, #24
 8006b3e:	2006      	movs	r0, #6
 8006b40:	f008 f896 	bl	800ec70 <calloc>
 8006b44:	0003      	movs	r3, r0
 8006b46:	001a      	movs	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	60da      	str	r2, [r3, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d026      	beq.n	8006ba2 <CO_new+0x284>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	3390      	adds	r3, #144	; 0x90
 8006b58:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	e01e      	b.n	8006ba4 <CO_new+0x286>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	e01c      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	e01a      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	e018      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	e016      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	e014      	b.n	8006ba4 <CO_new+0x286>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	e012      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	e010      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	e00e      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	e00c      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	e00a      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	e008      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	e006      	b.n	8006ba4 <CO_new+0x286>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	e004      	b.n	8006ba4 <CO_new+0x286>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	e002      	b.n	8006ba4 <CO_new+0x286>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	e000      	b.n	8006ba4 <CO_new+0x286>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006ba2:	46c0      	nop			; (mov r8, r8)
    } while (false);

    if (coFinal == NULL) {
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <CO_new+0x294>
        CO_delete(co);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	0018      	movs	r0, r3
 8006bae:	f000 f80b 	bl	8006bc8 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <CO_new+0x2a0>
        *heapMemoryUsed = mem;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006bbe:	697b      	ldr	r3, [r7, #20]
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b007      	add	sp, #28
 8006bc6:	bd90      	pop	{r4, r7, pc}

08006bc8 <CO_delete>:

void CO_delete(CO_t *co) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d054      	beq.n	8006c80 <CO_delete+0xb8>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f001 f862 	bl	8007ca4 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f008 fa69 	bl	800f0bc <free>
    CO_free(co->CANrx);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f008 fa64 	bl	800f0bc <free>
    CO_free(co->CANmodule);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f008 fa5f 	bl	800f0bc <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	0018      	movs	r0, r3
 8006c04:	f008 fa5a 	bl	800f0bc <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f008 fa55 	bl	800f0bc <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	0018      	movs	r0, r3
 8006c18:	f008 fa50 	bl	800f0bc <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	0018      	movs	r0, r3
 8006c22:	f008 fa4b 	bl	800f0bc <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f008 fa46 	bl	800f0bc <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	0018      	movs	r0, r3
 8006c36:	f008 fa41 	bl	800f0bc <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f008 fa3c 	bl	800f0bc <free>

    /* Emergency */
    CO_free(co->em);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f008 fa37 	bl	800f0bc <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f008 fa32 	bl	800f0bc <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f008 fa2d 	bl	800f0bc <free>
    CO_free(co->HBcons);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	0018      	movs	r0, r3
 8006c68:	f008 fa28 	bl	800f0bc <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f008 fa23 	bl	800f0bc <free>

    /* CANopen object */
    CO_free(co);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f008 fa1f 	bl	800f0bc <free>
 8006c7e:	e000      	b.n	8006c82 <CO_delete+0xba>
        return;
 8006c80:	46c0      	nop			; (mov r8, r8)
}
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b002      	add	sp, #8
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8006c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8a:	b08b      	sub	sp, #44	; 0x2c
 8006c8c:	af04      	add	r7, sp, #16
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	1dbb      	adds	r3, r7, #6
 8006c94:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <CO_CANinit+0x1a>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	425b      	negs	r3, r3
 8006ca0:	e01f      	b.n	8006ce2 <CO_CANinit+0x5a>

    co->CANmodule->CANnormal = false;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	0018      	movs	r0, r3
 8006cae:	f000 ff0d 	bl	8007acc <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6858      	ldr	r0, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689d      	ldr	r5, [r3, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2617      	movs	r6, #23
 8006cc0:	19bc      	adds	r4, r7, r6
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	1dba      	adds	r2, r7, #6
 8006cc6:	8812      	ldrh	r2, [r2, #0]
 8006cc8:	9202      	str	r2, [sp, #8]
 8006cca:	2206      	movs	r2, #6
 8006ccc:	9201      	str	r2, [sp, #4]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2307      	movs	r3, #7
 8006cd2:	002a      	movs	r2, r5
 8006cd4:	f000 ff22 	bl	8007b1c <CO_CANmodule_init>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	7023      	strb	r3, [r4, #0]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8006cdc:	19bb      	adds	r3, r7, r6
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b25b      	sxtb	r3, r3
}
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b007      	add	sp, #28
 8006ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006cec <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8006cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cee:	46c6      	mov	lr, r8
 8006cf0:	b500      	push	{lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af06      	add	r7, sp, #24
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <CO_LSSinit+0x1e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006d04:	2301      	movs	r3, #1
 8006d06:	425b      	negs	r3, r3
 8006d08:	e024      	b.n	8006d54 <CO_LSSinit+0x68>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4698      	mov	r8, r3
 8006d18:	2117      	movs	r1, #23
 8006d1a:	187c      	adds	r4, r7, r1
 8006d1c:	687e      	ldr	r6, [r7, #4]
 8006d1e:	683d      	ldr	r5, [r7, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <CO_LSSinit+0x74>)
 8006d24:	469c      	mov	ip, r3
 8006d26:	4663      	mov	r3, ip
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	2305      	movs	r3, #5
 8006d2c:	469c      	mov	ip, r3
 8006d2e:	4663      	mov	r3, ip
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	4643      	mov	r3, r8
 8006d34:	9303      	str	r3, [sp, #12]
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <CO_LSSinit+0x78>)
 8006d38:	9302      	str	r3, [sp, #8]
 8006d3a:	2306      	movs	r3, #6
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	9200      	str	r2, [sp, #0]
 8006d40:	0033      	movs	r3, r6
 8006d42:	002a      	movs	r2, r5
 8006d44:	f7ff fb5a 	bl	80063fc <CO_LSSslave_init>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	7023      	strb	r3, [r4, #0]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006d4c:	2117      	movs	r1, #23
 8006d4e:	187b      	adds	r3, r7, r1
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b25b      	sxtb	r3, r3
}
 8006d54:	0018      	movs	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b006      	add	sp, #24
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	46b8      	mov	r8, r7
 8006d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d60:	000007e4 	.word	0x000007e4
 8006d64:	000007e5 	.word	0x000007e5

08006d68 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6a:	46ce      	mov	lr, r9
 8006d6c:	4647      	mov	r7, r8
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b091      	sub	sp, #68	; 0x44
 8006d72:	af0a      	add	r7, sp, #40	; 0x28
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
 8006d7a:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <CO_CANopenInit+0x20>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006d82:	2301      	movs	r3, #1
 8006d84:	425b      	negs	r3, r3
 8006d86:	e180      	b.n	800708a <CO_CANopenInit+0x322>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <CO_CANopenInit+0x2c>
        em = co->em;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8006d9a:	2350      	movs	r3, #80	; 0x50
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2bff      	cmp	r3, #255	; 0xff
 8006da2:	d103      	bne.n	8006dac <CO_CANopenInit+0x44>
        co->nodeIdUnconfigured = true;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e00c      	b.n	8006dc6 <CO_CANopenInit+0x5e>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8006dac:	2250      	movs	r2, #80	; 0x50
 8006dae:	18bb      	adds	r3, r7, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <CO_CANopenInit+0x58>
 8006db6:	18bb      	adds	r3, r7, r2
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b25b      	sxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	da02      	bge.n	8006dc6 <CO_CANopenInit+0x5e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	425b      	negs	r3, r3
 8006dc4:	e161      	b.n	800708a <CO_CANopenInit+0x322>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	2511      	movs	r5, #17
 8006dcc:	197c      	adds	r4, r7, r5
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7fe ffb4 	bl	8005d3c <CO_LEDs_init>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	7023      	strb	r3, [r4, #0]
        if (err) return err;
 8006dd8:	197b      	adds	r3, r7, r5
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <CO_CANopenInit+0x82>
 8006de2:	197b      	adds	r3, r7, r5
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b25b      	sxtb	r3, r3
 8006de8:	e14f      	b.n	800708a <CO_CANopenInit+0x322>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <CO_CANopenInit+0x90>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006df2:	2313      	movs	r3, #19
 8006df4:	425b      	negs	r3, r3
 8006df6:	e148      	b.n	800708a <CO_CANopenInit+0x322>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	69d8      	ldr	r0, [r3, #28]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685d      	ldr	r5, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8006e00:	4ba5      	ldr	r3, [pc, #660]	; (8007098 <CO_CANopenInit+0x330>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	330c      	adds	r3, #12
 8006e08:	001e      	movs	r6, r3
        err = CO_EM_init(co->em,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	469c      	mov	ip, r3
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8006e10:	4ba1      	ldr	r3, [pc, #644]	; (8007098 <CO_CANopenInit+0x330>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8006e16:	3384      	adds	r3, #132	; 0x84
 8006e18:	001a      	movs	r2, r3
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006e1a:	4b9f      	ldr	r3, [pc, #636]	; (8007098 <CO_CANopenInit+0x330>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8006e20:	3318      	adds	r3, #24
 8006e22:	2111      	movs	r1, #17
 8006e24:	187c      	adds	r4, r7, r1
 8006e26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	2150      	movs	r1, #80	; 0x50
 8006e2c:	1879      	adds	r1, r7, r1
 8006e2e:	7809      	ldrb	r1, [r1, #0]
 8006e30:	9104      	str	r1, [sp, #16]
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	2301      	movs	r3, #1
 8006e36:	9302      	str	r3, [sp, #8]
 8006e38:	9201      	str	r2, [sp, #4]
 8006e3a:	2311      	movs	r3, #17
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4663      	mov	r3, ip
 8006e40:	0032      	movs	r2, r6
 8006e42:	0029      	movs	r1, r5
 8006e44:	f7f9 fb4a 	bl	80004dc <CO_EM_init>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	7023      	strb	r3, [r4, #0]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8006e4c:	2211      	movs	r2, #17
 8006e4e:	18bb      	adds	r3, r7, r2
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b25b      	sxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <CO_CANopenInit+0xf8>
 8006e58:	18bb      	adds	r3, r7, r2
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	e114      	b.n	800708a <CO_CANopenInit+0x322>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	691d      	ldr	r5, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8006e64:	4b8c      	ldr	r3, [pc, #560]	; (8007098 <CO_CANopenInit+0x330>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8006e6a:	33a8      	adds	r3, #168	; 0xa8
 8006e6c:	001e      	movs	r6, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2150      	movs	r1, #80	; 0x50
 8006e78:	1879      	adds	r1, r7, r1
 8006e7a:	7809      	ldrb	r1, [r1, #0]
 8006e7c:	b289      	uxth	r1, r1
 8006e7e:	24e0      	movs	r4, #224	; 0xe0
 8006e80:	00e4      	lsls	r4, r4, #3
 8006e82:	46a4      	mov	ip, r4
 8006e84:	4461      	add	r1, ip
 8006e86:	b289      	uxth	r1, r1
 8006e88:	2011      	movs	r0, #17
 8006e8a:	183c      	adds	r4, r7, r0
 8006e8c:	2050      	movs	r0, #80	; 0x50
 8006e8e:	1838      	adds	r0, r7, r0
 8006e90:	7800      	ldrb	r0, [r0, #0]
 8006e92:	4680      	mov	r8, r0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4684      	mov	ip, r0
 8006e98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006e9a:	9008      	str	r0, [sp, #32]
 8006e9c:	9107      	str	r1, [sp, #28]
 8006e9e:	2104      	movs	r1, #4
 8006ea0:	9106      	str	r1, [sp, #24]
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9304      	str	r3, [sp, #16]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	9202      	str	r2, [sp, #8]
 8006eae:	2340      	movs	r3, #64	; 0x40
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	233c      	movs	r3, #60	; 0x3c
 8006eb8:	18fb      	adds	r3, r7, r3
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	4643      	mov	r3, r8
 8006ec0:	4662      	mov	r2, ip
 8006ec2:	0031      	movs	r1, r6
 8006ec4:	0028      	movs	r0, r5
 8006ec6:	f7fa fa95 	bl	80013f4 <CO_NMT_init>
 8006eca:	0003      	movs	r3, r0
 8006ecc:	7023      	strb	r3, [r4, #0]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 8006ece:	2211      	movs	r2, #17
 8006ed0:	18bb      	adds	r3, r7, r2
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <CO_CANopenInit+0x17a>
 8006eda:	18bb      	adds	r3, r7, r2
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	e0d3      	b.n	800708a <CO_CANopenInit+0x322>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6958      	ldr	r0, [r3, #20]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	699e      	ldr	r6, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8006eea:	4b6b      	ldr	r3, [pc, #428]	; (8007098 <CO_CANopenInit+0x330>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8006ef0:	339c      	adds	r3, #156	; 0x9c
 8006ef2:	001a      	movs	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2111      	movs	r1, #17
 8006efa:	187c      	adds	r4, r7, r1
 8006efc:	687d      	ldr	r5, [r7, #4]
 8006efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f00:	9103      	str	r1, [sp, #12]
 8006f02:	2105      	movs	r1, #5
 8006f04:	9102      	str	r1, [sp, #8]
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	9200      	str	r2, [sp, #0]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	0032      	movs	r2, r6
 8006f0e:	0029      	movs	r1, r5
 8006f10:	f7f9 fef0 	bl	8000cf4 <CO_HBconsumer_init>
 8006f14:	0003      	movs	r3, r0
 8006f16:	7023      	strb	r3, [r4, #0]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8006f18:	2211      	movs	r2, #17
 8006f1a:	18bb      	adds	r3, r7, r2
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b25b      	sxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <CO_CANopenInit+0x1c4>
 8006f24:	18bb      	adds	r3, r7, r2
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	e0ae      	b.n	800708a <CO_CANopenInit+0x322>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006f2c:	4b5a      	ldr	r3, [pc, #360]	; (8007098 <CO_CANopenInit+0x330>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	33cc      	adds	r3, #204	; 0xcc
 8006f34:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006f36:	2312      	movs	r3, #18
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	e046      	b.n	8006fce <CO_CANopenInit+0x266>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f44:	2012      	movs	r0, #18
 8006f46:	183b      	adds	r3, r7, r0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	5e5b      	ldrsh	r3, [r3, r1]
 8006f4c:	21a8      	movs	r1, #168	; 0xa8
 8006f4e:	434b      	muls	r3, r1
 8006f50:	4694      	mov	ip, r2
 8006f52:	449c      	add	ip, r3
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	0013      	movs	r3, r2
 8006f58:	330c      	adds	r3, #12
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	0004      	movs	r4, r0
 8006f62:	183b      	adds	r3, r7, r0
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	3304      	adds	r3, #4
 8006f68:	b298      	uxth	r0, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	193c      	adds	r4, r7, r4
 8006f70:	8824      	ldrh	r4, [r4, #0]
 8006f72:	3403      	adds	r4, #3
 8006f74:	b2a5      	uxth	r5, r4
 8006f76:	2411      	movs	r4, #17
 8006f78:	193c      	adds	r4, r7, r4
 8006f7a:	2650      	movs	r6, #80	; 0x50
 8006f7c:	19be      	adds	r6, r7, r6
 8006f7e:	7836      	ldrb	r6, [r6, #0]
 8006f80:	46b1      	mov	r9, r6
 8006f82:	683e      	ldr	r6, [r7, #0]
 8006f84:	46b0      	mov	r8, r6
 8006f86:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8006f88:	9605      	str	r6, [sp, #20]
 8006f8a:	9504      	str	r5, [sp, #16]
 8006f8c:	9303      	str	r3, [sp, #12]
 8006f8e:	9002      	str	r0, [sp, #8]
 8006f90:	9101      	str	r1, [sp, #4]
 8006f92:	2344      	movs	r3, #68	; 0x44
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	4660      	mov	r0, ip
 8006fa0:	f7fc fffe 	bl	8003fa0 <CO_SDOserver_init>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	7023      	strb	r3, [r4, #0]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8006fa8:	2211      	movs	r2, #17
 8006faa:	18bb      	adds	r3, r7, r2
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b25b      	sxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <CO_CANopenInit+0x254>
 8006fb4:	18bb      	adds	r3, r7, r2
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	e066      	b.n	800708a <CO_CANopenInit+0x322>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006fbc:	2112      	movs	r1, #18
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	5e9b      	ldrsh	r3, [r3, r2]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	187b      	adds	r3, r7, r1
 8006fcc:	801a      	strh	r2, [r3, #0]
 8006fce:	2312      	movs	r3, #18
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	ddb2      	ble.n	8006f40 <CO_CANopenInit+0x1d8>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8006fde:	4b2e      	ldr	r3, [pc, #184]	; (8007098 <CO_CANopenInit+0x330>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006fe4:	3378      	adds	r3, #120	; 0x78
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	2511      	movs	r5, #17
 8006fee:	197c      	adds	r4, r7, r5
 8006ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	f7fe fd97 	bl	8005b28 <CO_TIME_init>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	7023      	strb	r3, [r4, #0]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 8006ffe:	197b      	adds	r3, r7, r5
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b25b      	sxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <CO_CANopenInit+0x2a8>
 8007008:	197b      	adds	r3, r7, r5
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b25b      	sxtb	r3, r3
 800700e:	e03c      	b.n	800708a <CO_CANopenInit+0x322>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6ade      	ldr	r6, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8007014:	4b20      	ldr	r3, [pc, #128]	; (8007098 <CO_CANopenInit+0x330>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800701a:	2224      	movs	r2, #36	; 0x24
 800701c:	4690      	mov	r8, r2
 800701e:	4498      	add	r8, r3
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8007020:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <CO_CANopenInit+0x330>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007026:	2230      	movs	r2, #48	; 0x30
 8007028:	4691      	mov	r9, r2
 800702a:	4499      	add	r9, r3
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 800702c:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <CO_CANopenInit+0x330>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007032:	333c      	adds	r3, #60	; 0x3c
 8007034:	001a      	movs	r2, r3
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <CO_CANopenInit+0x330>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800703c:	33c0      	adds	r3, #192	; 0xc0
 800703e:	0019      	movs	r1, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6858      	ldr	r0, [r3, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2411      	movs	r4, #17
 800704a:	193c      	adds	r4, r7, r4
 800704c:	687d      	ldr	r5, [r7, #4]
 800704e:	46ac      	mov	ip, r5
 8007050:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8007052:	9506      	str	r5, [sp, #24]
 8007054:	2500      	movs	r5, #0
 8007056:	9505      	str	r5, [sp, #20]
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	2301      	movs	r3, #1
 800705c:	9303      	str	r3, [sp, #12]
 800705e:	9002      	str	r0, [sp, #8]
 8007060:	9101      	str	r1, [sp, #4]
 8007062:	9200      	str	r2, [sp, #0]
 8007064:	464b      	mov	r3, r9
 8007066:	4642      	mov	r2, r8
 8007068:	4661      	mov	r1, ip
 800706a:	0030      	movs	r0, r6
 800706c:	f7fe fa38 	bl	80054e0 <CO_SYNC_init>
 8007070:	0003      	movs	r3, r0
 8007072:	7023      	strb	r3, [r4, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8007074:	2211      	movs	r2, #17
 8007076:	18bb      	adds	r3, r7, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b25b      	sxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <CO_CANopenInit+0x320>
 8007080:	18bb      	adds	r3, r7, r2
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	b25b      	sxtb	r3, r3
 8007086:	e000      	b.n	800708a <CO_CANopenInit+0x322>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 8007088:	2300      	movs	r3, #0
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b007      	add	sp, #28
 8007090:	bcc0      	pop	{r6, r7}
 8007092:	46b9      	mov	r9, r7
 8007094:	46b0      	mov	r8, r6
 8007096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007098:	20000338 	.word	0x20000338

0800709c <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 800709c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709e:	46ce      	mov	lr, r9
 80070a0:	4647      	mov	r7, r8
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b093      	sub	sp, #76	; 0x4c
 80070a6:	af06      	add	r7, sp, #24
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	001a      	movs	r2, r3
 80070b0:	1cfb      	adds	r3, r7, #3
 80070b2:	701a      	strb	r2, [r3, #0]
    if (co == NULL) {
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d102      	bne.n	80070c0 <CO_CANopenInitPDO+0x24>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80070ba:	2301      	movs	r3, #1
 80070bc:	425b      	negs	r3, r3
 80070be:	e101      	b.n	80072c4 <CO_CANopenInitPDO+0x228>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80070c0:	1cfb      	adds	r3, r7, #3
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <CO_CANopenInitPDO+0x3e>
 80070c8:	1cfb      	adds	r3, r7, #3
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	db03      	blt.n	80070da <CO_CANopenInitPDO+0x3e>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <CO_CANopenInitPDO+0x52>
        return (co->nodeIdUnconfigured)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <CO_CANopenInitPDO+0x4c>
 80070e2:	2313      	movs	r3, #19
 80070e4:	425b      	negs	r3, r3
 80070e6:	e0ed      	b.n	80072c4 <CO_CANopenInitPDO+0x228>
 80070e8:	2301      	movs	r3, #1
 80070ea:	425b      	negs	r3, r3
 80070ec:	e0ea      	b.n	80072c4 <CO_CANopenInitPDO+0x228>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 80070ee:	4b79      	ldr	r3, [pc, #484]	; (80072d4 <CO_CANopenInitPDO+0x238>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	33e4      	adds	r3, #228	; 0xe4
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 80070f8:	4b76      	ldr	r3, [pc, #472]	; (80072d4 <CO_CANopenInitPDO+0x238>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	33f0      	adds	r3, #240	; 0xf0
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007102:	2326      	movs	r3, #38	; 0x26
 8007104:	18fb      	adds	r3, r7, r3
 8007106:	2200      	movs	r2, #0
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	e061      	b.n	80071d0 <CO_CANopenInitPDO+0x134>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800710c:	2024      	movs	r0, #36	; 0x24
 800710e:	183b      	adds	r3, r7, r0
 8007110:	2200      	movs	r2, #0
 8007112:	801a      	strh	r2, [r3, #0]
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8007114:	2226      	movs	r2, #38	; 0x26
 8007116:	18bb      	adds	r3, r7, r2
 8007118:	2100      	movs	r1, #0
 800711a:	5e5b      	ldrsh	r3, [r3, r1]
 800711c:	2b03      	cmp	r3, #3
 800711e:	dc0c      	bgt.n	800713a <CO_CANopenInitPDO+0x9e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8007120:	18bb      	adds	r3, r7, r2
 8007122:	2200      	movs	r2, #0
 8007124:	5e9b      	ldrsh	r3, [r3, r2]
 8007126:	3302      	adds	r3, #2
 8007128:	b29b      	uxth	r3, r3
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	b299      	uxth	r1, r3
 800712e:	1cfb      	adds	r3, r7, #3
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b29a      	uxth	r2, r3
 8007134:	183b      	adds	r3, r7, r0
 8007136:	188a      	adds	r2, r1, r2
 8007138:	801a      	strh	r2, [r3, #0]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800713e:	2026      	movs	r0, #38	; 0x26
 8007140:	183b      	adds	r3, r7, r0
 8007142:	2200      	movs	r2, #0
 8007144:	5e9a      	ldrsh	r2, [r3, r2]
 8007146:	0013      	movs	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	189b      	adds	r3, r3, r2
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	0093      	lsls	r3, r2, #2
 8007152:	001a      	movs	r2, r3
 8007154:	0013      	movs	r3, r2
 8007156:	18ce      	adds	r6, r1, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4699      	mov	r9, r3
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	001a      	movs	r2, r3
 8007162:	320c      	adds	r2, #12
 8007164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007168:	0011      	movs	r1, r2
 800716a:	310c      	adds	r1, #12
 800716c:	62b9      	str	r1, [r7, #40]	; 0x28
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	6849      	ldr	r1, [r1, #4]
 8007172:	1838      	adds	r0, r7, r0
 8007174:	8800      	ldrh	r0, [r0, #0]
 8007176:	3003      	adds	r0, #3
 8007178:	b280      	uxth	r0, r0
 800717a:	2416      	movs	r4, #22
 800717c:	193c      	adds	r4, r7, r4
 800717e:	68bd      	ldr	r5, [r7, #8]
 8007180:	46a8      	mov	r8, r5
 8007182:	687d      	ldr	r5, [r7, #4]
 8007184:	46ac      	mov	ip, r5
 8007186:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007188:	9505      	str	r5, [sp, #20]
 800718a:	9004      	str	r0, [sp, #16]
 800718c:	9103      	str	r1, [sp, #12]
 800718e:	9202      	str	r2, [sp, #8]
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	2324      	movs	r3, #36	; 0x24
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	464b      	mov	r3, r9
 800719c:	4642      	mov	r2, r8
 800719e:	4661      	mov	r1, ip
 80071a0:	0030      	movs	r0, r6
 80071a2:	f7fb fc11 	bl	80029c8 <CO_RPDO_init>
 80071a6:	0003      	movs	r3, r0
 80071a8:	7023      	strb	r3, [r4, #0]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 80071aa:	2216      	movs	r2, #22
 80071ac:	18bb      	adds	r3, r7, r2
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	b25b      	sxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <CO_CANopenInitPDO+0x122>
 80071b6:	18bb      	adds	r3, r7, r2
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b25b      	sxtb	r3, r3
 80071bc:	e082      	b.n	80072c4 <CO_CANopenInitPDO+0x228>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80071be:	2126      	movs	r1, #38	; 0x26
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	2200      	movs	r2, #0
 80071c4:	5e9b      	ldrsh	r3, [r3, r2]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3301      	adds	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	187b      	adds	r3, r7, r1
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	2326      	movs	r3, #38	; 0x26
 80071d2:	18fb      	adds	r3, r7, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	5e9b      	ldrsh	r3, [r3, r2]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	dd97      	ble.n	800710c <CO_CANopenInitPDO+0x70>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80071dc:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <CO_CANopenInitPDO+0x238>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	33fc      	adds	r3, #252	; 0xfc
 80071e4:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80071e6:	4b3b      	ldr	r3, [pc, #236]	; (80072d4 <CO_CANopenInitPDO+0x238>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	3309      	adds	r3, #9
 80071ee:	33ff      	adds	r3, #255	; 0xff
 80071f0:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80071f2:	231a      	movs	r3, #26
 80071f4:	18fb      	adds	r3, r7, r3
 80071f6:	2200      	movs	r2, #0
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e05c      	b.n	80072b6 <CO_CANopenInitPDO+0x21a>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80071fc:	2118      	movs	r1, #24
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	2200      	movs	r2, #0
 8007202:	801a      	strh	r2, [r3, #0]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8007204:	221a      	movs	r2, #26
 8007206:	18bb      	adds	r3, r7, r2
 8007208:	2000      	movs	r0, #0
 800720a:	5e1b      	ldrsh	r3, [r3, r0]
 800720c:	2b03      	cmp	r3, #3
 800720e:	dc0c      	bgt.n	800722a <CO_CANopenInitPDO+0x18e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8007210:	18bb      	adds	r3, r7, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	b29a      	uxth	r2, r3
 8007218:	1cfb      	adds	r3, r7, #3
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	18d3      	adds	r3, r2, r3
 8007220:	b29a      	uxth	r2, r3
 8007222:	187b      	adds	r3, r7, r1
 8007224:	3281      	adds	r2, #129	; 0x81
 8007226:	32ff      	adds	r2, #255	; 0xff
 8007228:	801a      	strh	r2, [r3, #0]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722e:	201a      	movs	r0, #26
 8007230:	183b      	adds	r3, r7, r0
 8007232:	2100      	movs	r1, #0
 8007234:	5e5b      	ldrsh	r3, [r3, r1]
 8007236:	21b6      	movs	r1, #182	; 0xb6
 8007238:	0049      	lsls	r1, r1, #1
 800723a:	434b      	muls	r3, r1
 800723c:	18d6      	adds	r6, r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	4699      	mov	r9, r3
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	001a      	movs	r2, r3
 8007248:	320c      	adds	r2, #12
 800724a:	623a      	str	r2, [r7, #32]
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	0011      	movs	r1, r2
 8007250:	310c      	adds	r1, #12
 8007252:	61f9      	str	r1, [r7, #28]
 8007254:	68f9      	ldr	r1, [r7, #12]
 8007256:	6849      	ldr	r1, [r1, #4]
 8007258:	1838      	adds	r0, r7, r0
 800725a:	8800      	ldrh	r0, [r0, #0]
 800725c:	3002      	adds	r0, #2
 800725e:	b280      	uxth	r0, r0
 8007260:	2417      	movs	r4, #23
 8007262:	193c      	adds	r4, r7, r4
 8007264:	68bd      	ldr	r5, [r7, #8]
 8007266:	46a8      	mov	r8, r5
 8007268:	687d      	ldr	r5, [r7, #4]
 800726a:	46ac      	mov	ip, r5
 800726c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800726e:	9505      	str	r5, [sp, #20]
 8007270:	9004      	str	r0, [sp, #16]
 8007272:	9103      	str	r1, [sp, #12]
 8007274:	9202      	str	r2, [sp, #8]
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	2318      	movs	r3, #24
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	464b      	mov	r3, r9
 8007282:	4642      	mov	r2, r8
 8007284:	4661      	mov	r1, ip
 8007286:	0030      	movs	r0, r6
 8007288:	f7fc f81a 	bl	80032c0 <CO_TPDO_init>
 800728c:	0003      	movs	r3, r0
 800728e:	7023      	strb	r3, [r4, #0]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8007290:	2217      	movs	r2, #23
 8007292:	18bb      	adds	r3, r7, r2
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b25b      	sxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <CO_CANopenInitPDO+0x208>
 800729c:	18bb      	adds	r3, r7, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	b25b      	sxtb	r3, r3
 80072a2:	e00f      	b.n	80072c4 <CO_CANopenInitPDO+0x228>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80072a4:	211a      	movs	r1, #26
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	2200      	movs	r2, #0
 80072aa:	5e9b      	ldrsh	r3, [r3, r2]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3301      	adds	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	187b      	adds	r3, r7, r1
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	231a      	movs	r3, #26
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	2200      	movs	r2, #0
 80072bc:	5e9b      	ldrsh	r3, [r3, r2]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dd9c      	ble.n	80071fc <CO_CANopenInitPDO+0x160>
        }
    }
#endif

    return CO_ERROR_NO;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	0018      	movs	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	b00d      	add	sp, #52	; 0x34
 80072ca:	bcc0      	pop	{r6, r7}
 80072cc:	46b9      	mov	r9, r7
 80072ce:	46b0      	mov	r8, r6
 80072d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	20000338 	.word	0x20000338

080072d8 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80072d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072da:	46d6      	mov	lr, sl
 80072dc:	464f      	mov	r7, r9
 80072de:	4646      	mov	r6, r8
 80072e0:	b5c0      	push	{r6, r7, lr}
 80072e2:	b092      	sub	sp, #72	; 0x48
 80072e4:	af08      	add	r7, sp, #32
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80072ee:	2327      	movs	r3, #39	; 0x27
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f7ff faf0 	bl	80068e0 <CO_NMT_getInternalState>
 8007300:	0003      	movs	r3, r0
 8007302:	001a      	movs	r2, r3
 8007304:	2111      	movs	r1, #17
 8007306:	187b      	adds	r3, r7, r1
 8007308:	701a      	strb	r2, [r3, #0]
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 800730a:	000a      	movs	r2, r1
 800730c:	18bb      	adds	r3, r7, r2
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	b25b      	sxtb	r3, r3
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8007312:	2b7f      	cmp	r3, #127	; 0x7f
 8007314:	d004      	beq.n	8007320 <CO_process+0x48>
 8007316:	18bb      	adds	r3, r7, r2
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	b25b      	sxtb	r3, r3
 800731c:	2b05      	cmp	r3, #5
 800731e:	d101      	bne.n	8007324 <CO_process+0x4c>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <CO_process+0x4e>
 8007324:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007326:	61bb      	str	r3, [r7, #24]

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	0018      	movs	r0, r3
 800732e:	f000 febd 	bl	80080ac <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	0018      	movs	r0, r3
 8007338:	f7ff f8f4 	bl	8006524 <CO_LSSslave_process>
 800733c:	1e03      	subs	r3, r0, #0
 800733e:	d003      	beq.n	8007348 <CO_process+0x70>
            reset = CO_RESET_COMM;
 8007340:	2327      	movs	r3, #39	; 0x27
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	617b      	str	r3, [r7, #20]
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	2312      	movs	r3, #18
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	8a52      	ldrh	r2, [r2, #18]
 8007358:	801a      	strh	r2, [r3, #0]
    bool_t LSSslave_configuration = false;
 800735a:	2300      	movs	r3, #0
 800735c:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	0018      	movs	r0, r3
 8007364:	f7ff facc 	bl	8006900 <CO_LSSslave_getState>
 8007368:	0003      	movs	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <CO_process+0x9a>
    ) {
        LSSslave_configuration = true;
 800736e:	2301      	movs	r3, #1
 8007370:	623b      	str	r3, [r7, #32]
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <CO_process+0xae>
 800737c:	2311      	movs	r3, #17
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	2400      	movs	r4, #0
 8007382:	571c      	ldrsb	r4, [r3, r4]
 8007384:	e000      	b.n	8007388 <CO_process+0xb0>
 8007386:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8007388:	2112      	movs	r1, #18
 800738a:	187b      	adds	r3, r7, r1
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	2204      	movs	r2, #4
 8007390:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8007392:	1e5a      	subs	r2, r3, #1
 8007394:	4193      	sbcs	r3, r2
 8007396:	b2db      	uxtb	r3, r3
 8007398:	4698      	mov	r8, r3
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 800739a:	187b      	adds	r3, r7, r1
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	4a53      	ldr	r2, [pc, #332]	; (80074ec <CO_process+0x214>)
 80073a0:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	4193      	sbcs	r3, r2
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4699      	mov	r9, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d107      	bne.n	80073c0 <CO_process+0xe8>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2118      	movs	r1, #24
 80073b6:	0018      	movs	r0, r3
 80073b8:	f7ff fa50 	bl	800685c <CO_isError>
 80073bc:	0005      	movs	r5, r0
 80073be:	e000      	b.n	80073c2 <CO_process+0xea>
        CO_LEDs_process(co->LEDs,
 80073c0:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d111      	bne.n	80073ec <CO_process+0x114>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	211b      	movs	r1, #27
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7ff fa44 	bl	800685c <CO_isError>
 80073d4:	1e03      	subs	r3, r0, #0
 80073d6:	d107      	bne.n	80073e8 <CO_process+0x110>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	211c      	movs	r1, #28
 80073de:	0018      	movs	r0, r3
 80073e0:	f7ff fa3c 	bl	800685c <CO_isError>
 80073e4:	1e03      	subs	r3, r0, #0
 80073e6:	d001      	beq.n	80073ec <CO_process+0x114>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <CO_process+0x116>
 80073ec:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 80073ee:	469a      	mov	sl, r3
            CO_getErrorRegister(co->em) != 0,
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7ff fa5f 	bl	80068b8 <CO_getErrorRegister>
 80073fa:	0003      	movs	r3, r0
        CO_LEDs_process(co->LEDs,
 80073fc:	1e5a      	subs	r2, r3, #1
 80073fe:	4193      	sbcs	r3, r2
 8007400:	b2db      	uxtb	r3, r3
 8007402:	0018      	movs	r0, r3
 8007404:	6a3a      	ldr	r2, [r7, #32]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	9307      	str	r3, [sp, #28]
 800740c:	2300      	movs	r3, #0
 800740e:	9306      	str	r3, [sp, #24]
 8007410:	9005      	str	r0, [sp, #20]
 8007412:	4653      	mov	r3, sl
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	9503      	str	r5, [sp, #12]
 8007418:	2300      	movs	r3, #0
 800741a:	9302      	str	r3, [sp, #8]
 800741c:	464b      	mov	r3, r9
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	4643      	mov	r3, r8
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	0013      	movs	r3, r2
 8007426:	0022      	movs	r2, r4
 8007428:	0030      	movs	r0, r6
 800742a:	f7fe fca3 	bl	8005d74 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <CO_process+0x166>
        return reset;
 8007436:	2327      	movs	r3, #39	; 0x27
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	e04d      	b.n	80074da <CO_process+0x202>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	69d8      	ldr	r0, [r3, #28]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	69b9      	ldr	r1, [r7, #24]
 8007448:	f7f9 f948 	bl	80006dc <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6918      	ldr	r0, [r3, #16]
 8007450:	2327      	movs	r3, #39	; 0x27
 8007452:	18fc      	adds	r4, r7, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	2511      	movs	r5, #17
 800745a:	1979      	adds	r1, r7, r5
 800745c:	f7fa f8e0 	bl	8001620 <CO_NMT_process>
 8007460:	0003      	movs	r3, r0
 8007462:	7023      	strb	r3, [r4, #0]
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007464:	197b      	adds	r3, r7, r5
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b25b      	sxtb	r3, r3
                             || NMTstate == CO_NMT_OPERATIONAL);
 800746a:	2b7f      	cmp	r3, #127	; 0x7f
 800746c:	d004      	beq.n	8007478 <CO_process+0x1a0>
 800746e:	197b      	adds	r3, r7, r5
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b25b      	sxtb	r3, r3
 8007474:	2b05      	cmp	r3, #5
 8007476:	d101      	bne.n	800747c <CO_process+0x1a4>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <CO_process+0x1a6>
 800747c:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 800747e:	61bb      	str	r3, [r7, #24]

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007480:	231f      	movs	r3, #31
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e011      	b.n	80074ae <CO_process+0x1d6>
        CO_SDOserver_process(&co->SDOserver[i],
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800748e:	241f      	movs	r4, #31
 8007490:	193b      	adds	r3, r7, r4
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	21a8      	movs	r1, #168	; 0xa8
 8007496:	434b      	muls	r3, r1
 8007498:	18d0      	adds	r0, r2, r3
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	69b9      	ldr	r1, [r7, #24]
 80074a0:	f7fd f8e0 	bl	8004664 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80074a4:	193b      	adds	r3, r7, r4
 80074a6:	781a      	ldrb	r2, [r3, #0]
 80074a8:	193b      	adds	r3, r7, r4
 80074aa:	3201      	adds	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	231f      	movs	r3, #31
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0e8      	beq.n	800748a <CO_process+0x1b2>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6958      	ldr	r0, [r3, #20]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	f7f9 fdb9 	bl	8001038 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	69b9      	ldr	r1, [r7, #24]
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fe fbbc 	bl	8005c4c <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 80074d4:	2327      	movs	r3, #39	; 0x27
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	781b      	ldrb	r3, [r3, #0]
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b00a      	add	sp, #40	; 0x28
 80074e0:	bce0      	pop	{r5, r6, r7}
 80074e2:	46ba      	mov	sl, r7
 80074e4:	46b1      	mov	r9, r6
 80074e6:	46a8      	mov	r8, r5
 80074e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	00000303 	.word	0x00000303

080074f0 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80074f0:	b5b0      	push	{r4, r5, r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d133      	bne.n	8007570 <CO_process_SYNC+0x80>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	251b      	movs	r5, #27
 800750e:	197c      	adds	r4, r7, r5
 8007510:	0018      	movs	r0, r3
 8007512:	f7ff f9e5 	bl	80068e0 <CO_NMT_getInternalState>
 8007516:	0003      	movs	r3, r0
 8007518:	7023      	strb	r3, [r4, #0]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 800751a:	197b      	adds	r3, r7, r5
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b25b      	sxtb	r3, r3
 8007520:	2b7f      	cmp	r3, #127	; 0x7f
 8007522:	d004      	beq.n	800752e <CO_process_SYNC+0x3e>
 8007524:	197b      	adds	r3, r7, r5
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b25b      	sxtb	r3, r3
 800752a:	2b05      	cmp	r3, #5
 800752c:	d101      	bne.n	8007532 <CO_process_SYNC+0x42>
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <CO_process_SYNC+0x44>
 8007532:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007534:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800753a:	2513      	movs	r5, #19
 800753c:	197c      	adds	r4, r7, r5
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	f7fe f922 	bl	800578c <CO_SYNC_process>
 8007548:	0003      	movs	r3, r0
 800754a:	7023      	strb	r3, [r4, #0]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 800754c:	197b      	adds	r3, r7, r5
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d007      	beq.n	8007564 <CO_process_SYNC+0x74>
 8007554:	dc0f      	bgt.n	8007576 <CO_process_SYNC+0x86>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <CO_process_SYNC+0x84>
 800755a:	2b01      	cmp	r3, #1
 800755c:	d10b      	bne.n	8007576 <CO_process_SYNC+0x86>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 800755e:	2301      	movs	r3, #1
 8007560:	61fb      	str	r3, [r7, #28]
                break;
 8007562:	e008      	b.n	8007576 <CO_process_SYNC+0x86>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 fd2f 	bl	8007fcc <CO_CANclearPendingSyncPDOs>
                break;
 800756e:	e002      	b.n	8007576 <CO_process_SYNC+0x86>
        }
    }
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	e000      	b.n	8007576 <CO_process_SYNC+0x86>
                break;
 8007574:	46c0      	nop			; (mov r8, r8)

    return syncWas;
 8007576:	69fb      	ldr	r3, [r7, #28]
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b008      	add	sp, #32
 800757e:	bdb0      	pop	{r4, r5, r7, pc}

08007580 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8007580:	b5b0      	push	{r4, r5, r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d135      	bne.n	8007602 <CO_process_RPDO+0x82>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff f9a0 	bl	80068e0 <CO_NMT_getInternalState>
 80075a0:	0003      	movs	r3, r0
 80075a2:	3b05      	subs	r3, #5
 80075a4:	425a      	negs	r2, r3
 80075a6:	4153      	adcs	r3, r2
 80075a8:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80075aa:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80075ac:	2316      	movs	r3, #22
 80075ae:	18fb      	adds	r3, r7, r3
 80075b0:	2200      	movs	r2, #0
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	e01e      	b.n	80075f4 <CO_process_RPDO+0x74>
        CO_RPDO_process(&co->RPDO[i],
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075ba:	2516      	movs	r5, #22
 80075bc:	197b      	adds	r3, r7, r5
 80075be:	2200      	movs	r2, #0
 80075c0:	5e9a      	ldrsh	r2, [r3, r2]
 80075c2:	0013      	movs	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	0093      	lsls	r3, r2, #2
 80075ce:	001a      	movs	r2, r3
 80075d0:	0013      	movs	r3, r2
 80075d2:	18c8      	adds	r0, r1, r3
 80075d4:	693c      	ldr	r4, [r7, #16]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	0023      	movs	r3, r4
 80075e0:	f7fb fb82 	bl	8002ce8 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80075e4:	197b      	adds	r3, r7, r5
 80075e6:	2200      	movs	r2, #0
 80075e8:	5e9b      	ldrsh	r3, [r3, r2]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3301      	adds	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	197b      	adds	r3, r7, r5
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	2316      	movs	r3, #22
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	2200      	movs	r2, #0
 80075fa:	5e9b      	ldrsh	r3, [r3, r2]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	ddda      	ble.n	80075b6 <CO_process_RPDO+0x36>
 8007600:	e000      	b.n	8007604 <CO_process_RPDO+0x84>
        return;
 8007602:	46c0      	nop			; (mov r8, r8)
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007604:	46bd      	mov	sp, r7
 8007606:	b006      	add	sp, #24
 8007608:	bdb0      	pop	{r4, r5, r7, pc}

0800760a <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 800760a:	b5b0      	push	{r4, r5, r7, lr}
 800760c:	b088      	sub	sp, #32
 800760e:	af02      	add	r7, sp, #8
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
 8007616:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d130      	bne.n	8007682 <CO_process_TPDO+0x78>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	0018      	movs	r0, r3
 8007626:	f7ff f95b 	bl	80068e0 <CO_NMT_getInternalState>
 800762a:	0003      	movs	r3, r0
 800762c:	3b05      	subs	r3, #5
 800762e:	425a      	negs	r2, r3
 8007630:	4153      	adcs	r3, r2
 8007632:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8007634:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007636:	2316      	movs	r3, #22
 8007638:	18fb      	adds	r3, r7, r3
 800763a:	2200      	movs	r2, #0
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e019      	b.n	8007674 <CO_process_TPDO+0x6a>
        CO_TPDO_process(&co->TPDO[i],
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007644:	2516      	movs	r5, #22
 8007646:	197b      	adds	r3, r7, r5
 8007648:	2100      	movs	r1, #0
 800764a:	5e5b      	ldrsh	r3, [r3, r1]
 800764c:	21b6      	movs	r1, #182	; 0xb6
 800764e:	0049      	lsls	r1, r1, #1
 8007650:	434b      	muls	r3, r1
 8007652:	18d0      	adds	r0, r2, r3
 8007654:	693c      	ldr	r4, [r7, #16]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	0023      	movs	r3, r4
 8007660:	f7fc f8ba 	bl	80037d8 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007664:	197b      	adds	r3, r7, r5
 8007666:	2200      	movs	r2, #0
 8007668:	5e9b      	ldrsh	r3, [r3, r2]
 800766a:	b29b      	uxth	r3, r3
 800766c:	3301      	adds	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	197b      	adds	r3, r7, r5
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	2316      	movs	r3, #22
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	2200      	movs	r2, #0
 800767a:	5e9b      	ldrsh	r3, [r3, r2]
 800767c:	2b00      	cmp	r3, #0
 800767e:	dddf      	ble.n	8007640 <CO_process_TPDO+0x36>
 8007680:	e000      	b.n	8007684 <CO_process_TPDO+0x7a>
        return;
 8007682:	46c0      	nop			; (mov r8, r8)
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007684:	46bd      	mov	sp, r7
 8007686:	b006      	add	sp, #24
 8007688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800768c <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8007694:	4b15      	ldr	r3, [pc, #84]	; (80076ec <canopen_app_init+0x60>)
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800769e:	2308      	movs	r3, #8
 80076a0:	18fa      	adds	r2, r7, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	0011      	movs	r1, r2
 80076a6:	0018      	movs	r0, r3
 80076a8:	f7ff f939 	bl	800691e <CO_new>
 80076ac:	0002      	movs	r2, r0
 80076ae:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <canopen_app_init+0x64>)
 80076b0:	601a      	str	r2, [r3, #0]
    if (CO == NULL) {
 80076b2:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <canopen_app_init+0x64>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d105      	bne.n	80076c6 <canopen_app_init+0x3a>
        log_printf("Error: Can't allocate memory\n");
 80076ba:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <canopen_app_init+0x68>)
 80076bc:	0018      	movs	r0, r3
 80076be:	f007 fe7b 	bl	800f3b8 <puts>
        return 1;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e00d      	b.n	80076e2 <canopen_app_init+0x56>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <canopen_app_init+0x6c>)
 80076ca:	0011      	movs	r1, r2
 80076cc:	0018      	movs	r0, r3
 80076ce:	f007 fde7 	bl	800f2a0 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <canopen_app_init+0x60>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a06      	ldr	r2, [pc, #24]	; (80076f0 <canopen_app_init+0x64>)
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 80076dc:	f000 f80e 	bl	80076fc <canopen_app_resetCommunication>
    return 0;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	0018      	movs	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b004      	add	sp, #16
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	200053c0 	.word	0x200053c0
 80076f0:	2000050c 	.word	0x2000050c
 80076f4:	0800fdf8 	.word	0x0800fdf8
 80076f8:	0800fe18 	.word	0x0800fe18

080076fc <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b08f      	sub	sp, #60	; 0x3c
 8007700:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8007702:	4b86      	ldr	r3, [pc, #536]	; (800791c <canopen_app_resetCommunication+0x220>)
 8007704:	0018      	movs	r0, r3
 8007706:	f007 fe57 	bl	800f3b8 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 800770a:	4b85      	ldr	r3, [pc, #532]	; (8007920 <canopen_app_resetCommunication+0x224>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007714:	4b83      	ldr	r3, [pc, #524]	; (8007924 <canopen_app_resetCommunication+0x228>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	0018      	movs	r0, r3
 800771a:	f000 f9d7 	bl	8007acc <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 800771e:	4b80      	ldr	r3, [pc, #512]	; (8007920 <canopen_app_resetCommunication+0x224>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	0018      	movs	r0, r3
 8007726:	f000 fabd 	bl	8007ca4 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 800772a:	4b7d      	ldr	r3, [pc, #500]	; (8007920 <canopen_app_resetCommunication+0x224>)
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	4b7d      	ldr	r3, [pc, #500]	; (8007924 <canopen_app_resetCommunication+0x228>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	0019      	movs	r1, r3
 8007736:	f7ff faa7 	bl	8006c88 <CO_CANinit>
 800773a:	0003      	movs	r3, r0
 800773c:	001a      	movs	r2, r3
 800773e:	4b7a      	ldr	r3, [pc, #488]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007740:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007742:	4b79      	ldr	r3, [pc, #484]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b25b      	sxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <canopen_app_resetCommunication+0x66>
        log_printf("Error: CAN initialization failed: %d\n", err);
 800774c:	4b76      	ldr	r3, [pc, #472]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b25b      	sxtb	r3, r3
 8007752:	001a      	movs	r2, r3
 8007754:	4b75      	ldr	r3, [pc, #468]	; (800792c <canopen_app_resetCommunication+0x230>)
 8007756:	0011      	movs	r1, r2
 8007758:	0018      	movs	r0, r3
 800775a:	f007 fda1 	bl	800f2a0 <iprintf>
        return 1;
 800775e:	2301      	movs	r3, #1
 8007760:	e0d7      	b.n	8007912 <canopen_app_resetCommunication+0x216>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007762:	4b73      	ldr	r3, [pc, #460]	; (8007930 <canopen_app_resetCommunication+0x234>)
 8007764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007766:	2108      	movs	r1, #8
 8007768:	187b      	adds	r3, r7, r1
 800776a:	601a      	str	r2, [r3, #0]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 800776c:	4b70      	ldr	r3, [pc, #448]	; (8007930 <canopen_app_resetCommunication+0x234>)
 800776e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007770:	187b      	adds	r3, r7, r1
 8007772:	605a      	str	r2, [r3, #4]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8007774:	4b6e      	ldr	r3, [pc, #440]	; (8007930 <canopen_app_resetCommunication+0x234>)
 8007776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007778:	187b      	adds	r3, r7, r1
 800777a:	609a      	str	r2, [r3, #8]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 800777c:	4b6c      	ldr	r3, [pc, #432]	; (8007930 <canopen_app_resetCommunication+0x234>)
 800777e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007780:	187b      	adds	r3, r7, r1
 8007782:	60da      	str	r2, [r3, #12]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8007784:	4b66      	ldr	r3, [pc, #408]	; (8007920 <canopen_app_resetCommunication+0x224>)
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	4b66      	ldr	r3, [pc, #408]	; (8007924 <canopen_app_resetCommunication+0x228>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	001a      	movs	r2, r3
 800778e:	4b65      	ldr	r3, [pc, #404]	; (8007924 <canopen_app_resetCommunication+0x228>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3302      	adds	r3, #2
 8007794:	1879      	adds	r1, r7, r1
 8007796:	f7ff faa9 	bl	8006cec <CO_LSSinit>
 800779a:	0003      	movs	r3, r0
 800779c:	001a      	movs	r2, r3
 800779e:	4b62      	ldr	r3, [pc, #392]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 80077a0:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80077a2:	4b61      	ldr	r3, [pc, #388]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <canopen_app_resetCommunication+0xc6>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 80077ac:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	001a      	movs	r2, r3
 80077b4:	4b5f      	ldr	r3, [pc, #380]	; (8007934 <canopen_app_resetCommunication+0x238>)
 80077b6:	0011      	movs	r1, r2
 80077b8:	0018      	movs	r0, r3
 80077ba:	f007 fd71 	bl	800f2a0 <iprintf>
        return 2;
 80077be:	2302      	movs	r3, #2
 80077c0:	e0a7      	b.n	8007912 <canopen_app_resetCommunication+0x216>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 80077c2:	4b58      	ldr	r3, [pc, #352]	; (8007924 <canopen_app_resetCommunication+0x228>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b57      	ldr	r3, [pc, #348]	; (8007924 <canopen_app_resetCommunication+0x228>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 80077d2:	4b53      	ldr	r3, [pc, #332]	; (8007920 <canopen_app_resetCommunication+0x224>)
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	4b58      	ldr	r3, [pc, #352]	; (8007938 <canopen_app_resetCommunication+0x23c>)
 80077d8:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 80077da:	4b52      	ldr	r3, [pc, #328]	; (8007924 <canopen_app_resetCommunication+0x228>)
 80077dc:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	1d3a      	adds	r2, r7, #4
 80077e2:	9207      	str	r2, [sp, #28]
 80077e4:	9306      	str	r3, [sp, #24]
 80077e6:	2300      	movs	r3, #0
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	23fa      	movs	r3, #250	; 0xfa
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	23fa      	movs	r3, #250	; 0xfa
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	23fa      	movs	r3, #250	; 0xfa
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	9302      	str	r3, [sp, #8]
 80077fc:	4b4f      	ldr	r3, [pc, #316]	; (800793c <canopen_app_resetCommunication+0x240>)
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	2300      	movs	r3, #0
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	000b      	movs	r3, r1
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	f7ff faad 	bl	8006d68 <CO_CANopenInit>
 800780e:	0003      	movs	r3, r0
 8007810:	001a      	movs	r2, r3
 8007812:	4b45      	ldr	r3, [pc, #276]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007814:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8007816:	4b44      	ldr	r3, [pc, #272]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b25b      	sxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <canopen_app_resetCommunication+0x15c>
 8007820:	4b41      	ldr	r3, [pc, #260]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b25b      	sxtb	r3, r3
 8007826:	3313      	adds	r3, #19
 8007828:	d016      	beq.n	8007858 <canopen_app_resetCommunication+0x15c>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800782a:	4b3f      	ldr	r3, [pc, #252]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b25b      	sxtb	r3, r3
 8007830:	330c      	adds	r3, #12
 8007832:	d106      	bne.n	8007842 <canopen_app_resetCommunication+0x146>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	4b42      	ldr	r3, [pc, #264]	; (8007940 <canopen_app_resetCommunication+0x244>)
 8007838:	0011      	movs	r1, r2
 800783a:	0018      	movs	r0, r3
 800783c:	f007 fd30 	bl	800f2a0 <iprintf>
 8007840:	e008      	b.n	8007854 <canopen_app_resetCommunication+0x158>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8007842:	4b39      	ldr	r3, [pc, #228]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b25b      	sxtb	r3, r3
 8007848:	001a      	movs	r2, r3
 800784a:	4b3e      	ldr	r3, [pc, #248]	; (8007944 <canopen_app_resetCommunication+0x248>)
 800784c:	0011      	movs	r1, r2
 800784e:	0018      	movs	r0, r3
 8007850:	f007 fd26 	bl	800f2a0 <iprintf>
        }
        return 3;
 8007854:	2303      	movs	r3, #3
 8007856:	e05c      	b.n	8007912 <canopen_app_resetCommunication+0x216>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8007858:	4b31      	ldr	r3, [pc, #196]	; (8007920 <canopen_app_resetCommunication+0x224>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	4b30      	ldr	r3, [pc, #192]	; (8007920 <canopen_app_resetCommunication+0x224>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69d9      	ldr	r1, [r3, #28]
 8007862:	4b35      	ldr	r3, [pc, #212]	; (8007938 <canopen_app_resetCommunication+0x23c>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <canopen_app_resetCommunication+0x228>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785c      	ldrb	r4, [r3, #1]
 800786c:	1d3b      	adds	r3, r7, #4
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	0023      	movs	r3, r4
 8007872:	f7ff fc13 	bl	800709c <CO_CANopenInitPDO>
 8007876:	0003      	movs	r3, r0
 8007878:	001a      	movs	r2, r3
 800787a:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 800787c:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 800787e:	4b2a      	ldr	r3, [pc, #168]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b25b      	sxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01b      	beq.n	80078c0 <canopen_app_resetCommunication+0x1c4>
 8007888:	4b27      	ldr	r3, [pc, #156]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b25b      	sxtb	r3, r3
 800788e:	3313      	adds	r3, #19
 8007890:	d016      	beq.n	80078c0 <canopen_app_resetCommunication+0x1c4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8007892:	4b25      	ldr	r3, [pc, #148]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	b25b      	sxtb	r3, r3
 8007898:	330c      	adds	r3, #12
 800789a:	d106      	bne.n	80078aa <canopen_app_resetCommunication+0x1ae>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4b28      	ldr	r3, [pc, #160]	; (8007940 <canopen_app_resetCommunication+0x244>)
 80078a0:	0011      	movs	r1, r2
 80078a2:	0018      	movs	r0, r3
 80078a4:	f007 fcfc 	bl	800f2a0 <iprintf>
 80078a8:	e008      	b.n	80078bc <canopen_app_resetCommunication+0x1c0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 80078aa:	4b1f      	ldr	r3, [pc, #124]	; (8007928 <canopen_app_resetCommunication+0x22c>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	001a      	movs	r2, r3
 80078b2:	4b25      	ldr	r3, [pc, #148]	; (8007948 <canopen_app_resetCommunication+0x24c>)
 80078b4:	0011      	movs	r1, r2
 80078b6:	0018      	movs	r0, r3
 80078b8:	f007 fcf2 	bl	800f2a0 <iprintf>
        }
        return 4;
 80078bc:	2304      	movs	r3, #4
 80078be:	e028      	b.n	8007912 <canopen_app_resetCommunication+0x216>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 80078c0:	4b18      	ldr	r3, [pc, #96]	; (8007924 <canopen_app_resetCommunication+0x228>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	0018      	movs	r0, r3
 80078c8:	f004 fc66 	bl	800c198 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 80078cc:	4b14      	ldr	r3, [pc, #80]	; (8007920 <canopen_app_resetCommunication+0x224>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <canopen_app_resetCommunication+0x1e2>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 80078d6:	4b1d      	ldr	r3, [pc, #116]	; (800794c <canopen_app_resetCommunication+0x250>)
 80078d8:	0018      	movs	r0, r3
 80078da:	f007 fd6d 	bl	800f3b8 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <canopen_app_resetCommunication+0x224>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 f901 	bl	8007aec <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <canopen_app_resetCommunication+0x254>)
 80078ec:	0018      	movs	r0, r3
 80078ee:	f007 fd63 	bl	800f3b8 <puts>
    fflush(stdout);
 80078f2:	4b18      	ldr	r3, [pc, #96]	; (8007954 <canopen_app_resetCommunication+0x258>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f007 fa95 	bl	800ee28 <fflush>
    time_old = time_current = HAL_GetTick();
 80078fe:	f002 fa55 	bl	8009dac <HAL_GetTick>
 8007902:	0002      	movs	r2, r0
 8007904:	4b14      	ldr	r3, [pc, #80]	; (8007958 <canopen_app_resetCommunication+0x25c>)
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	4b13      	ldr	r3, [pc, #76]	; (8007958 <canopen_app_resetCommunication+0x25c>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	4b13      	ldr	r3, [pc, #76]	; (800795c <canopen_app_resetCommunication+0x260>)
 800790e:	601a      	str	r2, [r3, #0]
    return 0;
 8007910:	2300      	movs	r3, #0
}
 8007912:	0018      	movs	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	b007      	add	sp, #28
 8007918:	bd90      	pop	{r4, r7, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	0800fe40 	.word	0x0800fe40
 8007920:	2000050c 	.word	0x2000050c
 8007924:	200053c0 	.word	0x200053c0
 8007928:	200053c4 	.word	0x200053c4
 800792c:	0800fe68 	.word	0x0800fe68
 8007930:	20000000 	.word	0x20000000
 8007934:	0800fe90 	.word	0x0800fe90
 8007938:	20000338 	.word	0x20000338
 800793c:	00002011 	.word	0x00002011
 8007940:	0800febc 	.word	0x0800febc
 8007944:	0800fee4 	.word	0x0800fee4
 8007948:	0800ff10 	.word	0x0800ff10
 800794c:	0800ff38 	.word	0x0800ff38
 8007950:	0800ff60 	.word	0x0800ff60
 8007954:	2000048c 	.word	0x2000048c
 8007958:	200053c8 	.word	0x200053c8
 800795c:	200053bc 	.word	0x200053bc

08007960 <canopen_app_process>:

void
canopen_app_process() {
 8007960:	b590      	push	{r4, r7, lr}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8007966:	f002 fa21 	bl	8009dac <HAL_GetTick>
 800796a:	0002      	movs	r2, r0
 800796c:	4b2f      	ldr	r3, [pc, #188]	; (8007a2c <canopen_app_process+0xcc>)
 800796e:	601a      	str	r2, [r3, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007970:	4b2e      	ldr	r3, [pc, #184]	; (8007a2c <canopen_app_process+0xcc>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b2e      	ldr	r3, [pc, #184]	; (8007a30 <canopen_app_process+0xd0>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d053      	beq.n	8007a24 <canopen_app_process+0xc4>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 800797c:	4b2b      	ldr	r3, [pc, #172]	; (8007a2c <canopen_app_process+0xcc>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <canopen_app_process+0xd0>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1ad2      	subs	r2, r2, r3
 8007986:	0013      	movs	r3, r2
 8007988:	015b      	lsls	r3, r3, #5
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	189b      	adds	r3, r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007994:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <canopen_app_process+0xcc>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <canopen_app_process+0xd0>)
 800799a:	601a      	str	r2, [r3, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <canopen_app_process+0xd4>)
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	1cfc      	adds	r4, r7, #3
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	2300      	movs	r3, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	f7ff fc96 	bl	80072d8 <CO_process>
 80079ac:	0003      	movs	r3, r0
 80079ae:	7023      	strb	r3, [r4, #0]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 80079b0:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <canopen_app_process+0xd4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	7a5a      	ldrb	r2, [r3, #9]
 80079b8:	4b1f      	ldr	r3, [pc, #124]	; (8007a38 <canopen_app_process+0xd8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	09d2      	lsrs	r2, r2, #7
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80079c2:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <canopen_app_process+0xd4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	7a9a      	ldrb	r2, [r3, #10]
 80079ca:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <canopen_app_process+0xd8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	09d2      	lsrs	r2, r2, #7
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 80079d4:	1cfb      	adds	r3, r7, #3
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d119      	bne.n	8007a10 <canopen_app_process+0xb0>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 80079dc:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <canopen_app_process+0xd8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	0018      	movs	r0, r3
 80079e4:	f004 fc3a 	bl	800c25c <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80079e8:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <canopen_app_process+0xd8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f000 f86d 	bl	8007acc <CO_CANsetConfigurationMode>
            CO_delete(CO);
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <canopen_app_process+0xd4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	0018      	movs	r0, r3
 80079f8:	f7ff f8e6 	bl	8006bc8 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <canopen_app_process+0xdc>)
 80079fe:	0018      	movs	r0, r3
 8007a00:	f007 fcda 	bl	800f3b8 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <canopen_app_process+0xd8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7ff fe3f 	bl	800768c <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8007a0e:	e009      	b.n	8007a24 <canopen_app_process+0xc4>
        } else if (reset_status == CO_RESET_APP) {
 8007a10:	1cfb      	adds	r3, r7, #3
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d105      	bne.n	8007a24 <canopen_app_process+0xc4>
            log_printf("CANopenNode Device Reset\n");
 8007a18:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <canopen_app_process+0xe0>)
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f007 fccc 	bl	800f3b8 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007a20:	f002 fad5 	bl	8009fce <HAL_NVIC_SystemReset>
}
 8007a24:	46c0      	nop			; (mov r8, r8)
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b003      	add	sp, #12
 8007a2a:	bd90      	pop	{r4, r7, pc}
 8007a2c:	200053c8 	.word	0x200053c8
 8007a30:	200053bc 	.word	0x200053bc
 8007a34:	2000050c 	.word	0x2000050c
 8007a38:	200053c0 	.word	0x200053c0
 8007a3c:	0800ff7c 	.word	0x0800ff7c
 8007a40:	0800ffa4 	.word	0x0800ffa4

08007a44 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007a4a:	4b1f      	ldr	r3, [pc, #124]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a50:	f3ef 8210 	mrs	r2, PRIMASK
 8007a54:	607a      	str	r2, [r7, #4]
  return(result);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007a5a:	b672      	cpsid	i
}
 8007a5c:	46c0      	nop			; (mov r8, r8)
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007a5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d121      	bne.n	8007aac <canopen_app_interrupt+0x68>
 8007a68:	4b17      	ldr	r3, [pc, #92]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d01b      	beq.n	8007aac <canopen_app_interrupt+0x68>
        bool_t syncWas = false;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8007a78:	23fa      	movs	r3, #250	; 0xfa
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	2200      	movs	r2, #0
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7ff fd32 	bl	80074f0 <CO_process_SYNC>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	60fb      	str	r3, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007a90:	4b0d      	ldr	r3, [pc, #52]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f7ff fd71 	bl	8007580 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	68f9      	ldr	r1, [r7, #12]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f7ff fdaf 	bl	800760a <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <canopen_app_interrupt+0x84>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	f383 8810 	msr	PRIMASK, r3
}
 8007abc:	46c0      	nop			; (mov r8, r8)
}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b004      	add	sp, #16
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	2000050c 	.word	0x2000050c

08007acc <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f002 fc36 	bl	800a350 <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd80      	pop	{r7, pc}

08007aec <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <CO_CANsetNormalMode+0x26>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f002 fbfe 	bl	800a304 <HAL_FDCAN_Start>
 8007b08:	1e03      	subs	r3, r0, #0
 8007b0a:	d102      	bne.n	8007b12 <CO_CANsetNormalMode+0x26>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	615a      	str	r2, [r3, #20]
        }
    }
}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b002      	add	sp, #8
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	001a      	movs	r2, r3
 8007b2a:	1cbb      	adds	r3, r7, #2
 8007b2c:	801a      	strh	r2, [r3, #0]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <CO_CANmodule_init+0x24>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <CO_CANmodule_init+0x24>
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <CO_CANmodule_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007b40:	2301      	movs	r3, #1
 8007b42:	425b      	negs	r3, r3
 8007b44:	e0a5      	b.n	8007c92 <CO_CANmodule_init+0x176>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007b4c:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <CO_CANmodule_init+0x180>)
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	601a      	str	r2, [r3, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	1cba      	adds	r2, r7, #2
 8007b5c:	8812      	ldrh	r2, [r2, #0]
 8007b5e:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a3a      	ldr	r2, [r7, #32]
 8007b64:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2224      	movs	r2, #36	; 0x24
 8007b6a:	18ba      	adds	r2, r7, r2
 8007b6c:	8812      	ldrh	r2, [r2, #0]
 8007b6e:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007b9a:	2316      	movs	r3, #22
 8007b9c:	18fb      	adds	r3, r7, r3
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	e032      	b.n	8007c0a <CO_CANmodule_init+0xee>
        rxArray[i].ident = 0U;
 8007ba4:	2116      	movs	r1, #22
 8007ba6:	187b      	adds	r3, r7, r1
 8007ba8:	881a      	ldrh	r2, [r3, #0]
 8007baa:	0013      	movs	r3, r2
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	001a      	movs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	2200      	movs	r2, #0
 8007bba:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007bbc:	187b      	adds	r3, r7, r1
 8007bbe:	881a      	ldrh	r2, [r3, #0]
 8007bc0:	0013      	movs	r3, r2
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	189b      	adds	r3, r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	001a      	movs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	189b      	adds	r3, r3, r2
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4252      	negs	r2, r2
 8007bd2:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007bd4:	187b      	adds	r3, r7, r1
 8007bd6:	881a      	ldrh	r2, [r3, #0]
 8007bd8:	0013      	movs	r3, r2
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	001a      	movs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	189b      	adds	r3, r3, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007bea:	187b      	adds	r3, r7, r1
 8007bec:	881a      	ldrh	r2, [r3, #0]
 8007bee:	0013      	movs	r3, r2
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	189b      	adds	r3, r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	001a      	movs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	189b      	adds	r3, r3, r2
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007c00:	187b      	adds	r3, r7, r1
 8007c02:	881a      	ldrh	r2, [r3, #0]
 8007c04:	187b      	adds	r3, r7, r1
 8007c06:	3201      	adds	r2, #1
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	2316      	movs	r3, #22
 8007c0c:	18fa      	adds	r2, r7, r3
 8007c0e:	1cbb      	adds	r3, r7, #2
 8007c10:	8812      	ldrh	r2, [r2, #0]
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3c5      	bcc.n	8007ba4 <CO_CANmodule_init+0x88>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007c18:	2314      	movs	r3, #20
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	e010      	b.n	8007c44 <CO_CANmodule_init+0x128>
        txArray[i].bufferFull = false;
 8007c22:	2114      	movs	r1, #20
 8007c24:	187b      	adds	r3, r7, r1
 8007c26:	881a      	ldrh	r2, [r3, #0]
 8007c28:	0013      	movs	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	189b      	adds	r3, r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	001a      	movs	r2, r3
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	189b      	adds	r3, r3, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8007c3a:	187b      	adds	r3, r7, r1
 8007c3c:	881a      	ldrh	r2, [r3, #0]
 8007c3e:	187b      	adds	r3, r7, r1
 8007c40:	3201      	adds	r2, #1
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	2314      	movs	r3, #20
 8007c46:	18fa      	adds	r2, r7, r3
 8007c48:	2324      	movs	r3, #36	; 0x24
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	8812      	ldrh	r2, [r2, #0]
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3e6      	bcc.n	8007c22 <CO_CANmodule_init+0x106>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6898      	ldr	r0, [r3, #8]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	2202      	movs	r2, #2
 8007c66:	2100      	movs	r1, #0
 8007c68:	f002 fb1c 	bl	800a2a4 <HAL_FDCAN_ConfigGlobalFilter>
 8007c6c:	1e03      	subs	r3, r0, #0
 8007c6e:	d002      	beq.n	8007c76 <CO_CANmodule_init+0x15a>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007c70:	2301      	movs	r3, #1
 8007c72:	425b      	negs	r3, r3
 8007c74:	e00d      	b.n	8007c92 <CO_CANmodule_init+0x176>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	4252      	negs	r2, r2
 8007c7e:	4908      	ldr	r1, [pc, #32]	; (8007ca0 <CO_CANmodule_init+0x184>)
 8007c80:	0018      	movs	r0, r3
 8007c82:	f002 fd09 	bl	800a698 <HAL_FDCAN_ActivateNotification>
 8007c86:	1e03      	subs	r3, r0, #0
 8007c88:	d002      	beq.n	8007c90 <CO_CANmodule_init+0x174>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	425b      	negs	r3, r3
 8007c8e:	e000      	b.n	8007c92 <CO_CANmodule_init+0x176>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	0018      	movs	r0, r3
 8007c94:	46bd      	mov	sp, r7
 8007c96:	b006      	add	sp, #24
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	20000510 	.word	0x20000510
 8007ca0:	006e0289 	.word	0x006e0289

08007ca4 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <CO_CANmodule_disable+0x22>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f002 fb45 	bl	800a350 <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007cd0:	b5b0      	push	{r4, r5, r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	000c      	movs	r4, r1
 8007cda:	0010      	movs	r0, r2
 8007cdc:	0019      	movs	r1, r3
 8007cde:	250a      	movs	r5, #10
 8007ce0:	197b      	adds	r3, r7, r5
 8007ce2:	1c22      	adds	r2, r4, #0
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	2408      	movs	r4, #8
 8007ce8:	193b      	adds	r3, r7, r4
 8007cea:	1c02      	adds	r2, r0, #0
 8007cec:	801a      	strh	r2, [r3, #0]
 8007cee:	1dbb      	adds	r3, r7, #6
 8007cf0:	1c0a      	adds	r2, r1, #0
 8007cf2:	801a      	strh	r2, [r3, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007cf4:	2317      	movs	r3, #23
 8007cf6:	18fb      	adds	r3, r7, r3
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03e      	beq.n	8007d80 <CO_CANrxBufferInit+0xb0>
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d03b      	beq.n	8007d80 <CO_CANrxBufferInit+0xb0>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d038      	beq.n	8007d80 <CO_CANrxBufferInit+0xb0>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	891b      	ldrh	r3, [r3, #8]
 8007d12:	197a      	adds	r2, r7, r5
 8007d14:	8812      	ldrh	r2, [r2, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d232      	bcs.n	8007d80 <CO_CANrxBufferInit+0xb0>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6859      	ldr	r1, [r3, #4]
 8007d1e:	197b      	adds	r3, r7, r5
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	0013      	movs	r3, r2
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	189b      	adds	r3, r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	18cb      	adds	r3, r1, r3
 8007d2c:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d32:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d38:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007d3a:	193b      	adds	r3, r7, r4
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	5e9b      	ldrsh	r3, [r3, r2]
 8007d40:	055b      	lsls	r3, r3, #21
 8007d42:	0d5b      	lsrs	r3, r3, #21
 8007d44:	b21a      	sxth	r2, r3
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <CO_CANrxBufferInit+0x80>
 8007d4c:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <CO_CANrxBufferInit+0xcc>)
 8007d4e:	e000      	b.n	8007d52 <CO_CANrxBufferInit+0x82>
 8007d50:	2300      	movs	r3, #0
 8007d52:	4313      	orrs	r3, r2
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007d5c:	1dbb      	adds	r3, r7, #6
 8007d5e:	2200      	movs	r2, #0
 8007d60:	5e9b      	ldrsh	r3, [r3, r2]
 8007d62:	055b      	lsls	r3, r3, #21
 8007d64:	0d5b      	lsrs	r3, r3, #21
 8007d66:	b21b      	sxth	r3, r3
 8007d68:	4a0c      	ldr	r2, [pc, #48]	; (8007d9c <CO_CANrxBufferInit+0xcc>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	b21b      	sxth	r3, r3
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <CO_CANrxBufferInit+0xba>
            __NOP();
 8007d7c:	46c0      	nop			; (mov r8, r8)
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007d7e:	e004      	b.n	8007d8a <CO_CANrxBufferInit+0xba>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007d80:	2317      	movs	r3, #23
 8007d82:	18fb      	adds	r3, r7, r3
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	e000      	b.n	8007d8c <CO_CANrxBufferInit+0xbc>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007d8a:	46c0      	nop			; (mov r8, r8)
    }

    return ret;
 8007d8c:	2317      	movs	r3, #23
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b25b      	sxtb	r3, r3
}
 8007d94:	0018      	movs	r0, r3
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b006      	add	sp, #24
 8007d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d9c:	ffff8000 	.word	0xffff8000

08007da0 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	0008      	movs	r0, r1
 8007daa:	0011      	movs	r1, r2
 8007dac:	607b      	str	r3, [r7, #4]
 8007dae:	240a      	movs	r4, #10
 8007db0:	193b      	adds	r3, r7, r4
 8007db2:	1c02      	adds	r2, r0, #0
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	2008      	movs	r0, #8
 8007db8:	183b      	adds	r3, r7, r0
 8007dba:	1c0a      	adds	r2, r1, #0
 8007dbc:	801a      	strh	r2, [r3, #0]
    CO_CANtx_t* buffer = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d02b      	beq.n	8007e20 <CO_CANtxBufferInit+0x80>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8a1b      	ldrh	r3, [r3, #16]
 8007dcc:	193a      	adds	r2, r7, r4
 8007dce:	8812      	ldrh	r2, [r2, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d225      	bcs.n	8007e20 <CO_CANtxBufferInit+0x80>
        buffer = &CANmodule->txArray[index];
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68d9      	ldr	r1, [r3, #12]
 8007dd8:	193b      	adds	r3, r7, r4
 8007dda:	881a      	ldrh	r2, [r3, #0]
 8007ddc:	0013      	movs	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	189b      	adds	r3, r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	18cb      	adds	r3, r1, r3
 8007de6:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007de8:	183b      	adds	r3, r7, r0
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	055b      	lsls	r3, r3, #21
 8007dee:	0d5a      	lsrs	r2, r3, #21
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <CO_CANtxBufferInit+0x5c>
 8007df6:	2380      	movs	r3, #128	; 0x80
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	e000      	b.n	8007dfe <CO_CANtxBufferInit+0x5e>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	2320      	movs	r3, #32
 8007e08:	2108      	movs	r1, #8
 8007e0a:	468c      	mov	ip, r1
 8007e0c:	44bc      	add	ip, r7
 8007e0e:	4463      	add	r3, ip
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	7113      	strb	r3, [r2, #4]
        buffer->bufferFull = false;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2200      	movs	r2, #0
 8007e18:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1e:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007e20:	697b      	ldr	r3, [r7, #20]
}
 8007e22:	0018      	movs	r0, r3
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b007      	add	sp, #28
 8007e28:	bd90      	pop	{r4, r7, pc}
	...

08007e2c <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8007e36:	230f      	movs	r3, #15
 8007e38:	18fb      	adds	r3, r7, r3
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	0018      	movs	r0, r3
 8007e46:	f002 fc17 	bl	800a678 <HAL_FDCAN_GetTxFifoFreeLevel>
 8007e4a:	1e03      	subs	r3, r0, #0
 8007e4c:	d065      	beq.n	8007f1a <prv_send_can_message+0xee>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	055b      	lsls	r3, r3, #21
 8007e54:	0d5a      	lsrs	r2, r3, #21
 8007e56:	4b34      	ldr	r3, [pc, #208]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e58:	601a      	str	r2, [r3, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	039a      	lsls	r2, r3, #14
 8007e60:	2380      	movs	r3, #128	; 0x80
 8007e62:	059b      	lsls	r3, r3, #22
 8007e64:	401a      	ands	r2, r3
 8007e66:	4b30      	ldr	r3, [pc, #192]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e68:	609a      	str	r2, [r3, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 8007e6a:	4b2f      	ldr	r3, [pc, #188]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 8007e70:	4b2d      	ldr	r3, [pc, #180]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 8007e76:	4b2c      	ldr	r3, [pc, #176]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 8007e7c:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007e82:	4b29      	ldr	r3, [pc, #164]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007e88:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <prv_send_can_message+0xfc>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d830      	bhi.n	8007ef8 <prv_send_can_message+0xcc>
 8007e96:	009a      	lsls	r2, r3, #2
 8007e98:	4b24      	ldr	r3, [pc, #144]	; (8007f2c <prv_send_can_message+0x100>)
 8007e9a:	18d3      	adds	r3, r2, r3
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	469f      	mov	pc, r3
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <prv_send_can_message+0xfc>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	60da      	str	r2, [r3, #12]
                break;
 8007ea6:	e028      	b.n	8007efa <prv_send_can_message+0xce>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 8007ea8:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <prv_send_can_message+0xfc>)
 8007eaa:	2280      	movs	r2, #128	; 0x80
 8007eac:	0252      	lsls	r2, r2, #9
 8007eae:	60da      	str	r2, [r3, #12]
                break;
 8007eb0:	e023      	b.n	8007efa <prv_send_can_message+0xce>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <prv_send_can_message+0xfc>)
 8007eb4:	2280      	movs	r2, #128	; 0x80
 8007eb6:	0292      	lsls	r2, r2, #10
 8007eb8:	60da      	str	r2, [r3, #12]
                break;
 8007eba:	e01e      	b.n	8007efa <prv_send_can_message+0xce>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 8007ebc:	4b1a      	ldr	r3, [pc, #104]	; (8007f28 <prv_send_can_message+0xfc>)
 8007ebe:	22c0      	movs	r2, #192	; 0xc0
 8007ec0:	0292      	lsls	r2, r2, #10
 8007ec2:	60da      	str	r2, [r3, #12]
                break;
 8007ec4:	e019      	b.n	8007efa <prv_send_can_message+0xce>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <prv_send_can_message+0xfc>)
 8007ec8:	2280      	movs	r2, #128	; 0x80
 8007eca:	02d2      	lsls	r2, r2, #11
 8007ecc:	60da      	str	r2, [r3, #12]
                break;
 8007ece:	e014      	b.n	8007efa <prv_send_can_message+0xce>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 8007ed0:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <prv_send_can_message+0xfc>)
 8007ed2:	22a0      	movs	r2, #160	; 0xa0
 8007ed4:	02d2      	lsls	r2, r2, #11
 8007ed6:	60da      	str	r2, [r3, #12]
                break;
 8007ed8:	e00f      	b.n	8007efa <prv_send_can_message+0xce>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 8007eda:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <prv_send_can_message+0xfc>)
 8007edc:	22c0      	movs	r2, #192	; 0xc0
 8007ede:	02d2      	lsls	r2, r2, #11
 8007ee0:	60da      	str	r2, [r3, #12]
                break;
 8007ee2:	e00a      	b.n	8007efa <prv_send_can_message+0xce>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <prv_send_can_message+0xfc>)
 8007ee6:	22e0      	movs	r2, #224	; 0xe0
 8007ee8:	02d2      	lsls	r2, r2, #11
 8007eea:	60da      	str	r2, [r3, #12]
                break;
 8007eec:	e005      	b.n	8007efa <prv_send_can_message+0xce>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <prv_send_can_message+0xfc>)
 8007ef0:	2280      	movs	r2, #128	; 0x80
 8007ef2:	0312      	lsls	r2, r2, #12
 8007ef4:	60da      	str	r2, [r3, #12]
                break;
 8007ef6:	e000      	b.n	8007efa <prv_send_can_message+0xce>
            default: /* Hard error... */
                break;
 8007ef8:	46c0      	nop			; (mov r8, r8)
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6898      	ldr	r0, [r3, #8]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	1d5a      	adds	r2, r3, #5
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <prv_send_can_message+0xfc>)
 8007f06:	0019      	movs	r1, r3
 8007f08:	f002 fa8f 	bl	800a42a <HAL_FDCAN_AddMessageToTxFifoQ>
 8007f0c:	0003      	movs	r3, r0
            == HAL_OK;
 8007f0e:	425a      	negs	r2, r3
 8007f10:	4153      	adcs	r3, r2
 8007f12:	b2da      	uxtb	r2, r3
        success =
 8007f14:	230f      	movs	r3, #15
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	701a      	strb	r2, [r3, #0]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 8007f1a:	230f      	movs	r3, #15
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	781b      	ldrb	r3, [r3, #0]
}
 8007f20:	0018      	movs	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b004      	add	sp, #16
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000514 	.word	0x20000514
 8007f2c:	08010304 	.word	0x08010304

08007f30 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007f3a:	2317      	movs	r3, #23
 8007f3c:	18fb      	adds	r3, r7, r3
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00e      	beq.n	8007f68 <CO_CANsend+0x38>
        if (!CANmodule->firstCANtxMessage) {
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <CO_CANsend+0x30>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8a5b      	ldrh	r3, [r3, #18]
 8007f56:	2208      	movs	r2, #8
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007f60:	2317      	movs	r3, #23
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	22f7      	movs	r2, #247	; 0xf7
 8007f66:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f68:	f3ef 8310 	mrs	r3, PRIMASK
 8007f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f6e:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007f74:	b672      	cpsid	i
}
 8007f76:	46c0      	nop			; (mov r8, r8)
    if (prv_send_can_message(CANmodule, buffer)) {
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	0011      	movs	r1, r2
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7ff ff54 	bl	8007e2c <prv_send_can_message>
 8007f84:	1e03      	subs	r3, r0, #0
 8007f86:	d004      	beq.n	8007f92 <CO_CANsend+0x62>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695a      	ldr	r2, [r3, #20]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	61da      	str	r2, [r3, #28]
 8007f90:	e00d      	b.n	8007fae <CO_CANsend+0x7e>
    } else {
        /* Only increment count if buffer wasn't already full */
        if (!buffer->bufferFull) {
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <CO_CANsend+0x7e>
            buffer->bufferFull = true;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	611a      	str	r2, [r3, #16]
            CANmodule->CANtxCount++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	849a      	strh	r2, [r3, #36]	; 0x24
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f383 8810 	msr	PRIMASK, r3
}
 8007fba:	46c0      	nop			; (mov r8, r8)

    return err;
 8007fbc:	2317      	movs	r3, #23
 8007fbe:	18fb      	adds	r3, r7, r3
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b25b      	sxtb	r3, r3
}
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b006      	add	sp, #24
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fde:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007fe4:	b672      	cpsid	i
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d03d      	beq.n	8008080 <CO_CANclearPendingSyncPDOs+0xb4>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8008004:	2312      	movs	r3, #18
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	8a12      	ldrh	r2, [r2, #16]
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	e032      	b.n	8008076 <CO_CANclearPendingSyncPDOs+0xaa>
            if (CANmodule->txArray[i].bufferFull) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68d9      	ldr	r1, [r3, #12]
 8008014:	2012      	movs	r0, #18
 8008016:	183b      	adds	r3, r7, r0
 8008018:	881a      	ldrh	r2, [r3, #0]
 800801a:	0013      	movs	r3, r2
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	189b      	adds	r3, r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	18cb      	adds	r3, r1, r3
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01f      	beq.n	800806a <CO_CANclearPendingSyncPDOs+0x9e>
                if (CANmodule->txArray[i].syncFlag) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68d9      	ldr	r1, [r3, #12]
 800802e:	183b      	adds	r3, r7, r0
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	0013      	movs	r3, r2
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	189b      	adds	r3, r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	18cb      	adds	r3, r1, r3
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d013      	beq.n	800806a <CO_CANclearPendingSyncPDOs+0x9e>
                    CANmodule->txArray[i].bufferFull = false;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68d9      	ldr	r1, [r3, #12]
 8008046:	183b      	adds	r3, r7, r0
 8008048:	881a      	ldrh	r2, [r3, #0]
 800804a:	0013      	movs	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	189b      	adds	r3, r3, r2
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	18cb      	adds	r3, r1, r3
 8008054:	2200      	movs	r2, #0
 8008056:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8008066:	2302      	movs	r3, #2
 8008068:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800806a:	2212      	movs	r2, #18
 800806c:	18bb      	adds	r3, r7, r2
 800806e:	18ba      	adds	r2, r7, r2
 8008070:	8812      	ldrh	r2, [r2, #0]
 8008072:	3a01      	subs	r2, #1
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	2312      	movs	r3, #18
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1c7      	bne.n	8008010 <CO_CANclearPendingSyncPDOs+0x44>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f383 8810 	msr	PRIMASK, r3
}
 800808c:	46c0      	nop			; (mov r8, r8)
    if (tpdoDeleted) {
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d006      	beq.n	80080a2 <CO_CANclearPendingSyncPDOs+0xd6>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8a5b      	ldrh	r3, [r3, #18]
 8008098:	2280      	movs	r2, #128	; 0x80
 800809a:	4313      	orrs	r3, r2
 800809c:	b29a      	uxth	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	825a      	strh	r2, [r3, #18]
    }
}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	46bd      	mov	sp, r7
 80080a6:	b006      	add	sp, #24
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60bb      	str	r3, [r7, #8]
    // CANOpen just care about Bus_off, Warning, Passive and Overflow
    // I didn't find overflow error register in STM32, if you find it please let me know

#ifdef CO_STM32_FDCAN_Driver

    err = ((FDCAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->PSR
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c2:	22e0      	movs	r2, #224	; 0xe0
 80080c4:	4013      	ands	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]
          & (FDCAN_PSR_BO | FDCAN_PSR_EW | FDCAN_PSR_EP);

    if (CANmodule->errOld != err) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d034      	beq.n	800813c <CO_CANmodule_process+0x90>

        uint16_t status = CANmodule->CANerrorStatus;
 80080d2:	210e      	movs	r1, #14
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	8a52      	ldrh	r2, [r2, #18]
 80080da:	801a      	strh	r2, [r3, #0]

        CANmodule->errOld = err;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & FDCAN_PSR_BO) {
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2280      	movs	r2, #128	; 0x80
 80080e6:	4013      	ands	r3, r2
 80080e8:	d006      	beq.n	80080f8 <CO_CANmodule_process+0x4c>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	187a      	adds	r2, r7, r1
 80080ee:	8812      	ldrh	r2, [r2, #0]
 80080f0:	2104      	movs	r1, #4
 80080f2:	430a      	orrs	r2, r1
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	e01c      	b.n	8008132 <CO_CANmodule_process+0x86>
            // In this driver we expect that the controller is automatically handling the protocol exceptions.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80080f8:	200e      	movs	r0, #14
 80080fa:	183b      	adds	r3, r7, r0
 80080fc:	183a      	adds	r2, r7, r0
 80080fe:	8812      	ldrh	r2, [r2, #0]
 8008100:	4910      	ldr	r1, [pc, #64]	; (8008144 <CO_CANmodule_process+0x98>)
 8008102:	400a      	ands	r2, r1
 8008104:	801a      	strh	r2, [r3, #0]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & FDCAN_PSR_EW) {
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2240      	movs	r2, #64	; 0x40
 800810a:	4013      	ands	r3, r2
 800810c:	d006      	beq.n	800811c <CO_CANmodule_process+0x70>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 800810e:	183b      	adds	r3, r7, r0
 8008110:	183a      	adds	r2, r7, r0
 8008112:	8812      	ldrh	r2, [r2, #0]
 8008114:	2102      	movs	r1, #2
 8008116:	31ff      	adds	r1, #255	; 0xff
 8008118:	430a      	orrs	r2, r1
 800811a:	801a      	strh	r2, [r3, #0]
            }

            if (err & FDCAN_PSR_EP) {
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2220      	movs	r2, #32
 8008120:	4013      	ands	r3, r2
 8008122:	d006      	beq.n	8008132 <CO_CANmodule_process+0x86>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8008124:	220e      	movs	r2, #14
 8008126:	18bb      	adds	r3, r7, r2
 8008128:	18ba      	adds	r2, r7, r2
 800812a:	8812      	ldrh	r2, [r2, #0]
 800812c:	4906      	ldr	r1, [pc, #24]	; (8008148 <CO_CANmodule_process+0x9c>)
 800812e:	430a      	orrs	r2, r1
 8008130:	801a      	strh	r2, [r3, #0]
            }
        }

        CANmodule->CANerrorStatus = status;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	220e      	movs	r2, #14
 8008136:	18ba      	adds	r2, r7, r2
 8008138:	8812      	ldrh	r2, [r2, #0]
 800813a:	825a      	strh	r2, [r3, #18]

        CANmodule->CANerrorStatus = status;
    }

#endif
}
 800813c:	46c0      	nop			; (mov r8, r8)
 800813e:	46bd      	mov	sp, r7
 8008140:	b004      	add	sp, #16
 8008142:	bd80      	pop	{r7, pc}
 8008144:	fffffcf8 	.word	0xfffffcf8
 8008148:	00000202 	.word	0x00000202

0800814c <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08c      	sub	sp, #48	; 0x30
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8008158:	2300      	movs	r3, #0
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 800815c:	2329      	movs	r3, #41	; 0x29
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8008164:	2314      	movs	r3, #20
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	3305      	adds	r3, #5
 800816a:	4a6c      	ldr	r2, [pc, #432]	; (800831c <prv_read_can_received_msg+0x1d0>)
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f002 f9a0 	bl	800a4b4 <HAL_FDCAN_GetRxMessage>
 8008174:	1e03      	subs	r3, r0, #0
 8008176:	d000      	beq.n	800817a <prv_read_can_received_msg+0x2e>
 8008178:	e0cb      	b.n	8008312 <prv_read_can_received_msg+0x1c6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 800817a:	4b68      	ldr	r3, [pc, #416]	; (800831c <prv_read_can_received_msg+0x1d0>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b67      	ldr	r3, [pc, #412]	; (800831c <prv_read_can_received_msg+0x1d0>)
 8008180:	6899      	ldr	r1, [r3, #8]
 8008182:	2380      	movs	r3, #128	; 0x80
 8008184:	059b      	lsls	r3, r3, #22
 8008186:	4299      	cmp	r1, r3
 8008188:	d102      	bne.n	8008190 <prv_read_can_received_msg+0x44>
 800818a:	2380      	movs	r3, #128	; 0x80
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	e000      	b.n	8008192 <prv_read_can_received_msg+0x46>
 8008190:	2300      	movs	r3, #0
 8008192:	431a      	orrs	r2, r3
 8008194:	2314      	movs	r3, #20
 8008196:	18fb      	adds	r3, r7, r3
 8008198:	601a      	str	r2, [r3, #0]
    switch (rx_hdr.DataLength) {
 800819a:	4b60      	ldr	r3, [pc, #384]	; (800831c <prv_read_can_received_msg+0x1d0>)
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	2280      	movs	r2, #128	; 0x80
 80081a0:	0312      	lsls	r2, r2, #12
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d100      	bne.n	80081a8 <prv_read_can_received_msg+0x5c>
 80081a6:	e063      	b.n	8008270 <prv_read_can_received_msg+0x124>
 80081a8:	2280      	movs	r2, #128	; 0x80
 80081aa:	0312      	lsls	r2, r2, #12
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d900      	bls.n	80081b2 <prv_read_can_received_msg+0x66>
 80081b0:	e063      	b.n	800827a <prv_read_can_received_msg+0x12e>
 80081b2:	22e0      	movs	r2, #224	; 0xe0
 80081b4:	02d2      	lsls	r2, r2, #11
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d055      	beq.n	8008266 <prv_read_can_received_msg+0x11a>
 80081ba:	22e0      	movs	r2, #224	; 0xe0
 80081bc:	02d2      	lsls	r2, r2, #11
 80081be:	4293      	cmp	r3, r2
 80081c0:	d85b      	bhi.n	800827a <prv_read_can_received_msg+0x12e>
 80081c2:	22c0      	movs	r2, #192	; 0xc0
 80081c4:	02d2      	lsls	r2, r2, #11
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d048      	beq.n	800825c <prv_read_can_received_msg+0x110>
 80081ca:	22c0      	movs	r2, #192	; 0xc0
 80081cc:	02d2      	lsls	r2, r2, #11
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d853      	bhi.n	800827a <prv_read_can_received_msg+0x12e>
 80081d2:	22a0      	movs	r2, #160	; 0xa0
 80081d4:	02d2      	lsls	r2, r2, #11
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d03b      	beq.n	8008252 <prv_read_can_received_msg+0x106>
 80081da:	22a0      	movs	r2, #160	; 0xa0
 80081dc:	02d2      	lsls	r2, r2, #11
 80081de:	4293      	cmp	r3, r2
 80081e0:	d84b      	bhi.n	800827a <prv_read_can_received_msg+0x12e>
 80081e2:	2280      	movs	r2, #128	; 0x80
 80081e4:	02d2      	lsls	r2, r2, #11
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d02e      	beq.n	8008248 <prv_read_can_received_msg+0xfc>
 80081ea:	2280      	movs	r2, #128	; 0x80
 80081ec:	02d2      	lsls	r2, r2, #11
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d843      	bhi.n	800827a <prv_read_can_received_msg+0x12e>
 80081f2:	22c0      	movs	r2, #192	; 0xc0
 80081f4:	0292      	lsls	r2, r2, #10
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d021      	beq.n	800823e <prv_read_can_received_msg+0xf2>
 80081fa:	22c0      	movs	r2, #192	; 0xc0
 80081fc:	0292      	lsls	r2, r2, #10
 80081fe:	4293      	cmp	r3, r2
 8008200:	d83b      	bhi.n	800827a <prv_read_can_received_msg+0x12e>
 8008202:	2280      	movs	r2, #128	; 0x80
 8008204:	0292      	lsls	r2, r2, #10
 8008206:	4293      	cmp	r3, r2
 8008208:	d014      	beq.n	8008234 <prv_read_can_received_msg+0xe8>
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	0292      	lsls	r2, r2, #10
 800820e:	4293      	cmp	r3, r2
 8008210:	d833      	bhi.n	800827a <prv_read_can_received_msg+0x12e>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <prv_read_can_received_msg+0xd4>
 8008216:	2280      	movs	r2, #128	; 0x80
 8008218:	0252      	lsls	r2, r2, #9
 800821a:	4293      	cmp	r3, r2
 800821c:	d005      	beq.n	800822a <prv_read_can_received_msg+0xde>
 800821e:	e02c      	b.n	800827a <prv_read_can_received_msg+0x12e>
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 8008220:	2314      	movs	r3, #20
 8008222:	18fb      	adds	r3, r7, r3
 8008224:	2200      	movs	r2, #0
 8008226:	711a      	strb	r2, [r3, #4]
            break;
 8008228:	e02c      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 800822a:	2314      	movs	r3, #20
 800822c:	18fb      	adds	r3, r7, r3
 800822e:	2201      	movs	r2, #1
 8008230:	711a      	strb	r2, [r3, #4]
            break;
 8008232:	e027      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 8008234:	2314      	movs	r3, #20
 8008236:	18fb      	adds	r3, r7, r3
 8008238:	2202      	movs	r2, #2
 800823a:	711a      	strb	r2, [r3, #4]
            break;
 800823c:	e022      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 800823e:	2314      	movs	r3, #20
 8008240:	18fb      	adds	r3, r7, r3
 8008242:	2203      	movs	r2, #3
 8008244:	711a      	strb	r2, [r3, #4]
            break;
 8008246:	e01d      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 8008248:	2314      	movs	r3, #20
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	2204      	movs	r2, #4
 800824e:	711a      	strb	r2, [r3, #4]
            break;
 8008250:	e018      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 8008252:	2314      	movs	r3, #20
 8008254:	18fb      	adds	r3, r7, r3
 8008256:	2205      	movs	r2, #5
 8008258:	711a      	strb	r2, [r3, #4]
            break;
 800825a:	e013      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 800825c:	2314      	movs	r3, #20
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	2206      	movs	r2, #6
 8008262:	711a      	strb	r2, [r3, #4]
            break;
 8008264:	e00e      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 8008266:	2314      	movs	r3, #20
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	2207      	movs	r2, #7
 800826c:	711a      	strb	r2, [r3, #4]
            break;
 800826e:	e009      	b.n	8008284 <prv_read_can_received_msg+0x138>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 8008270:	2314      	movs	r3, #20
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	2208      	movs	r2, #8
 8008276:	711a      	strb	r2, [r3, #4]
            break;
 8008278:	e004      	b.n	8008284 <prv_read_can_received_msg+0x138>
        default:
            rcvMsg.dlc = 0;
 800827a:	2314      	movs	r3, #20
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	2200      	movs	r2, #0
 8008280:	711a      	strb	r2, [r3, #4]
            break; /* Invalid length when more than 8 */
 8008282:	46c0      	nop			; (mov r8, r8)
    }
    rcvMsgIdent = rcvMsg.ident;
 8008284:	2314      	movs	r3, #20
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 800828c:	4b24      	ldr	r3, [pc, #144]	; (8008320 <prv_read_can_received_msg+0x1d4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <prv_read_can_received_msg+0x14e>
        __BKPT(0);
 8008296:	be00      	bkpt	0x0000
 8008298:	e026      	b.n	80082e8 <prv_read_can_received_msg+0x19c>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800829a:	4b21      	ldr	r3, [pc, #132]	; (8008320 <prv_read_can_received_msg+0x1d4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80082a2:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <prv_read_can_received_msg+0x1d4>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	232a      	movs	r3, #42	; 0x2a
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	8912      	ldrh	r2, [r2, #8]
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	e016      	b.n	80082de <prv_read_can_received_msg+0x192>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	001a      	movs	r2, r3
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	4053      	eors	r3, r2
 80082ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082bc:	8852      	ldrh	r2, [r2, #2]
 80082be:	4013      	ands	r3, r2
 80082c0:	d104      	bne.n	80082cc <prv_read_can_received_msg+0x180>
                messageFound = 1;
 80082c2:	2329      	movs	r3, #41	; 0x29
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	2201      	movs	r2, #1
 80082c8:	701a      	strb	r2, [r3, #0]
                break;
 80082ca:	e00d      	b.n	80082e8 <prv_read_can_received_msg+0x19c>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80082cc:	222a      	movs	r2, #42	; 0x2a
 80082ce:	18bb      	adds	r3, r7, r2
 80082d0:	18ba      	adds	r2, r7, r2
 80082d2:	8812      	ldrh	r2, [r2, #0]
 80082d4:	3a01      	subs	r2, #1
 80082d6:	801a      	strh	r2, [r3, #0]
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	330c      	adds	r3, #12
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082de:	232a      	movs	r3, #42	; 0x2a
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e3      	bne.n	80082b0 <prv_read_can_received_msg+0x164>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 80082e8:	2329      	movs	r3, #41	; 0x29
 80082ea:	18fb      	adds	r3, r7, r3
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d010      	beq.n	8008314 <prv_read_can_received_msg+0x1c8>
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00d      	beq.n	8008314 <prv_read_can_received_msg+0x1c8>
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d009      	beq.n	8008314 <prv_read_can_received_msg+0x1c8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2114      	movs	r1, #20
 800830a:	1879      	adds	r1, r7, r1
 800830c:	0018      	movs	r0, r3
 800830e:	4790      	blx	r2
 8008310:	e000      	b.n	8008314 <prv_read_can_received_msg+0x1c8>
        return;
 8008312:	46c0      	nop			; (mov r8, r8)
    }
}
 8008314:	46bd      	mov	sp, r7
 8008316:	b00c      	add	sp, #48	; 0x30
 8008318:	bd80      	pop	{r7, pc}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	20000538 	.word	0x20000538
 8008320:	20000510 	.word	0x20000510

08008324 <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2201      	movs	r2, #1
 8008332:	4013      	ands	r3, r2
 8008334:	d005      	beq.n	8008342 <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2140      	movs	r1, #64	; 0x40
 800833c:	0018      	movs	r0, r3
 800833e:	f7ff ff05 	bl	800814c <prv_read_can_received_msg>
    }
}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	46bd      	mov	sp, r7
 8008346:	b002      	add	sp, #8
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_FDCAN_RxFifo1Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
    if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2208      	movs	r2, #8
 8008358:	4013      	ands	r3, r2
 800835a:	d005      	beq.n	8008368 <HAL_FDCAN_RxFifo1Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2141      	movs	r1, #65	; 0x41
 8008362:	0018      	movs	r0, r3
 8008364:	f7ff fef2 	bl	800814c <prv_read_can_received_msg>
    }
}
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	b002      	add	sp, #8
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 800837a:	4b2d      	ldr	r3, [pc, #180]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2200      	movs	r2, #0
 8008380:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8008382:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 800838a:	4b29      	ldr	r3, [pc, #164]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008390:	b29b      	uxth	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d047      	beq.n	8008426 <HAL_FDCAN_TxBufferCompleteCallback+0xb6>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 8008396:	4b26      	ldr	r3, [pc, #152]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a2:	f3ef 8210 	mrs	r2, PRIMASK
 80083a6:	60fa      	str	r2, [r7, #12]
  return(result);
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80083ac:	b672      	cpsid	i
}
 80083ae:	46c0      	nop			; (mov r8, r8)
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 80083b0:	4b1f      	ldr	r3, [pc, #124]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	2312      	movs	r3, #18
 80083b6:	18fb      	adds	r3, r7, r3
 80083b8:	8a12      	ldrh	r2, [r2, #16]
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	e024      	b.n	8008408 <HAL_FDCAN_TxBufferCompleteCallback+0x98>
            /* Try to send message */
            if (buffer->bufferFull) {
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d017      	beq.n	80083f6 <HAL_FDCAN_TxBufferCompleteCallback+0x86>
                if (prv_send_can_message(CANModule_local, buffer)) {
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	0011      	movs	r1, r2
 80083ce:	0018      	movs	r0, r3
 80083d0:	f7ff fd2c 	bl	8007e2c <prv_send_can_message>
 80083d4:	1e03      	subs	r3, r0, #0
 80083d6:	d01d      	beq.n	8008414 <HAL_FDCAN_TxBufferCompleteCallback+0xa4>
                    buffer->bufferFull = false;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2200      	movs	r2, #0
 80083dc:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 80083de:	4b14      	ldr	r3, [pc, #80]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80083e4:	b292      	uxth	r2, r2
 80083e6:	3a01      	subs	r2, #1
 80083e8:	b292      	uxth	r2, r2
 80083ea:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 80083ec:	4b10      	ldr	r3, [pc, #64]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	6952      	ldr	r2, [r2, #20]
 80083f4:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 80083f6:	2212      	movs	r2, #18
 80083f8:	18bb      	adds	r3, r7, r2
 80083fa:	18ba      	adds	r2, r7, r2
 80083fc:	8812      	ldrh	r2, [r2, #0]
 80083fe:	3a01      	subs	r2, #1
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	3318      	adds	r3, #24
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	2312      	movs	r3, #18
 800840a:	18fb      	adds	r3, r7, r3
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1d5      	bne.n	80083be <HAL_FDCAN_TxBufferCompleteCallback+0x4e>
 8008412:	e000      	b.n	8008416 <HAL_FDCAN_TxBufferCompleteCallback+0xa6>
                } else {
                    break;  // if we could not send the message, break out of the loop (the tx buffers are full)
 8008414:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 8008416:	4b06      	ldr	r3, [pc, #24]	; (8008430 <HAL_FDCAN_TxBufferCompleteCallback+0xc0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f383 8810 	msr	PRIMASK, r3
}
 8008424:	46c0      	nop			; (mov r8, r8)
    }
}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	b006      	add	sp, #24
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20000510 	.word	0x20000510

08008434 <toggleOutputPin>:
				{OUT15_GPIO_Port, OUT15_Pin, &outputsTimers[14]},
				{OUT16_GPIO_Port, OUT16_Pin, &outputsTimers[15]},
		};

void toggleOutputPin(void * param)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	DigitalOutput *digitalOutput = (DigitalOutput *)param;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(digitalOutput->port, digitalOutput->pin);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	889b      	ldrh	r3, [r3, #4]
 8008448:	0019      	movs	r1, r3
 800844a:	0010      	movs	r0, r2
 800844c:	f002 fe14 	bl	800b078 <HAL_GPIO_TogglePin>
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b004      	add	sp, #16
 8008456:	bd80      	pop	{r7, pc}

08008458 <processFunctionData>:


void processFunctionData(DigitalOutput *digitalOutput, const uint8_t functionData)
{
 8008458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845a:	b087      	sub	sp, #28
 800845c:	af02      	add	r7, sp, #8
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	000a      	movs	r2, r1
 8008462:	1cfb      	adds	r3, r7, #3
 8008464:	701a      	strb	r2, [r3, #0]
	//enter critical section
	HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8008466:	2013      	movs	r0, #19
 8008468:	f001 fda1 	bl	8009fae <HAL_NVIC_DisableIRQ>

	deInitSoftwareTimer(digitalOutput->timer);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	0018      	movs	r0, r3
 8008472:	f001 f9e9 	bl	8009848 <deInitSoftwareTimer>
	uint8_t property = (functionData >> 1) & 0b111;
 8008476:	1cfb      	adds	r3, r7, #3
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	b2da      	uxtb	r2, r3
 800847e:	250f      	movs	r5, #15
 8008480:	197b      	adds	r3, r7, r5
 8008482:	2107      	movs	r1, #7
 8008484:	400a      	ands	r2, r1
 8008486:	701a      	strb	r2, [r3, #0]
	uint8_t parameter = (functionData >> 4) & 0b111;
 8008488:	1cfb      	adds	r3, r7, #3
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	091b      	lsrs	r3, r3, #4
 800848e:	b2da      	uxtb	r2, r3
 8008490:	260e      	movs	r6, #14
 8008492:	19bb      	adds	r3, r7, r6
 8008494:	2107      	movs	r1, #7
 8008496:	400a      	ands	r2, r1
 8008498:	701a      	strb	r2, [r3, #0]
	uint8_t state = (functionData & 1) != 0;
 800849a:	1cfb      	adds	r3, r7, #3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2201      	movs	r2, #1
 80084a0:	4013      	ands	r3, r2
 80084a2:	1e5a      	subs	r2, r3, #1
 80084a4:	4193      	sbcs	r3, r2
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	230d      	movs	r3, #13
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	701a      	strb	r2, [r3, #0]
	uint8_t repeat;
	uint16_t duration = 0;
 80084ae:	240a      	movs	r4, #10
 80084b0:	193b      	adds	r3, r7, r4
 80084b2:	2200      	movs	r2, #0
 80084b4:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(digitalOutput->port, digitalOutput->pin, state);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8899      	ldrh	r1, [r3, #4]
 80084be:	230d      	movs	r3, #13
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	001a      	movs	r2, r3
 80084c6:	f002 fdba 	bl	800b03e <HAL_GPIO_WritePin>

	if(property == IMPULS_SIGNAL)
 80084ca:	197b      	adds	r3, r7, r5
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d11c      	bne.n	800850c <processFunctionData+0xb4>
	{
		repeat = 0;
 80084d2:	2509      	movs	r5, #9
 80084d4:	197b      	adds	r3, r7, r5
 80084d6:	2200      	movs	r2, #0
 80084d8:	701a      	strb	r2, [r3, #0]
		duration = impulseDurations[parameter];
 80084da:	19bb      	adds	r3, r7, r6
 80084dc:	7819      	ldrb	r1, [r3, #0]
 80084de:	193b      	adds	r3, r7, r4
 80084e0:	4a1f      	ldr	r2, [pc, #124]	; (8008560 <processFunctionData+0x108>)
 80084e2:	0049      	lsls	r1, r1, #1
 80084e4:	5a8a      	ldrh	r2, [r1, r2]
 80084e6:	801a      	strh	r2, [r3, #0]

		initSoftwareTimer(digitalOutput->timer, duration, toggleOutputPin, repeat, digitalOutput);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6898      	ldr	r0, [r3, #8]
 80084ec:	193b      	adds	r3, r7, r4
 80084ee:	8819      	ldrh	r1, [r3, #0]
 80084f0:	197b      	adds	r3, r7, r5
 80084f2:	781c      	ldrb	r4, [r3, #0]
 80084f4:	4a1b      	ldr	r2, [pc, #108]	; (8008564 <processFunctionData+0x10c>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	0023      	movs	r3, r4
 80084fc:	f001 f950 	bl	80097a0 <initSoftwareTimer>
		startSoftwareTimer(digitalOutput->timer);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	0018      	movs	r0, r3
 8008506:	f001 f9e5 	bl	80098d4 <startSoftwareTimer>
 800850a:	e022      	b.n	8008552 <processFunctionData+0xfa>
	}
	else if(property == FLASHING_SIGNAL)
 800850c:	230f      	movs	r3, #15
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d11d      	bne.n	8008552 <processFunctionData+0xfa>
	{
		repeat = 1;
 8008516:	2409      	movs	r4, #9
 8008518:	193b      	adds	r3, r7, r4
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
		duration = flashingDurations[parameter];
 800851e:	230e      	movs	r3, #14
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	7819      	ldrb	r1, [r3, #0]
 8008524:	250a      	movs	r5, #10
 8008526:	197b      	adds	r3, r7, r5
 8008528:	4a0f      	ldr	r2, [pc, #60]	; (8008568 <processFunctionData+0x110>)
 800852a:	0049      	lsls	r1, r1, #1
 800852c:	5a8a      	ldrh	r2, [r1, r2]
 800852e:	801a      	strh	r2, [r3, #0]

		initSoftwareTimer(digitalOutput->timer, duration, toggleOutputPin, repeat, digitalOutput);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6898      	ldr	r0, [r3, #8]
 8008534:	197b      	adds	r3, r7, r5
 8008536:	8819      	ldrh	r1, [r3, #0]
 8008538:	193b      	adds	r3, r7, r4
 800853a:	781c      	ldrb	r4, [r3, #0]
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <processFunctionData+0x10c>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	0023      	movs	r3, r4
 8008544:	f001 f92c 	bl	80097a0 <initSoftwareTimer>
		startSoftwareTimer(digitalOutput->timer);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	0018      	movs	r0, r3
 800854e:	f001 f9c1 	bl	80098d4 <startSoftwareTimer>
	}

	//exit critical section
	HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8008552:	2013      	movs	r0, #19
 8008554:	f001 fd1b 	bl	8009f8e <HAL_NVIC_EnableIRQ>

}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b005      	add	sp, #20
 800855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008560:	0801061c 	.word	0x0801061c
 8008564:	08008435 	.word	0x08008435
 8008568:	0801060c 	.word	0x0801060c

0800856c <virtualInputMappingRead>:
#include "canOpen_data.h"
#include "OD.h"
#include "DigitalOutput.h"

ODR_t virtualInputMappingRead(OD_stream_t* const stream, void* const buffer, const OD_size_t size, OD_size_t* const bytesRead)
{
 800856c:	b590      	push	{r4, r7, lr}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
	if (pendingVirtualInputMappings > 0)
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <virtualInputMappingRead+0xa0>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d039      	beq.n	80085f6 <virtualInputMappingRead+0x8a>
	{
		for(uint8_t i = 0; i < VIRTUAL_INPUT_MAPPING_SIZE; ++i)
 8008582:	2317      	movs	r3, #23
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e02f      	b.n	80085ec <virtualInputMappingRead+0x80>
		{
			//find first pending input
			if(virtualInputMapping[i].pending)
 800858c:	2417      	movs	r4, #23
 800858e:	193b      	adds	r3, r7, r4
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	491f      	ldr	r1, [pc, #124]	; (8008610 <virtualInputMappingRead+0xa4>)
 8008594:	0013      	movs	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	18cb      	adds	r3, r1, r3
 800859c:	3306      	adds	r3, #6
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01d      	beq.n	80085e0 <virtualInputMappingRead+0x74>
			{
				virtualInputMapping[i].pending = 0; //Clear pending input
 80085a4:	193b      	adds	r3, r7, r4
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	4919      	ldr	r1, [pc, #100]	; (8008610 <virtualInputMappingRead+0xa4>)
 80085aa:	0013      	movs	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	18cb      	adds	r3, r1, r3
 80085b2:	3306      	adds	r3, #6
 80085b4:	2200      	movs	r2, #0
 80085b6:	701a      	strb	r2, [r3, #0]
				--pendingVirtualInputMappings; //Decrease pending inputs count
 80085b8:	4b14      	ldr	r3, [pc, #80]	; (800860c <virtualInputMappingRead+0xa0>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	3b01      	subs	r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	4b12      	ldr	r3, [pc, #72]	; (800860c <virtualInputMappingRead+0xa0>)
 80085c2:	701a      	strb	r2, [r3, #0]

				memcpy(stream->dataOrig, virtualInputMapping[i].InputFunctionID, sizeof(virtualInputMapping[i].InputFunctionID));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	193b      	adds	r3, r7, r4
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	0013      	movs	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	4a0f      	ldr	r2, [pc, #60]	; (8008610 <virtualInputMappingRead+0xa4>)
 80085d4:	189b      	adds	r3, r3, r2
 80085d6:	2206      	movs	r2, #6
 80085d8:	0019      	movs	r1, r3
 80085da:	f006 fd87 	bl	800f0ec <memcpy>
				break;
 80085de:	e00a      	b.n	80085f6 <virtualInputMappingRead+0x8a>
		for(uint8_t i = 0; i < VIRTUAL_INPUT_MAPPING_SIZE; ++i)
 80085e0:	2217      	movs	r2, #23
 80085e2:	18bb      	adds	r3, r7, r2
 80085e4:	18ba      	adds	r2, r7, r2
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	3201      	adds	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	2317      	movs	r3, #23
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b0f      	cmp	r3, #15
 80085f4:	d9ca      	bls.n	800858c <virtualInputMappingRead+0x20>
			}
		}
	}

	return OD_readOriginal(stream, buffer, size, bytesRead);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7f9 f934 	bl	800186a <OD_readOriginal>
 8008602:	0003      	movs	r3, r0
}
 8008604:	0018      	movs	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	b007      	add	sp, #28
 800860a:	bd90      	pop	{r4, r7, pc}
 800860c:	200053cc 	.word	0x200053cc
 8008610:	200053d0 	.word	0x200053d0

08008614 <virtualOutputMappingWrite>:

ODR_t virtualOutputMappingWrite(OD_stream_t* const stream, const void* const buffer, const OD_size_t size, OD_size_t* const bytesWritten)
{
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	b097      	sub	sp, #92	; 0x5c
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
	ODR_t result = OD_writeOriginal(stream, buffer, size, bytesWritten);
 8008622:	2556      	movs	r5, #86	; 0x56
 8008624:	197c      	adds	r4, r7, r5
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7f9 f97b 	bl	8001928 <OD_writeOriginal>
 8008632:	0003      	movs	r3, r0
 8008634:	7023      	strb	r3, [r4, #0]

	if(result != ODR_OK)
 8008636:	197b      	adds	r3, r7, r5
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b25b      	sxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <virtualOutputMappingWrite+0x34>
	{
		return result;
 8008640:	197b      	adds	r3, r7, r5
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b25b      	sxtb	r3, r3
 8008646:	e05b      	b.n	8008700 <virtualOutputMappingWrite+0xec>
	}

	OD_entry_t *entry = OD_find(OD, 0x6200);
 8008648:	4b2f      	ldr	r3, [pc, #188]	; (8008708 <virtualOutputMappingWrite+0xf4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	22c4      	movs	r2, #196	; 0xc4
 800864e:	01d2      	lsls	r2, r2, #7
 8008650:	0011      	movs	r1, r2
 8008652:	0018      	movs	r0, r3
 8008654:	f7f9 f9e5 	bl	8001a22 <OD_find>
 8008658:	0003      	movs	r3, r0
 800865a:	653b      	str	r3, [r7, #80]	; 0x50

	for(uint8_t subIndex = 1; subIndex <= OD_CNT_ARR_6200; ++subIndex)
 800865c:	2357      	movs	r3, #87	; 0x57
 800865e:	18fb      	adds	r3, r7, r3
 8008660:	2201      	movs	r2, #1
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e046      	b.n	80086f4 <virtualOutputMappingWrite+0xe0>
	{
		uint8_t identifier[6];

		OD_IO_t io;
		{
			result = OD_getSub(entry, subIndex, &io, false);
 8008666:	2656      	movs	r6, #86	; 0x56
 8008668:	19bc      	adds	r4, r7, r6
 800866a:	252c      	movs	r5, #44	; 0x2c
 800866c:	197a      	adds	r2, r7, r5
 800866e:	2357      	movs	r3, #87	; 0x57
 8008670:	18fb      	adds	r3, r7, r3
 8008672:	7819      	ldrb	r1, [r3, #0]
 8008674:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008676:	2300      	movs	r3, #0
 8008678:	f7f9 fa4e 	bl	8001b18 <OD_getSub>
 800867c:	0003      	movs	r3, r0
 800867e:	7023      	strb	r3, [r4, #0]
		}

		OD_stream_t ioStreamCopy = io.stream;
 8008680:	2318      	movs	r3, #24
 8008682:	18fb      	adds	r3, r7, r3
 8008684:	197a      	adds	r2, r7, r5
 8008686:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008688:	c313      	stmia	r3!, {r0, r1, r4}
 800868a:	ca12      	ldmia	r2!, {r1, r4}
 800868c:	c312      	stmia	r3!, {r1, r4}
		{
			OD_size_t bytesRead;
			result = io.read(&io.stream, identifier, sizeof(identifier), &bytesRead);
 800868e:	002a      	movs	r2, r5
 8008690:	197b      	adds	r3, r7, r5
 8008692:	695d      	ldr	r5, [r3, #20]
 8008694:	19bc      	adds	r4, r7, r6
 8008696:	2114      	movs	r1, #20
 8008698:	187b      	adds	r3, r7, r1
 800869a:	2148      	movs	r1, #72	; 0x48
 800869c:	1879      	adds	r1, r7, r1
 800869e:	18b8      	adds	r0, r7, r2
 80086a0:	2206      	movs	r2, #6
 80086a2:	47a8      	blx	r5
 80086a4:	0003      	movs	r3, r0
 80086a6:	7023      	strb	r3, [r4, #0]
		}

		if(memcmp(identifier, buffer, size - 1))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	1e5a      	subs	r2, r3, #1
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	2448      	movs	r4, #72	; 0x48
 80086b0:	193b      	adds	r3, r7, r4
 80086b2:	0018      	movs	r0, r3
 80086b4:	f006 fd0c 	bl	800f0d0 <memcmp>
 80086b8:	1e03      	subs	r3, r0, #0
 80086ba:	d114      	bne.n	80086e6 <virtualOutputMappingWrite+0xd2>
		{
			continue;
		}

		result = io.write(&ioStreamCopy, buffer, size, bytesWritten);
 80086bc:	222c      	movs	r2, #44	; 0x2c
 80086be:	18bb      	adds	r3, r7, r2
 80086c0:	699d      	ldr	r5, [r3, #24]
 80086c2:	19bc      	adds	r4, r7, r6
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	2018      	movs	r0, #24
 80086cc:	1838      	adds	r0, r7, r0
 80086ce:	47a8      	blx	r5
 80086d0:	0003      	movs	r3, r0
 80086d2:	7023      	strb	r3, [r4, #0]

		if(result != ODR_OK)
 80086d4:	19bb      	adds	r3, r7, r6
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d004      	beq.n	80086e8 <virtualOutputMappingWrite+0xd4>
		{
			return result;
 80086de:	19bb      	adds	r3, r7, r6
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	b25b      	sxtb	r3, r3
 80086e4:	e00c      	b.n	8008700 <virtualOutputMappingWrite+0xec>
			continue;
 80086e6:	46c0      	nop			; (mov r8, r8)
	for(uint8_t subIndex = 1; subIndex <= OD_CNT_ARR_6200; ++subIndex)
 80086e8:	2257      	movs	r2, #87	; 0x57
 80086ea:	18bb      	adds	r3, r7, r2
 80086ec:	18ba      	adds	r2, r7, r2
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	3201      	adds	r2, #1
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	2357      	movs	r3, #87	; 0x57
 80086f6:	18fb      	adds	r3, r7, r3
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d9b3      	bls.n	8008666 <virtualOutputMappingWrite+0x52>
		}
	}

	return ODR_OK;
 80086fe:	2300      	movs	r3, #0

}
 8008700:	0018      	movs	r0, r3
 8008702:	46bd      	mov	sp, r7
 8008704:	b017      	add	sp, #92	; 0x5c
 8008706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008708:	20000338 	.word	0x20000338

0800870c <outputGroupWrite>:

ODR_t outputGroupWrite(OD_stream_t* const stream, const void* const buffer, const OD_size_t size, OD_size_t* const bytesWritten)
{
 800870c:	b5b0      	push	{r4, r5, r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
	ODR_t result = OD_writeOriginal(stream, buffer, size, bytesWritten);
 800871a:	2517      	movs	r5, #23
 800871c:	197c      	adds	r4, r7, r5
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7f9 f8ff 	bl	8001928 <OD_writeOriginal>
 800872a:	0003      	movs	r3, r0
 800872c:	7023      	strb	r3, [r4, #0]

	if(result != ODR_OK)
 800872e:	197b      	adds	r3, r7, r5
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	b25b      	sxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <outputGroupWrite+0x34>
	{
		return result;
 8008738:	197b      	adds	r3, r7, r5
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b25b      	sxtb	r3, r3
 800873e:	e029      	b.n	8008794 <outputGroupWrite+0x88>
	}

	uint8_t outputsShift = VIRTUAL_OUTPUT_MAPPING_SIZE - DIGITAL_OUTPUTS_COUNT;
 8008740:	2016      	movs	r0, #22
 8008742:	183b      	adds	r3, r7, r0
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
	uint8_t subIndex = stream->subIndex;
 8008748:	2115      	movs	r1, #21
 800874a:	187b      	adds	r3, r7, r1
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	7c52      	ldrb	r2, [r2, #17]
 8008750:	701a      	strb	r2, [r3, #0]

	if (subIndex <= outputsShift || subIndex > OD_CNT_ARR_6200)	// non-existent output?
 8008752:	187a      	adds	r2, r7, r1
 8008754:	183b      	adds	r3, r7, r0
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d903      	bls.n	8008766 <outputGroupWrite+0x5a>
 800875e:	187b      	adds	r3, r7, r1
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b10      	cmp	r3, #16
 8008764:	d901      	bls.n	800876a <outputGroupWrite+0x5e>
		return ODR_OK;	// just ignore it...
 8008766:	2300      	movs	r3, #0
 8008768:	e014      	b.n	8008794 <outputGroupWrite+0x88>

	const uint8_t *functionData = (const uint8_t *)buffer;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	613b      	str	r3, [r7, #16]
	processFunctionData(&digitaloutputs[subIndex - 1], functionData[size - 1]);
 800876e:	2315      	movs	r3, #21
 8008770:	18fb      	adds	r3, r7, r3
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	0013      	movs	r3, r2
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	189b      	adds	r3, r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4a07      	ldr	r2, [pc, #28]	; (800879c <outputGroupWrite+0x90>)
 8008780:	1898      	adds	r0, r3, r2
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	18d3      	adds	r3, r2, r3
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	0019      	movs	r1, r3
 800878e:	f7ff fe63 	bl	8008458 <processFunctionData>

	return ODR_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	0018      	movs	r0, r3
 8008796:	46bd      	mov	sp, r7
 8008798:	b006      	add	sp, #24
 800879a:	bdb0      	pop	{r4, r5, r7, pc}
 800879c:	200003bc 	.word	0x200003bc

080087a0 <nmtStateChangedCallback>:

#include "NMT_functions.h"
#include "OD.h"

void nmtStateChangedCallback(const CO_NMT_internalState_t state)
{
 80087a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a2:	b099      	sub	sp, #100	; 0x64
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	0002      	movs	r2, r0
 80087a8:	1dfb      	adds	r3, r7, #7
 80087aa:	701a      	strb	r2, [r3, #0]
	CO_LOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 80087ac:	4b47      	ldr	r3, [pc, #284]	; (80088cc <nmtStateChangedCallback+0x12c>)
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b2:	f3ef 8210 	mrs	r2, PRIMASK
 80087b6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80087b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ba:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80087bc:	b672      	cpsid	i
}
 80087be:	46c0      	nop			; (mov r8, r8)
	//if it is not operational reset configuration
	if(state != CO_NMT_OPERATIONAL)
 80087c0:	1dfb      	adds	r3, r7, #7
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d049      	beq.n	800885e <nmtStateChangedCallback+0xbe>
	{
		OD_entry_t *entry = OD_find(OD, 0x6200);
 80087ca:	4b41      	ldr	r3, [pc, #260]	; (80088d0 <nmtStateChangedCallback+0x130>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	22c4      	movs	r2, #196	; 0xc4
 80087d0:	01d2      	lsls	r2, r2, #7
 80087d2:	0011      	movs	r1, r2
 80087d4:	0018      	movs	r0, r3
 80087d6:	f7f9 f924 	bl	8001a22 <OD_find>
 80087da:	0003      	movs	r3, r0
 80087dc:	65bb      	str	r3, [r7, #88]	; 0x58

		for(uint8_t subIndex = 1; subIndex <= OD_CNT_ARR_6200; ++subIndex)
 80087de:	235f      	movs	r3, #95	; 0x5f
 80087e0:	18fb      	adds	r3, r7, r3
 80087e2:	2201      	movs	r2, #1
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	e02b      	b.n	8008840 <nmtStateChangedCallback+0xa0>
		{
			OD_IO_t io;
			{
				OD_getSub(entry, subIndex, &io, false);
 80087e8:	2430      	movs	r4, #48	; 0x30
 80087ea:	193a      	adds	r2, r7, r4
 80087ec:	265f      	movs	r6, #95	; 0x5f
 80087ee:	19bb      	adds	r3, r7, r6
 80087f0:	7819      	ldrb	r1, [r3, #0]
 80087f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80087f4:	2300      	movs	r3, #0
 80087f6:	f7f9 f98f 	bl	8001b18 <OD_getSub>
			}

			uint8_t identifier[6];

			OD_stream_t ioStreamCopy = io.stream;
 80087fa:	2314      	movs	r3, #20
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	0025      	movs	r5, r4
 8008800:	197a      	adds	r2, r7, r5
 8008802:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008804:	c313      	stmia	r3!, {r0, r1, r4}
 8008806:	ca03      	ldmia	r2!, {r0, r1}
 8008808:	c303      	stmia	r3!, {r0, r1}
			{
				OD_size_t bytesRead;
				io.read(&io.stream, identifier, sizeof(identifier), &bytesRead);
 800880a:	197b      	adds	r3, r7, r5
 800880c:	695c      	ldr	r4, [r3, #20]
 800880e:	210c      	movs	r1, #12
 8008810:	187b      	adds	r3, r7, r1
 8008812:	2128      	movs	r1, #40	; 0x28
 8008814:	1879      	adds	r1, r7, r1
 8008816:	1978      	adds	r0, r7, r5
 8008818:	2206      	movs	r2, #6
 800881a:	47a0      	blx	r4
			}

			identifier[5] = 0;	// reset output
 800881c:	2128      	movs	r1, #40	; 0x28
 800881e:	187b      	adds	r3, r7, r1
 8008820:	2200      	movs	r2, #0
 8008822:	715a      	strb	r2, [r3, #5]

			OD_size_t bytesWritten;
			io.write(&ioStreamCopy, identifier, sizeof(identifier), &bytesWritten);
 8008824:	197b      	adds	r3, r7, r5
 8008826:	699c      	ldr	r4, [r3, #24]
 8008828:	2010      	movs	r0, #16
 800882a:	183b      	adds	r3, r7, r0
 800882c:	1879      	adds	r1, r7, r1
 800882e:	2214      	movs	r2, #20
 8008830:	18b8      	adds	r0, r7, r2
 8008832:	2206      	movs	r2, #6
 8008834:	47a0      	blx	r4
		for(uint8_t subIndex = 1; subIndex <= OD_CNT_ARR_6200; ++subIndex)
 8008836:	19bb      	adds	r3, r7, r6
 8008838:	19ba      	adds	r2, r7, r6
 800883a:	7812      	ldrb	r2, [r2, #0]
 800883c:	3201      	adds	r2, #1
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	235f      	movs	r3, #95	; 0x5f
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b10      	cmp	r3, #16
 8008848:	d9ce      	bls.n	80087e8 <nmtStateChangedCallback+0x48>
		}
		CO_UNLOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 800884a:	4b20      	ldr	r3, [pc, #128]	; (80088cc <nmtStateChangedCallback+0x12c>)
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008856:	f383 8810 	msr	PRIMASK, r3
}
 800885a:	46c0      	nop			; (mov r8, r8)
		return;
 800885c:	e032      	b.n	80088c4 <nmtStateChangedCallback+0x124>
	}
//if it is operational clear pending input messages
	for(uint8_t i = 0; i < VIRTUAL_INPUT_MAPPING_SIZE; ++i)
 800885e:	235e      	movs	r3, #94	; 0x5e
 8008860:	18fb      	adds	r3, r7, r3
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e01c      	b.n	80088a2 <nmtStateChangedCallback+0x102>
	{
		memset(virtualInputMapping[i].InputFunctionID, 0, sizeof(virtualInputMapping[i].InputFunctionID));
 8008868:	245e      	movs	r4, #94	; 0x5e
 800886a:	193b      	adds	r3, r7, r4
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	0013      	movs	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <nmtStateChangedCallback+0x134>)
 8008876:	189b      	adds	r3, r3, r2
 8008878:	2206      	movs	r2, #6
 800887a:	2100      	movs	r1, #0
 800887c:	0018      	movs	r0, r3
 800887e:	f006 fc51 	bl	800f124 <memset>
		virtualInputMapping[i].pending = 0;
 8008882:	0020      	movs	r0, r4
 8008884:	183b      	adds	r3, r7, r0
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	4912      	ldr	r1, [pc, #72]	; (80088d4 <nmtStateChangedCallback+0x134>)
 800888a:	0013      	movs	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	18cb      	adds	r3, r1, r3
 8008892:	3306      	adds	r3, #6
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < VIRTUAL_INPUT_MAPPING_SIZE; ++i)
 8008898:	183b      	adds	r3, r7, r0
 800889a:	183a      	adds	r2, r7, r0
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	3201      	adds	r2, #1
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	235e      	movs	r3, #94	; 0x5e
 80088a4:	18fb      	adds	r3, r7, r3
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b0f      	cmp	r3, #15
 80088aa:	d9dd      	bls.n	8008868 <nmtStateChangedCallback+0xc8>
	}

	pendingVirtualInputMappings = 0;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <nmtStateChangedCallback+0x138>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]

	CO_UNLOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <nmtStateChangedCallback+0x12c>)
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088be:	f383 8810 	msr	PRIMASK, r3
}
 80088c2:	46c0      	nop			; (mov r8, r8)
}
 80088c4:	46bd      	mov	sp, r7
 80088c6:	b019      	add	sp, #100	; 0x64
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	20005440 	.word	0x20005440
 80088d0:	20000338 	.word	0x20000338
 80088d4:	200053d0 	.word	0x200053d0
 80088d8:	200053cc 	.word	0x200053cc

080088dc <OD_getFlagsPDO>:
static inline uint8_t *OD_getFlagsPDO(OD_entry_t *entry) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    if (entry != NULL && entry->extension != NULL) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <OD_getFlagsPDO+0x1e>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <OD_getFlagsPDO+0x1e>
        return &entry->extension->flagsPDO[0];
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	330c      	adds	r3, #12
 80088f8:	e000      	b.n	80088fc <OD_getFlagsPDO+0x20>
    return 0;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	0018      	movs	r0, r3
 80088fe:	46bd      	mov	sp, r7
 8008900:	b002      	add	sp, #8
 8008902:	bd80      	pop	{r7, pc}

08008904 <OD_requestTPDO>:
static inline void OD_requestTPDO(uint8_t *flagsPDO, uint8_t subIndex) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	000a      	movs	r2, r1
 800890e:	1cfb      	adds	r3, r7, #3
 8008910:	701a      	strb	r2, [r3, #0]
    if (flagsPDO != NULL && subIndex < (OD_FLAGS_PDO_SIZE * 8)) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d023      	beq.n	8008960 <OD_requestTPDO+0x5c>
 8008918:	1cfb      	adds	r3, r7, #3
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b1f      	cmp	r3, #31
 800891e:	d81f      	bhi.n	8008960 <OD_requestTPDO+0x5c>
        uint8_t mask = ~(1 << (subIndex & 0x07));
 8008920:	1cfb      	adds	r3, r7, #3
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2207      	movs	r2, #7
 8008926:	4013      	ands	r3, r2
 8008928:	2201      	movs	r2, #1
 800892a:	409a      	lsls	r2, r3
 800892c:	0013      	movs	r3, r2
 800892e:	b2da      	uxtb	r2, r3
 8008930:	200f      	movs	r0, #15
 8008932:	183b      	adds	r3, r7, r0
 8008934:	43d2      	mvns	r2, r2
 8008936:	701a      	strb	r2, [r3, #0]
        flagsPDO[subIndex >> 3] &= mask;
 8008938:	1cfb      	adds	r3, r7, #3
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	08db      	lsrs	r3, r3, #3
 800893e:	b2db      	uxtb	r3, r3
 8008940:	001a      	movs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	189b      	adds	r3, r3, r2
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	1cfb      	adds	r3, r7, #3
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	0019      	movs	r1, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	185b      	adds	r3, r3, r1
 8008956:	1839      	adds	r1, r7, r0
 8008958:	7809      	ldrb	r1, [r1, #0]
 800895a:	400a      	ands	r2, r1
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	701a      	strb	r2, [r3, #0]
}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	46bd      	mov	sp, r7
 8008964:	b004      	add	sp, #16
 8008966:	bd80      	pop	{r7, pc}

08008968 <OD_TPDOtransmitted>:
static inline bool_t OD_TPDOtransmitted(uint8_t *flagsPDO, uint8_t subIndex) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	000a      	movs	r2, r1
 8008972:	1cfb      	adds	r3, r7, #3
 8008974:	701a      	strb	r2, [r3, #0]
    if (flagsPDO != NULL && subIndex < (OD_FLAGS_PDO_SIZE * 8)) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01c      	beq.n	80089b6 <OD_TPDOtransmitted+0x4e>
 800897c:	1cfb      	adds	r3, r7, #3
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b1f      	cmp	r3, #31
 8008982:	d818      	bhi.n	80089b6 <OD_TPDOtransmitted+0x4e>
        uint8_t mask = 1 << (subIndex & 0x07);
 8008984:	1cfb      	adds	r3, r7, #3
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2207      	movs	r2, #7
 800898a:	4013      	ands	r3, r2
 800898c:	2201      	movs	r2, #1
 800898e:	409a      	lsls	r2, r3
 8008990:	210f      	movs	r1, #15
 8008992:	187b      	adds	r3, r7, r1
 8008994:	701a      	strb	r2, [r3, #0]
        if ((flagsPDO[subIndex >> 3] & mask) != 0) {
 8008996:	1cfb      	adds	r3, r7, #3
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	08db      	lsrs	r3, r3, #3
 800899c:	b2db      	uxtb	r3, r3
 800899e:	001a      	movs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	189b      	adds	r3, r3, r2
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	187a      	adds	r2, r7, r1
 80089a8:	7812      	ldrb	r2, [r2, #0]
 80089aa:	4013      	ands	r3, r2
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <OD_TPDOtransmitted+0x4e>
            return true;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <OD_TPDOtransmitted+0x50>
    return false;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	0018      	movs	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	b004      	add	sp, #16
 80089be:	bd80      	pop	{r7, pc}

080089c0 <OD_extension_init>:
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <OD_extension_init+0x14>
 80089d0:	2305      	movs	r3, #5
 80089d2:	e003      	b.n	80089dc <OD_extension_init+0x1c>
    entry->extension = extension;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b002      	add	sp, #8
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80089e8:	46c0      	nop			; (mov r8, r8)
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	46bd      	mov	sp, r7
 8008a06:	b002      	add	sp, #8
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
}
 8008a18:	46c0      	nop			; (mov r8, r8)
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tpdoRequesterT */
  tpdoRequesterTHandle = osThreadNew(tpdoRequester, NULL, &tpdoRequesterT_attributes);
 8008a24:	4a0e      	ldr	r2, [pc, #56]	; (8008a60 <MX_FREERTOS_Init+0x40>)
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <MX_FREERTOS_Init+0x44>)
 8008a28:	2100      	movs	r1, #0
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f003 ff0a 	bl	800c844 <osThreadNew>
 8008a30:	0002      	movs	r2, r0
 8008a32:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <MX_FREERTOS_Init+0x48>)
 8008a34:	601a      	str	r2, [r3, #0]

  /* creation of CanOpenMenagerT */
  CanOpenMenagerTHandle = osThreadNew(CanOpenMenager, NULL, &CanOpenMenagerT_attributes);
 8008a36:	4a0d      	ldr	r2, [pc, #52]	; (8008a6c <MX_FREERTOS_Init+0x4c>)
 8008a38:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <MX_FREERTOS_Init+0x50>)
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f003 ff01 	bl	800c844 <osThreadNew>
 8008a42:	0002      	movs	r2, r0
 8008a44:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <MX_FREERTOS_Init+0x54>)
 8008a46:	601a      	str	r2, [r3, #0]

  /* creation of InputCheckT */
  InputCheckTHandle = osThreadNew(InputCheck, NULL, &InputCheckT_attributes);
 8008a48:	4a0b      	ldr	r2, [pc, #44]	; (8008a78 <MX_FREERTOS_Init+0x58>)
 8008a4a:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <MX_FREERTOS_Init+0x5c>)
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	0018      	movs	r0, r3
 8008a50:	f003 fef8 	bl	800c844 <osThreadNew>
 8008a54:	0002      	movs	r2, r0
 8008a56:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <MX_FREERTOS_Init+0x60>)
 8008a58:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	0801062c 	.word	0x0801062c
 8008a64:	08008a85 	.word	0x08008a85
 8008a68:	20005458 	.word	0x20005458
 8008a6c:	08010650 	.word	0x08010650
 8008a70:	08008b55 	.word	0x08008b55
 8008a74:	2000545c 	.word	0x2000545c
 8008a78:	08010674 	.word	0x08010674
 8008a7c:	08008d05 	.word	0x08008d05
 8008a80:	20005460 	.word	0x20005460

08008a84 <tpdoRequester>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tpdoRequester */
void tpdoRequester(void *argument)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tpdoRequester */
	uint8_t *flags6010 = OD_getFlagsPDO(OD_find(OD,0x6010));
 8008a8c:	4b2c      	ldr	r3, [pc, #176]	; (8008b40 <tpdoRequester+0xbc>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a2c      	ldr	r2, [pc, #176]	; (8008b44 <tpdoRequester+0xc0>)
 8008a92:	0011      	movs	r1, r2
 8008a94:	0018      	movs	r0, r3
 8008a96:	f7f8 ffc4 	bl	8001a22 <OD_find>
 8008a9a:	0003      	movs	r3, r0
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7ff ff1d 	bl	80088dc <OD_getFlagsPDO>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8008aa6:	4b28      	ldr	r3, [pc, #160]	; (8008b48 <tpdoRequester+0xc4>)
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f002 fb4b 	bl	800b144 <HAL_IWDG_Refresh>
	  osDelay(pdMS_TO_TICKS(TPDO_REQUESTER_TASK_DELAY_MS));
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f003 ff5e 	bl	800c970 <osDelay>
	  CO_LOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <tpdoRequester+0xc8>)
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aba:	f3ef 8210 	mrs	r2, PRIMASK
 8008abe:	61ba      	str	r2, [r7, #24]
  return(result);
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8008ac4:	b672      	cpsid	i
}
 8008ac6:	46c0      	nop			; (mov r8, r8)

	  if(pendingVirtualInputMappings == 0) //check if there is any virtual input mapping pending
 8008ac8:	4b21      	ldr	r3, [pc, #132]	; (8008b50 <tpdoRequester+0xcc>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d030      	beq.n	8008b32 <tpdoRequester+0xae>
	  {
		  continue;
	  }

	  if(OD_TPDOtransmitted(flags6010, 0) == false) //check if there is any 6010 Od tpdo transmited
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7ff ff47 	bl	8008968 <OD_TPDOtransmitted>
 8008ada:	1e03      	subs	r3, r0, #0
 8008adc:	d02b      	beq.n	8008b36 <tpdoRequester+0xb2>
	  {
		  continue;
	  }

	  CO_LOCK_CAN_SEND(canOpenNodeSTM32.canOpenStack->CANmodule);
 8008ade:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <tpdoRequester+0xc8>)
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae4:	f3ef 8210 	mrs	r2, PRIMASK
 8008ae8:	617a      	str	r2, [r7, #20]
  return(result);
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8008aee:	b672      	cpsid	i
}
 8008af0:	46c0      	nop			; (mov r8, r8)

	  if(canOpenNodeSTM32.canOpenStack->TPDO[0].CANtxBuff->bufferFull == true)
 8008af2:	4b16      	ldr	r3, [pc, #88]	; (8008b4c <tpdoRequester+0xc8>)
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008af8:	23a4      	movs	r3, #164	; 0xa4
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	58d3      	ldr	r3, [r2, r3]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d01a      	beq.n	8008b3a <tpdoRequester+0xb6>
	  {
		  continue;
	  }

	  OD_requestTPDO(flags6010, 0);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	2100      	movs	r1, #0
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f7ff fefb 	bl	8008904 <OD_requestTPDO>
	  CO_UNLOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <tpdoRequester+0xc8>)
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f383 8810 	msr	PRIMASK, r3
}
 8008b1e:	46c0      	nop			; (mov r8, r8)
	  CO_UNLOCK_CAN_SEND(canOpenNodeSTM32.canOpenStack->CANmodule);
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <tpdoRequester+0xc8>)
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f383 8810 	msr	PRIMASK, r3
}
 8008b30:	e004      	b.n	8008b3c <tpdoRequester+0xb8>
		  continue;
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	e7b7      	b.n	8008aa6 <tpdoRequester+0x22>
		  continue;
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	e7b5      	b.n	8008aa6 <tpdoRequester+0x22>
		  continue;
 8008b3a:	46c0      	nop			; (mov r8, r8)
	  HAL_IWDG_Refresh(&hiwdg);
 8008b3c:	e7b3      	b.n	8008aa6 <tpdoRequester+0x22>
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	20000338 	.word	0x20000338
 8008b44:	00006010 	.word	0x00006010
 8008b48:	2000552c 	.word	0x2000552c
 8008b4c:	20005440 	.word	0x20005440
 8008b50:	200053cc 	.word	0x200053cc

08008b54 <CanOpenMenager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanOpenMenager */
void CanOpenMenager(void *argument)
{
 8008b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b56:	b09b      	sub	sp, #108	; 0x6c
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanOpenMenager */
  setCanOpenID();
 8008b5c:	f000 f9cc 	bl	8008ef8 <setCanOpenID>
  readBuzzerInput();
 8008b60:	f000 fa78 	bl	8009054 <readBuzzerInput>

  OD_extension_t virtualInputMappingExtension = {0, virtualInputMappingRead, OD_writeOriginal, 0};
 8008b64:	2648      	movs	r6, #72	; 0x48
 8008b66:	19bb      	adds	r3, r7, r6
 8008b68:	4a59      	ldr	r2, [pc, #356]	; (8008cd0 <CanOpenMenager+0x17c>)
 8008b6a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008b6c:	c313      	stmia	r3!, {r0, r1, r4}
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	601a      	str	r2, [r3, #0]
  ODR_t result = OD_extension_init(OD_find(OD, 0x6010), &virtualInputMappingExtension);
 8008b72:	4b58      	ldr	r3, [pc, #352]	; (8008cd4 <CanOpenMenager+0x180>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a58      	ldr	r2, [pc, #352]	; (8008cd8 <CanOpenMenager+0x184>)
 8008b78:	0011      	movs	r1, r2
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7f8 ff51 	bl	8001a22 <OD_find>
 8008b80:	0002      	movs	r2, r0
 8008b82:	2567      	movs	r5, #103	; 0x67
 8008b84:	197c      	adds	r4, r7, r5
 8008b86:	19bb      	adds	r3, r7, r6
 8008b88:	0019      	movs	r1, r3
 8008b8a:	0010      	movs	r0, r2
 8008b8c:	f7ff ff18 	bl	80089c0 <OD_extension_init>
 8008b90:	0003      	movs	r3, r0
 8008b92:	7023      	strb	r3, [r4, #0]

  OD_extension_t virtualOutputMappingExtension = {0, OD_readOriginal, virtualOutputMappingWrite, 0};
 8008b94:	2638      	movs	r6, #56	; 0x38
 8008b96:	19bb      	adds	r3, r7, r6
 8008b98:	4a50      	ldr	r2, [pc, #320]	; (8008cdc <CanOpenMenager+0x188>)
 8008b9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008b9c:	c313      	stmia	r3!, {r0, r1, r4}
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	601a      	str	r2, [r3, #0]
  result = OD_extension_init(OD_find(OD, 0x6011), &virtualOutputMappingExtension);
 8008ba2:	4b4c      	ldr	r3, [pc, #304]	; (8008cd4 <CanOpenMenager+0x180>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a4e      	ldr	r2, [pc, #312]	; (8008ce0 <CanOpenMenager+0x18c>)
 8008ba8:	0011      	movs	r1, r2
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7f8 ff39 	bl	8001a22 <OD_find>
 8008bb0:	0002      	movs	r2, r0
 8008bb2:	197c      	adds	r4, r7, r5
 8008bb4:	19bb      	adds	r3, r7, r6
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	0010      	movs	r0, r2
 8008bba:	f7ff ff01 	bl	80089c0 <OD_extension_init>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	7023      	strb	r3, [r4, #0]

  OD_extension_t outputGroupExtension = {0, OD_readOriginal, outputGroupWrite, 0};
 8008bc2:	2628      	movs	r6, #40	; 0x28
 8008bc4:	19bb      	adds	r3, r7, r6
 8008bc6:	4a47      	ldr	r2, [pc, #284]	; (8008ce4 <CanOpenMenager+0x190>)
 8008bc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008bca:	c313      	stmia	r3!, {r0, r1, r4}
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	601a      	str	r2, [r3, #0]
  result  = OD_extension_init(OD_find(OD, 0x6200), &outputGroupExtension);
 8008bd0:	4b40      	ldr	r3, [pc, #256]	; (8008cd4 <CanOpenMenager+0x180>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	22c4      	movs	r2, #196	; 0xc4
 8008bd6:	01d2      	lsls	r2, r2, #7
 8008bd8:	0011      	movs	r1, r2
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7f8 ff21 	bl	8001a22 <OD_find>
 8008be0:	0002      	movs	r2, r0
 8008be2:	197c      	adds	r4, r7, r5
 8008be4:	19bb      	adds	r3, r7, r6
 8008be6:	0019      	movs	r1, r3
 8008be8:	0010      	movs	r0, r2
 8008bea:	f7ff fee9 	bl	80089c0 <OD_extension_init>
 8008bee:	0003      	movs	r3, r0
 8008bf0:	7023      	strb	r3, [r4, #0]

  canOpenNodeSTM32.CANHandle = &hfdcan2;
 8008bf2:	4b3d      	ldr	r3, [pc, #244]	; (8008ce8 <CanOpenMenager+0x194>)
 8008bf4:	4a3d      	ldr	r2, [pc, #244]	; (8008cec <CanOpenMenager+0x198>)
 8008bf6:	609a      	str	r2, [r3, #8]
  canOpenNodeSTM32.HWInitFunction = MX_FDCAN2_Init;
 8008bf8:	4b3b      	ldr	r3, [pc, #236]	; (8008ce8 <CanOpenMenager+0x194>)
 8008bfa:	4a3d      	ldr	r2, [pc, #244]	; (8008cf0 <CanOpenMenager+0x19c>)
 8008bfc:	60da      	str	r2, [r3, #12]
  canOpenNodeSTM32.timerHandle = &htim14;
 8008bfe:	4b3a      	ldr	r3, [pc, #232]	; (8008ce8 <CanOpenMenager+0x194>)
 8008c00:	4a3c      	ldr	r2, [pc, #240]	; (8008cf4 <CanOpenMenager+0x1a0>)
 8008c02:	605a      	str	r2, [r3, #4]
  canOpenNodeSTM32.desiredNodeID = getCanOpenID();
 8008c04:	f000 fa0c 	bl	8009020 <getCanOpenID>
 8008c08:	0003      	movs	r3, r0
 8008c0a:	001a      	movs	r2, r3
 8008c0c:	4b36      	ldr	r3, [pc, #216]	; (8008ce8 <CanOpenMenager+0x194>)
 8008c0e:	701a      	strb	r2, [r3, #0]

  if(getCanOpenBaudRate() == CANOPEN_BAUDRATE_125)
 8008c10:	f000 fa10 	bl	8009034 <getCanOpenBaudRate>
 8008c14:	1e03      	subs	r3, r0, #0
 8008c16:	d103      	bne.n	8008c20 <CanOpenMenager+0xcc>
  {
	  canOpenNodeSTM32.baudrate = 125;
 8008c18:	4b33      	ldr	r3, [pc, #204]	; (8008ce8 <CanOpenMenager+0x194>)
 8008c1a:	227d      	movs	r2, #125	; 0x7d
 8008c1c:	805a      	strh	r2, [r3, #2]
 8008c1e:	e002      	b.n	8008c26 <CanOpenMenager+0xd2>
  }
  else
  {
	  canOpenNodeSTM32.baudrate = 250;
 8008c20:	4b31      	ldr	r3, [pc, #196]	; (8008ce8 <CanOpenMenager+0x194>)
 8008c22:	22fa      	movs	r2, #250	; 0xfa
 8008c24:	805a      	strh	r2, [r3, #2]
  }

  uint32_t correctTpdo1CobId = COB_ID_ZERO + getCanOpenID();
 8008c26:	f000 f9fb 	bl	8009020 <getCanOpenID>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	2290      	movs	r2, #144	; 0x90
 8008c2e:	00d2      	lsls	r2, r2, #3
 8008c30:	4694      	mov	ip, r2
 8008c32:	4463      	add	r3, ip
 8008c34:	663b      	str	r3, [r7, #96]	; 0x60

  //Set COB-ID for TPDO
  OD_entry_t *tpdoCommEntry = OD_find(OD, TPDO_INDEX);
 8008c36:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <CanOpenMenager+0x180>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	22c0      	movs	r2, #192	; 0xc0
 8008c3c:	0152      	lsls	r2, r2, #5
 8008c3e:	0011      	movs	r1, r2
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7f8 feee 	bl	8001a22 <OD_find>
 8008c46:	0003      	movs	r3, r0
 8008c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (tpdoCommEntry != NULL) {
 8008c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01b      	beq.n	8008c88 <CanOpenMenager+0x134>
      OD_IO_t io;

      // Get subindex 1 — COB-ID
      if (OD_getSub(tpdoCommEntry, 1, &io, 0) == ODR_OK) {
 8008c50:	240c      	movs	r4, #12
 8008c52:	193a      	adds	r2, r7, r4
 8008c54:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008c56:	2300      	movs	r3, #0
 8008c58:	2101      	movs	r1, #1
 8008c5a:	f7f8 ff5d 	bl	8001b18 <OD_getSub>
 8008c5e:	1e03      	subs	r3, r0, #0
 8008c60:	d112      	bne.n	8008c88 <CanOpenMenager+0x134>
          uint32_t *cobIdPtr = (uint32_t *)io.stream.dataOrig;
 8008c62:	193b      	adds	r3, r7, r4
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	65bb      	str	r3, [r7, #88]	; 0x58

          // Disable PDO temporarily (set bit 31)
          *cobIdPtr |= 0x80000000;
 8008c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2280      	movs	r2, #128	; 0x80
 8008c6e:	0612      	lsls	r2, r2, #24
 8008c70:	431a      	orrs	r2, r3
 8008c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c74:	601a      	str	r2, [r3, #0]

          // Update COB-ID
          *cobIdPtr = correctTpdo1CobId;
 8008c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c7a:	601a      	str	r2, [r3, #0]

          // Re-enable PDO (clear bit 31)
          *cobIdPtr &= ~0x80000000;
 8008c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	085a      	lsrs	r2, r3, #1
 8008c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c86:	601a      	str	r2, [r3, #0]
      }
  }

  canopen_app_init(&canOpenNodeSTM32);
 8008c88:	4b17      	ldr	r3, [pc, #92]	; (8008ce8 <CanOpenMenager+0x194>)
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f7fe fcfe 	bl	800768c <canopen_app_init>
  CO_NMT_initCallbackChanged(canOpenNodeSTM32.canOpenStack->NMT, nmtStateChangedCallback);
 8008c90:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <CanOpenMenager+0x194>)
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	4a18      	ldr	r2, [pc, #96]	; (8008cf8 <CanOpenMenager+0x1a4>)
 8008c98:	0011      	movs	r1, r2
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7f8 fca6 	bl	80015ec <CO_NMT_initCallbackChanged>
  /* Infinite loop */
  for(;;)
  {
    HAL_IWDG_Refresh(&hiwdg);
 8008ca0:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <CanOpenMenager+0x1a8>)
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f002 fa4e 	bl	800b144 <HAL_IWDG_Refresh>
	HAL_GPIO_WritePin(CAN_OK_GPIO_Port, CAN_OK_Pin , canOpenNodeSTM32.outStatusLEDGreen);
 8008ca8:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <CanOpenMenager+0x194>)
 8008caa:	7c1b      	ldrb	r3, [r3, #16]
 8008cac:	4814      	ldr	r0, [pc, #80]	; (8008d00 <CanOpenMenager+0x1ac>)
 8008cae:	001a      	movs	r2, r3
 8008cb0:	2104      	movs	r1, #4
 8008cb2:	f002 f9c4 	bl	800b03e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_FAULT_GPIO_Port, CAN_FAULT_Pin, canOpenNodeSTM32.outStatusLEDRed);
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <CanOpenMenager+0x194>)
 8008cb8:	7c5b      	ldrb	r3, [r3, #17]
 8008cba:	4811      	ldr	r0, [pc, #68]	; (8008d00 <CanOpenMenager+0x1ac>)
 8008cbc:	001a      	movs	r2, r3
 8008cbe:	2108      	movs	r1, #8
 8008cc0:	f002 f9bd 	bl	800b03e <HAL_GPIO_WritePin>

	canopen_app_process();
 8008cc4:	f7fe fe4c 	bl	8007960 <canopen_app_process>

	osDelay(pdMS_TO_TICKS(CANOPEN_TASK_DELAY_MS));
 8008cc8:	2001      	movs	r0, #1
 8008cca:	f003 fe51 	bl	800c970 <osDelay>
    HAL_IWDG_Refresh(&hiwdg);
 8008cce:	e7e7      	b.n	8008ca0 <CanOpenMenager+0x14c>
 8008cd0:	0800ffec 	.word	0x0800ffec
 8008cd4:	20000338 	.word	0x20000338
 8008cd8:	00006010 	.word	0x00006010
 8008cdc:	0800fffc 	.word	0x0800fffc
 8008ce0:	00006011 	.word	0x00006011
 8008ce4:	0801000c 	.word	0x0801000c
 8008ce8:	20005440 	.word	0x20005440
 8008cec:	200054c8 	.word	0x200054c8
 8008cf0:	08009125 	.word	0x08009125
 8008cf4:	20005588 	.word	0x20005588
 8008cf8:	080087a1 	.word	0x080087a1
 8008cfc:	2000552c 	.word	0x2000552c
 8008d00:	50001000 	.word	0x50001000

08008d04 <InputCheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InputCheck */
void InputCheck(void *argument)
{
 8008d04:	b5b0      	push	{r4, r5, r7, lr}
 8008d06:	b090      	sub	sp, #64	; 0x40
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InputCheck */
  /* Infinite loop */
  const OD_entry_t *entry = OD_find(OD, 0x6100);
 8008d0c:	4b73      	ldr	r3, [pc, #460]	; (8008edc <InputCheck+0x1d8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	22c2      	movs	r2, #194	; 0xc2
 8008d12:	01d2      	lsls	r2, r2, #7
 8008d14:	0011      	movs	r1, r2
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7f8 fe83 	bl	8001a22 <OD_find>
 8008d1c:	0003      	movs	r3, r0
 8008d1e:	63bb      	str	r3, [r7, #56]	; 0x38

  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8008d20:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <InputCheck+0x1dc>)
 8008d22:	0018      	movs	r0, r3
 8008d24:	f002 fa0e 	bl	800b144 <HAL_IWDG_Refresh>
	for(uint8_t subIndex = 1; subIndex <= OD_CNT_ARR_6100; ++subIndex)
 8008d28:	233f      	movs	r3, #63	; 0x3f
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	e0ca      	b.n	8008ec8 <InputCheck+0x1c4>
	{
		OD_IO_t io;
		{
			ODR_t result = OD_getSub(entry, subIndex, &io, 0);
 8008d32:	2337      	movs	r3, #55	; 0x37
 8008d34:	18fc      	adds	r4, r7, r3
 8008d36:	2508      	movs	r5, #8
 8008d38:	197a      	adds	r2, r7, r5
 8008d3a:	233f      	movs	r3, #63	; 0x3f
 8008d3c:	18fb      	adds	r3, r7, r3
 8008d3e:	7819      	ldrb	r1, [r3, #0]
 8008d40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d42:	2300      	movs	r3, #0
 8008d44:	f7f8 fee8 	bl	8001b18 <OD_getSub>
 8008d48:	0003      	movs	r3, r0
 8008d4a:	7023      	strb	r3, [r4, #0]
		}
		CO_LOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 8008d4c:	4b65      	ldr	r3, [pc, #404]	; (8008ee4 <InputCheck+0x1e0>)
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d52:	f3ef 8210 	mrs	r2, PRIMASK
 8008d56:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8008d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d5a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8008d5c:	b672      	cpsid	i
}
 8008d5e:	46c0      	nop			; (mov r8, r8)

		//check if input is enabled
		uint8_t enabledInput = 0;
 8008d60:	233e      	movs	r3, #62	; 0x3e
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
		uint8_t *identifier = (uint8_t *)io.stream.dataOrig;
 8008d68:	197b      	adds	r3, r7, r5
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	633b      	str	r3, [r7, #48]	; 0x30
		uint8_t state = 0;
 8008d6e:	233d      	movs	r3, #61	; 0x3d
 8008d70:	18fb      	adds	r3, r7, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 5; ++i)
 8008d76:	233c      	movs	r3, #60	; 0x3c
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e012      	b.n	8008da6 <InputCheck+0xa2>
		{
			if(identifier[i])
 8008d80:	233c      	movs	r3, #60	; 0x3c
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <InputCheck+0x96>
			{
				enabledInput = 1;
 8008d90:	233e      	movs	r3, #62	; 0x3e
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
				break;
 8008d98:	e00a      	b.n	8008db0 <InputCheck+0xac>
		for(uint8_t i = 0; i < 5; ++i)
 8008d9a:	223c      	movs	r2, #60	; 0x3c
 8008d9c:	18bb      	adds	r3, r7, r2
 8008d9e:	18ba      	adds	r2, r7, r2
 8008da0:	7812      	ldrb	r2, [r2, #0]
 8008da2:	3201      	adds	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	233c      	movs	r3, #60	; 0x3c
 8008da8:	18fb      	adds	r3, r7, r3
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d9e7      	bls.n	8008d80 <InputCheck+0x7c>
			}
		}

		if(enabledInput)
 8008db0:	233e      	movs	r3, #62	; 0x3e
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01a      	beq.n	8008df0 <InputCheck+0xec>
		{
			state = HAL_GPIO_ReadPin(digitalInput[subIndex - 1].port, digitalInput[subIndex - 1].pin);
 8008dba:	213f      	movs	r1, #63	; 0x3f
 8008dbc:	187b      	adds	r3, r7, r1
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	1e5a      	subs	r2, r3, #1
 8008dc2:	4b49      	ldr	r3, [pc, #292]	; (8008ee8 <InputCheck+0x1e4>)
 8008dc4:	00d2      	lsls	r2, r2, #3
 8008dc6:	58d0      	ldr	r0, [r2, r3]
 8008dc8:	187b      	adds	r3, r7, r1
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	4a46      	ldr	r2, [pc, #280]	; (8008ee8 <InputCheck+0x1e4>)
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	18d3      	adds	r3, r2, r3
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	253d      	movs	r5, #61	; 0x3d
 8008dda:	197c      	adds	r4, r7, r5
 8008ddc:	0019      	movs	r1, r3
 8008dde:	f002 f911 	bl	800b004 <HAL_GPIO_ReadPin>
 8008de2:	0003      	movs	r3, r0
 8008de4:	7023      	strb	r3, [r4, #0]
			identifier[5] = state;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	3305      	adds	r3, #5
 8008dea:	197a      	adds	r2, r7, r5
 8008dec:	7812      	ldrb	r2, [r2, #0]
 8008dee:	701a      	strb	r2, [r3, #0]
		}

		if(virtualInputMapping[subIndex - 1].pending) //check if already pending
 8008df0:	243f      	movs	r4, #63	; 0x3f
 8008df2:	193b      	adds	r3, r7, r4
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	1e5a      	subs	r2, r3, #1
 8008df8:	493c      	ldr	r1, [pc, #240]	; (8008eec <InputCheck+0x1e8>)
 8008dfa:	0013      	movs	r3, r2
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	18cb      	adds	r3, r1, r3
 8008e02:	3306      	adds	r3, #6
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d155      	bne.n	8008eb6 <InputCheck+0x1b2>
		{
			continue;
		}

		// check if input has changed
		uint8_t inputChanged = memcmp(virtualInputMapping[subIndex - 1].InputFunctionID, identifier, sizeof(virtualInputMapping[subIndex - 1].InputFunctionID)) == 0;
 8008e0a:	193b      	adds	r3, r7, r4
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	0013      	movs	r3, r2
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	4a35      	ldr	r2, [pc, #212]	; (8008eec <InputCheck+0x1e8>)
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e1c:	2206      	movs	r2, #6
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f006 f956 	bl	800f0d0 <memcmp>
 8008e24:	0003      	movs	r3, r0
 8008e26:	425a      	negs	r2, r3
 8008e28:	4153      	adcs	r3, r2
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	212f      	movs	r1, #47	; 0x2f
 8008e2e:	187b      	adds	r3, r7, r1
 8008e30:	701a      	strb	r2, [r3, #0]

		if(inputChanged)
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d13f      	bne.n	8008eba <InputCheck+0x1b6>
		{
			continue;
		}

		memcpy(virtualInputMapping[subIndex - 1].InputFunctionID, identifier, sizeof(virtualInputMapping[subIndex - 1].InputFunctionID));
 8008e3a:	193b      	adds	r3, r7, r4
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	1e5a      	subs	r2, r3, #1
 8008e40:	0013      	movs	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	4a29      	ldr	r2, [pc, #164]	; (8008eec <InputCheck+0x1e8>)
 8008e48:	189b      	adds	r3, r3, r2
 8008e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e4c:	2206      	movs	r2, #6
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f006 f94c 	bl	800f0ec <memcpy>
		virtualInputMapping[subIndex - 1].pending = 1;
 8008e54:	0020      	movs	r0, r4
 8008e56:	193b      	adds	r3, r7, r4
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	1e5a      	subs	r2, r3, #1
 8008e5c:	4923      	ldr	r1, [pc, #140]	; (8008eec <InputCheck+0x1e8>)
 8008e5e:	0013      	movs	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	18cb      	adds	r3, r1, r3
 8008e66:	3306      	adds	r3, #6
 8008e68:	2201      	movs	r2, #1
 8008e6a:	701a      	strb	r2, [r3, #0]
		++pendingVirtualInputMappings;
 8008e6c:	4b20      	ldr	r3, [pc, #128]	; (8008ef0 <InputCheck+0x1ec>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <InputCheck+0x1ec>)
 8008e76:	701a      	strb	r2, [r3, #0]

		CO_UNLOCK_OD(canOpenNodeSTM32.canOpenStack->CANmodule);
 8008e78:	4b1a      	ldr	r3, [pc, #104]	; (8008ee4 <InputCheck+0x1e0>)
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	f383 8810 	msr	PRIMASK, r3
}
 8008e88:	46c0      	nop			; (mov r8, r8)

		if((subIndex == 1 || subIndex == 2) && getBuzzerOnOff())
 8008e8a:	183b      	adds	r3, r7, r0
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d003      	beq.n	8008e9a <InputCheck+0x196>
 8008e92:	183b      	adds	r3, r7, r0
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d110      	bne.n	8008ebc <InputCheck+0x1b8>
 8008e9a:	f000 f8f1 	bl	8009080 <getBuzzerOnOff>
 8008e9e:	1e03      	subs	r3, r0, #0
 8008ea0:	d00c      	beq.n	8008ebc <InputCheck+0x1b8>
		{
			HAL_GPIO_WritePin(BUZZER_OUT_GPIO_Port, BUZZER_OUT_Pin, state);
 8008ea2:	233d      	movs	r3, #61	; 0x3d
 8008ea4:	18fb      	adds	r3, r7, r3
 8008ea6:	781a      	ldrb	r2, [r3, #0]
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4811      	ldr	r0, [pc, #68]	; (8008ef4 <InputCheck+0x1f0>)
 8008eae:	0019      	movs	r1, r3
 8008eb0:	f002 f8c5 	bl	800b03e <HAL_GPIO_WritePin>
 8008eb4:	e002      	b.n	8008ebc <InputCheck+0x1b8>
			continue;
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	e000      	b.n	8008ebc <InputCheck+0x1b8>
			continue;
 8008eba:	46c0      	nop			; (mov r8, r8)
	for(uint8_t subIndex = 1; subIndex <= OD_CNT_ARR_6100; ++subIndex)
 8008ebc:	223f      	movs	r2, #63	; 0x3f
 8008ebe:	18bb      	adds	r3, r7, r2
 8008ec0:	18ba      	adds	r2, r7, r2
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	233f      	movs	r3, #63	; 0x3f
 8008eca:	18fb      	adds	r3, r7, r3
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b10      	cmp	r3, #16
 8008ed0:	d800      	bhi.n	8008ed4 <InputCheck+0x1d0>
 8008ed2:	e72e      	b.n	8008d32 <InputCheck+0x2e>
		}
	}

    osDelay(pdMS_TO_TICKS(INPUT_CHECK_TASK_DELAY_MS));
 8008ed4:	2014      	movs	r0, #20
 8008ed6:	f003 fd4b 	bl	800c970 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8008eda:	e721      	b.n	8008d20 <InputCheck+0x1c>
 8008edc:	20000338 	.word	0x20000338
 8008ee0:	2000552c 	.word	0x2000552c
 8008ee4:	20005440 	.word	0x20005440
 8008ee8:	2000033c 	.word	0x2000033c
 8008eec:	200053d0 	.word	0x200053d0
 8008ef0:	200053cc 	.word	0x200053cc
 8008ef4:	50000400 	.word	0x50000400

08008ef8 <setCanOpenID>:
static CanOpenNodeID canOpenNodeID;
static uint8_t buzzerOnOff;


void setCanOpenID(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
	canOpenNodeID.id_0 = !HAL_GPIO_ReadPin(ADD_S0_GPIO_Port, ADD_S0_Pin);
 8008efc:	4b44      	ldr	r3, [pc, #272]	; (8009010 <setCanOpenID+0x118>)
 8008efe:	2108      	movs	r1, #8
 8008f00:	0018      	movs	r0, r3
 8008f02:	f002 f87f 	bl	800b004 <HAL_GPIO_ReadPin>
 8008f06:	0003      	movs	r3, r0
 8008f08:	425a      	negs	r2, r3
 8008f0a:	4153      	adcs	r3, r2
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	4b41      	ldr	r3, [pc, #260]	; (8009014 <setCanOpenID+0x11c>)
 8008f10:	2101      	movs	r1, #1
 8008f12:	400a      	ands	r2, r1
 8008f14:	0010      	movs	r0, r2
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	2101      	movs	r1, #1
 8008f1a:	438a      	bics	r2, r1
 8008f1c:	1c11      	adds	r1, r2, #0
 8008f1e:	1c02      	adds	r2, r0, #0
 8008f20:	430a      	orrs	r2, r1
 8008f22:	701a      	strb	r2, [r3, #0]
	canOpenNodeID.id_1 = !HAL_GPIO_ReadPin(ADD_S1_GPIO_Port, ADD_S1_Pin);
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	4a3b      	ldr	r2, [pc, #236]	; (8009018 <setCanOpenID+0x120>)
 8008f2a:	0019      	movs	r1, r3
 8008f2c:	0010      	movs	r0, r2
 8008f2e:	f002 f869 	bl	800b004 <HAL_GPIO_ReadPin>
 8008f32:	0003      	movs	r3, r0
 8008f34:	425a      	negs	r2, r3
 8008f36:	4153      	adcs	r3, r2
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b36      	ldr	r3, [pc, #216]	; (8009014 <setCanOpenID+0x11c>)
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	400a      	ands	r2, r1
 8008f40:	1890      	adds	r0, r2, r2
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	2102      	movs	r1, #2
 8008f46:	438a      	bics	r2, r1
 8008f48:	1c11      	adds	r1, r2, #0
 8008f4a:	1c02      	adds	r2, r0, #0
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	701a      	strb	r2, [r3, #0]
	canOpenNodeID.id_2 = !HAL_GPIO_ReadPin(ADD_S2_GPIO_Port, ADD_S2_Pin);
 8008f50:	2380      	movs	r3, #128	; 0x80
 8008f52:	01db      	lsls	r3, r3, #7
 8008f54:	4a30      	ldr	r2, [pc, #192]	; (8009018 <setCanOpenID+0x120>)
 8008f56:	0019      	movs	r1, r3
 8008f58:	0010      	movs	r0, r2
 8008f5a:	f002 f853 	bl	800b004 <HAL_GPIO_ReadPin>
 8008f5e:	0003      	movs	r3, r0
 8008f60:	425a      	negs	r2, r3
 8008f62:	4153      	adcs	r3, r2
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	4b2b      	ldr	r3, [pc, #172]	; (8009014 <setCanOpenID+0x11c>)
 8008f68:	2101      	movs	r1, #1
 8008f6a:	400a      	ands	r2, r1
 8008f6c:	0090      	lsls	r0, r2, #2
 8008f6e:	781a      	ldrb	r2, [r3, #0]
 8008f70:	2104      	movs	r1, #4
 8008f72:	438a      	bics	r2, r1
 8008f74:	1c11      	adds	r1, r2, #0
 8008f76:	1c02      	adds	r2, r0, #0
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	701a      	strb	r2, [r3, #0]
	canOpenNodeID.id_3 = !HAL_GPIO_ReadPin(ADD_S3_GPIO_Port, ADD_S3_Pin);
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	019b      	lsls	r3, r3, #6
 8008f80:	4a25      	ldr	r2, [pc, #148]	; (8009018 <setCanOpenID+0x120>)
 8008f82:	0019      	movs	r1, r3
 8008f84:	0010      	movs	r0, r2
 8008f86:	f002 f83d 	bl	800b004 <HAL_GPIO_ReadPin>
 8008f8a:	0003      	movs	r3, r0
 8008f8c:	425a      	negs	r2, r3
 8008f8e:	4153      	adcs	r3, r2
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	4b20      	ldr	r3, [pc, #128]	; (8009014 <setCanOpenID+0x11c>)
 8008f94:	2101      	movs	r1, #1
 8008f96:	400a      	ands	r2, r1
 8008f98:	00d0      	lsls	r0, r2, #3
 8008f9a:	781a      	ldrb	r2, [r3, #0]
 8008f9c:	2108      	movs	r1, #8
 8008f9e:	438a      	bics	r2, r1
 8008fa0:	1c11      	adds	r1, r2, #0
 8008fa2:	1c02      	adds	r2, r0, #0
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	701a      	strb	r2, [r3, #0]
	canOpenNodeID.id_4 = !HAL_GPIO_ReadPin(ADD_S4_GPIO_Port, ADD_S4_Pin);
 8008fa8:	2380      	movs	r3, #128	; 0x80
 8008faa:	015b      	lsls	r3, r3, #5
 8008fac:	4a1a      	ldr	r2, [pc, #104]	; (8009018 <setCanOpenID+0x120>)
 8008fae:	0019      	movs	r1, r3
 8008fb0:	0010      	movs	r0, r2
 8008fb2:	f002 f827 	bl	800b004 <HAL_GPIO_ReadPin>
 8008fb6:	0003      	movs	r3, r0
 8008fb8:	425a      	negs	r2, r3
 8008fba:	4153      	adcs	r3, r2
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	4b15      	ldr	r3, [pc, #84]	; (8009014 <setCanOpenID+0x11c>)
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	400a      	ands	r2, r1
 8008fc4:	0110      	lsls	r0, r2, #4
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	2110      	movs	r1, #16
 8008fca:	438a      	bics	r2, r1
 8008fcc:	1c11      	adds	r1, r2, #0
 8008fce:	1c02      	adds	r2, r0, #0
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	701a      	strb	r2, [r3, #0]
	canOpenNodeID.id_5 = !HAL_GPIO_ReadPin(ADD_S5_GPIO_Port, ADD_S5_Pin);
 8008fd4:	4b11      	ldr	r3, [pc, #68]	; (800901c <setCanOpenID+0x124>)
 8008fd6:	2140      	movs	r1, #64	; 0x40
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f002 f813 	bl	800b004 <HAL_GPIO_ReadPin>
 8008fde:	0003      	movs	r3, r0
 8008fe0:	425a      	negs	r2, r3
 8008fe2:	4153      	adcs	r3, r2
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <setCanOpenID+0x11c>)
 8008fe8:	2101      	movs	r1, #1
 8008fea:	400a      	ands	r2, r1
 8008fec:	0150      	lsls	r0, r2, #5
 8008fee:	781a      	ldrb	r2, [r3, #0]
 8008ff0:	2120      	movs	r1, #32
 8008ff2:	438a      	bics	r2, r1
 8008ff4:	1c11      	adds	r1, r2, #0
 8008ff6:	1c02      	adds	r2, r0, #0
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	701a      	strb	r2, [r3, #0]

	canOpenNodeID.nodeID += DEFAULT_NODE_ID;
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <setCanOpenID+0x11c>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	3315      	adds	r3, #21
 8009002:	b2da      	uxtb	r2, r3
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <setCanOpenID+0x11c>)
 8009006:	701a      	strb	r2, [r3, #0]
}
 8009008:	46c0      	nop			; (mov r8, r8)
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	50001400 	.word	0x50001400
 8009014:	200006a0 	.word	0x200006a0
 8009018:	50000800 	.word	0x50000800
 800901c:	50001000 	.word	0x50001000

08009020 <getCanOpenID>:
 *
 * \return canOpenID
 */

uint8_t getCanOpenID(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
	return canOpenNodeID.nodeID;
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <getCanOpenID+0x10>)
 8009026:	781b      	ldrb	r3, [r3, #0]
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	200006a0 	.word	0x200006a0

08009034 <getCanOpenBaudRate>:

uint8_t getCanOpenBaudRate(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(CAN_BUAD_RATE_GPIO_Port, CAN_BUAD_RATE_Pin);
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <getCanOpenBaudRate+0x1c>)
 800903a:	2120      	movs	r1, #32
 800903c:	0018      	movs	r0, r3
 800903e:	f001 ffe1 	bl	800b004 <HAL_GPIO_ReadPin>
 8009042:	0003      	movs	r3, r0
 8009044:	425a      	negs	r2, r3
 8009046:	4153      	adcs	r3, r2
 8009048:	b2db      	uxtb	r3, r3
}
 800904a:	0018      	movs	r0, r3
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	50001000 	.word	0x50001000

08009054 <readBuzzerInput>:

void readBuzzerInput(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
	buzzerOnOff = !HAL_GPIO_ReadPin(BUZZER_IN_GPIO_Port, BUZZER_IN_Pin);
 8009058:	4b07      	ldr	r3, [pc, #28]	; (8009078 <readBuzzerInput+0x24>)
 800905a:	2110      	movs	r1, #16
 800905c:	0018      	movs	r0, r3
 800905e:	f001 ffd1 	bl	800b004 <HAL_GPIO_ReadPin>
 8009062:	0003      	movs	r3, r0
 8009064:	425a      	negs	r2, r3
 8009066:	4153      	adcs	r3, r2
 8009068:	b2db      	uxtb	r3, r3
 800906a:	001a      	movs	r2, r3
 800906c:	4b03      	ldr	r3, [pc, #12]	; (800907c <readBuzzerInput+0x28>)
 800906e:	701a      	strb	r2, [r3, #0]
}
 8009070:	46c0      	nop			; (mov r8, r8)
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	50001000 	.word	0x50001000
 800907c:	200006a1 	.word	0x200006a1

08009080 <getBuzzerOnOff>:

uint8_t getBuzzerOnOff(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
	return buzzerOnOff;
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <getBuzzerOnOff+0x10>)
 8009086:	781b      	ldrb	r3, [r3, #0]
}
 8009088:	0018      	movs	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	200006a1 	.word	0x200006a1

08009094 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8009098:	4b20      	ldr	r3, [pc, #128]	; (800911c <MX_FDCAN1_Init+0x88>)
 800909a:	4a21      	ldr	r2, [pc, #132]	; (8009120 <MX_FDCAN1_Init+0x8c>)
 800909c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800909e:	4b1f      	ldr	r3, [pc, #124]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80090a4:	4b1d      	ldr	r3, [pc, #116]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80090aa:	4b1c      	ldr	r3, [pc, #112]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80090b0:	4b1a      	ldr	r3, [pc, #104]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80090b6:	4b19      	ldr	r3, [pc, #100]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80090bc:	4b17      	ldr	r3, [pc, #92]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090be:	2201      	movs	r2, #1
 80090c0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 32;
 80090c2:	4b16      	ldr	r3, [pc, #88]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090c4:	2220      	movs	r2, #32
 80090c6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80090c8:	4b14      	ldr	r3, [pc, #80]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090ca:	2201      	movs	r2, #1
 80090cc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090d0:	220d      	movs	r2, #13
 80090d2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80090d4:	4b11      	ldr	r3, [pc, #68]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090d6:	2202      	movs	r2, #2
 80090d8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 32;
 80090da:	4b10      	ldr	r3, [pc, #64]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090dc:	2220      	movs	r2, #32
 80090de:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80090e0:	4b0e      	ldr	r3, [pc, #56]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80090e6:	4b0d      	ldr	r3, [pc, #52]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090e8:	220d      	movs	r2, #13
 80090ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80090ec:	4b0b      	ldr	r3, [pc, #44]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090ee:	2202      	movs	r2, #2
 80090f0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80090f8:	4b08      	ldr	r3, [pc, #32]	; (800911c <MX_FDCAN1_Init+0x88>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80090fe:	4b07      	ldr	r3, [pc, #28]	; (800911c <MX_FDCAN1_Init+0x88>)
 8009100:	2200      	movs	r2, #0
 8009102:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <MX_FDCAN1_Init+0x88>)
 8009106:	0018      	movs	r0, r3
 8009108:	f000 ff66 	bl	8009fd8 <HAL_FDCAN_Init>
 800910c:	1e03      	subs	r3, r0, #0
 800910e:	d001      	beq.n	8009114 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8009110:	f000 fb40 	bl	8009794 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8009114:	46c0      	nop			; (mov r8, r8)
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	20005464 	.word	0x20005464
 8009120:	40006400 	.word	0x40006400

08009124 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8009128:	4b22      	ldr	r3, [pc, #136]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800912a:	4a23      	ldr	r2, [pc, #140]	; (80091b8 <MX_FDCAN2_Init+0x94>)
 800912c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009130:	2200      	movs	r2, #0
 8009132:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8009134:	4b1f      	ldr	r3, [pc, #124]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009136:	2200      	movs	r2, #0
 8009138:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800913a:	4b1e      	ldr	r3, [pc, #120]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800913c:	2201      	movs	r2, #1
 800913e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009142:	2201      	movs	r2, #1
 8009144:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 8009146:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009148:	2201      	movs	r2, #1
 800914a:	749a      	strb	r2, [r3, #18]

  if(getCanOpenBaudRate() == CANOPEN_BAUDRATE_125)
 800914c:	f7ff ff72 	bl	8009034 <getCanOpenBaudRate>
 8009150:	1e03      	subs	r3, r0, #0
 8009152:	d103      	bne.n	800915c <MX_FDCAN2_Init+0x38>
  {
	  hfdcan2.Init.NominalPrescaler = 32;
 8009154:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009156:	2220      	movs	r2, #32
 8009158:	615a      	str	r2, [r3, #20]
 800915a:	e002      	b.n	8009162 <MX_FDCAN2_Init+0x3e>
  }
  else
  {
	  hfdcan2.Init.NominalPrescaler = 16;
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800915e:	2210      	movs	r2, #16
 8009160:	615a      	str	r2, [r3, #20]
  }

  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8009162:	4b14      	ldr	r3, [pc, #80]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009164:	2201      	movs	r2, #1
 8009166:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800916a:	220d      	movs	r2, #13
 800916c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009170:	2202      	movs	r2, #2
 8009172:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 32;
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009176:	2220      	movs	r2, #32
 8009178:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800917c:	2201      	movs	r2, #1
 800917e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8009180:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009182:	220d      	movs	r2, #13
 8009184:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009188:	2202      	movs	r2, #2
 800918a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800918c:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800918e:	2200      	movs	r2, #0
 8009190:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8009192:	4b08      	ldr	r3, [pc, #32]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 8009194:	2200      	movs	r2, #0
 8009196:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 800919a:	2200      	movs	r2, #0
 800919c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <MX_FDCAN2_Init+0x90>)
 80091a0:	0018      	movs	r0, r3
 80091a2:	f000 ff19 	bl	8009fd8 <HAL_FDCAN_Init>
 80091a6:	1e03      	subs	r3, r0, #0
 80091a8:	d001      	beq.n	80091ae <MX_FDCAN2_Init+0x8a>
  {
    Error_Handler();
 80091aa:	f000 faf3 	bl	8009794 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80091ae:	46c0      	nop			; (mov r8, r8)
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	200054c8 	.word	0x200054c8
 80091b8:	40006800 	.word	0x40006800

080091bc <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b08d      	sub	sp, #52	; 0x34
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c4:	231c      	movs	r3, #28
 80091c6:	18fb      	adds	r3, r7, r3
 80091c8:	0018      	movs	r0, r3
 80091ca:	2314      	movs	r3, #20
 80091cc:	001a      	movs	r2, r3
 80091ce:	2100      	movs	r1, #0
 80091d0:	f005 ffa8 	bl	800f124 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a60      	ldr	r2, [pc, #384]	; (800935c <HAL_FDCAN_MspInit+0x1a0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d16c      	bne.n	80092b8 <HAL_FDCAN_MspInit+0xfc>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80091de:	4b60      	ldr	r3, [pc, #384]	; (8009360 <HAL_FDCAN_MspInit+0x1a4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	4b5e      	ldr	r3, [pc, #376]	; (8009360 <HAL_FDCAN_MspInit+0x1a4>)
 80091e6:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80091e8:	4b5d      	ldr	r3, [pc, #372]	; (8009360 <HAL_FDCAN_MspInit+0x1a4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d10d      	bne.n	800920c <HAL_FDCAN_MspInit+0x50>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80091f0:	4b5c      	ldr	r3, [pc, #368]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80091f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091f4:	4b5b      	ldr	r3, [pc, #364]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80091f6:	2180      	movs	r1, #128	; 0x80
 80091f8:	0149      	lsls	r1, r1, #5
 80091fa:	430a      	orrs	r2, r1
 80091fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80091fe:	4b59      	ldr	r3, [pc, #356]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 8009200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009202:	2380      	movs	r3, #128	; 0x80
 8009204:	015b      	lsls	r3, r3, #5
 8009206:	4013      	ands	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800920c:	4b55      	ldr	r3, [pc, #340]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 800920e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009210:	4b54      	ldr	r3, [pc, #336]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 8009212:	2104      	movs	r1, #4
 8009214:	430a      	orrs	r2, r1
 8009216:	635a      	str	r2, [r3, #52]	; 0x34
 8009218:	4b52      	ldr	r3, [pc, #328]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	2204      	movs	r2, #4
 800921e:	4013      	ands	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009224:	4b4f      	ldr	r3, [pc, #316]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 8009226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009228:	4b4e      	ldr	r3, [pc, #312]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 800922a:	2108      	movs	r1, #8
 800922c:	430a      	orrs	r2, r1
 800922e:	635a      	str	r2, [r3, #52]	; 0x34
 8009230:	4b4c      	ldr	r3, [pc, #304]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	2208      	movs	r2, #8
 8009236:	4013      	ands	r3, r2
 8009238:	613b      	str	r3, [r7, #16]
 800923a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PC4     ------> FDCAN1_RX
    PD13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800923c:	241c      	movs	r4, #28
 800923e:	193b      	adds	r3, r7, r4
 8009240:	2210      	movs	r2, #16
 8009242:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009244:	193b      	adds	r3, r7, r4
 8009246:	2202      	movs	r2, #2
 8009248:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924a:	193b      	adds	r3, r7, r4
 800924c:	2200      	movs	r2, #0
 800924e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009250:	193b      	adds	r3, r7, r4
 8009252:	2200      	movs	r2, #0
 8009254:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8009256:	193b      	adds	r3, r7, r4
 8009258:	2203      	movs	r2, #3
 800925a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800925c:	193b      	adds	r3, r7, r4
 800925e:	4a42      	ldr	r2, [pc, #264]	; (8009368 <HAL_FDCAN_MspInit+0x1ac>)
 8009260:	0019      	movs	r1, r3
 8009262:	0010      	movs	r0, r2
 8009264:	f001 fd62 	bl	800ad2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009268:	0021      	movs	r1, r4
 800926a:	187b      	adds	r3, r7, r1
 800926c:	2280      	movs	r2, #128	; 0x80
 800926e:	0192      	lsls	r2, r2, #6
 8009270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009272:	187b      	adds	r3, r7, r1
 8009274:	2202      	movs	r2, #2
 8009276:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009278:	187b      	adds	r3, r7, r1
 800927a:	2200      	movs	r2, #0
 800927c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800927e:	187b      	adds	r3, r7, r1
 8009280:	2200      	movs	r2, #0
 8009282:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8009284:	187b      	adds	r3, r7, r1
 8009286:	2203      	movs	r2, #3
 8009288:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800928a:	187b      	adds	r3, r7, r1
 800928c:	4a37      	ldr	r2, [pc, #220]	; (800936c <HAL_FDCAN_MspInit+0x1b0>)
 800928e:	0019      	movs	r1, r3
 8009290:	0010      	movs	r0, r2
 8009292:	f001 fd4b 	bl	800ad2c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 3, 0);
 8009296:	2200      	movs	r2, #0
 8009298:	2103      	movs	r1, #3
 800929a:	2015      	movs	r0, #21
 800929c:	f000 fe62 	bl	8009f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80092a0:	2015      	movs	r0, #21
 80092a2:	f000 fe74 	bl	8009f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 3, 0);
 80092a6:	2200      	movs	r2, #0
 80092a8:	2103      	movs	r1, #3
 80092aa:	2016      	movs	r0, #22
 80092ac:	f000 fe5a 	bl	8009f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 80092b0:	2016      	movs	r0, #22
 80092b2:	f000 fe6c 	bl	8009f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80092b6:	e04d      	b.n	8009354 <HAL_FDCAN_MspInit+0x198>
  else if(fdcanHandle->Instance==FDCAN2)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a2c      	ldr	r2, [pc, #176]	; (8009370 <HAL_FDCAN_MspInit+0x1b4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d148      	bne.n	8009354 <HAL_FDCAN_MspInit+0x198>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80092c2:	4b27      	ldr	r3, [pc, #156]	; (8009360 <HAL_FDCAN_MspInit+0x1a4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	4b25      	ldr	r3, [pc, #148]	; (8009360 <HAL_FDCAN_MspInit+0x1a4>)
 80092ca:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80092cc:	4b24      	ldr	r3, [pc, #144]	; (8009360 <HAL_FDCAN_MspInit+0x1a4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d10d      	bne.n	80092f0 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80092d4:	4b23      	ldr	r3, [pc, #140]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80092d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092d8:	4b22      	ldr	r3, [pc, #136]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80092da:	2180      	movs	r1, #128	; 0x80
 80092dc:	0149      	lsls	r1, r1, #5
 80092de:	430a      	orrs	r2, r1
 80092e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80092e2:	4b20      	ldr	r3, [pc, #128]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80092e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e6:	2380      	movs	r3, #128	; 0x80
 80092e8:	015b      	lsls	r3, r3, #5
 80092ea:	4013      	ands	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80092f0:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80092f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092f4:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80092f6:	2104      	movs	r1, #4
 80092f8:	430a      	orrs	r2, r1
 80092fa:	635a      	str	r2, [r3, #52]	; 0x34
 80092fc:	4b19      	ldr	r3, [pc, #100]	; (8009364 <HAL_FDCAN_MspInit+0x1a8>)
 80092fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009300:	2204      	movs	r2, #4
 8009302:	4013      	ands	r3, r2
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009308:	211c      	movs	r1, #28
 800930a:	187b      	adds	r3, r7, r1
 800930c:	220c      	movs	r2, #12
 800930e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009310:	187b      	adds	r3, r7, r1
 8009312:	2202      	movs	r2, #2
 8009314:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009316:	187b      	adds	r3, r7, r1
 8009318:	2200      	movs	r2, #0
 800931a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800931c:	187b      	adds	r3, r7, r1
 800931e:	2200      	movs	r2, #0
 8009320:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8009322:	187b      	adds	r3, r7, r1
 8009324:	2203      	movs	r2, #3
 8009326:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009328:	187b      	adds	r3, r7, r1
 800932a:	4a0f      	ldr	r2, [pc, #60]	; (8009368 <HAL_FDCAN_MspInit+0x1ac>)
 800932c:	0019      	movs	r1, r3
 800932e:	0010      	movs	r0, r2
 8009330:	f001 fcfc 	bl	800ad2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 3, 0);
 8009334:	2200      	movs	r2, #0
 8009336:	2103      	movs	r1, #3
 8009338:	2015      	movs	r0, #21
 800933a:	f000 fe13 	bl	8009f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800933e:	2015      	movs	r0, #21
 8009340:	f000 fe25 	bl	8009f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 3, 0);
 8009344:	2200      	movs	r2, #0
 8009346:	2103      	movs	r1, #3
 8009348:	2016      	movs	r0, #22
 800934a:	f000 fe0b 	bl	8009f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 800934e:	2016      	movs	r0, #22
 8009350:	f000 fe1d 	bl	8009f8e <HAL_NVIC_EnableIRQ>
}
 8009354:	46c0      	nop			; (mov r8, r8)
 8009356:	46bd      	mov	sp, r7
 8009358:	b00d      	add	sp, #52	; 0x34
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	40006400 	.word	0x40006400
 8009360:	200006a4 	.word	0x200006a4
 8009364:	40021000 	.word	0x40021000
 8009368:	50000800 	.word	0x50000800
 800936c:	50000c00 	.word	0x50000c00
 8009370:	40006800 	.word	0x40006800

08009374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009374:	b590      	push	{r4, r7, lr}
 8009376:	b08d      	sub	sp, #52	; 0x34
 8009378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800937a:	241c      	movs	r4, #28
 800937c:	193b      	adds	r3, r7, r4
 800937e:	0018      	movs	r0, r3
 8009380:	2314      	movs	r3, #20
 8009382:	001a      	movs	r2, r3
 8009384:	2100      	movs	r1, #0
 8009386:	f005 fecd 	bl	800f124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800938a:	4b95      	ldr	r3, [pc, #596]	; (80095e0 <MX_GPIO_Init+0x26c>)
 800938c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800938e:	4b94      	ldr	r3, [pc, #592]	; (80095e0 <MX_GPIO_Init+0x26c>)
 8009390:	2102      	movs	r1, #2
 8009392:	430a      	orrs	r2, r1
 8009394:	635a      	str	r2, [r3, #52]	; 0x34
 8009396:	4b92      	ldr	r3, [pc, #584]	; (80095e0 <MX_GPIO_Init+0x26c>)
 8009398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939a:	2202      	movs	r2, #2
 800939c:	4013      	ands	r3, r2
 800939e:	61bb      	str	r3, [r7, #24]
 80093a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80093a2:	4b8f      	ldr	r3, [pc, #572]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a6:	4b8e      	ldr	r3, [pc, #568]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093a8:	2110      	movs	r1, #16
 80093aa:	430a      	orrs	r2, r1
 80093ac:	635a      	str	r2, [r3, #52]	; 0x34
 80093ae:	4b8c      	ldr	r3, [pc, #560]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	2210      	movs	r2, #16
 80093b4:	4013      	ands	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80093ba:	4b89      	ldr	r3, [pc, #548]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093be:	4b88      	ldr	r3, [pc, #544]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093c0:	2104      	movs	r1, #4
 80093c2:	430a      	orrs	r2, r1
 80093c4:	635a      	str	r2, [r3, #52]	; 0x34
 80093c6:	4b86      	ldr	r3, [pc, #536]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	2204      	movs	r2, #4
 80093cc:	4013      	ands	r3, r2
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80093d2:	4b83      	ldr	r3, [pc, #524]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d6:	4b82      	ldr	r3, [pc, #520]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093d8:	2120      	movs	r1, #32
 80093da:	430a      	orrs	r2, r1
 80093dc:	635a      	str	r2, [r3, #52]	; 0x34
 80093de:	4b80      	ldr	r3, [pc, #512]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	2220      	movs	r2, #32
 80093e4:	4013      	ands	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ea:	4b7d      	ldr	r3, [pc, #500]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ee:	4b7c      	ldr	r3, [pc, #496]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093f0:	2101      	movs	r1, #1
 80093f2:	430a      	orrs	r2, r1
 80093f4:	635a      	str	r2, [r3, #52]	; 0x34
 80093f6:	4b7a      	ldr	r3, [pc, #488]	; (80095e0 <MX_GPIO_Init+0x26c>)
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	2201      	movs	r2, #1
 80093fc:	4013      	ands	r3, r2
 80093fe:	60bb      	str	r3, [r7, #8]
 8009400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009402:	4b77      	ldr	r3, [pc, #476]	; (80095e0 <MX_GPIO_Init+0x26c>)
 8009404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009406:	4b76      	ldr	r3, [pc, #472]	; (80095e0 <MX_GPIO_Init+0x26c>)
 8009408:	2108      	movs	r1, #8
 800940a:	430a      	orrs	r2, r1
 800940c:	635a      	str	r2, [r3, #52]	; 0x34
 800940e:	4b74      	ldr	r3, [pc, #464]	; (80095e0 <MX_GPIO_Init+0x26c>)
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	2208      	movs	r2, #8
 8009414:	4013      	ands	r3, r2
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_OUT_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
 800941a:	4972      	ldr	r1, [pc, #456]	; (80095e4 <MX_GPIO_Init+0x270>)
 800941c:	4b72      	ldr	r3, [pc, #456]	; (80095e8 <MX_GPIO_Init+0x274>)
 800941e:	2200      	movs	r2, #0
 8009420:	0018      	movs	r0, r3
 8009422:	f001 fe0c 	bl	800b03e <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);
 8009426:	23a0      	movs	r3, #160	; 0xa0
 8009428:	05db      	lsls	r3, r3, #23
 800942a:	2200      	movs	r2, #0
 800942c:	211e      	movs	r1, #30
 800942e:	0018      	movs	r0, r3
 8009430:	f001 fe05 	bl	800b03e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT8_GPIO_Port, OUT8_Pin, GPIO_PIN_RESET);
 8009434:	4b6d      	ldr	r3, [pc, #436]	; (80095ec <MX_GPIO_Init+0x278>)
 8009436:	2200      	movs	r2, #0
 8009438:	2120      	movs	r1, #32
 800943a:	0018      	movs	r0, r3
 800943c:	f001 fdff 	bl	800b03e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT12_Pin|OUT13_Pin, GPIO_PIN_RESET);
 8009440:	4b6b      	ldr	r3, [pc, #428]	; (80095f0 <MX_GPIO_Init+0x27c>)
 8009442:	2200      	movs	r2, #0
 8009444:	21c0      	movs	r1, #192	; 0xc0
 8009446:	0018      	movs	r0, r3
 8009448:	f001 fdf9 	bl	800b03e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT14_Pin|OUT15_Pin|OUT16_Pin|CAN_OK_Pin
 800944c:	23e3      	movs	r3, #227	; 0xe3
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4868      	ldr	r0, [pc, #416]	; (80095f4 <MX_GPIO_Init+0x280>)
 8009452:	2200      	movs	r2, #0
 8009454:	0019      	movs	r1, r3
 8009456:	f001 fdf2 	bl	800b03e <HAL_GPIO_WritePin>
                          |CAN_FAULT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUZZER_OUT_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
 800945a:	193b      	adds	r3, r7, r4
 800945c:	4a61      	ldr	r2, [pc, #388]	; (80095e4 <MX_GPIO_Init+0x270>)
 800945e:	601a      	str	r2, [r3, #0]
                          |OUT1_Pin|OUT2_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009460:	193b      	adds	r3, r7, r4
 8009462:	2201      	movs	r2, #1
 8009464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009466:	193b      	adds	r3, r7, r4
 8009468:	2201      	movs	r2, #1
 800946a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800946c:	193b      	adds	r3, r7, r4
 800946e:	2200      	movs	r2, #0
 8009470:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009472:	193b      	adds	r3, r7, r4
 8009474:	4a5c      	ldr	r2, [pc, #368]	; (80095e8 <MX_GPIO_Init+0x274>)
 8009476:	0019      	movs	r1, r3
 8009478:	0010      	movs	r0, r2
 800947a:	f001 fc57 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = BUZZER_IN_Pin|CAN_BUAD_RATE_Pin|ADD_S5_Pin|IN1_Pin
 800947e:	193b      	adds	r3, r7, r4
 8009480:	4a5d      	ldr	r2, [pc, #372]	; (80095f8 <MX_GPIO_Init+0x284>)
 8009482:	601a      	str	r2, [r3, #0]
                          |IN2_Pin|IN3_Pin|IN4_Pin|IN5_Pin
                          |IN6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009484:	193b      	adds	r3, r7, r4
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800948a:	193b      	adds	r3, r7, r4
 800948c:	2201      	movs	r2, #1
 800948e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009490:	193b      	adds	r3, r7, r4
 8009492:	4a58      	ldr	r2, [pc, #352]	; (80095f4 <MX_GPIO_Init+0x280>)
 8009494:	0019      	movs	r1, r3
 8009496:	0010      	movs	r0, r2
 8009498:	f001 fc48 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ADD_S4_Pin|ADD_S3_Pin|ADD_S2_Pin|ADD_S1_Pin
 800949c:	193b      	adds	r3, r7, r4
 800949e:	4a57      	ldr	r2, [pc, #348]	; (80095fc <MX_GPIO_Init+0x288>)
 80094a0:	601a      	str	r2, [r3, #0]
                          |IN12_Pin|IN13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094a2:	193b      	adds	r3, r7, r4
 80094a4:	2200      	movs	r2, #0
 80094a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094a8:	193b      	adds	r3, r7, r4
 80094aa:	2201      	movs	r2, #1
 80094ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	4a4e      	ldr	r2, [pc, #312]	; (80095ec <MX_GPIO_Init+0x278>)
 80094b2:	0019      	movs	r1, r3
 80094b4:	0010      	movs	r0, r2
 80094b6:	f001 fc39 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADD_S0_Pin;
 80094ba:	193b      	adds	r3, r7, r4
 80094bc:	2208      	movs	r2, #8
 80094be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094c0:	193b      	adds	r3, r7, r4
 80094c2:	2200      	movs	r2, #0
 80094c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094c6:	193b      	adds	r3, r7, r4
 80094c8:	2201      	movs	r2, #1
 80094ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADD_S0_GPIO_Port, &GPIO_InitStruct);
 80094cc:	193b      	adds	r3, r7, r4
 80094ce:	4a48      	ldr	r2, [pc, #288]	; (80095f0 <MX_GPIO_Init+0x27c>)
 80094d0:	0019      	movs	r1, r3
 80094d2:	0010      	movs	r0, r2
 80094d4:	f001 fc2a 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin;
 80094d8:	193b      	adds	r3, r7, r4
 80094da:	221e      	movs	r2, #30
 80094dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094de:	193b      	adds	r3, r7, r4
 80094e0:	2201      	movs	r2, #1
 80094e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094e4:	193b      	adds	r3, r7, r4
 80094e6:	2201      	movs	r2, #1
 80094e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ea:	193b      	adds	r3, r7, r4
 80094ec:	2200      	movs	r2, #0
 80094ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094f0:	193a      	adds	r2, r7, r4
 80094f2:	23a0      	movs	r3, #160	; 0xa0
 80094f4:	05db      	lsls	r3, r3, #23
 80094f6:	0011      	movs	r1, r2
 80094f8:	0018      	movs	r0, r3
 80094fa:	f001 fc17 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT8_Pin;
 80094fe:	193b      	adds	r3, r7, r4
 8009500:	2220      	movs	r2, #32
 8009502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009504:	193b      	adds	r3, r7, r4
 8009506:	2201      	movs	r2, #1
 8009508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800950a:	193b      	adds	r3, r7, r4
 800950c:	2201      	movs	r2, #1
 800950e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009510:	193b      	adds	r3, r7, r4
 8009512:	2200      	movs	r2, #0
 8009514:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUT8_GPIO_Port, &GPIO_InitStruct);
 8009516:	193b      	adds	r3, r7, r4
 8009518:	4a34      	ldr	r2, [pc, #208]	; (80095ec <MX_GPIO_Init+0x278>)
 800951a:	0019      	movs	r1, r3
 800951c:	0010      	movs	r0, r2
 800951e:	f001 fc05 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT12_Pin|OUT13_Pin;
 8009522:	193b      	adds	r3, r7, r4
 8009524:	22c0      	movs	r2, #192	; 0xc0
 8009526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009528:	193b      	adds	r3, r7, r4
 800952a:	2201      	movs	r2, #1
 800952c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800952e:	193b      	adds	r3, r7, r4
 8009530:	2201      	movs	r2, #1
 8009532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009534:	193b      	adds	r3, r7, r4
 8009536:	2200      	movs	r2, #0
 8009538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800953a:	193b      	adds	r3, r7, r4
 800953c:	4a2c      	ldr	r2, [pc, #176]	; (80095f0 <MX_GPIO_Init+0x27c>)
 800953e:	0019      	movs	r1, r3
 8009540:	0010      	movs	r0, r2
 8009542:	f001 fbf3 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = OUT14_Pin|OUT15_Pin|OUT16_Pin|CAN_OK_Pin
 8009546:	0021      	movs	r1, r4
 8009548:	187b      	adds	r3, r7, r1
 800954a:	22e3      	movs	r2, #227	; 0xe3
 800954c:	0092      	lsls	r2, r2, #2
 800954e:	601a      	str	r2, [r3, #0]
                          |CAN_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009550:	000c      	movs	r4, r1
 8009552:	193b      	adds	r3, r7, r4
 8009554:	2201      	movs	r2, #1
 8009556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009558:	193b      	adds	r3, r7, r4
 800955a:	2201      	movs	r2, #1
 800955c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800955e:	193b      	adds	r3, r7, r4
 8009560:	2200      	movs	r2, #0
 8009562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009564:	193b      	adds	r3, r7, r4
 8009566:	4a23      	ldr	r2, [pc, #140]	; (80095f4 <MX_GPIO_Init+0x280>)
 8009568:	0019      	movs	r1, r3
 800956a:	0010      	movs	r0, r2
 800956c:	f001 fbde 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN8_Pin|IN9_Pin;
 8009570:	0021      	movs	r1, r4
 8009572:	187b      	adds	r3, r7, r1
 8009574:	22e0      	movs	r2, #224	; 0xe0
 8009576:	0152      	lsls	r2, r2, #5
 8009578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800957a:	000c      	movs	r4, r1
 800957c:	193b      	adds	r3, r7, r4
 800957e:	2200      	movs	r2, #0
 8009580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009582:	193b      	adds	r3, r7, r4
 8009584:	2201      	movs	r2, #1
 8009586:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009588:	193b      	adds	r3, r7, r4
 800958a:	4a17      	ldr	r2, [pc, #92]	; (80095e8 <MX_GPIO_Init+0x274>)
 800958c:	0019      	movs	r1, r3
 800958e:	0010      	movs	r0, r2
 8009590:	f001 fbcc 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN10_Pin|IN11_Pin;
 8009594:	193b      	adds	r3, r7, r4
 8009596:	22c0      	movs	r2, #192	; 0xc0
 8009598:	0092      	lsls	r2, r2, #2
 800959a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800959c:	193b      	adds	r3, r7, r4
 800959e:	2200      	movs	r2, #0
 80095a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80095a2:	193b      	adds	r3, r7, r4
 80095a4:	2201      	movs	r2, #1
 80095a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095a8:	193a      	adds	r2, r7, r4
 80095aa:	23a0      	movs	r3, #160	; 0xa0
 80095ac:	05db      	lsls	r3, r3, #23
 80095ae:	0011      	movs	r1, r2
 80095b0:	0018      	movs	r0, r3
 80095b2:	f001 fbbb 	bl	800ad2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN14_Pin|IN15_Pin|IN16_Pin;
 80095b6:	0021      	movs	r1, r4
 80095b8:	187b      	adds	r3, r7, r1
 80095ba:	22e0      	movs	r2, #224	; 0xe0
 80095bc:	00d2      	lsls	r2, r2, #3
 80095be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095c0:	187b      	adds	r3, r7, r1
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80095c6:	187b      	adds	r3, r7, r1
 80095c8:	2201      	movs	r2, #1
 80095ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80095cc:	187b      	adds	r3, r7, r1
 80095ce:	4a0c      	ldr	r2, [pc, #48]	; (8009600 <MX_GPIO_Init+0x28c>)
 80095d0:	0019      	movs	r1, r3
 80095d2:	0010      	movs	r0, r2
 80095d4:	f001 fbaa 	bl	800ad2c <HAL_GPIO_Init>

}
 80095d8:	46c0      	nop			; (mov r8, r8)
 80095da:	46bd      	mov	sp, r7
 80095dc:	b00d      	add	sp, #52	; 0x34
 80095de:	bd90      	pop	{r4, r7, pc}
 80095e0:	40021000 	.word	0x40021000
 80095e4:	000003c7 	.word	0x000003c7
 80095e8:	50000400 	.word	0x50000400
 80095ec:	50000800 	.word	0x50000800
 80095f0:	50001400 	.word	0x50001400
 80095f4:	50001000 	.word	0x50001000
 80095f8:	0000fc70 	.word	0x0000fc70
 80095fc:	0000f0c0 	.word	0x0000f0c0
 8009600:	50000c00 	.word	0x50000c00

08009604 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8009608:	4b0b      	ldr	r3, [pc, #44]	; (8009638 <MX_IWDG_Init+0x34>)
 800960a:	4a0c      	ldr	r2, [pc, #48]	; (800963c <MX_IWDG_Init+0x38>)
 800960c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800960e:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <MX_IWDG_Init+0x34>)
 8009610:	2200      	movs	r2, #0
 8009612:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8009614:	4b08      	ldr	r3, [pc, #32]	; (8009638 <MX_IWDG_Init+0x34>)
 8009616:	4a0a      	ldr	r2, [pc, #40]	; (8009640 <MX_IWDG_Init+0x3c>)
 8009618:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <MX_IWDG_Init+0x34>)
 800961c:	4a08      	ldr	r2, [pc, #32]	; (8009640 <MX_IWDG_Init+0x3c>)
 800961e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <MX_IWDG_Init+0x34>)
 8009622:	0018      	movs	r0, r3
 8009624:	f001 fd44 	bl	800b0b0 <HAL_IWDG_Init>
 8009628:	1e03      	subs	r3, r0, #0
 800962a:	d001      	beq.n	8009630 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 800962c:	f000 f8b2 	bl	8009794 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8009630:	46c0      	nop			; (mov r8, r8)
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	2000552c 	.word	0x2000552c
 800963c:	40003000 	.word	0x40003000
 8009640:	00000fff 	.word	0x00000fff

08009644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009648:	f000 fb7e 	bl	8009d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800964c:	f000 f811 	bl	8009672 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009650:	f7ff fe90 	bl	8009374 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8009654:	f7ff fd66 	bl	8009124 <MX_FDCAN2_Init>
  MX_FDCAN1_Init();
 8009658:	f7ff fd1c 	bl	8009094 <MX_FDCAN1_Init>
  MX_TIM14_Init();
 800965c:	f000 fafc 	bl	8009c58 <MX_TIM14_Init>
  MX_IWDG_Init();
 8009660:	f7ff ffd0 	bl	8009604 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009664:	f003 f8a6 	bl	800c7b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8009668:	f7ff f9da 	bl	8008a20 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800966c:	f003 f8c4 	bl	800c7f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009670:	e7fe      	b.n	8009670 <main+0x2c>

08009672 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009672:	b590      	push	{r4, r7, lr}
 8009674:	b0a7      	sub	sp, #156	; 0x9c
 8009676:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009678:	245c      	movs	r4, #92	; 0x5c
 800967a:	193b      	adds	r3, r7, r4
 800967c:	0018      	movs	r0, r3
 800967e:	233c      	movs	r3, #60	; 0x3c
 8009680:	001a      	movs	r2, r3
 8009682:	2100      	movs	r1, #0
 8009684:	f005 fd4e 	bl	800f124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009688:	234c      	movs	r3, #76	; 0x4c
 800968a:	18fb      	adds	r3, r7, r3
 800968c:	0018      	movs	r0, r3
 800968e:	2310      	movs	r3, #16
 8009690:	001a      	movs	r2, r3
 8009692:	2100      	movs	r1, #0
 8009694:	f005 fd46 	bl	800f124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009698:	003b      	movs	r3, r7
 800969a:	0018      	movs	r0, r3
 800969c:	234c      	movs	r3, #76	; 0x4c
 800969e:	001a      	movs	r2, r3
 80096a0:	2100      	movs	r1, #0
 80096a2:	f005 fd3f 	bl	800f124 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80096a6:	2380      	movs	r3, #128	; 0x80
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	0018      	movs	r0, r3
 80096ac:	f001 fd5a 	bl	800b164 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80096b0:	193b      	adds	r3, r7, r4
 80096b2:	2209      	movs	r2, #9
 80096b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80096b6:	193b      	adds	r3, r7, r4
 80096b8:	2280      	movs	r2, #128	; 0x80
 80096ba:	0252      	lsls	r2, r2, #9
 80096bc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80096be:	0021      	movs	r1, r4
 80096c0:	187b      	adds	r3, r7, r1
 80096c2:	2201      	movs	r2, #1
 80096c4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	2202      	movs	r2, #2
 80096ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80096cc:	187b      	adds	r3, r7, r1
 80096ce:	2203      	movs	r2, #3
 80096d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80096d2:	187b      	adds	r3, r7, r1
 80096d4:	2200      	movs	r2, #0
 80096d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	2210      	movs	r2, #16
 80096dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80096de:	187b      	adds	r3, r7, r1
 80096e0:	2280      	movs	r2, #128	; 0x80
 80096e2:	0292      	lsls	r2, r2, #10
 80096e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80096e6:	187b      	adds	r3, r7, r1
 80096e8:	2280      	movs	r2, #128	; 0x80
 80096ea:	0492      	lsls	r2, r2, #18
 80096ec:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	2280      	movs	r2, #128	; 0x80
 80096f2:	0592      	lsls	r2, r2, #22
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80096f6:	187b      	adds	r3, r7, r1
 80096f8:	0018      	movs	r0, r3
 80096fa:	f001 fd7f 	bl	800b1fc <HAL_RCC_OscConfig>
 80096fe:	1e03      	subs	r3, r0, #0
 8009700:	d001      	beq.n	8009706 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009702:	f000 f847 	bl	8009794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009706:	214c      	movs	r1, #76	; 0x4c
 8009708:	187b      	adds	r3, r7, r1
 800970a:	2207      	movs	r2, #7
 800970c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800970e:	187b      	adds	r3, r7, r1
 8009710:	2202      	movs	r2, #2
 8009712:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009714:	187b      	adds	r3, r7, r1
 8009716:	2200      	movs	r2, #0
 8009718:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800971a:	187b      	adds	r3, r7, r1
 800971c:	2200      	movs	r2, #0
 800971e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009720:	187b      	adds	r3, r7, r1
 8009722:	2102      	movs	r1, #2
 8009724:	0018      	movs	r0, r3
 8009726:	f002 f8cf 	bl	800b8c8 <HAL_RCC_ClockConfig>
 800972a:	1e03      	subs	r3, r0, #0
 800972c:	d001      	beq.n	8009732 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800972e:	f000 f831 	bl	8009794 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8009732:	003b      	movs	r3, r7
 8009734:	2280      	movs	r2, #128	; 0x80
 8009736:	0492      	lsls	r2, r2, #18
 8009738:	601a      	str	r2, [r3, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800973a:	003b      	movs	r3, r7
 800973c:	2200      	movs	r2, #0
 800973e:	649a      	str	r2, [r3, #72]	; 0x48

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009740:	003b      	movs	r3, r7
 8009742:	0018      	movs	r0, r3
 8009744:	f002 fa94 	bl	800bc70 <HAL_RCCEx_PeriphCLKConfig>
 8009748:	1e03      	subs	r3, r0, #0
 800974a:	d001      	beq.n	8009750 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800974c:	f000 f822 	bl	8009794 <Error_Handler>
  }
}
 8009750:	46c0      	nop			; (mov r8, r8)
 8009752:	46bd      	mov	sp, r7
 8009754:	b027      	add	sp, #156	; 0x9c
 8009756:	bd90      	pop	{r4, r7, pc}

08009758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a09      	ldr	r2, [pc, #36]	; (800978c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d101      	bne.n	800976e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800976a:	f000 fb0d 	bl	8009d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim == canopenNodeSTM32->timerHandle)
 800976e:	4b08      	ldr	r3, [pc, #32]	; (8009790 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	429a      	cmp	r2, r3
 8009778:	d103      	bne.n	8009782 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  canopen_app_interrupt();
 800977a:	f7fe f963 	bl	8007a44 <canopen_app_interrupt>
	  timersHandler();
 800977e:	f000 f8b7 	bl	80098f0 <timersHandler>
  }

  /* USER CODE END Callback 1 */
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	46bd      	mov	sp, r7
 8009786:	b002      	add	sp, #8
 8009788:	bd80      	pop	{r7, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	40012c00 	.word	0x40012c00
 8009790:	200053c0 	.word	0x200053c0

08009794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009798:	b672      	cpsid	i
}
 800979a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800979c:	e7fe      	b.n	800979c <Error_Handler+0x8>
	...

080097a0 <initSoftwareTimer>:
}SoftwareTimersObject;

SoftwareTimersObject *timersObjectsList = 0;

void initSoftwareTimer(SoftwareTimerHandler * timer, uint32_t period, void * callback, uint8_t repeat, void *param)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	001a      	movs	r2, r3
 80097ae:	1cfb      	adds	r3, r7, #3
 80097b0:	701a      	strb	r2, [r3, #0]
	SoftwareTimersObject *current = timersObjectsList;
 80097b2:	4b24      	ldr	r3, [pc, #144]	; (8009844 <initSoftwareTimer+0xa4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	61fb      	str	r3, [r7, #28]

    while (current != NULL)
 80097b8:	e007      	b.n	80097ca <initSoftwareTimer+0x2a>
    {
        if (current->timerHandler == timer)
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d03b      	beq.n	800983c <initSoftwareTimer+0x9c>
        {
            return;
        }
        current = current->nextObject;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	61fb      	str	r3, [r7, #28]
    while (current != NULL)
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f4      	bne.n	80097ba <initSoftwareTimer+0x1a>
    }

	timer->callback = callback;
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	605a      	str	r2, [r3, #4]
	timer->period = period;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	601a      	str	r2, [r3, #0]
	timer->repeat = repeat;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	1cfa      	adds	r2, r7, #3
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	725a      	strb	r2, [r3, #9]
	timer->ticks = 0;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	60da      	str	r2, [r3, #12]
	timer->param = param;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ee:	611a      	str	r2, [r3, #16]

	SoftwareTimersObject *timerObject = (SoftwareTimersObject *)malloc(sizeof(SoftwareTimersObject));
 80097f0:	2008      	movs	r0, #8
 80097f2:	f005 fc59 	bl	800f0a8 <malloc>
 80097f6:	0003      	movs	r3, r0
 80097f8:	617b      	str	r3, [r7, #20]
	timerObject->timerHandler = timer;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	601a      	str	r2, [r3, #0]
	timerObject->nextObject = 0;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2200      	movs	r2, #0
 8009804:	605a      	str	r2, [r3, #4]

	if(timersObjectsList == 0)
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <initSoftwareTimer+0xa4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d107      	bne.n	800981e <initSoftwareTimer+0x7e>
	{
		timersObjectsList = timerObject;
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <initSoftwareTimer+0xa4>)
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	601a      	str	r2, [r3, #0]
		timersObjectsList->nextObject = 0;
 8009814:	4b0b      	ldr	r3, [pc, #44]	; (8009844 <initSoftwareTimer+0xa4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	605a      	str	r2, [r3, #4]
 800981c:	e00f      	b.n	800983e <initSoftwareTimer+0x9e>
	}
	else
	{
		SoftwareTimersObject *temp = timersObjectsList;
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <initSoftwareTimer+0xa4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	61bb      	str	r3, [r7, #24]

		while(temp->nextObject != 0)
 8009824:	e002      	b.n	800982c <initSoftwareTimer+0x8c>
		{
			temp = temp->nextObject;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	61bb      	str	r3, [r7, #24]
		while(temp->nextObject != 0)
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1f8      	bne.n	8009826 <initSoftwareTimer+0x86>
		}

		temp->nextObject = timerObject;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	605a      	str	r2, [r3, #4]
 800983a:	e000      	b.n	800983e <initSoftwareTimer+0x9e>
            return;
 800983c:	46c0      	nop			; (mov r8, r8)
	}

}
 800983e:	46bd      	mov	sp, r7
 8009840:	b008      	add	sp, #32
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200006a8 	.word	0x200006a8

08009848 <deInitSoftwareTimer>:

void deInitSoftwareTimer(SoftwareTimerHandler * timer)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
    if (timer == 0 || timersObjectsList == 0)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d036      	beq.n	80098c4 <deInitSoftwareTimer+0x7c>
 8009856:	4b1e      	ldr	r3, [pc, #120]	; (80098d0 <deInitSoftwareTimer+0x88>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d032      	beq.n	80098c4 <deInitSoftwareTimer+0x7c>
        return;

	timer->callback = 0;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	605a      	str	r2, [r3, #4]
	timer->period = 0;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
	timer->repeat = 0;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	725a      	strb	r2, [r3, #9]
	timer->ticks = 0;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	60da      	str	r2, [r3, #12]

	SoftwareTimersObject *temp = timersObjectsList;
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <deInitSoftwareTimer+0x88>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
	SoftwareTimersObject *prev = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	60bb      	str	r3, [r7, #8]

	while(temp != 0 && temp->timerHandler != timer)
 8009880:	e004      	b.n	800988c <deInitSoftwareTimer+0x44>
	{
		prev = temp;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	60bb      	str	r3, [r7, #8]
		temp = temp->nextObject;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	60fb      	str	r3, [r7, #12]
	while(temp != 0 && temp->timerHandler != timer)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <deInitSoftwareTimer+0x54>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d1f2      	bne.n	8009882 <deInitSoftwareTimer+0x3a>
	}

	if(temp == 0) return;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d012      	beq.n	80098c8 <deInitSoftwareTimer+0x80>

	if(prev == 0)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <deInitSoftwareTimer+0x6a>
	{
		timersObjectsList = temp->nextObject;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <deInitSoftwareTimer+0x88>)
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	e003      	b.n	80098ba <deInitSoftwareTimer+0x72>
	}
	else
	{
		prev->nextObject = temp->nextObject;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	605a      	str	r2, [r3, #4]
	}

	free(temp);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	0018      	movs	r0, r3
 80098be:	f005 fbfd 	bl	800f0bc <free>
 80098c2:	e002      	b.n	80098ca <deInitSoftwareTimer+0x82>
        return;
 80098c4:	46c0      	nop			; (mov r8, r8)
 80098c6:	e000      	b.n	80098ca <deInitSoftwareTimer+0x82>
	if(temp == 0) return;
 80098c8:	46c0      	nop			; (mov r8, r8)

}
 80098ca:	46bd      	mov	sp, r7
 80098cc:	b004      	add	sp, #16
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	200006a8 	.word	0x200006a8

080098d4 <startSoftwareTimer>:

void startSoftwareTimer(SoftwareTimerHandler * timer)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
	timer->start = 1;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	721a      	strb	r2, [r3, #8]
	timer->ticks = 0;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	60da      	str	r2, [r3, #12]
}
 80098e8:	46c0      	nop			; (mov r8, r8)
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b002      	add	sp, #8
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <timersHandler>:
	timer->start = 0;
	timer->ticks = 0;
}

void timersHandler(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
	SoftwareTimersObject *temp = timersObjectsList;
 80098f6:	4b1b      	ldr	r3, [pc, #108]	; (8009964 <timersHandler+0x74>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	607b      	str	r3, [r7, #4]

	while(temp != 0)
 80098fc:	e029      	b.n	8009952 <timersHandler+0x62>
	{
		if(temp->timerHandler->start)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	7a1b      	ldrb	r3, [r3, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d021      	beq.n	800994c <timersHandler+0x5c>
		{
			temp->timerHandler->ticks++;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	3201      	adds	r2, #1
 8009910:	60da      	str	r2, [r3, #12]

			if(temp->timerHandler->ticks == temp->timerHandler->period)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d114      	bne.n	800994c <timersHandler+0x5c>
			{
//				((void (*)(void))temp->timerHandler->callback)(temp->timerHandler->param);
				temp->timerHandler->callback(temp->timerHandler->param);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	0018      	movs	r0, r3
 8009930:	4790      	blx	r2

				if(!temp->timerHandler->repeat)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	7a5b      	ldrb	r3, [r3, #9]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <timersHandler+0x54>
				{
					temp->timerHandler->start = 0;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2200      	movs	r2, #0
 8009942:	721a      	strb	r2, [r3, #8]
				}

				temp->timerHandler->ticks = 0;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2200      	movs	r2, #0
 800994a:	60da      	str	r2, [r3, #12]
			}
		}

		temp = temp->nextObject;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	607b      	str	r3, [r7, #4]
	while(temp != 0)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1d2      	bne.n	80098fe <timersHandler+0xe>
	}
}
 8009958:	46c0      	nop			; (mov r8, r8)
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	46bd      	mov	sp, r7
 800995e:	b002      	add	sp, #8
 8009960:	bd80      	pop	{r7, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	200006a8 	.word	0x200006a8

08009968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800996e:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <HAL_MspInit+0x5c>)
 8009970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009972:	4b14      	ldr	r3, [pc, #80]	; (80099c4 <HAL_MspInit+0x5c>)
 8009974:	2101      	movs	r1, #1
 8009976:	430a      	orrs	r2, r1
 8009978:	641a      	str	r2, [r3, #64]	; 0x40
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <HAL_MspInit+0x5c>)
 800997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997e:	2201      	movs	r2, #1
 8009980:	4013      	ands	r3, r2
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009986:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <HAL_MspInit+0x5c>)
 8009988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800998a:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <HAL_MspInit+0x5c>)
 800998c:	2180      	movs	r1, #128	; 0x80
 800998e:	0549      	lsls	r1, r1, #21
 8009990:	430a      	orrs	r2, r1
 8009992:	63da      	str	r2, [r3, #60]	; 0x3c
 8009994:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <HAL_MspInit+0x5c>)
 8009996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009998:	2380      	movs	r3, #128	; 0x80
 800999a:	055b      	lsls	r3, r3, #21
 800999c:	4013      	ands	r3, r2
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80099a2:	2302      	movs	r3, #2
 80099a4:	425b      	negs	r3, r3
 80099a6:	2200      	movs	r2, #0
 80099a8:	2103      	movs	r1, #3
 80099aa:	0018      	movs	r0, r3
 80099ac:	f000 fada 	bl	8009f64 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80099b0:	23c0      	movs	r3, #192	; 0xc0
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	0018      	movs	r0, r3
 80099b6:	f000 fa03 	bl	8009dc0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80099ba:	46c0      	nop			; (mov r8, r8)
 80099bc:	46bd      	mov	sp, r7
 80099be:	b002      	add	sp, #8
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	40021000 	.word	0x40021000

080099c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08a      	sub	sp, #40	; 0x28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	0019      	movs	r1, r3
 80099de:	200d      	movs	r0, #13
 80099e0:	f000 fac0 	bl	8009f64 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80099e4:	200d      	movs	r0, #13
 80099e6:	f000 fad2 	bl	8009f8e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80099ea:	4b21      	ldr	r3, [pc, #132]	; (8009a70 <HAL_InitTick+0xa8>)
 80099ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099ee:	4b20      	ldr	r3, [pc, #128]	; (8009a70 <HAL_InitTick+0xa8>)
 80099f0:	2180      	movs	r1, #128	; 0x80
 80099f2:	0109      	lsls	r1, r1, #4
 80099f4:	430a      	orrs	r2, r1
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40
 80099f8:	4b1d      	ldr	r3, [pc, #116]	; (8009a70 <HAL_InitTick+0xa8>)
 80099fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099fc:	2380      	movs	r3, #128	; 0x80
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	4013      	ands	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
 8009a04:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009a06:	230c      	movs	r3, #12
 8009a08:	18fa      	adds	r2, r7, r3
 8009a0a:	2310      	movs	r3, #16
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	0011      	movs	r1, r2
 8009a10:	0018      	movs	r0, r3
 8009a12:	f002 f903 	bl	800bc1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009a16:	f002 f8eb 	bl	800bbf0 <HAL_RCC_GetPCLK1Freq>
 8009a1a:	0003      	movs	r3, r0
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	4914      	ldr	r1, [pc, #80]	; (8009a74 <HAL_InitTick+0xac>)
 8009a22:	0018      	movs	r0, r3
 8009a24:	f7f6 fb82 	bl	800012c <__udivsi3>
 8009a28:	0003      	movs	r3, r0
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a30:	4a12      	ldr	r2, [pc, #72]	; (8009a7c <HAL_InitTick+0xb4>)
 8009a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8009a34:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a36:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <HAL_InitTick+0xb8>)
 8009a38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a3c:	6a3a      	ldr	r2, [r7, #32]
 8009a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8009a40:	4b0d      	ldr	r3, [pc, #52]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a46:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f002 fb4a 	bl	800c0e8 <HAL_TIM_Base_Init>
 8009a54:	1e03      	subs	r3, r0, #0
 8009a56:	d105      	bne.n	8009a64 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <HAL_InitTick+0xb0>)
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f002 fb9c 	bl	800c198 <HAL_TIM_Base_Start_IT>
 8009a60:	0003      	movs	r3, r0
 8009a62:	e000      	b.n	8009a66 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
}
 8009a66:	0018      	movs	r0, r3
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	b00a      	add	sp, #40	; 0x28
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	40021000 	.word	0x40021000
 8009a74:	000f4240 	.word	0x000f4240
 8009a78:	2000553c 	.word	0x2000553c
 8009a7c:	40012c00 	.word	0x40012c00
 8009a80:	000003e7 	.word	0x000003e7

08009a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009a88:	e7fe      	b.n	8009a88 <NMI_Handler+0x4>

08009a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009a8e:	e7fe      	b.n	8009a8e <HardFault_Handler+0x4>

08009a90 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009a94:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8009a96:	0018      	movs	r0, r3
 8009a98:	f002 fc0e 	bl	800c2b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8009a9c:	46c0      	nop			; (mov r8, r8)
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	2000553c 	.word	0x2000553c

08009aa8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8009aac:	4b03      	ldr	r3, [pc, #12]	; (8009abc <TIM14_IRQHandler+0x14>)
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f002 fc02 	bl	800c2b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8009ab4:	46c0      	nop			; (mov r8, r8)
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	20005588 	.word	0x20005588

08009ac0 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8009ac4:	4b05      	ldr	r3, [pc, #20]	; (8009adc <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f000 febc 	bl	800a844 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f000 feb8 	bl	800a844 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8009ad4:	46c0      	nop			; (mov r8, r8)
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	46c0      	nop			; (mov r8, r8)
 8009adc:	20005464 	.word	0x20005464
 8009ae0:	200054c8 	.word	0x200054c8

08009ae4 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 8009aea:	0018      	movs	r0, r3
 8009aec:	f000 feaa 	bl	800a844 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8009af0:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8009af2:	0018      	movs	r0, r3
 8009af4:	f000 fea6 	bl	800a844 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8009af8:	46c0      	nop			; (mov r8, r8)
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	20005464 	.word	0x20005464
 8009b04:	200054c8 	.word	0x200054c8

08009b08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e00a      	b.n	8009b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009b1a:	e000      	b.n	8009b1e <_read+0x16>
 8009b1c:	bf00      	nop
 8009b1e:	0001      	movs	r1, r0
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	60ba      	str	r2, [r7, #8]
 8009b26:	b2ca      	uxtb	r2, r1
 8009b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	dbf0      	blt.n	8009b1a <_read+0x12>
	}

return len;
 8009b38:	687b      	ldr	r3, [r7, #4]
}
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	b006      	add	sp, #24
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	e009      	b.n	8009b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	60ba      	str	r2, [r7, #8]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	e000      	b.n	8009b62 <_write+0x20>
 8009b60:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	3301      	adds	r3, #1
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	dbf1      	blt.n	8009b54 <_write+0x12>
	}
	return len;
 8009b70:	687b      	ldr	r3, [r7, #4]
}
 8009b72:	0018      	movs	r0, r3
 8009b74:	46bd      	mov	sp, r7
 8009b76:	b006      	add	sp, #24
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <_close>:

int _close(int file)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
	return -1;
 8009b82:	2301      	movs	r3, #1
 8009b84:	425b      	negs	r3, r3
}
 8009b86:	0018      	movs	r0, r3
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	b002      	add	sp, #8
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2280      	movs	r2, #128	; 0x80
 8009b9c:	0192      	lsls	r2, r2, #6
 8009b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	b002      	add	sp, #8
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <_isatty>:

int _isatty(int file)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8009bb2:	2301      	movs	r3, #1
}
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	b002      	add	sp, #8
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	0018      	movs	r0, r3
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	b004      	add	sp, #16
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009bdc:	4a14      	ldr	r2, [pc, #80]	; (8009c30 <_sbrk+0x5c>)
 8009bde:	4b15      	ldr	r3, [pc, #84]	; (8009c34 <_sbrk+0x60>)
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009be8:	4b13      	ldr	r3, [pc, #76]	; (8009c38 <_sbrk+0x64>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009bf0:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <_sbrk+0x64>)
 8009bf2:	4a12      	ldr	r2, [pc, #72]	; (8009c3c <_sbrk+0x68>)
 8009bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009bf6:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <_sbrk+0x64>)
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	18d3      	adds	r3, r2, r3
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d207      	bcs.n	8009c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009c04:	f005 f83e 	bl	800ec84 <__errno>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	220c      	movs	r2, #12
 8009c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	425b      	negs	r3, r3
 8009c12:	e009      	b.n	8009c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <_sbrk+0x64>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <_sbrk+0x64>)
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	18d2      	adds	r2, r2, r3
 8009c22:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <_sbrk+0x64>)
 8009c24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009c26:	68fb      	ldr	r3, [r7, #12]
}
 8009c28:	0018      	movs	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	b006      	add	sp, #24
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20024000 	.word	0x20024000
 8009c34:	00000400 	.word	0x00000400
 8009c38:	200006ac 	.word	0x200006ac
 8009c3c:	20005628 	.word	0x20005628

08009c40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009c44:	4b03      	ldr	r3, [pc, #12]	; (8009c54 <SystemInit+0x14>)
 8009c46:	2280      	movs	r2, #128	; 0x80
 8009c48:	0512      	lsls	r2, r2, #20
 8009c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8009c4c:	46c0      	nop			; (mov r8, r8)
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	e000ed00 	.word	0xe000ed00

08009c58 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c5e:	4a0f      	ldr	r2, [pc, #60]	; (8009c9c <MX_TIM14_Init+0x44>)
 8009c60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c64:	223f      	movs	r2, #63	; 0x3f
 8009c66:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c68:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c70:	4a0b      	ldr	r2, [pc, #44]	; (8009ca0 <MX_TIM14_Init+0x48>)
 8009c72:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c74:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c7c:	2280      	movs	r2, #128	; 0x80
 8009c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <MX_TIM14_Init+0x40>)
 8009c82:	0018      	movs	r0, r3
 8009c84:	f002 fa30 	bl	800c0e8 <HAL_TIM_Base_Init>
 8009c88:	1e03      	subs	r3, r0, #0
 8009c8a:	d001      	beq.n	8009c90 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8009c8c:	f7ff fd82 	bl	8009794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8009c90:	46c0      	nop			; (mov r8, r8)
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	20005588 	.word	0x20005588
 8009c9c:	40002000 	.word	0x40002000
 8009ca0:	000003e7 	.word	0x000003e7

08009ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a0e      	ldr	r2, [pc, #56]	; (8009cec <HAL_TIM_Base_MspInit+0x48>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d115      	bne.n	8009ce2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009cb6:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8009cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8009cbc:	2180      	movs	r1, #128	; 0x80
 8009cbe:	0209      	lsls	r1, r1, #8
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8009cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	021b      	lsls	r3, r3, #8
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2103      	movs	r1, #3
 8009cd6:	2013      	movs	r0, #19
 8009cd8:	f000 f944 	bl	8009f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8009cdc:	2013      	movs	r0, #19
 8009cde:	f000 f956 	bl	8009f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8009ce2:	46c0      	nop			; (mov r8, r8)
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b004      	add	sp, #16
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	46c0      	nop			; (mov r8, r8)
 8009cec:	40002000 	.word	0x40002000
 8009cf0:	40021000 	.word	0x40021000

08009cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009cf4:	480d      	ldr	r0, [pc, #52]	; (8009d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009cf6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009cf8:	f7ff ffa2 	bl	8009c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009cfc:	480c      	ldr	r0, [pc, #48]	; (8009d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8009cfe:	490d      	ldr	r1, [pc, #52]	; (8009d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009d00:	4a0d      	ldr	r2, [pc, #52]	; (8009d38 <LoopForever+0xe>)
  movs r3, #0
 8009d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009d04:	e002      	b.n	8009d0c <LoopCopyDataInit>

08009d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009d0a:	3304      	adds	r3, #4

08009d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009d10:	d3f9      	bcc.n	8009d06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009d12:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009d14:	4c0a      	ldr	r4, [pc, #40]	; (8009d40 <LoopForever+0x16>)
  movs r3, #0
 8009d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009d18:	e001      	b.n	8009d1e <LoopFillZerobss>

08009d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009d1c:	3204      	adds	r2, #4

08009d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009d20:	d3fb      	bcc.n	8009d1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009d22:	f005 f999 	bl	800f058 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009d26:	f7ff fc8d 	bl	8009644 <main>

08009d2a <LoopForever>:

LoopForever:
  b LoopForever
 8009d2a:	e7fe      	b.n	8009d2a <LoopForever>
  ldr   r0, =_estack
 8009d2c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8009d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009d34:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 8009d38:	080107d0 	.word	0x080107d0
  ldr r2, =_sbss
 8009d3c:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 8009d40:	20005628 	.word	0x20005628

08009d44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009d44:	e7fe      	b.n	8009d44 <ADC1_COMP_IRQHandler>
	...

08009d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009d4e:	1dfb      	adds	r3, r7, #7
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d54:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <HAL_Init+0x3c>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <HAL_Init+0x3c>)
 8009d5a:	2180      	movs	r1, #128	; 0x80
 8009d5c:	0049      	lsls	r1, r1, #1
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d62:	2000      	movs	r0, #0
 8009d64:	f7ff fe30 	bl	80099c8 <HAL_InitTick>
 8009d68:	1e03      	subs	r3, r0, #0
 8009d6a:	d003      	beq.n	8009d74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009d6c:	1dfb      	adds	r3, r7, #7
 8009d6e:	2201      	movs	r2, #1
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	e001      	b.n	8009d78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009d74:	f7ff fdf8 	bl	8009968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009d78:	1dfb      	adds	r3, r7, #7
 8009d7a:	781b      	ldrb	r3, [r3, #0]
}
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	b002      	add	sp, #8
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	40022000 	.word	0x40022000

08009d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009d8c:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <HAL_IncTick+0x1c>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	001a      	movs	r2, r3
 8009d92:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <HAL_IncTick+0x20>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	18d2      	adds	r2, r2, r3
 8009d98:	4b03      	ldr	r3, [pc, #12]	; (8009da8 <HAL_IncTick+0x20>)
 8009d9a:	601a      	str	r2, [r3, #0]
}
 8009d9c:	46c0      	nop			; (mov r8, r8)
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	20000484 	.word	0x20000484
 8009da8:	200055d4 	.word	0x200055d4

08009dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	af00      	add	r7, sp, #0
  return uwTick;
 8009db0:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <HAL_GetTick+0x10>)
 8009db2:	681b      	ldr	r3, [r3, #0]
}
 8009db4:	0018      	movs	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	200055d4 	.word	0x200055d4

08009dc0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009dc8:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a06      	ldr	r2, [pc, #24]	; (8009de8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	0019      	movs	r1, r3
 8009dd2:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	b002      	add	sp, #8
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	46c0      	nop			; (mov r8, r8)
 8009de4:	40010000 	.word	0x40010000
 8009de8:	fffff9ff 	.word	0xfffff9ff

08009dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	0002      	movs	r2, r0
 8009df4:	1dfb      	adds	r3, r7, #7
 8009df6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009df8:	1dfb      	adds	r3, r7, #7
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8009dfe:	d809      	bhi.n	8009e14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e00:	1dfb      	adds	r3, r7, #7
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	001a      	movs	r2, r3
 8009e06:	231f      	movs	r3, #31
 8009e08:	401a      	ands	r2, r3
 8009e0a:	4b04      	ldr	r3, [pc, #16]	; (8009e1c <__NVIC_EnableIRQ+0x30>)
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4091      	lsls	r1, r2
 8009e10:	000a      	movs	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8009e14:	46c0      	nop			; (mov r8, r8)
 8009e16:	46bd      	mov	sp, r7
 8009e18:	b002      	add	sp, #8
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	e000e100 	.word	0xe000e100

08009e20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	0002      	movs	r2, r0
 8009e28:	1dfb      	adds	r3, r7, #7
 8009e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009e2c:	1dfb      	adds	r3, r7, #7
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b7f      	cmp	r3, #127	; 0x7f
 8009e32:	d810      	bhi.n	8009e56 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e34:	1dfb      	adds	r3, r7, #7
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	001a      	movs	r2, r3
 8009e3a:	231f      	movs	r3, #31
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	4908      	ldr	r1, [pc, #32]	; (8009e60 <__NVIC_DisableIRQ+0x40>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	409a      	lsls	r2, r3
 8009e44:	0013      	movs	r3, r2
 8009e46:	2280      	movs	r2, #128	; 0x80
 8009e48:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009e4a:	f3bf 8f4f 	dsb	sy
}
 8009e4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009e50:	f3bf 8f6f 	isb	sy
}
 8009e54:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b002      	add	sp, #8
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	e000e100 	.word	0xe000e100

08009e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	0002      	movs	r2, r0
 8009e6c:	6039      	str	r1, [r7, #0]
 8009e6e:	1dfb      	adds	r3, r7, #7
 8009e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009e72:	1dfb      	adds	r3, r7, #7
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b7f      	cmp	r3, #127	; 0x7f
 8009e78:	d828      	bhi.n	8009ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e7a:	4a2f      	ldr	r2, [pc, #188]	; (8009f38 <__NVIC_SetPriority+0xd4>)
 8009e7c:	1dfb      	adds	r3, r7, #7
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	b25b      	sxtb	r3, r3
 8009e82:	089b      	lsrs	r3, r3, #2
 8009e84:	33c0      	adds	r3, #192	; 0xc0
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	589b      	ldr	r3, [r3, r2]
 8009e8a:	1dfa      	adds	r2, r7, #7
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	0011      	movs	r1, r2
 8009e90:	2203      	movs	r2, #3
 8009e92:	400a      	ands	r2, r1
 8009e94:	00d2      	lsls	r2, r2, #3
 8009e96:	21ff      	movs	r1, #255	; 0xff
 8009e98:	4091      	lsls	r1, r2
 8009e9a:	000a      	movs	r2, r1
 8009e9c:	43d2      	mvns	r2, r2
 8009e9e:	401a      	ands	r2, r3
 8009ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	019b      	lsls	r3, r3, #6
 8009ea6:	22ff      	movs	r2, #255	; 0xff
 8009ea8:	401a      	ands	r2, r3
 8009eaa:	1dfb      	adds	r3, r7, #7
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	0018      	movs	r0, r3
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	4003      	ands	r3, r0
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009eb8:	481f      	ldr	r0, [pc, #124]	; (8009f38 <__NVIC_SetPriority+0xd4>)
 8009eba:	1dfb      	adds	r3, r7, #7
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b25b      	sxtb	r3, r3
 8009ec0:	089b      	lsrs	r3, r3, #2
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	33c0      	adds	r3, #192	; 0xc0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009eca:	e031      	b.n	8009f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ecc:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <__NVIC_SetPriority+0xd8>)
 8009ece:	1dfb      	adds	r3, r7, #7
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	0019      	movs	r1, r3
 8009ed4:	230f      	movs	r3, #15
 8009ed6:	400b      	ands	r3, r1
 8009ed8:	3b08      	subs	r3, #8
 8009eda:	089b      	lsrs	r3, r3, #2
 8009edc:	3306      	adds	r3, #6
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	18d3      	adds	r3, r2, r3
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	1dfa      	adds	r2, r7, #7
 8009ee8:	7812      	ldrb	r2, [r2, #0]
 8009eea:	0011      	movs	r1, r2
 8009eec:	2203      	movs	r2, #3
 8009eee:	400a      	ands	r2, r1
 8009ef0:	00d2      	lsls	r2, r2, #3
 8009ef2:	21ff      	movs	r1, #255	; 0xff
 8009ef4:	4091      	lsls	r1, r2
 8009ef6:	000a      	movs	r2, r1
 8009ef8:	43d2      	mvns	r2, r2
 8009efa:	401a      	ands	r2, r3
 8009efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	019b      	lsls	r3, r3, #6
 8009f02:	22ff      	movs	r2, #255	; 0xff
 8009f04:	401a      	ands	r2, r3
 8009f06:	1dfb      	adds	r3, r7, #7
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	4003      	ands	r3, r0
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f14:	4809      	ldr	r0, [pc, #36]	; (8009f3c <__NVIC_SetPriority+0xd8>)
 8009f16:	1dfb      	adds	r3, r7, #7
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	001c      	movs	r4, r3
 8009f1c:	230f      	movs	r3, #15
 8009f1e:	4023      	ands	r3, r4
 8009f20:	3b08      	subs	r3, #8
 8009f22:	089b      	lsrs	r3, r3, #2
 8009f24:	430a      	orrs	r2, r1
 8009f26:	3306      	adds	r3, #6
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18c3      	adds	r3, r0, r3
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	601a      	str	r2, [r3, #0]
}
 8009f30:	46c0      	nop			; (mov r8, r8)
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b003      	add	sp, #12
 8009f36:	bd90      	pop	{r4, r7, pc}
 8009f38:	e000e100 	.word	0xe000e100
 8009f3c:	e000ed00 	.word	0xe000ed00

08009f40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009f44:	f3bf 8f4f 	dsb	sy
}
 8009f48:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f4a:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <__NVIC_SystemReset+0x1c>)
 8009f4c:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <__NVIC_SystemReset+0x20>)
 8009f4e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f50:	f3bf 8f4f 	dsb	sy
}
 8009f54:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	e7fd      	b.n	8009f56 <__NVIC_SystemReset+0x16>
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	e000ed00 	.word	0xe000ed00
 8009f60:	05fa0004 	.word	0x05fa0004

08009f64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
 8009f6e:	210f      	movs	r1, #15
 8009f70:	187b      	adds	r3, r7, r1
 8009f72:	1c02      	adds	r2, r0, #0
 8009f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	187b      	adds	r3, r7, r1
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	b25b      	sxtb	r3, r3
 8009f7e:	0011      	movs	r1, r2
 8009f80:	0018      	movs	r0, r3
 8009f82:	f7ff ff6f 	bl	8009e64 <__NVIC_SetPriority>
}
 8009f86:	46c0      	nop			; (mov r8, r8)
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b004      	add	sp, #16
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	0002      	movs	r2, r0
 8009f96:	1dfb      	adds	r3, r7, #7
 8009f98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f9a:	1dfb      	adds	r3, r7, #7
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b25b      	sxtb	r3, r3
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f7ff ff23 	bl	8009dec <__NVIC_EnableIRQ>
}
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	b002      	add	sp, #8
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	0002      	movs	r2, r0
 8009fb6:	1dfb      	adds	r3, r7, #7
 8009fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009fba:	1dfb      	adds	r3, r7, #7
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b25b      	sxtb	r3, r3
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f7ff ff2d 	bl	8009e20 <__NVIC_DisableIRQ>
}
 8009fc6:	46c0      	nop			; (mov r8, r8)
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	b002      	add	sp, #8
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009fd2:	f7ff ffb5 	bl	8009f40 <__NVIC_SystemReset>
	...

08009fd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e14e      	b.n	800a288 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	225c      	movs	r2, #92	; 0x5c
 8009fee:	5c9b      	ldrb	r3, [r3, r2]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d107      	bne.n	800a006 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	225d      	movs	r2, #93	; 0x5d
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	0018      	movs	r0, r3
 800a002:	f7ff f8db 	bl	80091bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	699a      	ldr	r2, [r3, #24]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2110      	movs	r1, #16
 800a012:	438a      	bics	r2, r1
 800a014:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a016:	f7ff fec9 	bl	8009dac <HAL_GetTick>
 800a01a:	0003      	movs	r3, r0
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a01e:	e012      	b.n	800a046 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a020:	f7ff fec4 	bl	8009dac <HAL_GetTick>
 800a024:	0002      	movs	r2, r0
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	2b0a      	cmp	r3, #10
 800a02c:	d90b      	bls.n	800a046 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a032:	2201      	movs	r2, #1
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	225c      	movs	r2, #92	; 0x5c
 800a03e:	2103      	movs	r1, #3
 800a040:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e120      	b.n	800a288 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	2208      	movs	r2, #8
 800a04e:	4013      	ands	r3, r2
 800a050:	2b08      	cmp	r3, #8
 800a052:	d0e5      	beq.n	800a020 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2101      	movs	r1, #1
 800a060:	430a      	orrs	r2, r1
 800a062:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a064:	f7ff fea2 	bl	8009dac <HAL_GetTick>
 800a068:	0003      	movs	r3, r0
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a06c:	e012      	b.n	800a094 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a06e:	f7ff fe9d 	bl	8009dac <HAL_GetTick>
 800a072:	0002      	movs	r2, r0
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	2b0a      	cmp	r3, #10
 800a07a:	d90b      	bls.n	800a094 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a080:	2201      	movs	r2, #1
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	225c      	movs	r2, #92	; 0x5c
 800a08c:	2103      	movs	r1, #3
 800a08e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e0f9      	b.n	800a288 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	2201      	movs	r2, #1
 800a09c:	4013      	ands	r3, r2
 800a09e:	d0e6      	beq.n	800a06e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2102      	movs	r1, #2
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a76      	ldr	r2, [pc, #472]	; (800a290 <HAL_FDCAN_Init+0x2b8>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d103      	bne.n	800a0c2 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800a0ba:	4a76      	ldr	r2, [pc, #472]	; (800a294 <HAL_FDCAN_Init+0x2bc>)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	7c1b      	ldrb	r3, [r3, #16]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d108      	bne.n	800a0dc <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2140      	movs	r1, #64	; 0x40
 800a0d6:	438a      	bics	r2, r1
 800a0d8:	619a      	str	r2, [r3, #24]
 800a0da:	e007      	b.n	800a0ec <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2140      	movs	r1, #64	; 0x40
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7c5b      	ldrb	r3, [r3, #17]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d109      	bne.n	800a108 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699a      	ldr	r2, [r3, #24]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	01c9      	lsls	r1, r1, #7
 800a102:	430a      	orrs	r2, r1
 800a104:	619a      	str	r2, [r3, #24]
 800a106:	e007      	b.n	800a118 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4961      	ldr	r1, [pc, #388]	; (800a298 <HAL_FDCAN_Init+0x2c0>)
 800a114:	400a      	ands	r2, r1
 800a116:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	7c9b      	ldrb	r3, [r3, #18]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d108      	bne.n	800a132 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699a      	ldr	r2, [r3, #24]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	495c      	ldr	r1, [pc, #368]	; (800a29c <HAL_FDCAN_Init+0x2c4>)
 800a12c:	400a      	ands	r2, r1
 800a12e:	619a      	str	r2, [r3, #24]
 800a130:	e008      	b.n	800a144 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	699a      	ldr	r2, [r3, #24]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2180      	movs	r1, #128	; 0x80
 800a13e:	0149      	lsls	r1, r1, #5
 800a140:	430a      	orrs	r2, r1
 800a142:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	4a55      	ldr	r2, [pc, #340]	; (800a2a0 <HAL_FDCAN_Init+0x2c8>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	0019      	movs	r1, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	689a      	ldr	r2, [r3, #8]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	21a4      	movs	r1, #164	; 0xa4
 800a168:	438a      	bics	r2, r1
 800a16a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2110      	movs	r1, #16
 800a178:	438a      	bics	r2, r1
 800a17a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d108      	bne.n	800a196 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	699a      	ldr	r2, [r3, #24]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2104      	movs	r1, #4
 800a190:	430a      	orrs	r2, r1
 800a192:	619a      	str	r2, [r3, #24]
 800a194:	e02c      	b.n	800a1f0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d028      	beq.n	800a1f0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d01c      	beq.n	800a1e0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	699a      	ldr	r2, [r3, #24]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2180      	movs	r1, #128	; 0x80
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2110      	movs	r1, #16
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d110      	bne.n	800a1f0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	699a      	ldr	r2, [r3, #24]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2120      	movs	r1, #32
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	619a      	str	r2, [r3, #24]
 800a1de:	e007      	b.n	800a1f0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699a      	ldr	r2, [r3, #24]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2120      	movs	r1, #32
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a200:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a208:	431a      	orrs	r2, r3
 800a20a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	3b01      	subs	r3, #1
 800a212:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a218:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a21a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	23c0      	movs	r3, #192	; 0xc0
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	429a      	cmp	r2, r3
 800a226:	d115      	bne.n	800a254 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	3b01      	subs	r3, #1
 800a234:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a236:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23c:	3b01      	subs	r3, #1
 800a23e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a240:	431a      	orrs	r2, r3
 800a242:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	3b01      	subs	r3, #1
 800a24a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a250:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a252:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	22c0      	movs	r2, #192	; 0xc0
 800a25a:	5899      	ldr	r1, [r3, r2]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	21c0      	movs	r1, #192	; 0xc0
 800a268:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	0018      	movs	r0, r3
 800a26e:	f000 fc75 	bl	800ab5c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	225c      	movs	r2, #92	; 0x5c
 800a282:	2101      	movs	r1, #1
 800a284:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	0018      	movs	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b004      	add	sp, #16
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	40006400 	.word	0x40006400
 800a294:	40006500 	.word	0x40006500
 800a298:	ffffbfff 	.word	0xffffbfff
 800a29c:	ffffefff 	.word	0xffffefff
 800a2a0:	fffffcff 	.word	0xfffffcff

0800a2a4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	225c      	movs	r2, #92	; 0x5c
 800a2b6:	5c9b      	ldrb	r3, [r3, r2]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d117      	bne.n	800a2ee <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2280      	movs	r2, #128	; 0x80
 800a2c4:	589b      	ldr	r3, [r3, r2]
 800a2c6:	223f      	movs	r2, #63	; 0x3f
 800a2c8:	4393      	bics	r3, r2
 800a2ca:	0019      	movs	r1, r3
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	011a      	lsls	r2, r3, #4
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	505a      	str	r2, [r3, r1]
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e006      	b.n	800a2fc <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
  }
}
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	46bd      	mov	sp, r7
 800a300:	b004      	add	sp, #16
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	225c      	movs	r2, #92	; 0x5c
 800a310:	5c9b      	ldrb	r3, [r3, r2]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b01      	cmp	r3, #1
 800a316:	d110      	bne.n	800a33a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	225c      	movs	r2, #92	; 0x5c
 800a31c:	2102      	movs	r1, #2
 800a31e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	699a      	ldr	r2, [r3, #24]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2101      	movs	r1, #1
 800a32c:	438a      	bics	r2, r1
 800a32e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	e006      	b.n	800a348 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a33e:	2204      	movs	r2, #4
 800a340:	431a      	orrs	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
  }
}
 800a348:	0018      	movs	r0, r3
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b002      	add	sp, #8
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	225c      	movs	r2, #92	; 0x5c
 800a360:	5c9b      	ldrb	r3, [r3, r2]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d155      	bne.n	800a414 <HAL_FDCAN_Stop+0xc4>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2101      	movs	r1, #1
 800a374:	430a      	orrs	r2, r1
 800a376:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a378:	e011      	b.n	800a39e <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b0a      	cmp	r3, #10
 800a37e:	d90b      	bls.n	800a398 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a384:	2201      	movs	r2, #1
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	225c      	movs	r2, #92	; 0x5c
 800a390:	2103      	movs	r1, #3
 800a392:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e044      	b.n	800a422 <HAL_FDCAN_Stop+0xd2>
      }

      /* Increment counter */
      Counter++;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	d0e7      	beq.n	800a37a <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2110      	movs	r1, #16
 800a3ba:	438a      	bics	r2, r1
 800a3bc:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a3be:	e011      	b.n	800a3e4 <HAL_FDCAN_Stop+0x94>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b0a      	cmp	r3, #10
 800a3c4:	d90b      	bls.n	800a3de <HAL_FDCAN_Stop+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	225c      	movs	r2, #92	; 0x5c
 800a3d6:	2103      	movs	r1, #3
 800a3d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e021      	b.n	800a422 <HAL_FDCAN_Stop+0xd2>
      }

      /* Increment counter */
      Counter++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	2208      	movs	r2, #8
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	2b08      	cmp	r3, #8
 800a3f0:	d0e6      	beq.n	800a3c0 <HAL_FDCAN_Stop+0x70>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2102      	movs	r1, #2
 800a3fe:	430a      	orrs	r2, r1
 800a400:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	225c      	movs	r2, #92	; 0x5c
 800a40c:	2101      	movs	r1, #1
 800a40e:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e006      	b.n	800a422 <HAL_FDCAN_Stop+0xd2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a418:	2208      	movs	r2, #8
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
  }
}
 800a422:	0018      	movs	r0, r3
 800a424:	46bd      	mov	sp, r7
 800a426:	b004      	add	sp, #16
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	225c      	movs	r2, #92	; 0x5c
 800a43a:	5c9b      	ldrb	r3, [r3, r2]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d12d      	bne.n	800a49e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	22c4      	movs	r2, #196	; 0xc4
 800a448:	589a      	ldr	r2, [r3, r2]
 800a44a:	2380      	movs	r3, #128	; 0x80
 800a44c:	039b      	lsls	r3, r3, #14
 800a44e:	4013      	ands	r3, r2
 800a450:	d008      	beq.n	800a464 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a456:	2280      	movs	r2, #128	; 0x80
 800a458:	0092      	lsls	r2, r2, #2
 800a45a:	431a      	orrs	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e023      	b.n	800a4ac <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	22c4      	movs	r2, #196	; 0xc4
 800a46a:	589b      	ldr	r3, [r3, r2]
 800a46c:	0c1b      	lsrs	r3, r3, #16
 800a46e:	2203      	movs	r2, #3
 800a470:	4013      	ands	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fbda 	bl	800ac34 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2101      	movs	r1, #1
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4091      	lsls	r1, r2
 800a48a:	000a      	movs	r2, r1
 800a48c:	21cc      	movs	r1, #204	; 0xcc
 800a48e:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800a490:	2201      	movs	r2, #1
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	409a      	lsls	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	e006      	b.n	800a4ac <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
  }
}
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b006      	add	sp, #24
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08a      	sub	sp, #40	; 0x28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a4c2:	201b      	movs	r0, #27
 800a4c4:	183b      	adds	r3, r7, r0
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	215c      	movs	r1, #92	; 0x5c
 800a4ca:	5c52      	ldrb	r2, [r2, r1]
 800a4cc:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800a4ce:	183b      	adds	r3, r7, r0
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d000      	beq.n	800a4d8 <HAL_FDCAN_GetRxMessage+0x24>
 800a4d6:	e0c1      	b.n	800a65c <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	d121      	bne.n	800a522 <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2290      	movs	r2, #144	; 0x90
 800a4e4:	589b      	ldr	r3, [r3, r2]
 800a4e6:	220f      	movs	r2, #15
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	d108      	bne.n	800a4fe <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f0:	2280      	movs	r2, #128	; 0x80
 800a4f2:	0052      	lsls	r2, r2, #1
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e0b5      	b.n	800a66a <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2290      	movs	r2, #144	; 0x90
 800a504:	589b      	ldr	r3, [r3, r2]
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	2203      	movs	r2, #3
 800a50a:	4013      	ands	r3, r2
 800a50c:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a512:	69fa      	ldr	r2, [r7, #28]
 800a514:	0013      	movs	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	18cb      	adds	r3, r1, r3
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
 800a520:	e020      	b.n	800a564 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2298      	movs	r2, #152	; 0x98
 800a528:	589b      	ldr	r3, [r3, r2]
 800a52a:	220f      	movs	r2, #15
 800a52c:	4013      	ands	r3, r2
 800a52e:	d108      	bne.n	800a542 <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a534:	2280      	movs	r2, #128	; 0x80
 800a536:	0052      	lsls	r2, r2, #1
 800a538:	431a      	orrs	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e093      	b.n	800a66a <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2298      	movs	r2, #152	; 0x98
 800a548:	589b      	ldr	r3, [r3, r2]
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	2203      	movs	r2, #3
 800a54e:	4013      	ands	r3, r2
 800a550:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	0013      	movs	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	189b      	adds	r3, r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	18cb      	adds	r3, r1, r3
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	2380      	movs	r3, #128	; 0x80
 800a56a:	05db      	lsls	r3, r3, #23
 800a56c:	401a      	ands	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d107      	bne.n	800a58a <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	0c9b      	lsrs	r3, r3, #18
 800a580:	055b      	lsls	r3, r3, #21
 800a582:	0d5a      	lsrs	r2, r3, #21
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e005      	b.n	800a596 <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	08da      	lsrs	r2, r3, #3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	059b      	lsls	r3, r3, #22
 800a59e:	401a      	ands	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	0fdb      	lsrs	r3, r3, #31
 800a5aa:	07da      	lsls	r2, r3, #31
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	0c1a      	lsrs	r2, r3, #16
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	23f0      	movs	r3, #240	; 0xf0
 800a5c8:	031b      	lsls	r3, r3, #12
 800a5ca:	401a      	ands	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	2380      	movs	r3, #128	; 0x80
 800a5d6:	035b      	lsls	r3, r3, #13
 800a5d8:	401a      	ands	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	2380      	movs	r3, #128	; 0x80
 800a5e4:	039b      	lsls	r3, r3, #14
 800a5e6:	401a      	ands	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	0e1b      	lsrs	r3, r3, #24
 800a5f2:	227f      	movs	r2, #127	; 0x7f
 800a5f4:	401a      	ands	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	0fda      	lsrs	r2, r3, #31
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	3304      	adds	r3, #4
 800a608:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800a60e:	2300      	movs	r3, #0
 800a610:	623b      	str	r3, [r7, #32]
 800a612:	e00a      	b.n	800a62a <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	18d2      	adds	r2, r2, r3
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	18cb      	adds	r3, r1, r3
 800a620:	7812      	ldrb	r2, [r2, #0]
 800a622:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	3301      	adds	r3, #1
 800a628:	623b      	str	r3, [r7, #32]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	4a10      	ldr	r2, [pc, #64]	; (800a674 <HAL_FDCAN_GetRxMessage+0x1c0>)
 800a632:	5cd3      	ldrb	r3, [r2, r3]
 800a634:	001a      	movs	r2, r3
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	4293      	cmp	r3, r2
 800a63a:	d3eb      	bcc.n	800a614 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b40      	cmp	r3, #64	; 0x40
 800a640:	d105      	bne.n	800a64e <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2194      	movs	r1, #148	; 0x94
 800a648:	69fa      	ldr	r2, [r7, #28]
 800a64a:	505a      	str	r2, [r3, r1]
 800a64c:	e004      	b.n	800a658 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	219c      	movs	r1, #156	; 0x9c
 800a654:	69fa      	ldr	r2, [r7, #28]
 800a656:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	e006      	b.n	800a66a <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a660:	2208      	movs	r2, #8
 800a662:	431a      	orrs	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
  }
}
 800a66a:	0018      	movs	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	b00a      	add	sp, #40	; 0x28
 800a670:	bd80      	pop	{r7, pc}
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	080106f8 	.word	0x080106f8

0800a678 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	22c4      	movs	r2, #196	; 0xc4
 800a686:	589b      	ldr	r3, [r3, r2]
 800a688:	2207      	movs	r2, #7
 800a68a:	4013      	ands	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800a68e:	68fb      	ldr	r3, [r7, #12]
}
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	b004      	add	sp, #16
 800a696:	bd80      	pop	{r7, pc}

0800a698 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a6a4:	2017      	movs	r0, #23
 800a6a6:	183b      	adds	r3, r7, r0
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	215c      	movs	r1, #92	; 0x5c
 800a6ac:	5c52      	ldrb	r2, [r2, r1]
 800a6ae:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a6b0:	0002      	movs	r2, r0
 800a6b2:	18bb      	adds	r3, r7, r2
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d004      	beq.n	800a6c4 <HAL_FDCAN_ActivateNotification+0x2c>
 800a6ba:	18bb      	adds	r3, r7, r2
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d000      	beq.n	800a6c4 <HAL_FDCAN_ActivateNotification+0x2c>
 800a6c2:	e0b4      	b.n	800a82e <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ca:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2207      	movs	r2, #7
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d003      	beq.n	800a6dc <HAL_FDCAN_ActivateNotification+0x44>
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	4013      	ands	r3, r2
 800a6da:	d034      	beq.n	800a746 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2238      	movs	r2, #56	; 0x38
 800a6e0:	4013      	ands	r3, r2
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800a6e2:	d003      	beq.n	800a6ec <HAL_FDCAN_ActivateNotification+0x54>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	d02c      	beq.n	800a746 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	23e0      	movs	r3, #224	; 0xe0
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800a6f4:	d003      	beq.n	800a6fe <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	d023      	beq.n	800a746 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	23f0      	movs	r3, #240	; 0xf0
 800a702:	015b      	lsls	r3, r3, #5
 800a704:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800a706:	d003      	beq.n	800a710 <HAL_FDCAN_ActivateNotification+0x78>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2208      	movs	r2, #8
 800a70c:	4013      	ands	r3, r2
 800a70e:	d01a      	beq.n	800a746 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	23e0      	movs	r3, #224	; 0xe0
 800a714:	021b      	lsls	r3, r3, #8
 800a716:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800a718:	d003      	beq.n	800a722 <HAL_FDCAN_ActivateNotification+0x8a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2210      	movs	r2, #16
 800a71e:	4013      	ands	r3, r2
 800a720:	d011      	beq.n	800a746 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	23c0      	movs	r3, #192	; 0xc0
 800a726:	029b      	lsls	r3, r3, #10
 800a728:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800a72a:	d003      	beq.n	800a734 <HAL_FDCAN_ActivateNotification+0x9c>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2220      	movs	r2, #32
 800a730:	4013      	ands	r3, r2
 800a732:	d008      	beq.n	800a746 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	23fc      	movs	r3, #252	; 0xfc
 800a738:	041b      	lsls	r3, r3, #16
 800a73a:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800a73c:	d00b      	beq.n	800a756 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2240      	movs	r2, #64	; 0x40
 800a742:	4013      	ands	r3, r2
 800a744:	d107      	bne.n	800a756 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2101      	movs	r1, #1
 800a752:	430a      	orrs	r2, r1
 800a754:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2207      	movs	r2, #7
 800a75a:	4013      	ands	r3, r2
 800a75c:	d003      	beq.n	800a766 <HAL_FDCAN_ActivateNotification+0xce>
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2201      	movs	r2, #1
 800a762:	4013      	ands	r3, r2
 800a764:	d134      	bne.n	800a7d0 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2238      	movs	r2, #56	; 0x38
 800a76a:	4013      	ands	r3, r2
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800a76c:	d003      	beq.n	800a776 <HAL_FDCAN_ActivateNotification+0xde>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2202      	movs	r2, #2
 800a772:	4013      	ands	r3, r2
 800a774:	d12c      	bne.n	800a7d0 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	23e0      	movs	r3, #224	; 0xe0
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800a77e:	d003      	beq.n	800a788 <HAL_FDCAN_ActivateNotification+0xf0>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2204      	movs	r2, #4
 800a784:	4013      	ands	r3, r2
 800a786:	d123      	bne.n	800a7d0 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	23f0      	movs	r3, #240	; 0xf0
 800a78c:	015b      	lsls	r3, r3, #5
 800a78e:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800a790:	d003      	beq.n	800a79a <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2208      	movs	r2, #8
 800a796:	4013      	ands	r3, r2
 800a798:	d11a      	bne.n	800a7d0 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	23e0      	movs	r3, #224	; 0xe0
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800a7a2:	d003      	beq.n	800a7ac <HAL_FDCAN_ActivateNotification+0x114>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2210      	movs	r2, #16
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	d111      	bne.n	800a7d0 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	23c0      	movs	r3, #192	; 0xc0
 800a7b0:	029b      	lsls	r3, r3, #10
 800a7b2:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800a7b4:	d003      	beq.n	800a7be <HAL_FDCAN_ActivateNotification+0x126>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	d108      	bne.n	800a7d0 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	23fc      	movs	r3, #252	; 0xfc
 800a7c2:	041b      	lsls	r3, r3, #16
 800a7c4:	4013      	ands	r3, r2
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800a7c6:	d00b      	beq.n	800a7e0 <HAL_FDCAN_ActivateNotification+0x148>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2240      	movs	r2, #64	; 0x40
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	d007      	beq.n	800a7e0 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2102      	movs	r1, #2
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2280      	movs	r2, #128	; 0x80
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	d009      	beq.n	800a7fc <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	22dc      	movs	r2, #220	; 0xdc
 800a7ee:	5899      	ldr	r1, [r3, r2]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	21dc      	movs	r1, #220	; 0xdc
 800a7fa:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	2380      	movs	r3, #128	; 0x80
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	4013      	ands	r3, r2
 800a804:	d009      	beq.n	800a81a <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	22e0      	movs	r2, #224	; 0xe0
 800a80c:	5899      	ldr	r1, [r3, r2]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	430a      	orrs	r2, r1
 800a816:	21e0      	movs	r1, #224	; 0xe0
 800a818:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	430a      	orrs	r2, r1
 800a828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	e006      	b.n	800a83c <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a832:	2202      	movs	r2, #2
 800a834:	431a      	orrs	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
  }
}
 800a83c:	0018      	movs	r0, r3
 800a83e:	46bd      	mov	sp, r7
 800a840:	b006      	add	sp, #24
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a852:	23e0      	movs	r3, #224	; 0xe0
 800a854:	015b      	lsls	r3, r3, #5
 800a856:	4013      	ands	r3, r2
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	4013      	ands	r3, r2
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86c:	2207      	movs	r2, #7
 800a86e:	4013      	ands	r3, r2
 800a870:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	4013      	ands	r3, r2
 800a87c:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a884:	2238      	movs	r2, #56	; 0x38
 800a886:	4013      	ands	r3, r2
 800a888:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	4013      	ands	r3, r2
 800a894:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a89c:	23f1      	movs	r3, #241	; 0xf1
 800a89e:	041b      	lsls	r3, r3, #16
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8b6:	23e0      	movs	r3, #224	; 0xe0
 800a8b8:	031b      	lsls	r3, r3, #12
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d0:	2240      	movs	r2, #64	; 0x40
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	d00d      	beq.n	800a8f2 <HAL_FDCAN_IRQHandler+0xae>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8dc:	2240      	movs	r2, #64	; 0x40
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d007      	beq.n	800a8f2 <HAL_FDCAN_IRQHandler+0xae>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2240      	movs	r2, #64	; 0x40
 800a8e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f000 f91c 	bl	800ab2a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8f8:	2380      	movs	r3, #128	; 0x80
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	d01d      	beq.n	800a93c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	4013      	ands	r3, r2
 800a90c:	d016      	beq.n	800a93c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	22d8      	movs	r2, #216	; 0xd8
 800a914:	589b      	ldr	r3, [r3, r2]
 800a916:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	22e0      	movs	r2, #224	; 0xe0
 800a91e:	589a      	ldr	r2, [r3, r2]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4013      	ands	r3, r2
 800a924:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2280      	movs	r2, #128	; 0x80
 800a92c:	0052      	lsls	r2, r2, #1
 800a92e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	0011      	movs	r1, r2
 800a936:	0018      	movs	r0, r3
 800a938:	f000 f8de 	bl	800aaf8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a948:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800a94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	0011      	movs	r1, r2
 800a950:	0018      	movs	r0, r3
 800a952:	f000 f8c0 	bl	800aad6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6a3a      	ldr	r2, [r7, #32]
 800a962:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800a964:	6a3a      	ldr	r2, [r7, #32]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	0011      	movs	r1, r2
 800a96a:	0018      	movs	r0, r3
 800a96c:	f7fd fcda 	bl	8008324 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d009      	beq.n	800a98a <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800a97e:	69fa      	ldr	r2, [r7, #28]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	0011      	movs	r1, r2
 800a984:	0018      	movs	r0, r3
 800a986:	f7fd fce0 	bl	800834a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a990:	2380      	movs	r3, #128	; 0x80
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4013      	ands	r3, r2
 800a996:	d00f      	beq.n	800a9b8 <HAL_FDCAN_IRQHandler+0x174>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a99e:	2380      	movs	r3, #128	; 0x80
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	d008      	beq.n	800a9b8 <HAL_FDCAN_IRQHandler+0x174>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2280      	movs	r2, #128	; 0x80
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f000 f898 	bl	800aae8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9be:	2280      	movs	r2, #128	; 0x80
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	d01b      	beq.n	800a9fc <HAL_FDCAN_IRQHandler+0x1b8>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	2280      	movs	r2, #128	; 0x80
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	d015      	beq.n	800a9fc <HAL_FDCAN_IRQHandler+0x1b8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	22d4      	movs	r2, #212	; 0xd4
 800a9d6:	589b      	ldr	r3, [r3, r2]
 800a9d8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	22dc      	movs	r2, #220	; 0xdc
 800a9e0:	589a      	ldr	r2, [r3, r2]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2280      	movs	r2, #128	; 0x80
 800a9ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	0011      	movs	r1, r2
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f7fd fcba 	bl	8008370 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa02:	2380      	movs	r3, #128	; 0x80
 800aa04:	019b      	lsls	r3, r3, #6
 800aa06:	4013      	ands	r3, r2
 800aa08:	d00f      	beq.n	800aa2a <HAL_FDCAN_IRQHandler+0x1e6>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa10:	2380      	movs	r3, #128	; 0x80
 800aa12:	019b      	lsls	r3, r3, #6
 800aa14:	4013      	ands	r3, r2
 800aa16:	d008      	beq.n	800aa2a <HAL_FDCAN_IRQHandler+0x1e6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2280      	movs	r2, #128	; 0x80
 800aa1e:	0192      	lsls	r2, r2, #6
 800aa20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	0018      	movs	r0, r3
 800aa26:	f000 f870 	bl	800ab0a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa30:	2380      	movs	r3, #128	; 0x80
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	4013      	ands	r3, r2
 800aa36:	d00f      	beq.n	800aa58 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa3e:	2380      	movs	r3, #128	; 0x80
 800aa40:	021b      	lsls	r3, r3, #8
 800aa42:	4013      	ands	r3, r2
 800aa44:	d008      	beq.n	800aa58 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2280      	movs	r2, #128	; 0x80
 800aa4c:	0212      	lsls	r2, r2, #8
 800aa4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f000 f861 	bl	800ab1a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa5e:	2380      	movs	r3, #128	; 0x80
 800aa60:	01db      	lsls	r3, r3, #7
 800aa62:	4013      	ands	r3, r2
 800aa64:	d011      	beq.n	800aa8a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	01db      	lsls	r3, r3, #7
 800aa70:	4013      	ands	r3, r2
 800aa72:	d00a      	beq.n	800aa8a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2280      	movs	r2, #128	; 0x80
 800aa7a:	01d2      	lsls	r2, r2, #7
 800aa7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa82:	2280      	movs	r2, #128	; 0x80
 800aa84:	431a      	orrs	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d009      	beq.n	800aaa4 <HAL_FDCAN_IRQHandler+0x260>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	0011      	movs	r1, r2
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f000 f853 	bl	800ab4a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <HAL_FDCAN_IRQHandler+0x27a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	431a      	orrs	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <HAL_FDCAN_IRQHandler+0x28a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f000 f836 	bl	800ab3a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b00a      	add	sp, #40	; 0x28
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800aae0:	46c0      	nop			; (mov r8, r8)
 800aae2:	46bd      	mov	sp, r7
 800aae4:	b002      	add	sp, #8
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800aaf0:	46c0      	nop			; (mov r8, r8)
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	b002      	add	sp, #8
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800ab02:	46c0      	nop			; (mov r8, r8)
 800ab04:	46bd      	mov	sp, r7
 800ab06:	b002      	add	sp, #8
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800ab12:	46c0      	nop			; (mov r8, r8)
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b002      	add	sp, #8
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800ab22:	46c0      	nop			; (mov r8, r8)
 800ab24:	46bd      	mov	sp, r7
 800ab26:	b002      	add	sp, #8
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800ab32:	46c0      	nop			; (mov r8, r8)
 800ab34:	46bd      	mov	sp, r7
 800ab36:	b002      	add	sp, #8
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	46bd      	mov	sp, r7
 800ab46:	b002      	add	sp, #8
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800ab54:	46c0      	nop			; (mov r8, r8)
 800ab56:	46bd      	mov	sp, r7
 800ab58:	b002      	add	sp, #8
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800ab64:	4b2f      	ldr	r3, [pc, #188]	; (800ac24 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 800ab66:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a2e      	ldr	r2, [pc, #184]	; (800ac28 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d105      	bne.n	800ab7e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	22d4      	movs	r2, #212	; 0xd4
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	4694      	mov	ip, r2
 800ab7a:	4463      	add	r3, ip
 800ab7c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2280      	movs	r2, #128	; 0x80
 800ab8a:	589b      	ldr	r3, [r3, r2]
 800ab8c:	4a27      	ldr	r2, [pc, #156]	; (800ac2c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	0019      	movs	r1, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab96:	041a      	lsls	r2, r3, #16
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	2180      	movs	r1, #128	; 0x80
 800aba0:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	3370      	adds	r3, #112	; 0x70
 800aba6:	001a      	movs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2280      	movs	r2, #128	; 0x80
 800abb2:	589b      	ldr	r3, [r3, r2]
 800abb4:	4a1e      	ldr	r2, [pc, #120]	; (800ac30 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800abb6:	4013      	ands	r3, r2
 800abb8:	0019      	movs	r1, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	061a      	lsls	r2, r3, #24
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	2180      	movs	r1, #128	; 0x80
 800abc8:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	33b0      	adds	r3, #176	; 0xb0
 800abce:	001a      	movs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	3389      	adds	r3, #137	; 0x89
 800abd8:	33ff      	adds	r3, #255	; 0xff
 800abda:	001a      	movs	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2298      	movs	r2, #152	; 0x98
 800abe4:	0092      	lsls	r2, r2, #2
 800abe6:	189a      	adds	r2, r3, r2
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	229e      	movs	r2, #158	; 0x9e
 800abf0:	0092      	lsls	r2, r2, #2
 800abf2:	189a      	adds	r2, r3, r2
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e005      	b.n	800ac0a <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3304      	adds	r3, #4
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	22d4      	movs	r2, #212	; 0xd4
 800ac0e:	0092      	lsls	r2, r2, #2
 800ac10:	4694      	mov	ip, r2
 800ac12:	4463      	add	r3, ip
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d3f1      	bcc.n	800abfe <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	46c0      	nop			; (mov r8, r8)
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b004      	add	sp, #16
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	4000b400 	.word	0x4000b400
 800ac28:	40006800 	.word	0x40006800
 800ac2c:	ffe0ffff 	.word	0xffe0ffff
 800ac30:	f0ffffff 	.word	0xf0ffffff

0800ac34 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10a      	bne.n	800ac60 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800ac52:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	61fb      	str	r3, [r7, #28]
 800ac5e:	e00b      	b.n	800ac78 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800ac68:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800ac6e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800ac70:	2280      	movs	r2, #128	; 0x80
 800ac72:	05d2      	lsls	r2, r2, #23
 800ac74:	4313      	orrs	r3, r2
 800ac76:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800ac82:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800ac88:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800ac8e:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800ac94:	4313      	orrs	r3, r2
 800ac96:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	0013      	movs	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	189b      	adds	r3, r3, r2
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	18cb      	adds	r3, r1, r3
 800aca8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	3304      	adds	r3, #4
 800acb4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	3304      	adds	r3, #4
 800acc0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	e020      	b.n	800ad0a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	3303      	adds	r3, #3
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	18d3      	adds	r3, r2, r3
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	3302      	adds	r3, #2
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	18cb      	adds	r3, r1, r3
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800ace0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	3301      	adds	r3, #1
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	18cb      	adds	r3, r1, r3
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800acee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	188a      	adds	r2, r1, r2
 800acf6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800acf8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	3304      	adds	r3, #4
 800ad02:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	3304      	adds	r3, #4
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	0c1b      	lsrs	r3, r3, #16
 800ad10:	4a05      	ldr	r2, [pc, #20]	; (800ad28 <FDCAN_CopyMessageToRAM+0xf4>)
 800ad12:	5cd3      	ldrb	r3, [r2, r3]
 800ad14:	001a      	movs	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d3d5      	bcc.n	800acc8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800ad1c:	46c0      	nop			; (mov r8, r8)
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b008      	add	sp, #32
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	080106f8 	.word	0x080106f8

0800ad2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ad3a:	e14d      	b.n	800afd8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2101      	movs	r1, #1
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4091      	lsls	r1, r2
 800ad46:	000a      	movs	r2, r1
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d100      	bne.n	800ad54 <HAL_GPIO_Init+0x28>
 800ad52:	e13e      	b.n	800afd2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d00b      	beq.n	800ad74 <HAL_GPIO_Init+0x48>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d007      	beq.n	800ad74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad68:	2b11      	cmp	r3, #17
 800ad6a:	d003      	beq.n	800ad74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	2b12      	cmp	r3, #18
 800ad72:	d130      	bne.n	800add6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	2203      	movs	r2, #3
 800ad80:	409a      	lsls	r2, r3
 800ad82:	0013      	movs	r3, r2
 800ad84:	43da      	mvns	r2, r3
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	4013      	ands	r3, r2
 800ad8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	409a      	lsls	r2, r3
 800ad96:	0013      	movs	r3, r2
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800adaa:	2201      	movs	r2, #1
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	409a      	lsls	r2, r3
 800adb0:	0013      	movs	r3, r2
 800adb2:	43da      	mvns	r2, r3
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	4013      	ands	r3, r2
 800adb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	091b      	lsrs	r3, r3, #4
 800adc0:	2201      	movs	r2, #1
 800adc2:	401a      	ands	r2, r3
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	409a      	lsls	r2, r3
 800adc8:	0013      	movs	r3, r2
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	2203      	movs	r2, #3
 800ade2:	409a      	lsls	r2, r3
 800ade4:	0013      	movs	r3, r2
 800ade6:	43da      	mvns	r2, r3
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	4013      	ands	r3, r2
 800adec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	689a      	ldr	r2, [r3, #8]
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	409a      	lsls	r2, r3
 800adf8:	0013      	movs	r3, r2
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d003      	beq.n	800ae16 <HAL_GPIO_Init+0xea>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	2b12      	cmp	r3, #18
 800ae14:	d123      	bne.n	800ae5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	08da      	lsrs	r2, r3, #3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3208      	adds	r2, #8
 800ae1e:	0092      	lsls	r2, r2, #2
 800ae20:	58d3      	ldr	r3, [r2, r3]
 800ae22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	2207      	movs	r2, #7
 800ae28:	4013      	ands	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	220f      	movs	r2, #15
 800ae2e:	409a      	lsls	r2, r3
 800ae30:	0013      	movs	r3, r2
 800ae32:	43da      	mvns	r2, r3
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	4013      	ands	r3, r2
 800ae38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	691a      	ldr	r2, [r3, #16]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2107      	movs	r1, #7
 800ae42:	400b      	ands	r3, r1
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	409a      	lsls	r2, r3
 800ae48:	0013      	movs	r3, r2
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	08da      	lsrs	r2, r3, #3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	3208      	adds	r2, #8
 800ae58:	0092      	lsls	r2, r2, #2
 800ae5a:	6939      	ldr	r1, [r7, #16]
 800ae5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	005b      	lsls	r3, r3, #1
 800ae68:	2203      	movs	r2, #3
 800ae6a:	409a      	lsls	r2, r3
 800ae6c:	0013      	movs	r3, r2
 800ae6e:	43da      	mvns	r2, r3
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	4013      	ands	r3, r2
 800ae74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	401a      	ands	r2, r3
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	409a      	lsls	r2, r3
 800ae84:	0013      	movs	r3, r2
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	2380      	movs	r3, #128	; 0x80
 800ae98:	055b      	lsls	r3, r3, #21
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	d100      	bne.n	800aea0 <HAL_GPIO_Init+0x174>
 800ae9e:	e098      	b.n	800afd2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800aea0:	4a53      	ldr	r2, [pc, #332]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	089b      	lsrs	r3, r3, #2
 800aea6:	3318      	adds	r3, #24
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	589b      	ldr	r3, [r3, r2]
 800aeac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2203      	movs	r2, #3
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	220f      	movs	r2, #15
 800aeb8:	409a      	lsls	r2, r3
 800aeba:	0013      	movs	r3, r2
 800aebc:	43da      	mvns	r2, r3
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	4013      	ands	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	23a0      	movs	r3, #160	; 0xa0
 800aec8:	05db      	lsls	r3, r3, #23
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d019      	beq.n	800af02 <HAL_GPIO_Init+0x1d6>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a48      	ldr	r2, [pc, #288]	; (800aff4 <HAL_GPIO_Init+0x2c8>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d013      	beq.n	800aefe <HAL_GPIO_Init+0x1d2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a47      	ldr	r2, [pc, #284]	; (800aff8 <HAL_GPIO_Init+0x2cc>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d00d      	beq.n	800aefa <HAL_GPIO_Init+0x1ce>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a46      	ldr	r2, [pc, #280]	; (800affc <HAL_GPIO_Init+0x2d0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d007      	beq.n	800aef6 <HAL_GPIO_Init+0x1ca>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a45      	ldr	r2, [pc, #276]	; (800b000 <HAL_GPIO_Init+0x2d4>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d101      	bne.n	800aef2 <HAL_GPIO_Init+0x1c6>
 800aeee:	2304      	movs	r3, #4
 800aef0:	e008      	b.n	800af04 <HAL_GPIO_Init+0x1d8>
 800aef2:	2305      	movs	r3, #5
 800aef4:	e006      	b.n	800af04 <HAL_GPIO_Init+0x1d8>
 800aef6:	2303      	movs	r3, #3
 800aef8:	e004      	b.n	800af04 <HAL_GPIO_Init+0x1d8>
 800aefa:	2302      	movs	r3, #2
 800aefc:	e002      	b.n	800af04 <HAL_GPIO_Init+0x1d8>
 800aefe:	2301      	movs	r3, #1
 800af00:	e000      	b.n	800af04 <HAL_GPIO_Init+0x1d8>
 800af02:	2300      	movs	r3, #0
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	2103      	movs	r1, #3
 800af08:	400a      	ands	r2, r1
 800af0a:	00d2      	lsls	r2, r2, #3
 800af0c:	4093      	lsls	r3, r2
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	4313      	orrs	r3, r2
 800af12:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800af14:	4936      	ldr	r1, [pc, #216]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	089b      	lsrs	r3, r3, #2
 800af1a:	3318      	adds	r3, #24
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800af22:	4a33      	ldr	r2, [pc, #204]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800af24:	2380      	movs	r3, #128	; 0x80
 800af26:	58d3      	ldr	r3, [r2, r3]
 800af28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	43da      	mvns	r2, r3
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	4013      	ands	r3, r2
 800af32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	2380      	movs	r3, #128	; 0x80
 800af3a:	025b      	lsls	r3, r3, #9
 800af3c:	4013      	ands	r3, r2
 800af3e:	d003      	beq.n	800af48 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4313      	orrs	r3, r2
 800af46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800af48:	4929      	ldr	r1, [pc, #164]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800af4a:	2280      	movs	r2, #128	; 0x80
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800af50:	4a27      	ldr	r2, [pc, #156]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800af52:	2384      	movs	r3, #132	; 0x84
 800af54:	58d3      	ldr	r3, [r2, r3]
 800af56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	43da      	mvns	r2, r3
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	4013      	ands	r3, r2
 800af60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	2380      	movs	r3, #128	; 0x80
 800af68:	029b      	lsls	r3, r3, #10
 800af6a:	4013      	ands	r3, r2
 800af6c:	d003      	beq.n	800af76 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4313      	orrs	r3, r2
 800af74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800af76:	491e      	ldr	r1, [pc, #120]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800af78:	2284      	movs	r2, #132	; 0x84
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800af7e:	4b1c      	ldr	r3, [pc, #112]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	43da      	mvns	r2, r3
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	4013      	ands	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	2380      	movs	r3, #128	; 0x80
 800af94:	035b      	lsls	r3, r3, #13
 800af96:	4013      	ands	r3, r2
 800af98:	d003      	beq.n	800afa2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800afa2:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800afa8:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	43da      	mvns	r2, r3
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	4013      	ands	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	039b      	lsls	r3, r3, #14
 800afc0:	4013      	ands	r3, r2
 800afc2:	d003      	beq.n	800afcc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4313      	orrs	r3, r2
 800afca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800afcc:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <HAL_GPIO_Init+0x2c4>)
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	3301      	adds	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	40da      	lsrs	r2, r3
 800afe0:	1e13      	subs	r3, r2, #0
 800afe2:	d000      	beq.n	800afe6 <HAL_GPIO_Init+0x2ba>
 800afe4:	e6aa      	b.n	800ad3c <HAL_GPIO_Init+0x10>
  }
}
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	46c0      	nop			; (mov r8, r8)
 800afea:	46bd      	mov	sp, r7
 800afec:	b006      	add	sp, #24
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	40021800 	.word	0x40021800
 800aff4:	50000400 	.word	0x50000400
 800aff8:	50000800 	.word	0x50000800
 800affc:	50000c00 	.word	0x50000c00
 800b000:	50001000 	.word	0x50001000

0800b004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	000a      	movs	r2, r1
 800b00e:	1cbb      	adds	r3, r7, #2
 800b010:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	1cba      	adds	r2, r7, #2
 800b018:	8812      	ldrh	r2, [r2, #0]
 800b01a:	4013      	ands	r3, r2
 800b01c:	d004      	beq.n	800b028 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b01e:	230f      	movs	r3, #15
 800b020:	18fb      	adds	r3, r7, r3
 800b022:	2201      	movs	r2, #1
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	e003      	b.n	800b030 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b028:	230f      	movs	r3, #15
 800b02a:	18fb      	adds	r3, r7, r3
 800b02c:	2200      	movs	r2, #0
 800b02e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b030:	230f      	movs	r3, #15
 800b032:	18fb      	adds	r3, r7, r3
 800b034:	781b      	ldrb	r3, [r3, #0]
}
 800b036:	0018      	movs	r0, r3
 800b038:	46bd      	mov	sp, r7
 800b03a:	b004      	add	sp, #16
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	0008      	movs	r0, r1
 800b048:	0011      	movs	r1, r2
 800b04a:	1cbb      	adds	r3, r7, #2
 800b04c:	1c02      	adds	r2, r0, #0
 800b04e:	801a      	strh	r2, [r3, #0]
 800b050:	1c7b      	adds	r3, r7, #1
 800b052:	1c0a      	adds	r2, r1, #0
 800b054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b056:	1c7b      	adds	r3, r7, #1
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d004      	beq.n	800b068 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b05e:	1cbb      	adds	r3, r7, #2
 800b060:	881a      	ldrh	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b066:	e003      	b.n	800b070 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b068:	1cbb      	adds	r3, r7, #2
 800b06a:	881a      	ldrh	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b070:	46c0      	nop			; (mov r8, r8)
 800b072:	46bd      	mov	sp, r7
 800b074:	b002      	add	sp, #8
 800b076:	bd80      	pop	{r7, pc}

0800b078 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	000a      	movs	r2, r1
 800b082:	1cbb      	adds	r3, r7, #2
 800b084:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b08c:	1cbb      	adds	r3, r7, #2
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	4013      	ands	r3, r2
 800b094:	041a      	lsls	r2, r3, #16
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	43db      	mvns	r3, r3
 800b09a:	1cb9      	adds	r1, r7, #2
 800b09c:	8809      	ldrh	r1, [r1, #0]
 800b09e:	400b      	ands	r3, r1
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	619a      	str	r2, [r3, #24]
}
 800b0a6:	46c0      	nop			; (mov r8, r8)
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	b004      	add	sp, #16
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e036      	b.n	800b130 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a1c      	ldr	r2, [pc, #112]	; (800b138 <HAL_IWDG_Init+0x88>)
 800b0c8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a1b      	ldr	r2, [pc, #108]	; (800b13c <HAL_IWDG_Init+0x8c>)
 800b0d0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6852      	ldr	r2, [r2, #4]
 800b0da:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6892      	ldr	r2, [r2, #8]
 800b0e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b0e6:	f7fe fe61 	bl	8009dac <HAL_GetTick>
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800b0ee:	e008      	b.n	800b102 <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b0f0:	f7fe fe5c 	bl	8009dac <HAL_GetTick>
 800b0f4:	0002      	movs	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	2b30      	cmp	r3, #48	; 0x30
 800b0fc:	d901      	bls.n	800b102 <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e016      	b.n	800b130 <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f1      	bne.n	800b0f0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	691a      	ldr	r2, [r3, #16]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	429a      	cmp	r2, r3
 800b118:	d005      	beq.n	800b126 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	68d2      	ldr	r2, [r2, #12]
 800b122:	611a      	str	r2, [r3, #16]
 800b124:	e003      	b.n	800b12e <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a05      	ldr	r2, [pc, #20]	; (800b140 <HAL_IWDG_Init+0x90>)
 800b12c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	0018      	movs	r0, r3
 800b132:	46bd      	mov	sp, r7
 800b134:	b004      	add	sp, #16
 800b136:	bd80      	pop	{r7, pc}
 800b138:	0000cccc 	.word	0x0000cccc
 800b13c:	00005555 	.word	0x00005555
 800b140:	0000aaaa 	.word	0x0000aaaa

0800b144 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a03      	ldr	r2, [pc, #12]	; (800b160 <HAL_IWDG_Refresh+0x1c>)
 800b152:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	0018      	movs	r0, r3
 800b158:	46bd      	mov	sp, r7
 800b15a:	b002      	add	sp, #8
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	46c0      	nop			; (mov r8, r8)
 800b160:	0000aaaa 	.word	0x0000aaaa

0800b164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b16c:	4b19      	ldr	r3, [pc, #100]	; (800b1d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a19      	ldr	r2, [pc, #100]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b172:	4013      	ands	r3, r2
 800b174:	0019      	movs	r1, r3
 800b176:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	430a      	orrs	r2, r1
 800b17c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	2380      	movs	r3, #128	; 0x80
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	429a      	cmp	r2, r3
 800b186:	d11f      	bne.n	800b1c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800b188:	4b14      	ldr	r3, [pc, #80]	; (800b1dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	0013      	movs	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	189b      	adds	r3, r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	4912      	ldr	r1, [pc, #72]	; (800b1e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b196:	0018      	movs	r0, r3
 800b198:	f7f4 ffc8 	bl	800012c <__udivsi3>
 800b19c:	0003      	movs	r3, r0
 800b19e:	3301      	adds	r3, #1
 800b1a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b1a2:	e008      	b.n	800b1b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e001      	b.n	800b1b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e009      	b.n	800b1ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b1b6:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b1b8:	695a      	ldr	r2, [r3, #20]
 800b1ba:	2380      	movs	r3, #128	; 0x80
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	401a      	ands	r2, r3
 800b1c0:	2380      	movs	r3, #128	; 0x80
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d0ed      	beq.n	800b1a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	b004      	add	sp, #16
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	40007000 	.word	0x40007000
 800b1d8:	fffff9ff 	.word	0xfffff9ff
 800b1dc:	2000047c 	.word	0x2000047c
 800b1e0:	000f4240 	.word	0x000f4240

0800b1e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b1e8:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b1ea:	689a      	ldr	r2, [r3, #8]
 800b1ec:	23e0      	movs	r3, #224	; 0xe0
 800b1ee:	01db      	lsls	r3, r3, #7
 800b1f0:	4013      	ands	r3, r2
}
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	40021000 	.word	0x40021000

0800b1fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b088      	sub	sp, #32
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d102      	bne.n	800b210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	f000 fb56 	bl	800b8bc <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2201      	movs	r2, #1
 800b216:	4013      	ands	r3, r2
 800b218:	d100      	bne.n	800b21c <HAL_RCC_OscConfig+0x20>
 800b21a:	e07d      	b.n	800b318 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b21c:	4bc3      	ldr	r3, [pc, #780]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	2238      	movs	r2, #56	; 0x38
 800b222:	4013      	ands	r3, r2
 800b224:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b226:	4bc1      	ldr	r3, [pc, #772]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	2203      	movs	r2, #3
 800b22c:	4013      	ands	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	2b10      	cmp	r3, #16
 800b234:	d102      	bne.n	800b23c <HAL_RCC_OscConfig+0x40>
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d002      	beq.n	800b242 <HAL_RCC_OscConfig+0x46>
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b08      	cmp	r3, #8
 800b240:	d10c      	bne.n	800b25c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b242:	4bba      	ldr	r3, [pc, #744]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	2380      	movs	r3, #128	; 0x80
 800b248:	029b      	lsls	r3, r3, #10
 800b24a:	4013      	ands	r3, r2
 800b24c:	d063      	beq.n	800b316 <HAL_RCC_OscConfig+0x11a>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d15f      	bne.n	800b316 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f000 fb30 	bl	800b8bc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	2380      	movs	r3, #128	; 0x80
 800b262:	025b      	lsls	r3, r3, #9
 800b264:	429a      	cmp	r2, r3
 800b266:	d107      	bne.n	800b278 <HAL_RCC_OscConfig+0x7c>
 800b268:	4bb0      	ldr	r3, [pc, #704]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	4baf      	ldr	r3, [pc, #700]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b26e:	2180      	movs	r1, #128	; 0x80
 800b270:	0249      	lsls	r1, r1, #9
 800b272:	430a      	orrs	r2, r1
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	e020      	b.n	800b2ba <HAL_RCC_OscConfig+0xbe>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	23a0      	movs	r3, #160	; 0xa0
 800b27e:	02db      	lsls	r3, r3, #11
 800b280:	429a      	cmp	r2, r3
 800b282:	d10e      	bne.n	800b2a2 <HAL_RCC_OscConfig+0xa6>
 800b284:	4ba9      	ldr	r3, [pc, #676]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	4ba8      	ldr	r3, [pc, #672]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b28a:	2180      	movs	r1, #128	; 0x80
 800b28c:	02c9      	lsls	r1, r1, #11
 800b28e:	430a      	orrs	r2, r1
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	4ba6      	ldr	r3, [pc, #664]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4ba5      	ldr	r3, [pc, #660]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b298:	2180      	movs	r1, #128	; 0x80
 800b29a:	0249      	lsls	r1, r1, #9
 800b29c:	430a      	orrs	r2, r1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e00b      	b.n	800b2ba <HAL_RCC_OscConfig+0xbe>
 800b2a2:	4ba2      	ldr	r3, [pc, #648]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	4ba1      	ldr	r3, [pc, #644]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b2a8:	49a1      	ldr	r1, [pc, #644]	; (800b530 <HAL_RCC_OscConfig+0x334>)
 800b2aa:	400a      	ands	r2, r1
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	4b9f      	ldr	r3, [pc, #636]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	4b9e      	ldr	r3, [pc, #632]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b2b4:	499f      	ldr	r1, [pc, #636]	; (800b534 <HAL_RCC_OscConfig+0x338>)
 800b2b6:	400a      	ands	r2, r1
 800b2b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d014      	beq.n	800b2ec <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c2:	f7fe fd73 	bl	8009dac <HAL_GetTick>
 800b2c6:	0003      	movs	r3, r0
 800b2c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2ca:	e008      	b.n	800b2de <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2cc:	f7fe fd6e 	bl	8009dac <HAL_GetTick>
 800b2d0:	0002      	movs	r2, r0
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	2b64      	cmp	r3, #100	; 0x64
 800b2d8:	d901      	bls.n	800b2de <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e2ee      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2de:	4b93      	ldr	r3, [pc, #588]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	2380      	movs	r3, #128	; 0x80
 800b2e4:	029b      	lsls	r3, r3, #10
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	d0f0      	beq.n	800b2cc <HAL_RCC_OscConfig+0xd0>
 800b2ea:	e015      	b.n	800b318 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2ec:	f7fe fd5e 	bl	8009dac <HAL_GetTick>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2f4:	e008      	b.n	800b308 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2f6:	f7fe fd59 	bl	8009dac <HAL_GetTick>
 800b2fa:	0002      	movs	r2, r0
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	2b64      	cmp	r3, #100	; 0x64
 800b302:	d901      	bls.n	800b308 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e2d9      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b308:	4b88      	ldr	r3, [pc, #544]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	2380      	movs	r3, #128	; 0x80
 800b30e:	029b      	lsls	r3, r3, #10
 800b310:	4013      	ands	r3, r2
 800b312:	d1f0      	bne.n	800b2f6 <HAL_RCC_OscConfig+0xfa>
 800b314:	e000      	b.n	800b318 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b316:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2202      	movs	r2, #2
 800b31e:	4013      	ands	r3, r2
 800b320:	d100      	bne.n	800b324 <HAL_RCC_OscConfig+0x128>
 800b322:	e099      	b.n	800b458 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b324:	4b81      	ldr	r3, [pc, #516]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	2238      	movs	r2, #56	; 0x38
 800b32a:	4013      	ands	r3, r2
 800b32c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b32e:	4b7f      	ldr	r3, [pc, #508]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	2203      	movs	r2, #3
 800b334:	4013      	ands	r3, r2
 800b336:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	2b10      	cmp	r3, #16
 800b33c:	d102      	bne.n	800b344 <HAL_RCC_OscConfig+0x148>
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d002      	beq.n	800b34a <HAL_RCC_OscConfig+0x14e>
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d135      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b34a:	4b78      	ldr	r3, [pc, #480]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	2380      	movs	r3, #128	; 0x80
 800b350:	00db      	lsls	r3, r3, #3
 800b352:	4013      	ands	r3, r2
 800b354:	d005      	beq.n	800b362 <HAL_RCC_OscConfig+0x166>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e2ac      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b362:	4b72      	ldr	r3, [pc, #456]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4a74      	ldr	r2, [pc, #464]	; (800b538 <HAL_RCC_OscConfig+0x33c>)
 800b368:	4013      	ands	r3, r2
 800b36a:	0019      	movs	r1, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	021a      	lsls	r2, r3, #8
 800b372:	4b6e      	ldr	r3, [pc, #440]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b374:	430a      	orrs	r2, r1
 800b376:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d112      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b37e:	4b6b      	ldr	r3, [pc, #428]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a6e      	ldr	r2, [pc, #440]	; (800b53c <HAL_RCC_OscConfig+0x340>)
 800b384:	4013      	ands	r3, r2
 800b386:	0019      	movs	r1, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	4b67      	ldr	r3, [pc, #412]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b38e:	430a      	orrs	r2, r1
 800b390:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b392:	4b66      	ldr	r3, [pc, #408]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	0adb      	lsrs	r3, r3, #11
 800b398:	2207      	movs	r2, #7
 800b39a:	4013      	ands	r3, r2
 800b39c:	4a68      	ldr	r2, [pc, #416]	; (800b540 <HAL_RCC_OscConfig+0x344>)
 800b39e:	40da      	lsrs	r2, r3
 800b3a0:	4b68      	ldr	r3, [pc, #416]	; (800b544 <HAL_RCC_OscConfig+0x348>)
 800b3a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b3a4:	4b68      	ldr	r3, [pc, #416]	; (800b548 <HAL_RCC_OscConfig+0x34c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	f7fe fb0d 	bl	80099c8 <HAL_InitTick>
 800b3ae:	1e03      	subs	r3, r0, #0
 800b3b0:	d051      	beq.n	800b456 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e282      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d030      	beq.n	800b420 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b3be:	4b5b      	ldr	r3, [pc, #364]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a5e      	ldr	r2, [pc, #376]	; (800b53c <HAL_RCC_OscConfig+0x340>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	0019      	movs	r1, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	4b57      	ldr	r3, [pc, #348]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b3d2:	4b56      	ldr	r3, [pc, #344]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	4b55      	ldr	r3, [pc, #340]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b3d8:	2180      	movs	r1, #128	; 0x80
 800b3da:	0049      	lsls	r1, r1, #1
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e0:	f7fe fce4 	bl	8009dac <HAL_GetTick>
 800b3e4:	0003      	movs	r3, r0
 800b3e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3e8:	e008      	b.n	800b3fc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3ea:	f7fe fcdf 	bl	8009dac <HAL_GetTick>
 800b3ee:	0002      	movs	r2, r0
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d901      	bls.n	800b3fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	e25f      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3fc:	4b4b      	ldr	r3, [pc, #300]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	2380      	movs	r3, #128	; 0x80
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	4013      	ands	r3, r2
 800b406:	d0f0      	beq.n	800b3ea <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b408:	4b48      	ldr	r3, [pc, #288]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	4a4a      	ldr	r2, [pc, #296]	; (800b538 <HAL_RCC_OscConfig+0x33c>)
 800b40e:	4013      	ands	r3, r2
 800b410:	0019      	movs	r1, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	021a      	lsls	r2, r3, #8
 800b418:	4b44      	ldr	r3, [pc, #272]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
 800b41e:	e01b      	b.n	800b458 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b420:	4b42      	ldr	r3, [pc, #264]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	4b41      	ldr	r3, [pc, #260]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b426:	4949      	ldr	r1, [pc, #292]	; (800b54c <HAL_RCC_OscConfig+0x350>)
 800b428:	400a      	ands	r2, r1
 800b42a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b42c:	f7fe fcbe 	bl	8009dac <HAL_GetTick>
 800b430:	0003      	movs	r3, r0
 800b432:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b434:	e008      	b.n	800b448 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b436:	f7fe fcb9 	bl	8009dac <HAL_GetTick>
 800b43a:	0002      	movs	r2, r0
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b02      	cmp	r3, #2
 800b442:	d901      	bls.n	800b448 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e239      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b448:	4b38      	ldr	r3, [pc, #224]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	2380      	movs	r3, #128	; 0x80
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	4013      	ands	r3, r2
 800b452:	d1f0      	bne.n	800b436 <HAL_RCC_OscConfig+0x23a>
 800b454:	e000      	b.n	800b458 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b456:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2208      	movs	r2, #8
 800b45e:	4013      	ands	r3, r2
 800b460:	d047      	beq.n	800b4f2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b462:	4b32      	ldr	r3, [pc, #200]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	2238      	movs	r2, #56	; 0x38
 800b468:	4013      	ands	r3, r2
 800b46a:	2b18      	cmp	r3, #24
 800b46c:	d10a      	bne.n	800b484 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b46e:	4b2f      	ldr	r3, [pc, #188]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b472:	2202      	movs	r2, #2
 800b474:	4013      	ands	r3, r2
 800b476:	d03c      	beq.n	800b4f2 <HAL_RCC_OscConfig+0x2f6>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d138      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e21b      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d019      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b48c:	4b27      	ldr	r3, [pc, #156]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b48e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b490:	4b26      	ldr	r3, [pc, #152]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b492:	2101      	movs	r1, #1
 800b494:	430a      	orrs	r2, r1
 800b496:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b498:	f7fe fc88 	bl	8009dac <HAL_GetTick>
 800b49c:	0003      	movs	r3, r0
 800b49e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4a0:	e008      	b.n	800b4b4 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4a2:	f7fe fc83 	bl	8009dac <HAL_GetTick>
 800b4a6:	0002      	movs	r2, r0
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d901      	bls.n	800b4b4 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e203      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4b4:	4b1d      	ldr	r3, [pc, #116]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b4b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	d0f1      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x2a6>
 800b4be:	e018      	b.n	800b4f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b4c0:	4b1a      	ldr	r3, [pc, #104]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b4c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b4c4:	4b19      	ldr	r3, [pc, #100]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	438a      	bics	r2, r1
 800b4ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4cc:	f7fe fc6e 	bl	8009dac <HAL_GetTick>
 800b4d0:	0003      	movs	r3, r0
 800b4d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b4d4:	e008      	b.n	800b4e8 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4d6:	f7fe fc69 	bl	8009dac <HAL_GetTick>
 800b4da:	0002      	movs	r2, r0
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d901      	bls.n	800b4e8 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e1e9      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b4e8:	4b10      	ldr	r3, [pc, #64]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b4ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	d1f1      	bne.n	800b4d6 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2204      	movs	r2, #4
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	d100      	bne.n	800b4fe <HAL_RCC_OscConfig+0x302>
 800b4fc:	e0c6      	b.n	800b68c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4fe:	231f      	movs	r3, #31
 800b500:	18fb      	adds	r3, r7, r3
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b506:	4b09      	ldr	r3, [pc, #36]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	2238      	movs	r2, #56	; 0x38
 800b50c:	4013      	ands	r3, r2
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d11e      	bne.n	800b550 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b512:	4b06      	ldr	r3, [pc, #24]	; (800b52c <HAL_RCC_OscConfig+0x330>)
 800b514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b516:	2202      	movs	r2, #2
 800b518:	4013      	ands	r3, r2
 800b51a:	d100      	bne.n	800b51e <HAL_RCC_OscConfig+0x322>
 800b51c:	e0b6      	b.n	800b68c <HAL_RCC_OscConfig+0x490>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d000      	beq.n	800b528 <HAL_RCC_OscConfig+0x32c>
 800b526:	e0b1      	b.n	800b68c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e1c7      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
 800b52c:	40021000 	.word	0x40021000
 800b530:	fffeffff 	.word	0xfffeffff
 800b534:	fffbffff 	.word	0xfffbffff
 800b538:	ffff80ff 	.word	0xffff80ff
 800b53c:	ffffc7ff 	.word	0xffffc7ff
 800b540:	00f42400 	.word	0x00f42400
 800b544:	2000047c 	.word	0x2000047c
 800b548:	20000480 	.word	0x20000480
 800b54c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b550:	4bb8      	ldr	r3, [pc, #736]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b554:	2380      	movs	r3, #128	; 0x80
 800b556:	055b      	lsls	r3, r3, #21
 800b558:	4013      	ands	r3, r2
 800b55a:	d101      	bne.n	800b560 <HAL_RCC_OscConfig+0x364>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e000      	b.n	800b562 <HAL_RCC_OscConfig+0x366>
 800b560:	2300      	movs	r3, #0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d011      	beq.n	800b58a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b566:	4bb3      	ldr	r3, [pc, #716]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b56a:	4bb2      	ldr	r3, [pc, #712]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b56c:	2180      	movs	r1, #128	; 0x80
 800b56e:	0549      	lsls	r1, r1, #21
 800b570:	430a      	orrs	r2, r1
 800b572:	63da      	str	r2, [r3, #60]	; 0x3c
 800b574:	4baf      	ldr	r3, [pc, #700]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b578:	2380      	movs	r3, #128	; 0x80
 800b57a:	055b      	lsls	r3, r3, #21
 800b57c:	4013      	ands	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b582:	231f      	movs	r3, #31
 800b584:	18fb      	adds	r3, r7, r3
 800b586:	2201      	movs	r2, #1
 800b588:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b58a:	4bab      	ldr	r3, [pc, #684]	; (800b838 <HAL_RCC_OscConfig+0x63c>)
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	2380      	movs	r3, #128	; 0x80
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	4013      	ands	r3, r2
 800b594:	d11a      	bne.n	800b5cc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b596:	4ba8      	ldr	r3, [pc, #672]	; (800b838 <HAL_RCC_OscConfig+0x63c>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4ba7      	ldr	r3, [pc, #668]	; (800b838 <HAL_RCC_OscConfig+0x63c>)
 800b59c:	2180      	movs	r1, #128	; 0x80
 800b59e:	0049      	lsls	r1, r1, #1
 800b5a0:	430a      	orrs	r2, r1
 800b5a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b5a4:	f7fe fc02 	bl	8009dac <HAL_GetTick>
 800b5a8:	0003      	movs	r3, r0
 800b5aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5ac:	e008      	b.n	800b5c0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5ae:	f7fe fbfd 	bl	8009dac <HAL_GetTick>
 800b5b2:	0002      	movs	r2, r0
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d901      	bls.n	800b5c0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e17d      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5c0:	4b9d      	ldr	r3, [pc, #628]	; (800b838 <HAL_RCC_OscConfig+0x63c>)
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	2380      	movs	r3, #128	; 0x80
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	d0f0      	beq.n	800b5ae <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d106      	bne.n	800b5e2 <HAL_RCC_OscConfig+0x3e6>
 800b5d4:	4b97      	ldr	r3, [pc, #604]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b5d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5d8:	4b96      	ldr	r3, [pc, #600]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b5da:	2101      	movs	r1, #1
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	65da      	str	r2, [r3, #92]	; 0x5c
 800b5e0:	e01c      	b.n	800b61c <HAL_RCC_OscConfig+0x420>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	2b05      	cmp	r3, #5
 800b5e8:	d10c      	bne.n	800b604 <HAL_RCC_OscConfig+0x408>
 800b5ea:	4b92      	ldr	r3, [pc, #584]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b5ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5ee:	4b91      	ldr	r3, [pc, #580]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b5f0:	2104      	movs	r1, #4
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b5f6:	4b8f      	ldr	r3, [pc, #572]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b5f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5fa:	4b8e      	ldr	r3, [pc, #568]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	430a      	orrs	r2, r1
 800b600:	65da      	str	r2, [r3, #92]	; 0x5c
 800b602:	e00b      	b.n	800b61c <HAL_RCC_OscConfig+0x420>
 800b604:	4b8b      	ldr	r3, [pc, #556]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b608:	4b8a      	ldr	r3, [pc, #552]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b60a:	2101      	movs	r1, #1
 800b60c:	438a      	bics	r2, r1
 800b60e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b610:	4b88      	ldr	r3, [pc, #544]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b612:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b614:	4b87      	ldr	r3, [pc, #540]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b616:	2104      	movs	r1, #4
 800b618:	438a      	bics	r2, r1
 800b61a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d014      	beq.n	800b64e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b624:	f7fe fbc2 	bl	8009dac <HAL_GetTick>
 800b628:	0003      	movs	r3, r0
 800b62a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b62c:	e009      	b.n	800b642 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b62e:	f7fe fbbd 	bl	8009dac <HAL_GetTick>
 800b632:	0002      	movs	r2, r0
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	4a80      	ldr	r2, [pc, #512]	; (800b83c <HAL_RCC_OscConfig+0x640>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d901      	bls.n	800b642 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e13c      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b642:	4b7c      	ldr	r3, [pc, #496]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b646:	2202      	movs	r2, #2
 800b648:	4013      	ands	r3, r2
 800b64a:	d0f0      	beq.n	800b62e <HAL_RCC_OscConfig+0x432>
 800b64c:	e013      	b.n	800b676 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b64e:	f7fe fbad 	bl	8009dac <HAL_GetTick>
 800b652:	0003      	movs	r3, r0
 800b654:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b656:	e009      	b.n	800b66c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b658:	f7fe fba8 	bl	8009dac <HAL_GetTick>
 800b65c:	0002      	movs	r2, r0
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	4a76      	ldr	r2, [pc, #472]	; (800b83c <HAL_RCC_OscConfig+0x640>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d901      	bls.n	800b66c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e127      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b66c:	4b71      	ldr	r3, [pc, #452]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b670:	2202      	movs	r2, #2
 800b672:	4013      	ands	r3, r2
 800b674:	d1f0      	bne.n	800b658 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b676:	231f      	movs	r3, #31
 800b678:	18fb      	adds	r3, r7, r3
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d105      	bne.n	800b68c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b680:	4b6c      	ldr	r3, [pc, #432]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b684:	4b6b      	ldr	r3, [pc, #428]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b686:	496e      	ldr	r1, [pc, #440]	; (800b840 <HAL_RCC_OscConfig+0x644>)
 800b688:	400a      	ands	r2, r1
 800b68a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2220      	movs	r2, #32
 800b692:	4013      	ands	r3, r2
 800b694:	d039      	beq.n	800b70a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	69db      	ldr	r3, [r3, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d01b      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b69e:	4b65      	ldr	r3, [pc, #404]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	4b64      	ldr	r3, [pc, #400]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b6a4:	2180      	movs	r1, #128	; 0x80
 800b6a6:	03c9      	lsls	r1, r1, #15
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ac:	f7fe fb7e 	bl	8009dac <HAL_GetTick>
 800b6b0:	0003      	movs	r3, r0
 800b6b2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b6b4:	e008      	b.n	800b6c8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6b6:	f7fe fb79 	bl	8009dac <HAL_GetTick>
 800b6ba:	0002      	movs	r2, r0
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d901      	bls.n	800b6c8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e0f9      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b6c8:	4b5a      	ldr	r3, [pc, #360]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	2380      	movs	r3, #128	; 0x80
 800b6ce:	041b      	lsls	r3, r3, #16
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	d0f0      	beq.n	800b6b6 <HAL_RCC_OscConfig+0x4ba>
 800b6d4:	e019      	b.n	800b70a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6d6:	4b57      	ldr	r3, [pc, #348]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	4b56      	ldr	r3, [pc, #344]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b6dc:	4959      	ldr	r1, [pc, #356]	; (800b844 <HAL_RCC_OscConfig+0x648>)
 800b6de:	400a      	ands	r2, r1
 800b6e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6e2:	f7fe fb63 	bl	8009dac <HAL_GetTick>
 800b6e6:	0003      	movs	r3, r0
 800b6e8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b6ea:	e008      	b.n	800b6fe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6ec:	f7fe fb5e 	bl	8009dac <HAL_GetTick>
 800b6f0:	0002      	movs	r2, r0
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d901      	bls.n	800b6fe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e0de      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b6fe:	4b4d      	ldr	r3, [pc, #308]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	2380      	movs	r3, #128	; 0x80
 800b704:	041b      	lsls	r3, r3, #16
 800b706:	4013      	ands	r3, r2
 800b708:	d1f0      	bne.n	800b6ec <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d100      	bne.n	800b714 <HAL_RCC_OscConfig+0x518>
 800b712:	e0d2      	b.n	800b8ba <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b714:	4b47      	ldr	r3, [pc, #284]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	2238      	movs	r2, #56	; 0x38
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b10      	cmp	r3, #16
 800b71e:	d100      	bne.n	800b722 <HAL_RCC_OscConfig+0x526>
 800b720:	e081      	b.n	800b826 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	2b02      	cmp	r3, #2
 800b728:	d156      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b72a:	4b42      	ldr	r3, [pc, #264]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	4b41      	ldr	r3, [pc, #260]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b730:	4945      	ldr	r1, [pc, #276]	; (800b848 <HAL_RCC_OscConfig+0x64c>)
 800b732:	400a      	ands	r2, r1
 800b734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b736:	f7fe fb39 	bl	8009dac <HAL_GetTick>
 800b73a:	0003      	movs	r3, r0
 800b73c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b73e:	e008      	b.n	800b752 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b740:	f7fe fb34 	bl	8009dac <HAL_GetTick>
 800b744:	0002      	movs	r2, r0
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d901      	bls.n	800b752 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e0b4      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b752:	4b38      	ldr	r3, [pc, #224]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	2380      	movs	r3, #128	; 0x80
 800b758:	049b      	lsls	r3, r3, #18
 800b75a:	4013      	ands	r3, r2
 800b75c:	d1f0      	bne.n	800b740 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b75e:	4b35      	ldr	r3, [pc, #212]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	4a3a      	ldr	r2, [pc, #232]	; (800b84c <HAL_RCC_OscConfig+0x650>)
 800b764:	4013      	ands	r3, r2
 800b766:	0019      	movs	r1, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b770:	431a      	orrs	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	021b      	lsls	r3, r3, #8
 800b778:	431a      	orrs	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77e:	431a      	orrs	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b784:	431a      	orrs	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	431a      	orrs	r2, r3
 800b78c:	4b29      	ldr	r3, [pc, #164]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b78e:	430a      	orrs	r2, r1
 800b790:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b792:	4b28      	ldr	r3, [pc, #160]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	4b27      	ldr	r3, [pc, #156]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b798:	2180      	movs	r1, #128	; 0x80
 800b79a:	0449      	lsls	r1, r1, #17
 800b79c:	430a      	orrs	r2, r1
 800b79e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b7a0:	4b24      	ldr	r3, [pc, #144]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	4b23      	ldr	r3, [pc, #140]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7a6:	2180      	movs	r1, #128	; 0x80
 800b7a8:	0549      	lsls	r1, r1, #21
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ae:	f7fe fafd 	bl	8009dac <HAL_GetTick>
 800b7b2:	0003      	movs	r3, r0
 800b7b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7b6:	e008      	b.n	800b7ca <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7b8:	f7fe faf8 	bl	8009dac <HAL_GetTick>
 800b7bc:	0002      	movs	r2, r0
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d901      	bls.n	800b7ca <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e078      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7ca:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	2380      	movs	r3, #128	; 0x80
 800b7d0:	049b      	lsls	r3, r3, #18
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	d0f0      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x5bc>
 800b7d6:	e070      	b.n	800b8ba <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7d8:	4b16      	ldr	r3, [pc, #88]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	4b15      	ldr	r3, [pc, #84]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7de:	491a      	ldr	r1, [pc, #104]	; (800b848 <HAL_RCC_OscConfig+0x64c>)
 800b7e0:	400a      	ands	r2, r1
 800b7e2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800b7e4:	4b13      	ldr	r3, [pc, #76]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	4b12      	ldr	r3, [pc, #72]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7ea:	2103      	movs	r1, #3
 800b7ec:	438a      	bics	r2, r1
 800b7ee:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800b7f0:	4b10      	ldr	r3, [pc, #64]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b7f6:	4916      	ldr	r1, [pc, #88]	; (800b850 <HAL_RCC_OscConfig+0x654>)
 800b7f8:	400a      	ands	r2, r1
 800b7fa:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7fc:	f7fe fad6 	bl	8009dac <HAL_GetTick>
 800b800:	0003      	movs	r3, r0
 800b802:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b804:	e008      	b.n	800b818 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b806:	f7fe fad1 	bl	8009dac <HAL_GetTick>
 800b80a:	0002      	movs	r2, r0
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	2b02      	cmp	r3, #2
 800b812:	d901      	bls.n	800b818 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e051      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b818:	4b06      	ldr	r3, [pc, #24]	; (800b834 <HAL_RCC_OscConfig+0x638>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	2380      	movs	r3, #128	; 0x80
 800b81e:	049b      	lsls	r3, r3, #18
 800b820:	4013      	ands	r3, r2
 800b822:	d1f0      	bne.n	800b806 <HAL_RCC_OscConfig+0x60a>
 800b824:	e049      	b.n	800b8ba <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d112      	bne.n	800b854 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e044      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
 800b832:	46c0      	nop			; (mov r8, r8)
 800b834:	40021000 	.word	0x40021000
 800b838:	40007000 	.word	0x40007000
 800b83c:	00001388 	.word	0x00001388
 800b840:	efffffff 	.word	0xefffffff
 800b844:	ffbfffff 	.word	0xffbfffff
 800b848:	feffffff 	.word	0xfeffffff
 800b84c:	11c1808c 	.word	0x11c1808c
 800b850:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b854:	4b1b      	ldr	r3, [pc, #108]	; (800b8c4 <HAL_RCC_OscConfig+0x6c8>)
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2203      	movs	r2, #3
 800b85e:	401a      	ands	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	429a      	cmp	r2, r3
 800b866:	d126      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2270      	movs	r2, #112	; 0x70
 800b86c:	401a      	ands	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b872:	429a      	cmp	r2, r3
 800b874:	d11f      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	23fe      	movs	r3, #254	; 0xfe
 800b87a:	01db      	lsls	r3, r3, #7
 800b87c:	401a      	ands	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b884:	429a      	cmp	r2, r3
 800b886:	d116      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	23f8      	movs	r3, #248	; 0xf8
 800b88c:	039b      	lsls	r3, r3, #14
 800b88e:	401a      	ands	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b894:	429a      	cmp	r2, r3
 800b896:	d10e      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	23e0      	movs	r3, #224	; 0xe0
 800b89c:	051b      	lsls	r3, r3, #20
 800b89e:	401a      	ands	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d106      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	0f5b      	lsrs	r3, r3, #29
 800b8ac:	075a      	lsls	r2, r3, #29
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d001      	beq.n	800b8ba <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e000      	b.n	800b8bc <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b008      	add	sp, #32
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	40021000 	.word	0x40021000

0800b8c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0e9      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b8dc:	4b76      	ldr	r3, [pc, #472]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2207      	movs	r2, #7
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d91e      	bls.n	800b928 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8ea:	4b73      	ldr	r3, [pc, #460]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2207      	movs	r2, #7
 800b8f0:	4393      	bics	r3, r2
 800b8f2:	0019      	movs	r1, r3
 800b8f4:	4b70      	ldr	r3, [pc, #448]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b8fc:	f7fe fa56 	bl	8009dac <HAL_GetTick>
 800b900:	0003      	movs	r3, r0
 800b902:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b904:	e009      	b.n	800b91a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b906:	f7fe fa51 	bl	8009dac <HAL_GetTick>
 800b90a:	0002      	movs	r2, r0
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	4a6a      	ldr	r2, [pc, #424]	; (800babc <HAL_RCC_ClockConfig+0x1f4>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d901      	bls.n	800b91a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e0ca      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b91a:	4b67      	ldr	r3, [pc, #412]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2207      	movs	r2, #7
 800b920:	4013      	ands	r3, r2
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d1ee      	bne.n	800b906 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2202      	movs	r2, #2
 800b92e:	4013      	ands	r3, r2
 800b930:	d015      	beq.n	800b95e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2204      	movs	r2, #4
 800b938:	4013      	ands	r3, r2
 800b93a:	d006      	beq.n	800b94a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b93c:	4b60      	ldr	r3, [pc, #384]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	4b5f      	ldr	r3, [pc, #380]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b942:	21e0      	movs	r1, #224	; 0xe0
 800b944:	01c9      	lsls	r1, r1, #7
 800b946:	430a      	orrs	r2, r1
 800b948:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b94a:	4b5d      	ldr	r3, [pc, #372]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	4a5d      	ldr	r2, [pc, #372]	; (800bac4 <HAL_RCC_ClockConfig+0x1fc>)
 800b950:	4013      	ands	r3, r2
 800b952:	0019      	movs	r1, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	4b59      	ldr	r3, [pc, #356]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b95a:	430a      	orrs	r2, r1
 800b95c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2201      	movs	r2, #1
 800b964:	4013      	ands	r3, r2
 800b966:	d057      	beq.n	800ba18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d107      	bne.n	800b980 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b970:	4b53      	ldr	r3, [pc, #332]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	2380      	movs	r3, #128	; 0x80
 800b976:	029b      	lsls	r3, r3, #10
 800b978:	4013      	ands	r3, r2
 800b97a:	d12b      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e097      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d107      	bne.n	800b998 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b988:	4b4d      	ldr	r3, [pc, #308]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	2380      	movs	r3, #128	; 0x80
 800b98e:	049b      	lsls	r3, r3, #18
 800b990:	4013      	ands	r3, r2
 800b992:	d11f      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e08b      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9a0:	4b47      	ldr	r3, [pc, #284]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	2380      	movs	r3, #128	; 0x80
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	d113      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e07f      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d106      	bne.n	800b9c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9b8:	4b41      	ldr	r3, [pc, #260]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9bc:	2202      	movs	r2, #2
 800b9be:	4013      	ands	r3, r2
 800b9c0:	d108      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e074      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9c6:	4b3e      	ldr	r3, [pc, #248]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	d101      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e06d      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b9d4:	4b3a      	ldr	r3, [pc, #232]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	2207      	movs	r2, #7
 800b9da:	4393      	bics	r3, r2
 800b9dc:	0019      	movs	r1, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	4b37      	ldr	r3, [pc, #220]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9e8:	f7fe f9e0 	bl	8009dac <HAL_GetTick>
 800b9ec:	0003      	movs	r3, r0
 800b9ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9f0:	e009      	b.n	800ba06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9f2:	f7fe f9db 	bl	8009dac <HAL_GetTick>
 800b9f6:	0002      	movs	r2, r0
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	4a2f      	ldr	r2, [pc, #188]	; (800babc <HAL_RCC_ClockConfig+0x1f4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d901      	bls.n	800ba06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e054      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba06:	4b2e      	ldr	r3, [pc, #184]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	2238      	movs	r2, #56	; 0x38
 800ba0c:	401a      	ands	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d1ec      	bne.n	800b9f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba18:	4b27      	ldr	r3, [pc, #156]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	4013      	ands	r3, r2
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d21e      	bcs.n	800ba64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba26:	4b24      	ldr	r3, [pc, #144]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2207      	movs	r2, #7
 800ba2c:	4393      	bics	r3, r2
 800ba2e:	0019      	movs	r1, r3
 800ba30:	4b21      	ldr	r3, [pc, #132]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ba38:	f7fe f9b8 	bl	8009dac <HAL_GetTick>
 800ba3c:	0003      	movs	r3, r0
 800ba3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba40:	e009      	b.n	800ba56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba42:	f7fe f9b3 	bl	8009dac <HAL_GetTick>
 800ba46:	0002      	movs	r2, r0
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	4a1b      	ldr	r2, [pc, #108]	; (800babc <HAL_RCC_ClockConfig+0x1f4>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e02c      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba56:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2207      	movs	r2, #7
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d1ee      	bne.n	800ba42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2204      	movs	r2, #4
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	d009      	beq.n	800ba82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ba6e:	4b14      	ldr	r3, [pc, #80]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	4a15      	ldr	r2, [pc, #84]	; (800bac8 <HAL_RCC_ClockConfig+0x200>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	0019      	movs	r1, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ba82:	f000 f829 	bl	800bad8 <HAL_RCC_GetSysClockFreq>
 800ba86:	0001      	movs	r1, r0
 800ba88:	4b0d      	ldr	r3, [pc, #52]	; (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	0a1b      	lsrs	r3, r3, #8
 800ba8e:	220f      	movs	r2, #15
 800ba90:	401a      	ands	r2, r3
 800ba92:	4b0e      	ldr	r3, [pc, #56]	; (800bacc <HAL_RCC_ClockConfig+0x204>)
 800ba94:	0092      	lsls	r2, r2, #2
 800ba96:	58d3      	ldr	r3, [r2, r3]
 800ba98:	221f      	movs	r2, #31
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	000a      	movs	r2, r1
 800ba9e:	40da      	lsrs	r2, r3
 800baa0:	4b0b      	ldr	r3, [pc, #44]	; (800bad0 <HAL_RCC_ClockConfig+0x208>)
 800baa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800baa4:	4b0b      	ldr	r3, [pc, #44]	; (800bad4 <HAL_RCC_ClockConfig+0x20c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	0018      	movs	r0, r3
 800baaa:	f7fd ff8d 	bl	80099c8 <HAL_InitTick>
 800baae:	0003      	movs	r3, r0
}
 800bab0:	0018      	movs	r0, r3
 800bab2:	46bd      	mov	sp, r7
 800bab4:	b004      	add	sp, #16
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	40022000 	.word	0x40022000
 800babc:	00001388 	.word	0x00001388
 800bac0:	40021000 	.word	0x40021000
 800bac4:	fffff0ff 	.word	0xfffff0ff
 800bac8:	ffff8fff 	.word	0xffff8fff
 800bacc:	08010698 	.word	0x08010698
 800bad0:	2000047c 	.word	0x2000047c
 800bad4:	20000480 	.word	0x20000480

0800bad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bade:	4b3c      	ldr	r3, [pc, #240]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	2238      	movs	r2, #56	; 0x38
 800bae4:	4013      	ands	r3, r2
 800bae6:	d10f      	bne.n	800bb08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bae8:	4b39      	ldr	r3, [pc, #228]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	0adb      	lsrs	r3, r3, #11
 800baee:	2207      	movs	r2, #7
 800baf0:	4013      	ands	r3, r2
 800baf2:	2201      	movs	r2, #1
 800baf4:	409a      	lsls	r2, r3
 800baf6:	0013      	movs	r3, r2
 800baf8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	4835      	ldr	r0, [pc, #212]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bafe:	f7f4 fb15 	bl	800012c <__udivsi3>
 800bb02:	0003      	movs	r3, r0
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	e05d      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bb08:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	2238      	movs	r2, #56	; 0x38
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d102      	bne.n	800bb1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bb14:	4b30      	ldr	r3, [pc, #192]	; (800bbd8 <HAL_RCC_GetSysClockFreq+0x100>)
 800bb16:	613b      	str	r3, [r7, #16]
 800bb18:	e054      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bb1a:	4b2d      	ldr	r3, [pc, #180]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	2238      	movs	r2, #56	; 0x38
 800bb20:	4013      	ands	r3, r2
 800bb22:	2b10      	cmp	r3, #16
 800bb24:	d138      	bne.n	800bb98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bb26:	4b2a      	ldr	r3, [pc, #168]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb30:	4b27      	ldr	r3, [pc, #156]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	091b      	lsrs	r3, r3, #4
 800bb36:	2207      	movs	r2, #7
 800bb38:	4013      	ands	r3, r2
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d10d      	bne.n	800bb60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	4824      	ldr	r0, [pc, #144]	; (800bbd8 <HAL_RCC_GetSysClockFreq+0x100>)
 800bb48:	f7f4 faf0 	bl	800012c <__udivsi3>
 800bb4c:	0003      	movs	r3, r0
 800bb4e:	0019      	movs	r1, r3
 800bb50:	4b1f      	ldr	r3, [pc, #124]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	0a1b      	lsrs	r3, r3, #8
 800bb56:	227f      	movs	r2, #127	; 0x7f
 800bb58:	4013      	ands	r3, r2
 800bb5a:	434b      	muls	r3, r1
 800bb5c:	617b      	str	r3, [r7, #20]
        break;
 800bb5e:	e00d      	b.n	800bb7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bb60:	68b9      	ldr	r1, [r7, #8]
 800bb62:	481c      	ldr	r0, [pc, #112]	; (800bbd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bb64:	f7f4 fae2 	bl	800012c <__udivsi3>
 800bb68:	0003      	movs	r3, r0
 800bb6a:	0019      	movs	r1, r3
 800bb6c:	4b18      	ldr	r3, [pc, #96]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	0a1b      	lsrs	r3, r3, #8
 800bb72:	227f      	movs	r2, #127	; 0x7f
 800bb74:	4013      	ands	r3, r2
 800bb76:	434b      	muls	r3, r1
 800bb78:	617b      	str	r3, [r7, #20]
        break;
 800bb7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bb7c:	4b14      	ldr	r3, [pc, #80]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	0f5b      	lsrs	r3, r3, #29
 800bb82:	2207      	movs	r2, #7
 800bb84:	4013      	ands	r3, r2
 800bb86:	3301      	adds	r3, #1
 800bb88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	6978      	ldr	r0, [r7, #20]
 800bb8e:	f7f4 facd 	bl	800012c <__udivsi3>
 800bb92:	0003      	movs	r3, r0
 800bb94:	613b      	str	r3, [r7, #16]
 800bb96:	e015      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800bb98:	4b0d      	ldr	r3, [pc, #52]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	2238      	movs	r2, #56	; 0x38
 800bb9e:	4013      	ands	r3, r2
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d103      	bne.n	800bbac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800bba4:	2380      	movs	r3, #128	; 0x80
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	e00b      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bbac:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	2238      	movs	r2, #56	; 0x38
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	2b18      	cmp	r3, #24
 800bbb6:	d103      	bne.n	800bbc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800bbb8:	23fa      	movs	r3, #250	; 0xfa
 800bbba:	01db      	lsls	r3, r3, #7
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	e001      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bbc4:	693b      	ldr	r3, [r7, #16]
}
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	b006      	add	sp, #24
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	46c0      	nop			; (mov r8, r8)
 800bbd0:	40021000 	.word	0x40021000
 800bbd4:	00f42400 	.word	0x00f42400
 800bbd8:	007a1200 	.word	0x007a1200

0800bbdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bbe0:	4b02      	ldr	r3, [pc, #8]	; (800bbec <HAL_RCC_GetHCLKFreq+0x10>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
}
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	2000047c 	.word	0x2000047c

0800bbf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbf0:	b5b0      	push	{r4, r5, r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bbf4:	f7ff fff2 	bl	800bbdc <HAL_RCC_GetHCLKFreq>
 800bbf8:	0004      	movs	r4, r0
 800bbfa:	f7ff faf3 	bl	800b1e4 <LL_RCC_GetAPB1Prescaler>
 800bbfe:	0003      	movs	r3, r0
 800bc00:	0b1a      	lsrs	r2, r3, #12
 800bc02:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bc04:	0092      	lsls	r2, r2, #2
 800bc06:	58d3      	ldr	r3, [r2, r3]
 800bc08:	221f      	movs	r2, #31
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	40dc      	lsrs	r4, r3
 800bc0e:	0023      	movs	r3, r4
}
 800bc10:	0018      	movs	r0, r3
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bdb0      	pop	{r4, r5, r7, pc}
 800bc16:	46c0      	nop			; (mov r8, r8)
 800bc18:	080106d8 	.word	0x080106d8

0800bc1c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2207      	movs	r2, #7
 800bc2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <HAL_RCC_GetClockConfig+0x4c>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	2207      	movs	r2, #7
 800bc32:	401a      	ands	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <HAL_RCC_GetClockConfig+0x4c>)
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	23f0      	movs	r3, #240	; 0xf0
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	401a      	ands	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800bc46:	4b08      	ldr	r3, [pc, #32]	; (800bc68 <HAL_RCC_GetClockConfig+0x4c>)
 800bc48:	689a      	ldr	r2, [r3, #8]
 800bc4a:	23e0      	movs	r3, #224	; 0xe0
 800bc4c:	01db      	lsls	r3, r3, #7
 800bc4e:	401a      	ands	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bc54:	4b05      	ldr	r3, [pc, #20]	; (800bc6c <HAL_RCC_GetClockConfig+0x50>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2207      	movs	r2, #7
 800bc5a:	401a      	ands	r2, r3
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	601a      	str	r2, [r3, #0]
}
 800bc60:	46c0      	nop			; (mov r8, r8)
 800bc62:	46bd      	mov	sp, r7
 800bc64:	b002      	add	sp, #8
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	40021000 	.word	0x40021000
 800bc6c:	40022000 	.word	0x40022000

0800bc70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800bc78:	2313      	movs	r3, #19
 800bc7a:	18fb      	adds	r3, r7, r3
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bc80:	2312      	movs	r3, #18
 800bc82:	18fb      	adds	r3, r7, r3
 800bc84:	2200      	movs	r2, #0
 800bc86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	2380      	movs	r3, #128	; 0x80
 800bc8e:	029b      	lsls	r3, r3, #10
 800bc90:	4013      	ands	r3, r2
 800bc92:	d100      	bne.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800bc94:	e0ad      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc96:	2011      	movs	r0, #17
 800bc98:	183b      	adds	r3, r7, r0
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc9e:	4b47      	ldr	r3, [pc, #284]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bca2:	2380      	movs	r3, #128	; 0x80
 800bca4:	055b      	lsls	r3, r3, #21
 800bca6:	4013      	ands	r3, r2
 800bca8:	d110      	bne.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcaa:	4b44      	ldr	r3, [pc, #272]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bcac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcae:	4b43      	ldr	r3, [pc, #268]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bcb0:	2180      	movs	r1, #128	; 0x80
 800bcb2:	0549      	lsls	r1, r1, #21
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	63da      	str	r2, [r3, #60]	; 0x3c
 800bcb8:	4b40      	ldr	r3, [pc, #256]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bcba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcbc:	2380      	movs	r3, #128	; 0x80
 800bcbe:	055b      	lsls	r3, r3, #21
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	60bb      	str	r3, [r7, #8]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bcc6:	183b      	adds	r3, r7, r0
 800bcc8:	2201      	movs	r2, #1
 800bcca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bccc:	4b3c      	ldr	r3, [pc, #240]	; (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	4b3b      	ldr	r3, [pc, #236]	; (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bcd2:	2180      	movs	r1, #128	; 0x80
 800bcd4:	0049      	lsls	r1, r1, #1
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcda:	f7fe f867 	bl	8009dac <HAL_GetTick>
 800bcde:	0003      	movs	r3, r0
 800bce0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bce2:	e00b      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bce4:	f7fe f862 	bl	8009dac <HAL_GetTick>
 800bce8:	0002      	movs	r2, r0
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d904      	bls.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800bcf2:	2313      	movs	r3, #19
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	2203      	movs	r2, #3
 800bcf8:	701a      	strb	r2, [r3, #0]
        break;
 800bcfa:	e005      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcfc:	4b30      	ldr	r3, [pc, #192]	; (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	2380      	movs	r3, #128	; 0x80
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	4013      	ands	r3, r2
 800bd06:	d0ed      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800bd08:	2313      	movs	r3, #19
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d15e      	bne.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bd12:	4b2a      	ldr	r3, [pc, #168]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd16:	23c0      	movs	r3, #192	; 0xc0
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d019      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d014      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bd2e:	4b23      	ldr	r3, [pc, #140]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd32:	4a24      	ldr	r2, [pc, #144]	; (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd38:	4b20      	ldr	r3, [pc, #128]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd3c:	4b1f      	ldr	r3, [pc, #124]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd3e:	2180      	movs	r1, #128	; 0x80
 800bd40:	0249      	lsls	r1, r1, #9
 800bd42:	430a      	orrs	r2, r1
 800bd44:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd46:	4b1d      	ldr	r3, [pc, #116]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd4a:	4b1c      	ldr	r3, [pc, #112]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd4c:	491e      	ldr	r1, [pc, #120]	; (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800bd4e:	400a      	ands	r2, r1
 800bd50:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bd52:	4b1a      	ldr	r3, [pc, #104]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	d016      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd60:	f7fe f824 	bl	8009dac <HAL_GetTick>
 800bd64:	0003      	movs	r3, r0
 800bd66:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd68:	e00c      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd6a:	f7fe f81f 	bl	8009dac <HAL_GetTick>
 800bd6e:	0002      	movs	r2, r0
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	4a15      	ldr	r2, [pc, #84]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d904      	bls.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800bd7a:	2313      	movs	r3, #19
 800bd7c:	18fb      	adds	r3, r7, r3
 800bd7e:	2203      	movs	r2, #3
 800bd80:	701a      	strb	r2, [r3, #0]
            break;
 800bd82:	e004      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd84:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd88:	2202      	movs	r2, #2
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	d0ed      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800bd8e:	2313      	movs	r3, #19
 800bd90:	18fb      	adds	r3, r7, r3
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd98:	4b08      	ldr	r3, [pc, #32]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd9c:	4a09      	ldr	r2, [pc, #36]	; (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800bd9e:	4013      	ands	r3, r2
 800bda0:	0019      	movs	r1, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bda6:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	65da      	str	r2, [r3, #92]	; 0x5c
 800bdac:	e016      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bdae:	2312      	movs	r3, #18
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	2213      	movs	r2, #19
 800bdb4:	18ba      	adds	r2, r7, r2
 800bdb6:	7812      	ldrb	r2, [r2, #0]
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	e00f      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800bdbc:	40021000 	.word	0x40021000
 800bdc0:	40007000 	.word	0x40007000
 800bdc4:	fffffcff 	.word	0xfffffcff
 800bdc8:	fffeffff 	.word	0xfffeffff
 800bdcc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd0:	2312      	movs	r3, #18
 800bdd2:	18fb      	adds	r3, r7, r3
 800bdd4:	2213      	movs	r2, #19
 800bdd6:	18ba      	adds	r2, r7, r2
 800bdd8:	7812      	ldrb	r2, [r2, #0]
 800bdda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bddc:	2311      	movs	r3, #17
 800bdde:	18fb      	adds	r3, r7, r3
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d105      	bne.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bde6:	4bb6      	ldr	r3, [pc, #728]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bde8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdea:	4bb5      	ldr	r3, [pc, #724]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bdec:	49b5      	ldr	r1, [pc, #724]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800bdee:	400a      	ands	r2, r1
 800bdf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	d009      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bdfc:	4bb0      	ldr	r3, [pc, #704]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bdfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be00:	2203      	movs	r2, #3
 800be02:	4393      	bics	r3, r2
 800be04:	0019      	movs	r1, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	4bad      	ldr	r3, [pc, #692]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be0c:	430a      	orrs	r2, r1
 800be0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2202      	movs	r2, #2
 800be16:	4013      	ands	r3, r2
 800be18:	d009      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800be1a:	4ba9      	ldr	r3, [pc, #676]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1e:	220c      	movs	r2, #12
 800be20:	4393      	bics	r3, r2
 800be22:	0019      	movs	r1, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	4ba5      	ldr	r3, [pc, #660]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be2a:	430a      	orrs	r2, r1
 800be2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2204      	movs	r2, #4
 800be34:	4013      	ands	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800be38:	4ba1      	ldr	r3, [pc, #644]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be3c:	2230      	movs	r2, #48	; 0x30
 800be3e:	4393      	bics	r3, r2
 800be40:	0019      	movs	r1, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68da      	ldr	r2, [r3, #12]
 800be46:	4b9e      	ldr	r3, [pc, #632]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be48:	430a      	orrs	r2, r1
 800be4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2210      	movs	r2, #16
 800be52:	4013      	ands	r3, r2
 800be54:	d009      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be56:	4b9a      	ldr	r3, [pc, #616]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5a:	4a9b      	ldr	r2, [pc, #620]	; (800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	0019      	movs	r1, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691a      	ldr	r2, [r3, #16]
 800be64:	4b96      	ldr	r3, [pc, #600]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be66:	430a      	orrs	r2, r1
 800be68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	2380      	movs	r3, #128	; 0x80
 800be70:	015b      	lsls	r3, r3, #5
 800be72:	4013      	ands	r3, r2
 800be74:	d009      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800be76:	4b92      	ldr	r3, [pc, #584]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7a:	4a94      	ldr	r2, [pc, #592]	; (800c0cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	0019      	movs	r1, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695a      	ldr	r2, [r3, #20]
 800be84:	4b8e      	ldr	r3, [pc, #568]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be86:	430a      	orrs	r2, r1
 800be88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	2380      	movs	r3, #128	; 0x80
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4013      	ands	r3, r2
 800be94:	d009      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be96:	4b8a      	ldr	r3, [pc, #552]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800be98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9a:	4a8d      	ldr	r2, [pc, #564]	; (800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	0019      	movs	r1, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bea4:	4b86      	ldr	r3, [pc, #536]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bea6:	430a      	orrs	r2, r1
 800bea8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	2380      	movs	r3, #128	; 0x80
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	4013      	ands	r3, r2
 800beb4:	d009      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800beb6:	4b82      	ldr	r3, [pc, #520]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800beb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beba:	4a86      	ldr	r2, [pc, #536]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	0019      	movs	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec4:	4b7e      	ldr	r3, [pc, #504]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bec6:	430a      	orrs	r2, r1
 800bec8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2220      	movs	r2, #32
 800bed0:	4013      	ands	r3, r2
 800bed2:	d009      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bed4:	4b7a      	ldr	r3, [pc, #488]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed8:	4a7f      	ldr	r2, [pc, #508]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800beda:	4013      	ands	r3, r2
 800bedc:	0019      	movs	r1, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	699a      	ldr	r2, [r3, #24]
 800bee2:	4b77      	ldr	r3, [pc, #476]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bee4:	430a      	orrs	r2, r1
 800bee6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2240      	movs	r2, #64	; 0x40
 800beee:	4013      	ands	r3, r2
 800bef0:	d009      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bef2:	4b73      	ldr	r3, [pc, #460]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef6:	4a79      	ldr	r2, [pc, #484]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800bef8:	4013      	ands	r3, r2
 800befa:	0019      	movs	r1, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	69da      	ldr	r2, [r3, #28]
 800bf00:	4b6f      	ldr	r3, [pc, #444]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf02:	430a      	orrs	r2, r1
 800bf04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	2380      	movs	r3, #128	; 0x80
 800bf0c:	01db      	lsls	r3, r3, #7
 800bf0e:	4013      	ands	r3, r2
 800bf10:	d015      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf12:	4b6b      	ldr	r3, [pc, #428]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	0899      	lsrs	r1, r3, #2
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf1e:	4b68      	ldr	r3, [pc, #416]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf20:	430a      	orrs	r2, r1
 800bf22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf28:	2380      	movs	r3, #128	; 0x80
 800bf2a:	05db      	lsls	r3, r3, #23
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d106      	bne.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bf30:	4b63      	ldr	r3, [pc, #396]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf32:	68da      	ldr	r2, [r3, #12]
 800bf34:	4b62      	ldr	r3, [pc, #392]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf36:	2180      	movs	r1, #128	; 0x80
 800bf38:	0249      	lsls	r1, r1, #9
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	2380      	movs	r3, #128	; 0x80
 800bf44:	031b      	lsls	r3, r3, #12
 800bf46:	4013      	ands	r3, r2
 800bf48:	d009      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf4a:	4b5d      	ldr	r3, [pc, #372]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf4e:	2240      	movs	r2, #64	; 0x40
 800bf50:	4393      	bics	r3, r2
 800bf52:	0019      	movs	r1, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf58:	4b59      	ldr	r3, [pc, #356]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	2380      	movs	r3, #128	; 0x80
 800bf64:	039b      	lsls	r3, r3, #14
 800bf66:	4013      	ands	r3, r2
 800bf68:	d016      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800bf6a:	4b55      	ldr	r3, [pc, #340]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6e:	4a5c      	ldr	r2, [pc, #368]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	0019      	movs	r1, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf78:	4b51      	ldr	r3, [pc, #324]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf82:	2380      	movs	r3, #128	; 0x80
 800bf84:	03db      	lsls	r3, r3, #15
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d106      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bf8a:	4b4d      	ldr	r3, [pc, #308]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf8c:	68da      	ldr	r2, [r3, #12]
 800bf8e:	4b4c      	ldr	r3, [pc, #304]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bf90:	2180      	movs	r1, #128	; 0x80
 800bf92:	0449      	lsls	r1, r1, #17
 800bf94:	430a      	orrs	r2, r1
 800bf96:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	2380      	movs	r3, #128	; 0x80
 800bf9e:	03db      	lsls	r3, r3, #15
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	d016      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800bfa4:	4b46      	ldr	r3, [pc, #280]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bfa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa8:	4a4e      	ldr	r2, [pc, #312]	; (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800bfaa:	4013      	ands	r3, r2
 800bfac:	0019      	movs	r1, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfb2:	4b43      	ldr	r3, [pc, #268]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfbc:	2380      	movs	r3, #128	; 0x80
 800bfbe:	045b      	lsls	r3, r3, #17
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d106      	bne.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bfc4:	4b3e      	ldr	r3, [pc, #248]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	4b3d      	ldr	r3, [pc, #244]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bfca:	2180      	movs	r1, #128	; 0x80
 800bfcc:	0449      	lsls	r1, r1, #17
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	2380      	movs	r3, #128	; 0x80
 800bfd8:	011b      	lsls	r3, r3, #4
 800bfda:	4013      	ands	r3, r2
 800bfdc:	d014      	beq.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800bfde:	4b38      	ldr	r3, [pc, #224]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bfe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	4393      	bics	r3, r2
 800bfe6:	0019      	movs	r1, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a1a      	ldr	r2, [r3, #32]
 800bfec:	4b34      	ldr	r3, [pc, #208]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bfee:	430a      	orrs	r2, r1
 800bff0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d106      	bne.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bffa:	4b31      	ldr	r3, [pc, #196]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	4b30      	ldr	r3, [pc, #192]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c000:	2180      	movs	r1, #128	; 0x80
 800c002:	0249      	lsls	r1, r1, #9
 800c004:	430a      	orrs	r2, r1
 800c006:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	2380      	movs	r3, #128	; 0x80
 800c00e:	019b      	lsls	r3, r3, #6
 800c010:	4013      	ands	r3, r2
 800c012:	d014      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c014:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c018:	220c      	movs	r2, #12
 800c01a:	4393      	bics	r3, r2
 800c01c:	0019      	movs	r1, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c022:	4b27      	ldr	r3, [pc, #156]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c024:	430a      	orrs	r2, r1
 800c026:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d106      	bne.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c030:	4b23      	ldr	r3, [pc, #140]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	4b22      	ldr	r3, [pc, #136]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c036:	2180      	movs	r1, #128	; 0x80
 800c038:	0249      	lsls	r1, r1, #9
 800c03a:	430a      	orrs	r2, r1
 800c03c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	2380      	movs	r3, #128	; 0x80
 800c044:	045b      	lsls	r3, r3, #17
 800c046:	4013      	ands	r3, r2
 800c048:	d016      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c04a:	4b1d      	ldr	r3, [pc, #116]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c04e:	4a22      	ldr	r2, [pc, #136]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c050:	4013      	ands	r3, r2
 800c052:	0019      	movs	r1, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c058:	4b19      	ldr	r3, [pc, #100]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c05a:	430a      	orrs	r2, r1
 800c05c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c062:	2380      	movs	r3, #128	; 0x80
 800c064:	019b      	lsls	r3, r3, #6
 800c066:	429a      	cmp	r2, r3
 800c068:	d106      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c06a:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	4b14      	ldr	r3, [pc, #80]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c070:	2180      	movs	r1, #128	; 0x80
 800c072:	0449      	lsls	r1, r1, #17
 800c074:	430a      	orrs	r2, r1
 800c076:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	2380      	movs	r3, #128	; 0x80
 800c07e:	049b      	lsls	r3, r3, #18
 800c080:	4013      	ands	r3, r2
 800c082:	d016      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c084:	4b0e      	ldr	r3, [pc, #56]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c088:	4a10      	ldr	r2, [pc, #64]	; (800c0cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	0019      	movs	r1, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c094:	430a      	orrs	r2, r1
 800c096:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c09c:	2380      	movs	r3, #128	; 0x80
 800c09e:	005b      	lsls	r3, r3, #1
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d106      	bne.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c0a4:	4b06      	ldr	r3, [pc, #24]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c0aa:	2180      	movs	r1, #128	; 0x80
 800c0ac:	0449      	lsls	r1, r1, #17
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c0b2:	2312      	movs	r3, #18
 800c0b4:	18fb      	adds	r3, r7, r3
 800c0b6:	781b      	ldrb	r3, [r3, #0]
}
 800c0b8:	0018      	movs	r0, r3
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	b006      	add	sp, #24
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	40021000 	.word	0x40021000
 800c0c4:	efffffff 	.word	0xefffffff
 800c0c8:	fffff3ff 	.word	0xfffff3ff
 800c0cc:	fffffcff 	.word	0xfffffcff
 800c0d0:	fff3ffff 	.word	0xfff3ffff
 800c0d4:	ffcfffff 	.word	0xffcfffff
 800c0d8:	ffffcfff 	.word	0xffffcfff
 800c0dc:	ffff3fff 	.word	0xffff3fff
 800c0e0:	ffbfffff 	.word	0xffbfffff
 800c0e4:	feffffff 	.word	0xfeffffff

0800c0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e04a      	b.n	800c190 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	223d      	movs	r2, #61	; 0x3d
 800c0fe:	5c9b      	ldrb	r3, [r3, r2]
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d107      	bne.n	800c116 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	223c      	movs	r2, #60	; 0x3c
 800c10a:	2100      	movs	r1, #0
 800c10c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	0018      	movs	r0, r3
 800c112:	f7fd fdc7 	bl	8009ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	223d      	movs	r2, #61	; 0x3d
 800c11a:	2102      	movs	r1, #2
 800c11c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3304      	adds	r3, #4
 800c126:	0019      	movs	r1, r3
 800c128:	0010      	movs	r0, r2
 800c12a:	f000 fa17 	bl	800c55c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2248      	movs	r2, #72	; 0x48
 800c132:	2101      	movs	r1, #1
 800c134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	223e      	movs	r2, #62	; 0x3e
 800c13a:	2101      	movs	r1, #1
 800c13c:	5499      	strb	r1, [r3, r2]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	223f      	movs	r2, #63	; 0x3f
 800c142:	2101      	movs	r1, #1
 800c144:	5499      	strb	r1, [r3, r2]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2240      	movs	r2, #64	; 0x40
 800c14a:	2101      	movs	r1, #1
 800c14c:	5499      	strb	r1, [r3, r2]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2241      	movs	r2, #65	; 0x41
 800c152:	2101      	movs	r1, #1
 800c154:	5499      	strb	r1, [r3, r2]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2242      	movs	r2, #66	; 0x42
 800c15a:	2101      	movs	r1, #1
 800c15c:	5499      	strb	r1, [r3, r2]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2243      	movs	r2, #67	; 0x43
 800c162:	2101      	movs	r1, #1
 800c164:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2244      	movs	r2, #68	; 0x44
 800c16a:	2101      	movs	r1, #1
 800c16c:	5499      	strb	r1, [r3, r2]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2245      	movs	r2, #69	; 0x45
 800c172:	2101      	movs	r1, #1
 800c174:	5499      	strb	r1, [r3, r2]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2246      	movs	r2, #70	; 0x46
 800c17a:	2101      	movs	r1, #1
 800c17c:	5499      	strb	r1, [r3, r2]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2247      	movs	r2, #71	; 0x47
 800c182:	2101      	movs	r1, #1
 800c184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	223d      	movs	r2, #61	; 0x3d
 800c18a:	2101      	movs	r1, #1
 800c18c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	0018      	movs	r0, r3
 800c192:	46bd      	mov	sp, r7
 800c194:	b002      	add	sp, #8
 800c196:	bd80      	pop	{r7, pc}

0800c198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	223d      	movs	r2, #61	; 0x3d
 800c1a4:	5c9b      	ldrb	r3, [r3, r2]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d001      	beq.n	800c1b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e047      	b.n	800c240 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	223d      	movs	r2, #61	; 0x3d
 800c1b4:	2102      	movs	r1, #2
 800c1b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68da      	ldr	r2, [r3, #12]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a1e      	ldr	r2, [pc, #120]	; (800c248 <HAL_TIM_Base_Start_IT+0xb0>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d014      	beq.n	800c1fc <HAL_TIM_Base_Start_IT+0x64>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	2380      	movs	r3, #128	; 0x80
 800c1d8:	05db      	lsls	r3, r3, #23
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d00e      	beq.n	800c1fc <HAL_TIM_Base_Start_IT+0x64>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a1a      	ldr	r2, [pc, #104]	; (800c24c <HAL_TIM_Base_Start_IT+0xb4>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d009      	beq.n	800c1fc <HAL_TIM_Base_Start_IT+0x64>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a18      	ldr	r2, [pc, #96]	; (800c250 <HAL_TIM_Base_Start_IT+0xb8>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d004      	beq.n	800c1fc <HAL_TIM_Base_Start_IT+0x64>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a17      	ldr	r2, [pc, #92]	; (800c254 <HAL_TIM_Base_Start_IT+0xbc>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d116      	bne.n	800c22a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <HAL_TIM_Base_Start_IT+0xc0>)
 800c204:	4013      	ands	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b06      	cmp	r3, #6
 800c20c:	d016      	beq.n	800c23c <HAL_TIM_Base_Start_IT+0xa4>
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	2380      	movs	r3, #128	; 0x80
 800c212:	025b      	lsls	r3, r3, #9
 800c214:	429a      	cmp	r2, r3
 800c216:	d011      	beq.n	800c23c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2101      	movs	r1, #1
 800c224:	430a      	orrs	r2, r1
 800c226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c228:	e008      	b.n	800c23c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2101      	movs	r1, #1
 800c236:	430a      	orrs	r2, r1
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e000      	b.n	800c23e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c23c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	0018      	movs	r0, r3
 800c242:	46bd      	mov	sp, r7
 800c244:	b004      	add	sp, #16
 800c246:	bd80      	pop	{r7, pc}
 800c248:	40012c00 	.word	0x40012c00
 800c24c:	40000400 	.word	0x40000400
 800c250:	40000800 	.word	0x40000800
 800c254:	40014000 	.word	0x40014000
 800c258:	00010007 	.word	0x00010007

0800c25c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68da      	ldr	r2, [r3, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2101      	movs	r1, #1
 800c270:	438a      	bics	r2, r1
 800c272:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	4a0d      	ldr	r2, [pc, #52]	; (800c2b0 <HAL_TIM_Base_Stop_IT+0x54>)
 800c27c:	4013      	ands	r3, r2
 800c27e:	d10d      	bne.n	800c29c <HAL_TIM_Base_Stop_IT+0x40>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	4a0b      	ldr	r2, [pc, #44]	; (800c2b4 <HAL_TIM_Base_Stop_IT+0x58>)
 800c288:	4013      	ands	r3, r2
 800c28a:	d107      	bne.n	800c29c <HAL_TIM_Base_Stop_IT+0x40>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2101      	movs	r1, #1
 800c298:	438a      	bics	r2, r1
 800c29a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	223d      	movs	r2, #61	; 0x3d
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	b002      	add	sp, #8
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	00001111 	.word	0x00001111
 800c2b4:	00000444 	.word	0x00000444

0800c2b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d124      	bne.n	800c318 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d11d      	bne.n	800c318 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2203      	movs	r2, #3
 800c2e2:	4252      	negs	r2, r2
 800c2e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	d004      	beq.n	800c302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f000 f916 	bl	800c52c <HAL_TIM_IC_CaptureCallback>
 800c300:	e007      	b.n	800c312 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	0018      	movs	r0, r3
 800c306:	f000 f909 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	0018      	movs	r0, r3
 800c30e:	f000 f915 	bl	800c53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	2204      	movs	r2, #4
 800c320:	4013      	ands	r3, r2
 800c322:	2b04      	cmp	r3, #4
 800c324:	d125      	bne.n	800c372 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	2204      	movs	r2, #4
 800c32e:	4013      	ands	r3, r2
 800c330:	2b04      	cmp	r3, #4
 800c332:	d11e      	bne.n	800c372 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2205      	movs	r2, #5
 800c33a:	4252      	negs	r2, r2
 800c33c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2202      	movs	r2, #2
 800c342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	23c0      	movs	r3, #192	; 0xc0
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4013      	ands	r3, r2
 800c350:	d004      	beq.n	800c35c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	0018      	movs	r0, r3
 800c356:	f000 f8e9 	bl	800c52c <HAL_TIM_IC_CaptureCallback>
 800c35a:	e007      	b.n	800c36c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	0018      	movs	r0, r3
 800c360:	f000 f8dc 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	0018      	movs	r0, r3
 800c368:	f000 f8e8 	bl	800c53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	2208      	movs	r2, #8
 800c37a:	4013      	ands	r3, r2
 800c37c:	2b08      	cmp	r3, #8
 800c37e:	d124      	bne.n	800c3ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	2208      	movs	r2, #8
 800c388:	4013      	ands	r3, r2
 800c38a:	2b08      	cmp	r3, #8
 800c38c:	d11d      	bne.n	800c3ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2209      	movs	r2, #9
 800c394:	4252      	negs	r2, r2
 800c396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2204      	movs	r2, #4
 800c39c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	69db      	ldr	r3, [r3, #28]
 800c3a4:	2203      	movs	r2, #3
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	d004      	beq.n	800c3b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	0018      	movs	r0, r3
 800c3ae:	f000 f8bd 	bl	800c52c <HAL_TIM_IC_CaptureCallback>
 800c3b2:	e007      	b.n	800c3c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	f000 f8b0 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	0018      	movs	r0, r3
 800c3c0:	f000 f8bc 	bl	800c53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	2210      	movs	r2, #16
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	2b10      	cmp	r3, #16
 800c3d6:	d125      	bne.n	800c424 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	2210      	movs	r2, #16
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b10      	cmp	r3, #16
 800c3e4:	d11e      	bne.n	800c424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2211      	movs	r2, #17
 800c3ec:	4252      	negs	r2, r2
 800c3ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2208      	movs	r2, #8
 800c3f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	69da      	ldr	r2, [r3, #28]
 800c3fc:	23c0      	movs	r3, #192	; 0xc0
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4013      	ands	r3, r2
 800c402:	d004      	beq.n	800c40e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	0018      	movs	r0, r3
 800c408:	f000 f890 	bl	800c52c <HAL_TIM_IC_CaptureCallback>
 800c40c:	e007      	b.n	800c41e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	0018      	movs	r0, r3
 800c412:	f000 f883 	bl	800c51c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	0018      	movs	r0, r3
 800c41a:	f000 f88f 	bl	800c53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	2201      	movs	r2, #1
 800c42c:	4013      	ands	r3, r2
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d10f      	bne.n	800c452 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	2201      	movs	r2, #1
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d108      	bne.n	800c452 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2202      	movs	r2, #2
 800c446:	4252      	negs	r2, r2
 800c448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	0018      	movs	r0, r3
 800c44e:	f7fd f983 	bl	8009758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	2280      	movs	r2, #128	; 0x80
 800c45a:	4013      	ands	r3, r2
 800c45c:	2b80      	cmp	r3, #128	; 0x80
 800c45e:	d10f      	bne.n	800c480 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	2280      	movs	r2, #128	; 0x80
 800c468:	4013      	ands	r3, r2
 800c46a:	2b80      	cmp	r3, #128	; 0x80
 800c46c:	d108      	bne.n	800c480 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2281      	movs	r2, #129	; 0x81
 800c474:	4252      	negs	r2, r2
 800c476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	0018      	movs	r0, r3
 800c47c:	f000 f900 	bl	800c680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	691a      	ldr	r2, [r3, #16]
 800c486:	2380      	movs	r3, #128	; 0x80
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	401a      	ands	r2, r3
 800c48c:	2380      	movs	r3, #128	; 0x80
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	429a      	cmp	r2, r3
 800c492:	d10e      	bne.n	800c4b2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	2280      	movs	r2, #128	; 0x80
 800c49c:	4013      	ands	r3, r2
 800c49e:	2b80      	cmp	r3, #128	; 0x80
 800c4a0:	d107      	bne.n	800c4b2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a1c      	ldr	r2, [pc, #112]	; (800c518 <HAL_TIM_IRQHandler+0x260>)
 800c4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	f000 f8ef 	bl	800c690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	2240      	movs	r2, #64	; 0x40
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b40      	cmp	r3, #64	; 0x40
 800c4be:	d10f      	bne.n	800c4e0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	2240      	movs	r2, #64	; 0x40
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b40      	cmp	r3, #64	; 0x40
 800c4cc:	d108      	bne.n	800c4e0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2241      	movs	r2, #65	; 0x41
 800c4d4:	4252      	negs	r2, r2
 800c4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f000 f836 	bl	800c54c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	2220      	movs	r2, #32
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	2b20      	cmp	r3, #32
 800c4ec:	d10f      	bne.n	800c50e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	2b20      	cmp	r3, #32
 800c4fa:	d108      	bne.n	800c50e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2221      	movs	r2, #33	; 0x21
 800c502:	4252      	negs	r2, r2
 800c504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	0018      	movs	r0, r3
 800c50a:	f000 f8b1 	bl	800c670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c50e:	46c0      	nop			; (mov r8, r8)
 800c510:	46bd      	mov	sp, r7
 800c512:	b002      	add	sp, #8
 800c514:	bd80      	pop	{r7, pc}
 800c516:	46c0      	nop			; (mov r8, r8)
 800c518:	fffffeff 	.word	0xfffffeff

0800c51c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c524:	46c0      	nop			; (mov r8, r8)
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c534:	46c0      	nop			; (mov r8, r8)
 800c536:	46bd      	mov	sp, r7
 800c538:	b002      	add	sp, #8
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c544:	46c0      	nop			; (mov r8, r8)
 800c546:	46bd      	mov	sp, r7
 800c548:	b002      	add	sp, #8
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c554:	46c0      	nop			; (mov r8, r8)
 800c556:	46bd      	mov	sp, r7
 800c558:	b002      	add	sp, #8
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a38      	ldr	r2, [pc, #224]	; (800c650 <TIM_Base_SetConfig+0xf4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d00c      	beq.n	800c58e <TIM_Base_SetConfig+0x32>
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	2380      	movs	r3, #128	; 0x80
 800c578:	05db      	lsls	r3, r3, #23
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d007      	beq.n	800c58e <TIM_Base_SetConfig+0x32>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a34      	ldr	r2, [pc, #208]	; (800c654 <TIM_Base_SetConfig+0xf8>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d003      	beq.n	800c58e <TIM_Base_SetConfig+0x32>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a33      	ldr	r2, [pc, #204]	; (800c658 <TIM_Base_SetConfig+0xfc>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d108      	bne.n	800c5a0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2270      	movs	r2, #112	; 0x70
 800c592:	4393      	bics	r3, r2
 800c594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a2b      	ldr	r2, [pc, #172]	; (800c650 <TIM_Base_SetConfig+0xf4>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d01c      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	2380      	movs	r3, #128	; 0x80
 800c5ac:	05db      	lsls	r3, r3, #23
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d017      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a27      	ldr	r2, [pc, #156]	; (800c654 <TIM_Base_SetConfig+0xf8>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d013      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a26      	ldr	r2, [pc, #152]	; (800c658 <TIM_Base_SetConfig+0xfc>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d00f      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a25      	ldr	r2, [pc, #148]	; (800c65c <TIM_Base_SetConfig+0x100>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d00b      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a24      	ldr	r2, [pc, #144]	; (800c660 <TIM_Base_SetConfig+0x104>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d007      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a23      	ldr	r2, [pc, #140]	; (800c664 <TIM_Base_SetConfig+0x108>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d003      	beq.n	800c5e2 <TIM_Base_SetConfig+0x86>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a22      	ldr	r2, [pc, #136]	; (800c668 <TIM_Base_SetConfig+0x10c>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d108      	bne.n	800c5f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4a21      	ldr	r2, [pc, #132]	; (800c66c <TIM_Base_SetConfig+0x110>)
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2280      	movs	r2, #128	; 0x80
 800c5f8:	4393      	bics	r3, r2
 800c5fa:	001a      	movs	r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	4313      	orrs	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	689a      	ldr	r2, [r3, #8]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a0c      	ldr	r2, [pc, #48]	; (800c650 <TIM_Base_SetConfig+0xf4>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00b      	beq.n	800c63a <TIM_Base_SetConfig+0xde>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a0e      	ldr	r2, [pc, #56]	; (800c660 <TIM_Base_SetConfig+0x104>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d007      	beq.n	800c63a <TIM_Base_SetConfig+0xde>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a0d      	ldr	r2, [pc, #52]	; (800c664 <TIM_Base_SetConfig+0x108>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <TIM_Base_SetConfig+0xde>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a0c      	ldr	r2, [pc, #48]	; (800c668 <TIM_Base_SetConfig+0x10c>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d103      	bne.n	800c642 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	691a      	ldr	r2, [r3, #16]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2201      	movs	r2, #1
 800c646:	615a      	str	r2, [r3, #20]
}
 800c648:	46c0      	nop			; (mov r8, r8)
 800c64a:	46bd      	mov	sp, r7
 800c64c:	b004      	add	sp, #16
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	40012c00 	.word	0x40012c00
 800c654:	40000400 	.word	0x40000400
 800c658:	40000800 	.word	0x40000800
 800c65c:	40002000 	.word	0x40002000
 800c660:	40014000 	.word	0x40014000
 800c664:	40014400 	.word	0x40014400
 800c668:	40014800 	.word	0x40014800
 800c66c:	fffffcff 	.word	0xfffffcff

0800c670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c678:	46c0      	nop			; (mov r8, r8)
 800c67a:	46bd      	mov	sp, r7
 800c67c:	b002      	add	sp, #8
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c688:	46c0      	nop			; (mov r8, r8)
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b002      	add	sp, #8
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c698:	46c0      	nop			; (mov r8, r8)
 800c69a:	46bd      	mov	sp, r7
 800c69c:	b002      	add	sp, #8
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <__NVIC_SetPriority>:
{
 800c6a0:	b590      	push	{r4, r7, lr}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	0002      	movs	r2, r0
 800c6a8:	6039      	str	r1, [r7, #0]
 800c6aa:	1dfb      	adds	r3, r7, #7
 800c6ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c6ae:	1dfb      	adds	r3, r7, #7
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c6b4:	d828      	bhi.n	800c708 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c6b6:	4a2f      	ldr	r2, [pc, #188]	; (800c774 <__NVIC_SetPriority+0xd4>)
 800c6b8:	1dfb      	adds	r3, r7, #7
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	b25b      	sxtb	r3, r3
 800c6be:	089b      	lsrs	r3, r3, #2
 800c6c0:	33c0      	adds	r3, #192	; 0xc0
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	589b      	ldr	r3, [r3, r2]
 800c6c6:	1dfa      	adds	r2, r7, #7
 800c6c8:	7812      	ldrb	r2, [r2, #0]
 800c6ca:	0011      	movs	r1, r2
 800c6cc:	2203      	movs	r2, #3
 800c6ce:	400a      	ands	r2, r1
 800c6d0:	00d2      	lsls	r2, r2, #3
 800c6d2:	21ff      	movs	r1, #255	; 0xff
 800c6d4:	4091      	lsls	r1, r2
 800c6d6:	000a      	movs	r2, r1
 800c6d8:	43d2      	mvns	r2, r2
 800c6da:	401a      	ands	r2, r3
 800c6dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	019b      	lsls	r3, r3, #6
 800c6e2:	22ff      	movs	r2, #255	; 0xff
 800c6e4:	401a      	ands	r2, r3
 800c6e6:	1dfb      	adds	r3, r7, #7
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	4003      	ands	r3, r0
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c6f4:	481f      	ldr	r0, [pc, #124]	; (800c774 <__NVIC_SetPriority+0xd4>)
 800c6f6:	1dfb      	adds	r3, r7, #7
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b25b      	sxtb	r3, r3
 800c6fc:	089b      	lsrs	r3, r3, #2
 800c6fe:	430a      	orrs	r2, r1
 800c700:	33c0      	adds	r3, #192	; 0xc0
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	501a      	str	r2, [r3, r0]
}
 800c706:	e031      	b.n	800c76c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c708:	4a1b      	ldr	r2, [pc, #108]	; (800c778 <__NVIC_SetPriority+0xd8>)
 800c70a:	1dfb      	adds	r3, r7, #7
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	0019      	movs	r1, r3
 800c710:	230f      	movs	r3, #15
 800c712:	400b      	ands	r3, r1
 800c714:	3b08      	subs	r3, #8
 800c716:	089b      	lsrs	r3, r3, #2
 800c718:	3306      	adds	r3, #6
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	18d3      	adds	r3, r2, r3
 800c71e:	3304      	adds	r3, #4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	1dfa      	adds	r2, r7, #7
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	0011      	movs	r1, r2
 800c728:	2203      	movs	r2, #3
 800c72a:	400a      	ands	r2, r1
 800c72c:	00d2      	lsls	r2, r2, #3
 800c72e:	21ff      	movs	r1, #255	; 0xff
 800c730:	4091      	lsls	r1, r2
 800c732:	000a      	movs	r2, r1
 800c734:	43d2      	mvns	r2, r2
 800c736:	401a      	ands	r2, r3
 800c738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	019b      	lsls	r3, r3, #6
 800c73e:	22ff      	movs	r2, #255	; 0xff
 800c740:	401a      	ands	r2, r3
 800c742:	1dfb      	adds	r3, r7, #7
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	0018      	movs	r0, r3
 800c748:	2303      	movs	r3, #3
 800c74a:	4003      	ands	r3, r0
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c750:	4809      	ldr	r0, [pc, #36]	; (800c778 <__NVIC_SetPriority+0xd8>)
 800c752:	1dfb      	adds	r3, r7, #7
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	001c      	movs	r4, r3
 800c758:	230f      	movs	r3, #15
 800c75a:	4023      	ands	r3, r4
 800c75c:	3b08      	subs	r3, #8
 800c75e:	089b      	lsrs	r3, r3, #2
 800c760:	430a      	orrs	r2, r1
 800c762:	3306      	adds	r3, #6
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	18c3      	adds	r3, r0, r3
 800c768:	3304      	adds	r3, #4
 800c76a:	601a      	str	r2, [r3, #0]
}
 800c76c:	46c0      	nop			; (mov r8, r8)
 800c76e:	46bd      	mov	sp, r7
 800c770:	b003      	add	sp, #12
 800c772:	bd90      	pop	{r4, r7, pc}
 800c774:	e000e100 	.word	0xe000e100
 800c778:	e000ed00 	.word	0xe000ed00

0800c77c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c77c:	b580      	push	{r7, lr}
 800c77e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <SysTick_Handler+0x1c>)
 800c782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c784:	f001 fbaa 	bl	800dedc <xTaskGetSchedulerState>
 800c788:	0003      	movs	r3, r0
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d001      	beq.n	800c792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c78e:	f002 f87b 	bl	800e888 <xPortSysTickHandler>
  }
}
 800c792:	46c0      	nop			; (mov r8, r8)
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	e000e010 	.word	0xe000e010

0800c79c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c7a0:	2305      	movs	r3, #5
 800c7a2:	425b      	negs	r3, r3
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	f7ff ff7a 	bl	800c6a0 <__NVIC_SetPriority>
#endif
}
 800c7ac:	46c0      	nop			; (mov r8, r8)
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
	...

0800c7b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7ba:	f3ef 8305 	mrs	r3, IPSR
 800c7be:	603b      	str	r3, [r7, #0]
  return(result);
 800c7c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c7c6:	2306      	movs	r3, #6
 800c7c8:	425b      	negs	r3, r3
 800c7ca:	607b      	str	r3, [r7, #4]
 800c7cc:	e00c      	b.n	800c7e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7ce:	4b09      	ldr	r3, [pc, #36]	; (800c7f4 <osKernelInitialize+0x40>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d105      	bne.n	800c7e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7d6:	4b07      	ldr	r3, [pc, #28]	; (800c7f4 <osKernelInitialize+0x40>)
 800c7d8:	2201      	movs	r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	607b      	str	r3, [r7, #4]
 800c7e0:	e002      	b.n	800c7e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	425b      	negs	r3, r3
 800c7e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7e8:	687b      	ldr	r3, [r7, #4]
}
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	b002      	add	sp, #8
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	46c0      	nop			; (mov r8, r8)
 800c7f4:	200006b0 	.word	0x200006b0

0800c7f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7fe:	f3ef 8305 	mrs	r3, IPSR
 800c802:	603b      	str	r3, [r7, #0]
  return(result);
 800c804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c80a:	2306      	movs	r3, #6
 800c80c:	425b      	negs	r3, r3
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	e010      	b.n	800c834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c812:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <osKernelStart+0x48>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d109      	bne.n	800c82e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c81a:	f7ff ffbf 	bl	800c79c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c81e:	4b08      	ldr	r3, [pc, #32]	; (800c840 <osKernelStart+0x48>)
 800c820:	2202      	movs	r2, #2
 800c822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c824:	f000 ff6e 	bl	800d704 <vTaskStartScheduler>
      stat = osOK;
 800c828:	2300      	movs	r3, #0
 800c82a:	607b      	str	r3, [r7, #4]
 800c82c:	e002      	b.n	800c834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c82e:	2301      	movs	r3, #1
 800c830:	425b      	negs	r3, r3
 800c832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c834:	687b      	ldr	r3, [r7, #4]
}
 800c836:	0018      	movs	r0, r3
 800c838:	46bd      	mov	sp, r7
 800c83a:	b002      	add	sp, #8
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	200006b0 	.word	0x200006b0

0800c844 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c844:	b5b0      	push	{r4, r5, r7, lr}
 800c846:	b08e      	sub	sp, #56	; 0x38
 800c848:	af04      	add	r7, sp, #16
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c850:	2300      	movs	r3, #0
 800c852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c854:	f3ef 8305 	mrs	r3, IPSR
 800c858:	617b      	str	r3, [r7, #20]
  return(result);
 800c85a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d000      	beq.n	800c862 <osThreadNew+0x1e>
 800c860:	e081      	b.n	800c966 <osThreadNew+0x122>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d100      	bne.n	800c86a <osThreadNew+0x26>
 800c868:	e07d      	b.n	800c966 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800c86a:	2380      	movs	r3, #128	; 0x80
 800c86c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c86e:	2318      	movs	r3, #24
 800c870:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c876:	2301      	movs	r3, #1
 800c878:	425b      	negs	r3, r3
 800c87a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d044      	beq.n	800c90c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <osThreadNew+0x4c>
        name = attr->name;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d007      	beq.n	800c8b4 <osThreadNew+0x70>
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	2b38      	cmp	r3, #56	; 0x38
 800c8a8:	d804      	bhi.n	800c8b4 <osThreadNew+0x70>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	d001      	beq.n	800c8b8 <osThreadNew+0x74>
        return (NULL);
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e057      	b.n	800c968 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	089b      	lsrs	r3, r3, #2
 800c8c6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00e      	beq.n	800c8ee <osThreadNew+0xaa>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	2b5b      	cmp	r3, #91	; 0x5b
 800c8d6:	d90a      	bls.n	800c8ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d006      	beq.n	800c8ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <osThreadNew+0xaa>
        mem = 1;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	61bb      	str	r3, [r7, #24]
 800c8ec:	e010      	b.n	800c910 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10c      	bne.n	800c910 <osThreadNew+0xcc>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d108      	bne.n	800c910 <osThreadNew+0xcc>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d104      	bne.n	800c910 <osThreadNew+0xcc>
          mem = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	e001      	b.n	800c910 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d112      	bne.n	800c93c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c91e:	68bd      	ldr	r5, [r7, #8]
 800c920:	6a3c      	ldr	r4, [r7, #32]
 800c922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	9302      	str	r3, [sp, #8]
 800c928:	9201      	str	r2, [sp, #4]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	002b      	movs	r3, r5
 800c930:	0022      	movs	r2, r4
 800c932:	f000 fd3e 	bl	800d3b2 <xTaskCreateStatic>
 800c936:	0003      	movs	r3, r0
 800c938:	613b      	str	r3, [r7, #16]
 800c93a:	e014      	b.n	800c966 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d111      	bne.n	800c966 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	b29a      	uxth	r2, r3
 800c946:	68bc      	ldr	r4, [r7, #8]
 800c948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	2310      	movs	r3, #16
 800c94e:	18fb      	adds	r3, r7, r3
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	0023      	movs	r3, r4
 800c958:	f000 fd6f 	bl	800d43a <xTaskCreate>
 800c95c:	0003      	movs	r3, r0
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d001      	beq.n	800c966 <osThreadNew+0x122>
            hTask = NULL;
 800c962:	2300      	movs	r3, #0
 800c964:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c966:	693b      	ldr	r3, [r7, #16]
}
 800c968:	0018      	movs	r0, r3
 800c96a:	46bd      	mov	sp, r7
 800c96c:	b00a      	add	sp, #40	; 0x28
 800c96e:	bdb0      	pop	{r4, r5, r7, pc}

0800c970 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c978:	f3ef 8305 	mrs	r3, IPSR
 800c97c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c97e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <osDelay+0x1c>
    stat = osErrorISR;
 800c984:	2306      	movs	r3, #6
 800c986:	425b      	negs	r3, r3
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	e008      	b.n	800c99e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d003      	beq.n	800c99e <osDelay+0x2e>
      vTaskDelay(ticks);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	0018      	movs	r0, r3
 800c99a:	f000 fe8d 	bl	800d6b8 <vTaskDelay>
    }
  }

  return (stat);
 800c99e:	68fb      	ldr	r3, [r7, #12]
}
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b004      	add	sp, #16
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <vApplicationGetIdleTaskMemory+0x28>)
 800c9b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	4a05      	ldr	r2, [pc, #20]	; (800c9d4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c9be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2280      	movs	r2, #128	; 0x80
 800c9c4:	601a      	str	r2, [r3, #0]
}
 800c9c6:	46c0      	nop			; (mov r8, r8)
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b004      	add	sp, #16
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	46c0      	nop			; (mov r8, r8)
 800c9d0:	200006b4 	.word	0x200006b4
 800c9d4:	20000710 	.word	0x20000710

0800c9d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4a06      	ldr	r2, [pc, #24]	; (800ca00 <vApplicationGetTimerTaskMemory+0x28>)
 800c9e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	4a05      	ldr	r2, [pc, #20]	; (800ca04 <vApplicationGetTimerTaskMemory+0x2c>)
 800c9ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2280      	movs	r2, #128	; 0x80
 800c9f4:	0052      	lsls	r2, r2, #1
 800c9f6:	601a      	str	r2, [r3, #0]
}
 800c9f8:	46c0      	nop			; (mov r8, r8)
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	b004      	add	sp, #16
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20000910 	.word	0x20000910
 800ca04:	2000096c 	.word	0x2000096c

0800ca08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3308      	adds	r3, #8
 800ca14:	001a      	movs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	4252      	negs	r2, r2
 800ca20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3308      	adds	r3, #8
 800ca26:	001a      	movs	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3308      	adds	r3, #8
 800ca30:	001a      	movs	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca3c:	46c0      	nop			; (mov r8, r8)
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	b002      	add	sp, #8
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	46bd      	mov	sp, r7
 800ca56:	b002      	add	sp, #8
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	46c0      	nop			; (mov r8, r8)
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	b004      	add	sp, #16
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	3301      	adds	r3, #1
 800cab2:	d103      	bne.n	800cabc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e00c      	b.n	800cad6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3308      	adds	r3, #8
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	e002      	b.n	800caca <vListInsert+0x2c>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	60fb      	str	r3, [r7, #12]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d2f6      	bcs.n	800cac4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	1c5a      	adds	r2, r3, #1
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
}
 800cb02:	46c0      	nop			; (mov r8, r8)
 800cb04:	46bd      	mov	sp, r7
 800cb06:	b004      	add	sp, #16
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	6892      	ldr	r2, [r2, #8]
 800cb20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	6852      	ldr	r2, [r2, #4]
 800cb2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d103      	bne.n	800cb3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	689a      	ldr	r2, [r3, #8]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	1e5a      	subs	r2, r3, #1
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
}
 800cb52:	0018      	movs	r0, r3
 800cb54:	46bd      	mov	sp, r7
 800cb56:	b004      	add	sp, #16
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <xQueueGenericReset+0x18>
 800cb6e:	b672      	cpsid	i
 800cb70:	e7fe      	b.n	800cb70 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800cb72:	f001 fe2d 	bl	800e7d0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	434b      	muls	r3, r1
 800cb84:	18d2      	adds	r2, r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba0:	1e59      	subs	r1, r3, #1
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba6:	434b      	muls	r3, r1
 800cba8:	18d2      	adds	r2, r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2244      	movs	r2, #68	; 0x44
 800cbb2:	21ff      	movs	r1, #255	; 0xff
 800cbb4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2245      	movs	r2, #69	; 0x45
 800cbba:	21ff      	movs	r1, #255	; 0xff
 800cbbc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10d      	bne.n	800cbe0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d013      	beq.n	800cbf4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3310      	adds	r3, #16
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f000 ffef 	bl	800dbb4 <xTaskRemoveFromEventList>
 800cbd6:	1e03      	subs	r3, r0, #0
 800cbd8:	d00c      	beq.n	800cbf4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbda:	f001 fde9 	bl	800e7b0 <vPortYield>
 800cbde:	e009      	b.n	800cbf4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3310      	adds	r3, #16
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	f7ff ff0f 	bl	800ca08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3324      	adds	r3, #36	; 0x24
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f7ff ff0a 	bl	800ca08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbf4:	f001 fdfe 	bl	800e7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbf8:	2301      	movs	r3, #1
}
 800cbfa:	0018      	movs	r0, r3
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	b004      	add	sp, #16
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc02:	b590      	push	{r4, r7, lr}
 800cc04:	b089      	sub	sp, #36	; 0x24
 800cc06:	af02      	add	r7, sp, #8
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <xQueueGenericCreateStatic+0x18>
 800cc16:	b672      	cpsid	i
 800cc18:	e7fe      	b.n	800cc18 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <xQueueGenericCreateStatic+0x22>
 800cc20:	b672      	cpsid	i
 800cc22:	e7fe      	b.n	800cc22 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d002      	beq.n	800cc30 <xQueueGenericCreateStatic+0x2e>
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <xQueueGenericCreateStatic+0x32>
 800cc30:	2301      	movs	r3, #1
 800cc32:	e000      	b.n	800cc36 <xQueueGenericCreateStatic+0x34>
 800cc34:	2300      	movs	r3, #0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <xQueueGenericCreateStatic+0x3c>
 800cc3a:	b672      	cpsid	i
 800cc3c:	e7fe      	b.n	800cc3c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d102      	bne.n	800cc4a <xQueueGenericCreateStatic+0x48>
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <xQueueGenericCreateStatic+0x4c>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e000      	b.n	800cc50 <xQueueGenericCreateStatic+0x4e>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <xQueueGenericCreateStatic+0x56>
 800cc54:	b672      	cpsid	i
 800cc56:	e7fe      	b.n	800cc56 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc58:	2350      	movs	r3, #80	; 0x50
 800cc5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2b50      	cmp	r3, #80	; 0x50
 800cc60:	d001      	beq.n	800cc66 <xQueueGenericCreateStatic+0x64>
 800cc62:	b672      	cpsid	i
 800cc64:	e7fe      	b.n	800cc64 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc66:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00e      	beq.n	800cc90 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2246      	movs	r2, #70	; 0x46
 800cc76:	2101      	movs	r1, #1
 800cc78:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc7a:	2328      	movs	r3, #40	; 0x28
 800cc7c:	18fb      	adds	r3, r7, r3
 800cc7e:	781c      	ldrb	r4, [r3, #0]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	68b9      	ldr	r1, [r7, #8]
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	0023      	movs	r3, r4
 800cc8c:	f000 f805 	bl	800cc9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc90:	697b      	ldr	r3, [r7, #20]
	}
 800cc92:	0018      	movs	r0, r3
 800cc94:	46bd      	mov	sp, r7
 800cc96:	b007      	add	sp, #28
 800cc98:	bd90      	pop	{r4, r7, pc}

0800cc9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	001a      	movs	r2, r3
 800cca8:	1cfb      	adds	r3, r7, #3
 800ccaa:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d103      	bne.n	800ccba <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	69ba      	ldr	r2, [r7, #24]
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	e002      	b.n	800ccc0 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	2101      	movs	r1, #1
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	f7ff ff42 	bl	800cb5a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	1cfa      	adds	r2, r7, #3
 800ccda:	214c      	movs	r1, #76	; 0x4c
 800ccdc:	7812      	ldrb	r2, [r2, #0]
 800ccde:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cce0:	46c0      	nop			; (mov r8, r8)
 800cce2:	46bd      	mov	sp, r7
 800cce4:	b004      	add	sp, #16
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08a      	sub	sp, #40	; 0x28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <xQueueGenericSend+0x20>
 800cd04:	b672      	cpsid	i
 800cd06:	e7fe      	b.n	800cd06 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d103      	bne.n	800cd16 <xQueueGenericSend+0x2e>
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <xQueueGenericSend+0x32>
 800cd16:	2301      	movs	r3, #1
 800cd18:	e000      	b.n	800cd1c <xQueueGenericSend+0x34>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <xQueueGenericSend+0x3c>
 800cd20:	b672      	cpsid	i
 800cd22:	e7fe      	b.n	800cd22 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	d103      	bne.n	800cd32 <xQueueGenericSend+0x4a>
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d101      	bne.n	800cd36 <xQueueGenericSend+0x4e>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <xQueueGenericSend+0x50>
 800cd36:	2300      	movs	r3, #0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <xQueueGenericSend+0x58>
 800cd3c:	b672      	cpsid	i
 800cd3e:	e7fe      	b.n	800cd3e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd40:	f001 f8cc 	bl	800dedc <xTaskGetSchedulerState>
 800cd44:	1e03      	subs	r3, r0, #0
 800cd46:	d102      	bne.n	800cd4e <xQueueGenericSend+0x66>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <xQueueGenericSend+0x6a>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e000      	b.n	800cd54 <xQueueGenericSend+0x6c>
 800cd52:	2300      	movs	r3, #0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <xQueueGenericSend+0x74>
 800cd58:	b672      	cpsid	i
 800cd5a:	e7fe      	b.n	800cd5a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd5c:	f001 fd38 	bl	800e7d0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d302      	bcc.n	800cd72 <xQueueGenericSend+0x8a>
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d11e      	bne.n	800cdb0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	68b9      	ldr	r1, [r7, #8]
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	0018      	movs	r0, r3
 800cd7a:	f000 f9a2 	bl	800d0c2 <prvCopyDataToQueue>
 800cd7e:	0003      	movs	r3, r0
 800cd80:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	3324      	adds	r3, #36	; 0x24
 800cd8e:	0018      	movs	r0, r3
 800cd90:	f000 ff10 	bl	800dbb4 <xTaskRemoveFromEventList>
 800cd94:	1e03      	subs	r3, r0, #0
 800cd96:	d007      	beq.n	800cda8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd98:	f001 fd0a 	bl	800e7b0 <vPortYield>
 800cd9c:	e004      	b.n	800cda8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cda4:	f001 fd04 	bl	800e7b0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cda8:	f001 fd24 	bl	800e7f4 <vPortExitCritical>
				return pdPASS;
 800cdac:	2301      	movs	r3, #1
 800cdae:	e05b      	b.n	800ce68 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d103      	bne.n	800cdbe <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdb6:	f001 fd1d 	bl	800e7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e054      	b.n	800ce68 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d106      	bne.n	800cdd2 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdc4:	2314      	movs	r3, #20
 800cdc6:	18fb      	adds	r3, r7, r3
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f000 ff4f 	bl	800dc6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdd2:	f001 fd0f 	bl	800e7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdd6:	f000 fce9 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdda:	f001 fcf9 	bl	800e7d0 <vPortEnterCritical>
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	2244      	movs	r2, #68	; 0x44
 800cde2:	5c9b      	ldrb	r3, [r3, r2]
 800cde4:	b25b      	sxtb	r3, r3
 800cde6:	3301      	adds	r3, #1
 800cde8:	d103      	bne.n	800cdf2 <xQueueGenericSend+0x10a>
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	2244      	movs	r2, #68	; 0x44
 800cdee:	2100      	movs	r1, #0
 800cdf0:	5499      	strb	r1, [r3, r2]
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	2245      	movs	r2, #69	; 0x45
 800cdf6:	5c9b      	ldrb	r3, [r3, r2]
 800cdf8:	b25b      	sxtb	r3, r3
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	d103      	bne.n	800ce06 <xQueueGenericSend+0x11e>
 800cdfe:	6a3b      	ldr	r3, [r7, #32]
 800ce00:	2245      	movs	r2, #69	; 0x45
 800ce02:	2100      	movs	r1, #0
 800ce04:	5499      	strb	r1, [r3, r2]
 800ce06:	f001 fcf5 	bl	800e7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce0a:	1d3a      	adds	r2, r7, #4
 800ce0c:	2314      	movs	r3, #20
 800ce0e:	18fb      	adds	r3, r7, r3
 800ce10:	0011      	movs	r1, r2
 800ce12:	0018      	movs	r0, r3
 800ce14:	f000 ff3e 	bl	800dc94 <xTaskCheckForTimeOut>
 800ce18:	1e03      	subs	r3, r0, #0
 800ce1a:	d11e      	bne.n	800ce5a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	0018      	movs	r0, r3
 800ce20:	f000 fa54 	bl	800d2cc <prvIsQueueFull>
 800ce24:	1e03      	subs	r3, r0, #0
 800ce26:	d011      	beq.n	800ce4c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	3310      	adds	r3, #16
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	0011      	movs	r1, r2
 800ce30:	0018      	movs	r0, r3
 800ce32:	f000 fe7b 	bl	800db2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	0018      	movs	r0, r3
 800ce3a:	f000 f9d3 	bl	800d1e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce3e:	f000 fcc1 	bl	800d7c4 <xTaskResumeAll>
 800ce42:	1e03      	subs	r3, r0, #0
 800ce44:	d18a      	bne.n	800cd5c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800ce46:	f001 fcb3 	bl	800e7b0 <vPortYield>
 800ce4a:	e787      	b.n	800cd5c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce4c:	6a3b      	ldr	r3, [r7, #32]
 800ce4e:	0018      	movs	r0, r3
 800ce50:	f000 f9c8 	bl	800d1e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce54:	f000 fcb6 	bl	800d7c4 <xTaskResumeAll>
 800ce58:	e780      	b.n	800cd5c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	f000 f9c1 	bl	800d1e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce62:	f000 fcaf 	bl	800d7c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce68:	0018      	movs	r0, r3
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	b00a      	add	sp, #40	; 0x28
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b08b      	sub	sp, #44	; 0x2c
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d101      	bne.n	800ce8c <xQueueGenericSendFromISR+0x1c>
 800ce88:	b672      	cpsid	i
 800ce8a:	e7fe      	b.n	800ce8a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d103      	bne.n	800ce9a <xQueueGenericSendFromISR+0x2a>
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <xQueueGenericSendFromISR+0x2e>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e000      	b.n	800cea0 <xQueueGenericSendFromISR+0x30>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d101      	bne.n	800cea8 <xQueueGenericSendFromISR+0x38>
 800cea4:	b672      	cpsid	i
 800cea6:	e7fe      	b.n	800cea6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d103      	bne.n	800ceb6 <xQueueGenericSendFromISR+0x46>
 800ceae:	6a3b      	ldr	r3, [r7, #32]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d101      	bne.n	800ceba <xQueueGenericSendFromISR+0x4a>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e000      	b.n	800cebc <xQueueGenericSendFromISR+0x4c>
 800ceba:	2300      	movs	r3, #0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <xQueueGenericSendFromISR+0x54>
 800cec0:	b672      	cpsid	i
 800cec2:	e7fe      	b.n	800cec2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cec4:	f001 fcae 	bl	800e824 <ulSetInterruptMaskFromISR>
 800cec8:	0003      	movs	r3, r0
 800ceca:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ced0:	6a3b      	ldr	r3, [r7, #32]
 800ced2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d302      	bcc.n	800cede <xQueueGenericSendFromISR+0x6e>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d131      	bne.n	800cf42 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cede:	241b      	movs	r4, #27
 800cee0:	193b      	adds	r3, r7, r4
 800cee2:	6a3a      	ldr	r2, [r7, #32]
 800cee4:	2145      	movs	r1, #69	; 0x45
 800cee6:	5c52      	ldrb	r2, [r2, r1]
 800cee8:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	0018      	movs	r0, r3
 800cef8:	f000 f8e3 	bl	800d0c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cefc:	193b      	adds	r3, r7, r4
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	b25b      	sxtb	r3, r3
 800cf02:	3301      	adds	r3, #1
 800cf04:	d111      	bne.n	800cf2a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d016      	beq.n	800cf3c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	3324      	adds	r3, #36	; 0x24
 800cf12:	0018      	movs	r0, r3
 800cf14:	f000 fe4e 	bl	800dbb4 <xTaskRemoveFromEventList>
 800cf18:	1e03      	subs	r3, r0, #0
 800cf1a:	d00f      	beq.n	800cf3c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00c      	beq.n	800cf3c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	e008      	b.n	800cf3c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf2a:	231b      	movs	r3, #27
 800cf2c:	18fb      	adds	r3, r7, r3
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	3301      	adds	r3, #1
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	b259      	sxtb	r1, r3
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	2245      	movs	r2, #69	; 0x45
 800cf3a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800cf40:	e001      	b.n	800cf46 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	0018      	movs	r0, r3
 800cf4a:	f001 fc71 	bl	800e830 <vClearInterruptMaskFromISR>

	return xReturn;
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf50:	0018      	movs	r0, r3
 800cf52:	46bd      	mov	sp, r7
 800cf54:	b00b      	add	sp, #44	; 0x2c
 800cf56:	bd90      	pop	{r4, r7, pc}

0800cf58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf64:	2300      	movs	r3, #0
 800cf66:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <xQueueReceive+0x1e>
 800cf72:	b672      	cpsid	i
 800cf74:	e7fe      	b.n	800cf74 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <xQueueReceive+0x2c>
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <xQueueReceive+0x30>
 800cf84:	2301      	movs	r3, #1
 800cf86:	e000      	b.n	800cf8a <xQueueReceive+0x32>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <xQueueReceive+0x3a>
 800cf8e:	b672      	cpsid	i
 800cf90:	e7fe      	b.n	800cf90 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf92:	f000 ffa3 	bl	800dedc <xTaskGetSchedulerState>
 800cf96:	1e03      	subs	r3, r0, #0
 800cf98:	d102      	bne.n	800cfa0 <xQueueReceive+0x48>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <xQueueReceive+0x4c>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e000      	b.n	800cfa6 <xQueueReceive+0x4e>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <xQueueReceive+0x56>
 800cfaa:	b672      	cpsid	i
 800cfac:	e7fe      	b.n	800cfac <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfae:	f001 fc0f 	bl	800e7d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d01a      	beq.n	800cff4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	0011      	movs	r1, r2
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f000 f8e7 	bl	800d198 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	1e5a      	subs	r2, r3, #1
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d008      	beq.n	800cfec <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	3310      	adds	r3, #16
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f000 fde8 	bl	800dbb4 <xTaskRemoveFromEventList>
 800cfe4:	1e03      	subs	r3, r0, #0
 800cfe6:	d001      	beq.n	800cfec <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfe8:	f001 fbe2 	bl	800e7b0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfec:	f001 fc02 	bl	800e7f4 <vPortExitCritical>
				return pdPASS;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e062      	b.n	800d0ba <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d103      	bne.n	800d002 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cffa:	f001 fbfb 	bl	800e7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cffe:	2300      	movs	r3, #0
 800d000:	e05b      	b.n	800d0ba <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d106      	bne.n	800d016 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d008:	2314      	movs	r3, #20
 800d00a:	18fb      	adds	r3, r7, r3
 800d00c:	0018      	movs	r0, r3
 800d00e:	f000 fe2d 	bl	800dc6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d012:	2301      	movs	r3, #1
 800d014:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d016:	f001 fbed 	bl	800e7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d01a:	f000 fbc7 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d01e:	f001 fbd7 	bl	800e7d0 <vPortEnterCritical>
 800d022:	6a3b      	ldr	r3, [r7, #32]
 800d024:	2244      	movs	r2, #68	; 0x44
 800d026:	5c9b      	ldrb	r3, [r3, r2]
 800d028:	b25b      	sxtb	r3, r3
 800d02a:	3301      	adds	r3, #1
 800d02c:	d103      	bne.n	800d036 <xQueueReceive+0xde>
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	2244      	movs	r2, #68	; 0x44
 800d032:	2100      	movs	r1, #0
 800d034:	5499      	strb	r1, [r3, r2]
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	2245      	movs	r2, #69	; 0x45
 800d03a:	5c9b      	ldrb	r3, [r3, r2]
 800d03c:	b25b      	sxtb	r3, r3
 800d03e:	3301      	adds	r3, #1
 800d040:	d103      	bne.n	800d04a <xQueueReceive+0xf2>
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	2245      	movs	r2, #69	; 0x45
 800d046:	2100      	movs	r1, #0
 800d048:	5499      	strb	r1, [r3, r2]
 800d04a:	f001 fbd3 	bl	800e7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d04e:	1d3a      	adds	r2, r7, #4
 800d050:	2314      	movs	r3, #20
 800d052:	18fb      	adds	r3, r7, r3
 800d054:	0011      	movs	r1, r2
 800d056:	0018      	movs	r0, r3
 800d058:	f000 fe1c 	bl	800dc94 <xTaskCheckForTimeOut>
 800d05c:	1e03      	subs	r3, r0, #0
 800d05e:	d11e      	bne.n	800d09e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	0018      	movs	r0, r3
 800d064:	f000 f91c 	bl	800d2a0 <prvIsQueueEmpty>
 800d068:	1e03      	subs	r3, r0, #0
 800d06a:	d011      	beq.n	800d090 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	3324      	adds	r3, #36	; 0x24
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	0011      	movs	r1, r2
 800d074:	0018      	movs	r0, r3
 800d076:	f000 fd59 	bl	800db2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	0018      	movs	r0, r3
 800d07e:	f000 f8b1 	bl	800d1e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d082:	f000 fb9f 	bl	800d7c4 <xTaskResumeAll>
 800d086:	1e03      	subs	r3, r0, #0
 800d088:	d191      	bne.n	800cfae <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800d08a:	f001 fb91 	bl	800e7b0 <vPortYield>
 800d08e:	e78e      	b.n	800cfae <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	0018      	movs	r0, r3
 800d094:	f000 f8a6 	bl	800d1e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d098:	f000 fb94 	bl	800d7c4 <xTaskResumeAll>
 800d09c:	e787      	b.n	800cfae <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	0018      	movs	r0, r3
 800d0a2:	f000 f89f 	bl	800d1e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0a6:	f000 fb8d 	bl	800d7c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f000 f8f7 	bl	800d2a0 <prvIsQueueEmpty>
 800d0b2:	1e03      	subs	r3, r0, #0
 800d0b4:	d100      	bne.n	800d0b8 <xQueueReceive+0x160>
 800d0b6:	e77a      	b.n	800cfae <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0ba:	0018      	movs	r0, r3
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	b00a      	add	sp, #40	; 0x28
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b086      	sub	sp, #24
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	60f8      	str	r0, [r7, #12]
 800d0ca:	60b9      	str	r1, [r7, #8]
 800d0cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10e      	bne.n	800d0fe <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d14e      	bne.n	800d186 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	f000 ff11 	bl	800df14 <xTaskPriorityDisinherit>
 800d0f2:	0003      	movs	r3, r0
 800d0f4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	609a      	str	r2, [r3, #8]
 800d0fc:	e043      	b.n	800d186 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d119      	bne.n	800d138 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6858      	ldr	r0, [r3, #4]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	0019      	movs	r1, r3
 800d110:	f001 ffec 	bl	800f0ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11c:	18d2      	adds	r2, r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d32b      	bcc.n	800d186 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	605a      	str	r2, [r3, #4]
 800d136:	e026      	b.n	800d186 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	68d8      	ldr	r0, [r3, #12]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	0019      	movs	r1, r3
 800d144:	f001 ffd2 	bl	800f0ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d150:	425b      	negs	r3, r3
 800d152:	18d2      	adds	r2, r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	68da      	ldr	r2, [r3, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	429a      	cmp	r2, r3
 800d162:	d207      	bcs.n	800d174 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16c:	425b      	negs	r3, r3
 800d16e:	18d2      	adds	r2, r2, r3
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b02      	cmp	r3, #2
 800d178:	d105      	bne.n	800d186 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	3b01      	subs	r3, #1
 800d184:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	1c5a      	adds	r2, r3, #1
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d18e:	697b      	ldr	r3, [r7, #20]
}
 800d190:	0018      	movs	r0, r3
 800d192:	46bd      	mov	sp, r7
 800d194:	b006      	add	sp, #24
 800d196:	bd80      	pop	{r7, pc}

0800d198 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d018      	beq.n	800d1dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68da      	ldr	r2, [r3, #12]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b2:	18d2      	adds	r2, r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68da      	ldr	r2, [r3, #12]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d303      	bcc.n	800d1cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	68d9      	ldr	r1, [r3, #12]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f001 ff88 	bl	800f0ec <memcpy>
	}
}
 800d1dc:	46c0      	nop			; (mov r8, r8)
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	b002      	add	sp, #8
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1ec:	f001 faf0 	bl	800e7d0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1f0:	230f      	movs	r3, #15
 800d1f2:	18fb      	adds	r3, r7, r3
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	2145      	movs	r1, #69	; 0x45
 800d1f8:	5c52      	ldrb	r2, [r2, r1]
 800d1fa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1fc:	e013      	b.n	800d226 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d202:	2b00      	cmp	r3, #0
 800d204:	d016      	beq.n	800d234 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3324      	adds	r3, #36	; 0x24
 800d20a:	0018      	movs	r0, r3
 800d20c:	f000 fcd2 	bl	800dbb4 <xTaskRemoveFromEventList>
 800d210:	1e03      	subs	r3, r0, #0
 800d212:	d001      	beq.n	800d218 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d214:	f000 fd8e 	bl	800dd34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d218:	210f      	movs	r1, #15
 800d21a:	187b      	adds	r3, r7, r1
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	3b01      	subs	r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	187b      	adds	r3, r7, r1
 800d224:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d226:	230f      	movs	r3, #15
 800d228:	18fb      	adds	r3, r7, r3
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	b25b      	sxtb	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	dce5      	bgt.n	800d1fe <prvUnlockQueue+0x1a>
 800d232:	e000      	b.n	800d236 <prvUnlockQueue+0x52>
					break;
 800d234:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2245      	movs	r2, #69	; 0x45
 800d23a:	21ff      	movs	r1, #255	; 0xff
 800d23c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800d23e:	f001 fad9 	bl	800e7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d242:	f001 fac5 	bl	800e7d0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d246:	230e      	movs	r3, #14
 800d248:	18fb      	adds	r3, r7, r3
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	2144      	movs	r1, #68	; 0x44
 800d24e:	5c52      	ldrb	r2, [r2, r1]
 800d250:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d252:	e013      	b.n	800d27c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d016      	beq.n	800d28a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	3310      	adds	r3, #16
 800d260:	0018      	movs	r0, r3
 800d262:	f000 fca7 	bl	800dbb4 <xTaskRemoveFromEventList>
 800d266:	1e03      	subs	r3, r0, #0
 800d268:	d001      	beq.n	800d26e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800d26a:	f000 fd63 	bl	800dd34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d26e:	210e      	movs	r1, #14
 800d270:	187b      	adds	r3, r7, r1
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	3b01      	subs	r3, #1
 800d276:	b2da      	uxtb	r2, r3
 800d278:	187b      	adds	r3, r7, r1
 800d27a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d27c:	230e      	movs	r3, #14
 800d27e:	18fb      	adds	r3, r7, r3
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	b25b      	sxtb	r3, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	dce5      	bgt.n	800d254 <prvUnlockQueue+0x70>
 800d288:	e000      	b.n	800d28c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800d28a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2244      	movs	r2, #68	; 0x44
 800d290:	21ff      	movs	r1, #255	; 0xff
 800d292:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800d294:	f001 faae 	bl	800e7f4 <vPortExitCritical>
}
 800d298:	46c0      	nop			; (mov r8, r8)
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b004      	add	sp, #16
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2a8:	f001 fa92 	bl	800e7d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	e001      	b.n	800d2be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2be:	f001 fa99 	bl	800e7f4 <vPortExitCritical>

	return xReturn;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
}
 800d2c4:	0018      	movs	r0, r3
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	b004      	add	sp, #16
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2d4:	f001 fa7c 	bl	800e7d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d102      	bne.n	800d2ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	e001      	b.n	800d2ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2ee:	f001 fa81 	bl	800e7f4 <vPortExitCritical>

	return xReturn;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
}
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	b004      	add	sp, #16
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d306:	2300      	movs	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	e015      	b.n	800d338 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d30c:	4b0e      	ldr	r3, [pc, #56]	; (800d348 <vQueueAddToRegistry+0x4c>)
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	00d2      	lsls	r2, r2, #3
 800d312:	58d3      	ldr	r3, [r2, r3]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10c      	bne.n	800d332 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d318:	4b0b      	ldr	r3, [pc, #44]	; (800d348 <vQueueAddToRegistry+0x4c>)
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	00d2      	lsls	r2, r2, #3
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d322:	4a09      	ldr	r2, [pc, #36]	; (800d348 <vQueueAddToRegistry+0x4c>)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	18d3      	adds	r3, r2, r3
 800d32a:	3304      	adds	r3, #4
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d330:	e006      	b.n	800d340 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3301      	adds	r3, #1
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	d9e6      	bls.n	800d30c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d33e:	46c0      	nop			; (mov r8, r8)
 800d340:	46c0      	nop			; (mov r8, r8)
 800d342:	46bd      	mov	sp, r7
 800d344:	b004      	add	sp, #16
 800d346:	bd80      	pop	{r7, pc}
 800d348:	200055d8 	.word	0x200055d8

0800d34c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d35c:	f001 fa38 	bl	800e7d0 <vPortEnterCritical>
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2244      	movs	r2, #68	; 0x44
 800d364:	5c9b      	ldrb	r3, [r3, r2]
 800d366:	b25b      	sxtb	r3, r3
 800d368:	3301      	adds	r3, #1
 800d36a:	d103      	bne.n	800d374 <vQueueWaitForMessageRestricted+0x28>
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	2244      	movs	r2, #68	; 0x44
 800d370:	2100      	movs	r1, #0
 800d372:	5499      	strb	r1, [r3, r2]
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2245      	movs	r2, #69	; 0x45
 800d378:	5c9b      	ldrb	r3, [r3, r2]
 800d37a:	b25b      	sxtb	r3, r3
 800d37c:	3301      	adds	r3, #1
 800d37e:	d103      	bne.n	800d388 <vQueueWaitForMessageRestricted+0x3c>
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2245      	movs	r2, #69	; 0x45
 800d384:	2100      	movs	r1, #0
 800d386:	5499      	strb	r1, [r3, r2]
 800d388:	f001 fa34 	bl	800e7f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	2b00      	cmp	r3, #0
 800d392:	d106      	bne.n	800d3a2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	3324      	adds	r3, #36	; 0x24
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	0018      	movs	r0, r3
 800d39e:	f000 fbe3 	bl	800db68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	f7ff ff1d 	bl	800d1e4 <prvUnlockQueue>
	}
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	b006      	add	sp, #24
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3b2:	b590      	push	{r4, r7, lr}
 800d3b4:	b08d      	sub	sp, #52	; 0x34
 800d3b6:	af04      	add	r7, sp, #16
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	607a      	str	r2, [r7, #4]
 800d3be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <xTaskCreateStatic+0x18>
 800d3c6:	b672      	cpsid	i
 800d3c8:	e7fe      	b.n	800d3c8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <xTaskCreateStatic+0x22>
 800d3d0:	b672      	cpsid	i
 800d3d2:	e7fe      	b.n	800d3d2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3d4:	235c      	movs	r3, #92	; 0x5c
 800d3d6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2b5c      	cmp	r3, #92	; 0x5c
 800d3dc:	d001      	beq.n	800d3e2 <xTaskCreateStatic+0x30>
 800d3de:	b672      	cpsid	i
 800d3e0:	e7fe      	b.n	800d3e0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d3e2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d020      	beq.n	800d42c <xTaskCreateStatic+0x7a>
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01d      	beq.n	800d42c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	2259      	movs	r2, #89	; 0x59
 800d3fe:	2102      	movs	r1, #2
 800d400:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d402:	683c      	ldr	r4, [r7, #0]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	68b9      	ldr	r1, [r7, #8]
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	2300      	movs	r3, #0
 800d40c:	9303      	str	r3, [sp, #12]
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	9302      	str	r3, [sp, #8]
 800d412:	2318      	movs	r3, #24
 800d414:	18fb      	adds	r3, r7, r3
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	0023      	movs	r3, r4
 800d41e:	f000 f859 	bl	800d4d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	0018      	movs	r0, r3
 800d426:	f000 f8df 	bl	800d5e8 <prvAddNewTaskToReadyList>
 800d42a:	e001      	b.n	800d430 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800d42c:	2300      	movs	r3, #0
 800d42e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d430:	69bb      	ldr	r3, [r7, #24]
	}
 800d432:	0018      	movs	r0, r3
 800d434:	46bd      	mov	sp, r7
 800d436:	b009      	add	sp, #36	; 0x24
 800d438:	bd90      	pop	{r4, r7, pc}

0800d43a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d43a:	b590      	push	{r4, r7, lr}
 800d43c:	b08d      	sub	sp, #52	; 0x34
 800d43e:	af04      	add	r7, sp, #16
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	603b      	str	r3, [r7, #0]
 800d446:	1dbb      	adds	r3, r7, #6
 800d448:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d44a:	1dbb      	adds	r3, r7, #6
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	0018      	movs	r0, r3
 800d452:	f001 fa55 	bl	800e900 <pvPortMalloc>
 800d456:	0003      	movs	r3, r0
 800d458:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d010      	beq.n	800d482 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d460:	205c      	movs	r0, #92	; 0x5c
 800d462:	f001 fa4d 	bl	800e900 <pvPortMalloc>
 800d466:	0003      	movs	r3, r0
 800d468:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	631a      	str	r2, [r3, #48]	; 0x30
 800d476:	e006      	b.n	800d486 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	0018      	movs	r0, r3
 800d47c:	f001 faf2 	bl	800ea64 <vPortFree>
 800d480:	e001      	b.n	800d486 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d01a      	beq.n	800d4c2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	2259      	movs	r2, #89	; 0x59
 800d490:	2100      	movs	r1, #0
 800d492:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d494:	1dbb      	adds	r3, r7, #6
 800d496:	881a      	ldrh	r2, [r3, #0]
 800d498:	683c      	ldr	r4, [r7, #0]
 800d49a:	68b9      	ldr	r1, [r7, #8]
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9303      	str	r3, [sp, #12]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	9302      	str	r3, [sp, #8]
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	0023      	movs	r3, r4
 800d4b0:	f000 f810 	bl	800d4d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	0018      	movs	r0, r3
 800d4b8:	f000 f896 	bl	800d5e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	61bb      	str	r3, [r7, #24]
 800d4c0:	e002      	b.n	800d4c8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	425b      	negs	r3, r3
 800d4c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4c8:	69bb      	ldr	r3, [r7, #24]
	}
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	b009      	add	sp, #36	; 0x24
 800d4d0:	bd90      	pop	{r4, r7, pc}
	...

0800d4d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	001a      	movs	r2, r3
 800d4ec:	21a5      	movs	r1, #165	; 0xa5
 800d4ee:	f001 fe19 	bl	800f124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	493a      	ldr	r1, [pc, #232]	; (800d5e4 <prvInitialiseNewTask+0x110>)
 800d4fa:	468c      	mov	ip, r1
 800d4fc:	4463      	add	r3, ip
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	18d3      	adds	r3, r2, r3
 800d502:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2207      	movs	r2, #7
 800d508:	4393      	bics	r3, r2
 800d50a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	2207      	movs	r2, #7
 800d510:	4013      	ands	r3, r2
 800d512:	d001      	beq.n	800d518 <prvInitialiseNewTask+0x44>
 800d514:	b672      	cpsid	i
 800d516:	e7fe      	b.n	800d516 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d020      	beq.n	800d560 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d51e:	2300      	movs	r3, #0
 800d520:	617b      	str	r3, [r7, #20]
 800d522:	e013      	b.n	800d54c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	18d3      	adds	r3, r2, r3
 800d52a:	7818      	ldrb	r0, [r3, #0]
 800d52c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d52e:	2134      	movs	r1, #52	; 0x34
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	18d3      	adds	r3, r2, r3
 800d534:	185b      	adds	r3, r3, r1
 800d536:	1c02      	adds	r2, r0, #0
 800d538:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	18d3      	adds	r3, r2, r3
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d006      	beq.n	800d554 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	3301      	adds	r3, #1
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2b0f      	cmp	r3, #15
 800d550:	d9e8      	bls.n	800d524 <prvInitialiseNewTask+0x50>
 800d552:	e000      	b.n	800d556 <prvInitialiseNewTask+0x82>
			{
				break;
 800d554:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d558:	2243      	movs	r2, #67	; 0x43
 800d55a:	2100      	movs	r1, #0
 800d55c:	5499      	strb	r1, [r3, r2]
 800d55e:	e003      	b.n	800d568 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	2234      	movs	r2, #52	; 0x34
 800d564:	2100      	movs	r1, #0
 800d566:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	2b37      	cmp	r3, #55	; 0x37
 800d56c:	d901      	bls.n	800d572 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d56e:	2337      	movs	r3, #55	; 0x37
 800d570:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	6a3a      	ldr	r2, [r7, #32]
 800d576:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	6a3a      	ldr	r2, [r7, #32]
 800d57c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d580:	2200      	movs	r2, #0
 800d582:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	3304      	adds	r3, #4
 800d588:	0018      	movs	r0, r3
 800d58a:	f7ff fa5b 	bl	800ca44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d590:	3318      	adds	r3, #24
 800d592:	0018      	movs	r0, r3
 800d594:	f7ff fa56 	bl	800ca44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d59c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	2238      	movs	r2, #56	; 0x38
 800d5a2:	1ad2      	subs	r2, r2, r3
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	2258      	movs	r2, #88	; 0x58
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	68f9      	ldr	r1, [r7, #12]
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	0018      	movs	r0, r3
 800d5c4:	f001 f86a 	bl	800e69c <pxPortInitialiseStack>
 800d5c8:	0002      	movs	r2, r0
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5da:	46c0      	nop			; (mov r8, r8)
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	b006      	add	sp, #24
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	3fffffff 	.word	0x3fffffff

0800d5e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d5f0:	f001 f8ee 	bl	800e7d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d5f4:	4b2a      	ldr	r3, [pc, #168]	; (800d6a0 <prvAddNewTaskToReadyList+0xb8>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	1c5a      	adds	r2, r3, #1
 800d5fa:	4b29      	ldr	r3, [pc, #164]	; (800d6a0 <prvAddNewTaskToReadyList+0xb8>)
 800d5fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d5fe:	4b29      	ldr	r3, [pc, #164]	; (800d6a4 <prvAddNewTaskToReadyList+0xbc>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d109      	bne.n	800d61a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d606:	4b27      	ldr	r3, [pc, #156]	; (800d6a4 <prvAddNewTaskToReadyList+0xbc>)
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d60c:	4b24      	ldr	r3, [pc, #144]	; (800d6a0 <prvAddNewTaskToReadyList+0xb8>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d110      	bne.n	800d636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d614:	f000 fbaa 	bl	800dd6c <prvInitialiseTaskLists>
 800d618:	e00d      	b.n	800d636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d61a:	4b23      	ldr	r3, [pc, #140]	; (800d6a8 <prvAddNewTaskToReadyList+0xc0>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d109      	bne.n	800d636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d622:	4b20      	ldr	r3, [pc, #128]	; (800d6a4 <prvAddNewTaskToReadyList+0xbc>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d802      	bhi.n	800d636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d630:	4b1c      	ldr	r3, [pc, #112]	; (800d6a4 <prvAddNewTaskToReadyList+0xbc>)
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d636:	4b1d      	ldr	r3, [pc, #116]	; (800d6ac <prvAddNewTaskToReadyList+0xc4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	4b1b      	ldr	r3, [pc, #108]	; (800d6ac <prvAddNewTaskToReadyList+0xc4>)
 800d63e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d640:	4b1a      	ldr	r3, [pc, #104]	; (800d6ac <prvAddNewTaskToReadyList+0xc4>)
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64c:	4b18      	ldr	r3, [pc, #96]	; (800d6b0 <prvAddNewTaskToReadyList+0xc8>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d903      	bls.n	800d65c <prvAddNewTaskToReadyList+0x74>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d658:	4b15      	ldr	r3, [pc, #84]	; (800d6b0 <prvAddNewTaskToReadyList+0xc8>)
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d660:	0013      	movs	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	189b      	adds	r3, r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4a12      	ldr	r2, [pc, #72]	; (800d6b4 <prvAddNewTaskToReadyList+0xcc>)
 800d66a:	189a      	adds	r2, r3, r2
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3304      	adds	r3, #4
 800d670:	0019      	movs	r1, r3
 800d672:	0010      	movs	r0, r2
 800d674:	f7ff f9f1 	bl	800ca5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d678:	f001 f8bc 	bl	800e7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <prvAddNewTaskToReadyList+0xc0>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d008      	beq.n	800d696 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d684:	4b07      	ldr	r3, [pc, #28]	; (800d6a4 <prvAddNewTaskToReadyList+0xbc>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68e:	429a      	cmp	r2, r3
 800d690:	d201      	bcs.n	800d696 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d692:	f001 f88d 	bl	800e7b0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d696:	46c0      	nop			; (mov r8, r8)
 800d698:	46bd      	mov	sp, r7
 800d69a:	b002      	add	sp, #8
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	46c0      	nop			; (mov r8, r8)
 800d6a0:	20001240 	.word	0x20001240
 800d6a4:	20000d6c 	.word	0x20000d6c
 800d6a8:	2000124c 	.word	0x2000124c
 800d6ac:	2000125c 	.word	0x2000125c
 800d6b0:	20001248 	.word	0x20001248
 800d6b4:	20000d70 	.word	0x20000d70

0800d6b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d010      	beq.n	800d6ec <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d6ca:	4b0d      	ldr	r3, [pc, #52]	; (800d700 <vTaskDelay+0x48>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <vTaskDelay+0x1e>
 800d6d2:	b672      	cpsid	i
 800d6d4:	e7fe      	b.n	800d6d4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d6d6:	f000 f869 	bl	800d7ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2100      	movs	r1, #0
 800d6de:	0018      	movs	r0, r3
 800d6e0:	f000 fc74 	bl	800dfcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6e4:	f000 f86e 	bl	800d7c4 <xTaskResumeAll>
 800d6e8:	0003      	movs	r3, r0
 800d6ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800d6f2:	f001 f85d 	bl	800e7b0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6f6:	46c0      	nop			; (mov r8, r8)
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	b004      	add	sp, #16
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	46c0      	nop			; (mov r8, r8)
 800d700:	20001268 	.word	0x20001268

0800d704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b089      	sub	sp, #36	; 0x24
 800d708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d712:	003a      	movs	r2, r7
 800d714:	1d39      	adds	r1, r7, #4
 800d716:	2308      	movs	r3, #8
 800d718:	18fb      	adds	r3, r7, r3
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7ff f944 	bl	800c9a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d720:	683c      	ldr	r4, [r7, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	491b      	ldr	r1, [pc, #108]	; (800d794 <vTaskStartScheduler+0x90>)
 800d728:	481b      	ldr	r0, [pc, #108]	; (800d798 <vTaskStartScheduler+0x94>)
 800d72a:	9202      	str	r2, [sp, #8]
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	2300      	movs	r3, #0
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	2300      	movs	r3, #0
 800d734:	0022      	movs	r2, r4
 800d736:	f7ff fe3c 	bl	800d3b2 <xTaskCreateStatic>
 800d73a:	0002      	movs	r2, r0
 800d73c:	4b17      	ldr	r3, [pc, #92]	; (800d79c <vTaskStartScheduler+0x98>)
 800d73e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d740:	4b16      	ldr	r3, [pc, #88]	; (800d79c <vTaskStartScheduler+0x98>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d748:	2301      	movs	r3, #1
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	e001      	b.n	800d752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d103      	bne.n	800d760 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800d758:	f000 fc8c 	bl	800e074 <xTimerCreateTimerTask>
 800d75c:	0003      	movs	r3, r0
 800d75e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d10d      	bne.n	800d782 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800d766:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d768:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <vTaskStartScheduler+0x9c>)
 800d76a:	2201      	movs	r2, #1
 800d76c:	4252      	negs	r2, r2
 800d76e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d770:	4b0c      	ldr	r3, [pc, #48]	; (800d7a4 <vTaskStartScheduler+0xa0>)
 800d772:	2201      	movs	r2, #1
 800d774:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d776:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <vTaskStartScheduler+0xa4>)
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d77c:	f000 fff4 	bl	800e768 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d780:	e004      	b.n	800d78c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3301      	adds	r3, #1
 800d786:	d101      	bne.n	800d78c <vTaskStartScheduler+0x88>
 800d788:	b672      	cpsid	i
 800d78a:	e7fe      	b.n	800d78a <vTaskStartScheduler+0x86>
}
 800d78c:	46c0      	nop			; (mov r8, r8)
 800d78e:	46bd      	mov	sp, r7
 800d790:	b005      	add	sp, #20
 800d792:	bd90      	pop	{r4, r7, pc}
 800d794:	0801001c 	.word	0x0801001c
 800d798:	0800dd49 	.word	0x0800dd49
 800d79c:	20001264 	.word	0x20001264
 800d7a0:	20001260 	.word	0x20001260
 800d7a4:	2000124c 	.word	0x2000124c
 800d7a8:	20001244 	.word	0x20001244

0800d7ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7b0:	4b03      	ldr	r3, [pc, #12]	; (800d7c0 <vTaskSuspendAll+0x14>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	4b02      	ldr	r3, [pc, #8]	; (800d7c0 <vTaskSuspendAll+0x14>)
 800d7b8:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7ba:	46c0      	nop			; (mov r8, r8)
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20001268 	.word	0x20001268

0800d7c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7d2:	4b3a      	ldr	r3, [pc, #232]	; (800d8bc <xTaskResumeAll+0xf8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <xTaskResumeAll+0x1a>
 800d7da:	b672      	cpsid	i
 800d7dc:	e7fe      	b.n	800d7dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7de:	f000 fff7 	bl	800e7d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7e2:	4b36      	ldr	r3, [pc, #216]	; (800d8bc <xTaskResumeAll+0xf8>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	1e5a      	subs	r2, r3, #1
 800d7e8:	4b34      	ldr	r3, [pc, #208]	; (800d8bc <xTaskResumeAll+0xf8>)
 800d7ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ec:	4b33      	ldr	r3, [pc, #204]	; (800d8bc <xTaskResumeAll+0xf8>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d15b      	bne.n	800d8ac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7f4:	4b32      	ldr	r3, [pc, #200]	; (800d8c0 <xTaskResumeAll+0xfc>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d057      	beq.n	800d8ac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7fc:	e02f      	b.n	800d85e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7fe:	4b31      	ldr	r3, [pc, #196]	; (800d8c4 <xTaskResumeAll+0x100>)
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3318      	adds	r3, #24
 800d80a:	0018      	movs	r0, r3
 800d80c:	f7ff f97d 	bl	800cb0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	3304      	adds	r3, #4
 800d814:	0018      	movs	r0, r3
 800d816:	f7ff f978 	bl	800cb0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81e:	4b2a      	ldr	r3, [pc, #168]	; (800d8c8 <xTaskResumeAll+0x104>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d903      	bls.n	800d82e <xTaskResumeAll+0x6a>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82a:	4b27      	ldr	r3, [pc, #156]	; (800d8c8 <xTaskResumeAll+0x104>)
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	0013      	movs	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	189b      	adds	r3, r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4a24      	ldr	r2, [pc, #144]	; (800d8cc <xTaskResumeAll+0x108>)
 800d83c:	189a      	adds	r2, r3, r2
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3304      	adds	r3, #4
 800d842:	0019      	movs	r1, r3
 800d844:	0010      	movs	r0, r2
 800d846:	f7ff f908 	bl	800ca5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84e:	4b20      	ldr	r3, [pc, #128]	; (800d8d0 <xTaskResumeAll+0x10c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	429a      	cmp	r2, r3
 800d856:	d302      	bcc.n	800d85e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800d858:	4b1e      	ldr	r3, [pc, #120]	; (800d8d4 <xTaskResumeAll+0x110>)
 800d85a:	2201      	movs	r2, #1
 800d85c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d85e:	4b19      	ldr	r3, [pc, #100]	; (800d8c4 <xTaskResumeAll+0x100>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1cb      	bne.n	800d7fe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d001      	beq.n	800d870 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d86c:	f000 fb18 	bl	800dea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d870:	4b19      	ldr	r3, [pc, #100]	; (800d8d8 <xTaskResumeAll+0x114>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00f      	beq.n	800d89c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d87c:	f000 f83c 	bl	800d8f8 <xTaskIncrementTick>
 800d880:	1e03      	subs	r3, r0, #0
 800d882:	d002      	beq.n	800d88a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800d884:	4b13      	ldr	r3, [pc, #76]	; (800d8d4 <xTaskResumeAll+0x110>)
 800d886:	2201      	movs	r2, #1
 800d888:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3b01      	subs	r3, #1
 800d88e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1f2      	bne.n	800d87c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800d896:	4b10      	ldr	r3, [pc, #64]	; (800d8d8 <xTaskResumeAll+0x114>)
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d89c:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <xTaskResumeAll+0x110>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d003      	beq.n	800d8ac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8a8:	f000 ff82 	bl	800e7b0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8ac:	f000 ffa2 	bl	800e7f4 <vPortExitCritical>

	return xAlreadyYielded;
 800d8b0:	68bb      	ldr	r3, [r7, #8]
}
 800d8b2:	0018      	movs	r0, r3
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	b004      	add	sp, #16
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	46c0      	nop			; (mov r8, r8)
 800d8bc:	20001268 	.word	0x20001268
 800d8c0:	20001240 	.word	0x20001240
 800d8c4:	20001200 	.word	0x20001200
 800d8c8:	20001248 	.word	0x20001248
 800d8cc:	20000d70 	.word	0x20000d70
 800d8d0:	20000d6c 	.word	0x20000d6c
 800d8d4:	20001254 	.word	0x20001254
 800d8d8:	20001250 	.word	0x20001250

0800d8dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d8e2:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <xTaskGetTickCount+0x18>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d8e8:	687b      	ldr	r3, [r7, #4]
}
 800d8ea:	0018      	movs	r0, r3
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	b002      	add	sp, #8
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	46c0      	nop			; (mov r8, r8)
 800d8f4:	20001244 	.word	0x20001244

0800d8f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d8fe:	2300      	movs	r3, #0
 800d900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d902:	4b4e      	ldr	r3, [pc, #312]	; (800da3c <xTaskIncrementTick+0x144>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d000      	beq.n	800d90c <xTaskIncrementTick+0x14>
 800d90a:	e08a      	b.n	800da22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d90c:	4b4c      	ldr	r3, [pc, #304]	; (800da40 <xTaskIncrementTick+0x148>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3301      	adds	r3, #1
 800d912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d914:	4b4a      	ldr	r3, [pc, #296]	; (800da40 <xTaskIncrementTick+0x148>)
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d117      	bne.n	800d950 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800d920:	4b48      	ldr	r3, [pc, #288]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <xTaskIncrementTick+0x36>
 800d92a:	b672      	cpsid	i
 800d92c:	e7fe      	b.n	800d92c <xTaskIncrementTick+0x34>
 800d92e:	4b45      	ldr	r3, [pc, #276]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	4b44      	ldr	r3, [pc, #272]	; (800da48 <xTaskIncrementTick+0x150>)
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	4b42      	ldr	r3, [pc, #264]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	4b42      	ldr	r3, [pc, #264]	; (800da48 <xTaskIncrementTick+0x150>)
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	4b42      	ldr	r3, [pc, #264]	; (800da4c <xTaskIncrementTick+0x154>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	4b40      	ldr	r3, [pc, #256]	; (800da4c <xTaskIncrementTick+0x154>)
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f000 faa8 	bl	800dea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d950:	4b3f      	ldr	r3, [pc, #252]	; (800da50 <xTaskIncrementTick+0x158>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	429a      	cmp	r2, r3
 800d958:	d349      	bcc.n	800d9ee <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d95a:	4b3a      	ldr	r3, [pc, #232]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d104      	bne.n	800d96e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d964:	4b3a      	ldr	r3, [pc, #232]	; (800da50 <xTaskIncrementTick+0x158>)
 800d966:	2201      	movs	r2, #1
 800d968:	4252      	negs	r2, r2
 800d96a:	601a      	str	r2, [r3, #0]
					break;
 800d96c:	e03f      	b.n	800d9ee <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d96e:	4b35      	ldr	r3, [pc, #212]	; (800da44 <xTaskIncrementTick+0x14c>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	429a      	cmp	r2, r3
 800d984:	d203      	bcs.n	800d98e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d986:	4b32      	ldr	r3, [pc, #200]	; (800da50 <xTaskIncrementTick+0x158>)
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d98c:	e02f      	b.n	800d9ee <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	3304      	adds	r3, #4
 800d992:	0018      	movs	r0, r3
 800d994:	f7ff f8b9 	bl	800cb0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d004      	beq.n	800d9aa <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	3318      	adds	r3, #24
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	f7ff f8b0 	bl	800cb0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ae:	4b29      	ldr	r3, [pc, #164]	; (800da54 <xTaskIncrementTick+0x15c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d903      	bls.n	800d9be <xTaskIncrementTick+0xc6>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ba:	4b26      	ldr	r3, [pc, #152]	; (800da54 <xTaskIncrementTick+0x15c>)
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c2:	0013      	movs	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	189b      	adds	r3, r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4a23      	ldr	r2, [pc, #140]	; (800da58 <xTaskIncrementTick+0x160>)
 800d9cc:	189a      	adds	r2, r3, r2
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	0019      	movs	r1, r3
 800d9d4:	0010      	movs	r0, r2
 800d9d6:	f7ff f840 	bl	800ca5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9de:	4b1f      	ldr	r3, [pc, #124]	; (800da5c <xTaskIncrementTick+0x164>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d3b8      	bcc.n	800d95a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9ec:	e7b5      	b.n	800d95a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9ee:	4b1b      	ldr	r3, [pc, #108]	; (800da5c <xTaskIncrementTick+0x164>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f4:	4918      	ldr	r1, [pc, #96]	; (800da58 <xTaskIncrementTick+0x160>)
 800d9f6:	0013      	movs	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	189b      	adds	r3, r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	585b      	ldr	r3, [r3, r1]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d901      	bls.n	800da08 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800da04:	2301      	movs	r3, #1
 800da06:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800da08:	4b15      	ldr	r3, [pc, #84]	; (800da60 <xTaskIncrementTick+0x168>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <xTaskIncrementTick+0x11c>
			{
				vApplicationTickHook();
 800da10:	f7fa ffed 	bl	80089ee <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da14:	4b13      	ldr	r3, [pc, #76]	; (800da64 <xTaskIncrementTick+0x16c>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d009      	beq.n	800da30 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800da1c:	2301      	movs	r3, #1
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	e006      	b.n	800da30 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da22:	4b0f      	ldr	r3, [pc, #60]	; (800da60 <xTaskIncrementTick+0x168>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <xTaskIncrementTick+0x168>)
 800da2a:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800da2c:	f7fa ffdf 	bl	80089ee <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800da30:	697b      	ldr	r3, [r7, #20]
}
 800da32:	0018      	movs	r0, r3
 800da34:	46bd      	mov	sp, r7
 800da36:	b006      	add	sp, #24
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	46c0      	nop			; (mov r8, r8)
 800da3c:	20001268 	.word	0x20001268
 800da40:	20001244 	.word	0x20001244
 800da44:	200011f8 	.word	0x200011f8
 800da48:	200011fc 	.word	0x200011fc
 800da4c:	20001258 	.word	0x20001258
 800da50:	20001260 	.word	0x20001260
 800da54:	20001248 	.word	0x20001248
 800da58:	20000d70 	.word	0x20000d70
 800da5c:	20000d6c 	.word	0x20000d6c
 800da60:	20001250 	.word	0x20001250
 800da64:	20001254 	.word	0x20001254

0800da68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da6e:	4b2a      	ldr	r3, [pc, #168]	; (800db18 <vTaskSwitchContext+0xb0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da76:	4b29      	ldr	r3, [pc, #164]	; (800db1c <vTaskSwitchContext+0xb4>)
 800da78:	2201      	movs	r2, #1
 800da7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da7c:	e048      	b.n	800db10 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800da7e:	4b27      	ldr	r3, [pc, #156]	; (800db1c <vTaskSwitchContext+0xb4>)
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800da84:	4b26      	ldr	r3, [pc, #152]	; (800db20 <vTaskSwitchContext+0xb8>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	4b25      	ldr	r3, [pc, #148]	; (800db20 <vTaskSwitchContext+0xb8>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da90:	429a      	cmp	r2, r3
 800da92:	d808      	bhi.n	800daa6 <vTaskSwitchContext+0x3e>
 800da94:	4b22      	ldr	r3, [pc, #136]	; (800db20 <vTaskSwitchContext+0xb8>)
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	4b21      	ldr	r3, [pc, #132]	; (800db20 <vTaskSwitchContext+0xb8>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3334      	adds	r3, #52	; 0x34
 800da9e:	0019      	movs	r1, r3
 800daa0:	0010      	movs	r0, r2
 800daa2:	f7fa ffa9 	bl	80089f8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daa6:	4b1f      	ldr	r3, [pc, #124]	; (800db24 <vTaskSwitchContext+0xbc>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	607b      	str	r3, [r7, #4]
 800daac:	e007      	b.n	800dabe <vTaskSwitchContext+0x56>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <vTaskSwitchContext+0x50>
 800dab4:	b672      	cpsid	i
 800dab6:	e7fe      	b.n	800dab6 <vTaskSwitchContext+0x4e>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3b01      	subs	r3, #1
 800dabc:	607b      	str	r3, [r7, #4]
 800dabe:	491a      	ldr	r1, [pc, #104]	; (800db28 <vTaskSwitchContext+0xc0>)
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	0013      	movs	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	189b      	adds	r3, r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	585b      	ldr	r3, [r3, r1]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d0ee      	beq.n	800daae <vTaskSwitchContext+0x46>
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	0013      	movs	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	189b      	adds	r3, r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4a13      	ldr	r2, [pc, #76]	; (800db28 <vTaskSwitchContext+0xc0>)
 800dadc:	189b      	adds	r3, r3, r2
 800dade:	603b      	str	r3, [r7, #0]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	685a      	ldr	r2, [r3, #4]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	605a      	str	r2, [r3, #4]
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	3308      	adds	r3, #8
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d104      	bne.n	800db00 <vTaskSwitchContext+0x98>
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	605a      	str	r2, [r3, #4]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	68da      	ldr	r2, [r3, #12]
 800db06:	4b06      	ldr	r3, [pc, #24]	; (800db20 <vTaskSwitchContext+0xb8>)
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	4b06      	ldr	r3, [pc, #24]	; (800db24 <vTaskSwitchContext+0xbc>)
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	601a      	str	r2, [r3, #0]
}
 800db10:	46c0      	nop			; (mov r8, r8)
 800db12:	46bd      	mov	sp, r7
 800db14:	b002      	add	sp, #8
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20001268 	.word	0x20001268
 800db1c:	20001254 	.word	0x20001254
 800db20:	20000d6c 	.word	0x20000d6c
 800db24:	20001248 	.word	0x20001248
 800db28:	20000d70 	.word	0x20000d70

0800db2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <vTaskPlaceOnEventList+0x14>
 800db3c:	b672      	cpsid	i
 800db3e:	e7fe      	b.n	800db3e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db40:	4b08      	ldr	r3, [pc, #32]	; (800db64 <vTaskPlaceOnEventList+0x38>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	3318      	adds	r3, #24
 800db46:	001a      	movs	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	0011      	movs	r1, r2
 800db4c:	0018      	movs	r0, r3
 800db4e:	f7fe ffa6 	bl	800ca9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2101      	movs	r1, #1
 800db56:	0018      	movs	r0, r3
 800db58:	f000 fa38 	bl	800dfcc <prvAddCurrentTaskToDelayedList>
}
 800db5c:	46c0      	nop			; (mov r8, r8)
 800db5e:	46bd      	mov	sp, r7
 800db60:	b002      	add	sp, #8
 800db62:	bd80      	pop	{r7, pc}
 800db64:	20000d6c 	.word	0x20000d6c

0800db68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <vTaskPlaceOnEventListRestricted+0x16>
 800db7a:	b672      	cpsid	i
 800db7c:	e7fe      	b.n	800db7c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db7e:	4b0c      	ldr	r3, [pc, #48]	; (800dbb0 <vTaskPlaceOnEventListRestricted+0x48>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3318      	adds	r3, #24
 800db84:	001a      	movs	r2, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	0011      	movs	r1, r2
 800db8a:	0018      	movs	r0, r3
 800db8c:	f7fe ff65 	bl	800ca5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800db96:	2301      	movs	r3, #1
 800db98:	425b      	negs	r3, r3
 800db9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	0011      	movs	r1, r2
 800dba2:	0018      	movs	r0, r3
 800dba4:	f000 fa12 	bl	800dfcc <prvAddCurrentTaskToDelayedList>
	}
 800dba8:	46c0      	nop			; (mov r8, r8)
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	b004      	add	sp, #16
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	20000d6c 	.word	0x20000d6c

0800dbb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d101      	bne.n	800dbce <xTaskRemoveFromEventList+0x1a>
 800dbca:	b672      	cpsid	i
 800dbcc:	e7fe      	b.n	800dbcc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	3318      	adds	r3, #24
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	f7fe ff99 	bl	800cb0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbd8:	4b1e      	ldr	r3, [pc, #120]	; (800dc54 <xTaskRemoveFromEventList+0xa0>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d11d      	bne.n	800dc1c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	0018      	movs	r0, r3
 800dbe6:	f7fe ff90 	bl	800cb0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbee:	4b1a      	ldr	r3, [pc, #104]	; (800dc58 <xTaskRemoveFromEventList+0xa4>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d903      	bls.n	800dbfe <xTaskRemoveFromEventList+0x4a>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfa:	4b17      	ldr	r3, [pc, #92]	; (800dc58 <xTaskRemoveFromEventList+0xa4>)
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc02:	0013      	movs	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	189b      	adds	r3, r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4a14      	ldr	r2, [pc, #80]	; (800dc5c <xTaskRemoveFromEventList+0xa8>)
 800dc0c:	189a      	adds	r2, r3, r2
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	3304      	adds	r3, #4
 800dc12:	0019      	movs	r1, r3
 800dc14:	0010      	movs	r0, r2
 800dc16:	f7fe ff20 	bl	800ca5a <vListInsertEnd>
 800dc1a:	e007      	b.n	800dc2c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	3318      	adds	r3, #24
 800dc20:	001a      	movs	r2, r3
 800dc22:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <xTaskRemoveFromEventList+0xac>)
 800dc24:	0011      	movs	r1, r2
 800dc26:	0018      	movs	r0, r3
 800dc28:	f7fe ff17 	bl	800ca5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc30:	4b0c      	ldr	r3, [pc, #48]	; (800dc64 <xTaskRemoveFromEventList+0xb0>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d905      	bls.n	800dc46 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc3e:	4b0a      	ldr	r3, [pc, #40]	; (800dc68 <xTaskRemoveFromEventList+0xb4>)
 800dc40:	2201      	movs	r2, #1
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	e001      	b.n	800dc4a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800dc46:	2300      	movs	r3, #0
 800dc48:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
}
 800dc4c:	0018      	movs	r0, r3
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	b004      	add	sp, #16
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	20001268 	.word	0x20001268
 800dc58:	20001248 	.word	0x20001248
 800dc5c:	20000d70 	.word	0x20000d70
 800dc60:	20001200 	.word	0x20001200
 800dc64:	20000d6c 	.word	0x20000d6c
 800dc68:	20001254 	.word	0x20001254

0800dc6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc74:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <vTaskInternalSetTimeOutState+0x20>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc7c:	4b04      	ldr	r3, [pc, #16]	; (800dc90 <vTaskInternalSetTimeOutState+0x24>)
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	605a      	str	r2, [r3, #4]
}
 800dc84:	46c0      	nop			; (mov r8, r8)
 800dc86:	46bd      	mov	sp, r7
 800dc88:	b002      	add	sp, #8
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	20001258 	.word	0x20001258
 800dc90:	20001244 	.word	0x20001244

0800dc94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <xTaskCheckForTimeOut+0x14>
 800dca4:	b672      	cpsid	i
 800dca6:	e7fe      	b.n	800dca6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <xTaskCheckForTimeOut+0x1e>
 800dcae:	b672      	cpsid	i
 800dcb0:	e7fe      	b.n	800dcb0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800dcb2:	f000 fd8d 	bl	800e7d0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dcb6:	4b1d      	ldr	r3, [pc, #116]	; (800dd2c <xTaskCheckForTimeOut+0x98>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	1ad3      	subs	r3, r2, r3
 800dcc4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	3301      	adds	r3, #1
 800dccc:	d102      	bne.n	800dcd4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e024      	b.n	800dd1e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	4b15      	ldr	r3, [pc, #84]	; (800dd30 <xTaskCheckForTimeOut+0x9c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d007      	beq.n	800dcf0 <xTaskCheckForTimeOut+0x5c>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d302      	bcc.n	800dcf0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dcea:	2301      	movs	r3, #1
 800dcec:	617b      	str	r3, [r7, #20]
 800dcee:	e016      	b.n	800dd1e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d20c      	bcs.n	800dd14 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1ad2      	subs	r2, r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	0018      	movs	r0, r3
 800dd0a:	f7ff ffaf 	bl	800dc6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	e004      	b.n	800dd1e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2200      	movs	r2, #0
 800dd18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800dd1e:	f000 fd69 	bl	800e7f4 <vPortExitCritical>

	return xReturn;
 800dd22:	697b      	ldr	r3, [r7, #20]
}
 800dd24:	0018      	movs	r0, r3
 800dd26:	46bd      	mov	sp, r7
 800dd28:	b006      	add	sp, #24
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	20001244 	.word	0x20001244
 800dd30:	20001258 	.word	0x20001258

0800dd34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd38:	4b02      	ldr	r3, [pc, #8]	; (800dd44 <vTaskMissedYield+0x10>)
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]
}
 800dd3e:	46c0      	nop			; (mov r8, r8)
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	20001254 	.word	0x20001254

0800dd48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd50:	f000 f850 	bl	800ddf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd54:	4b04      	ldr	r3, [pc, #16]	; (800dd68 <prvIdleTask+0x20>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d901      	bls.n	800dd60 <prvIdleTask+0x18>
			{
				taskYIELD();
 800dd5c:	f000 fd28 	bl	800e7b0 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800dd60:	f7fa fe40 	bl	80089e4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800dd64:	e7f4      	b.n	800dd50 <prvIdleTask+0x8>
 800dd66:	46c0      	nop			; (mov r8, r8)
 800dd68:	20000d70 	.word	0x20000d70

0800dd6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd72:	2300      	movs	r3, #0
 800dd74:	607b      	str	r3, [r7, #4]
 800dd76:	e00c      	b.n	800dd92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	0013      	movs	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	189b      	adds	r3, r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4a14      	ldr	r2, [pc, #80]	; (800ddd4 <prvInitialiseTaskLists+0x68>)
 800dd84:	189b      	adds	r3, r3, r2
 800dd86:	0018      	movs	r0, r3
 800dd88:	f7fe fe3e 	bl	800ca08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	607b      	str	r3, [r7, #4]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b37      	cmp	r3, #55	; 0x37
 800dd96:	d9ef      	bls.n	800dd78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd98:	4b0f      	ldr	r3, [pc, #60]	; (800ddd8 <prvInitialiseTaskLists+0x6c>)
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	f7fe fe34 	bl	800ca08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dda0:	4b0e      	ldr	r3, [pc, #56]	; (800dddc <prvInitialiseTaskLists+0x70>)
 800dda2:	0018      	movs	r0, r3
 800dda4:	f7fe fe30 	bl	800ca08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dda8:	4b0d      	ldr	r3, [pc, #52]	; (800dde0 <prvInitialiseTaskLists+0x74>)
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f7fe fe2c 	bl	800ca08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ddb0:	4b0c      	ldr	r3, [pc, #48]	; (800dde4 <prvInitialiseTaskLists+0x78>)
 800ddb2:	0018      	movs	r0, r3
 800ddb4:	f7fe fe28 	bl	800ca08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ddb8:	4b0b      	ldr	r3, [pc, #44]	; (800dde8 <prvInitialiseTaskLists+0x7c>)
 800ddba:	0018      	movs	r0, r3
 800ddbc:	f7fe fe24 	bl	800ca08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <prvInitialiseTaskLists+0x80>)
 800ddc2:	4a05      	ldr	r2, [pc, #20]	; (800ddd8 <prvInitialiseTaskLists+0x6c>)
 800ddc4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ddc6:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <prvInitialiseTaskLists+0x84>)
 800ddc8:	4a04      	ldr	r2, [pc, #16]	; (800dddc <prvInitialiseTaskLists+0x70>)
 800ddca:	601a      	str	r2, [r3, #0]
}
 800ddcc:	46c0      	nop			; (mov r8, r8)
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	b002      	add	sp, #8
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	20000d70 	.word	0x20000d70
 800ddd8:	200011d0 	.word	0x200011d0
 800dddc:	200011e4 	.word	0x200011e4
 800dde0:	20001200 	.word	0x20001200
 800dde4:	20001214 	.word	0x20001214
 800dde8:	2000122c 	.word	0x2000122c
 800ddec:	200011f8 	.word	0x200011f8
 800ddf0:	200011fc 	.word	0x200011fc

0800ddf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddfa:	e01a      	b.n	800de32 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800ddfc:	f000 fce8 	bl	800e7d0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de00:	4b10      	ldr	r3, [pc, #64]	; (800de44 <prvCheckTasksWaitingTermination+0x50>)
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	3304      	adds	r3, #4
 800de0c:	0018      	movs	r0, r3
 800de0e:	f7fe fe7c 	bl	800cb0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de12:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <prvCheckTasksWaitingTermination+0x54>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	1e5a      	subs	r2, r3, #1
 800de18:	4b0b      	ldr	r3, [pc, #44]	; (800de48 <prvCheckTasksWaitingTermination+0x54>)
 800de1a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	1e5a      	subs	r2, r3, #1
 800de22:	4b0a      	ldr	r3, [pc, #40]	; (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de24:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800de26:	f000 fce5 	bl	800e7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	0018      	movs	r0, r3
 800de2e:	f000 f80f 	bl	800de50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de32:	4b06      	ldr	r3, [pc, #24]	; (800de4c <prvCheckTasksWaitingTermination+0x58>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1e0      	bne.n	800ddfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de3a:	46c0      	nop			; (mov r8, r8)
 800de3c:	46c0      	nop			; (mov r8, r8)
 800de3e:	46bd      	mov	sp, r7
 800de40:	b002      	add	sp, #8
 800de42:	bd80      	pop	{r7, pc}
 800de44:	20001214 	.word	0x20001214
 800de48:	20001240 	.word	0x20001240
 800de4c:	20001228 	.word	0x20001228

0800de50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2259      	movs	r2, #89	; 0x59
 800de5c:	5c9b      	ldrb	r3, [r3, r2]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d109      	bne.n	800de76 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de66:	0018      	movs	r0, r3
 800de68:	f000 fdfc 	bl	800ea64 <vPortFree>
				vPortFree( pxTCB );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	0018      	movs	r0, r3
 800de70:	f000 fdf8 	bl	800ea64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de74:	e010      	b.n	800de98 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2259      	movs	r2, #89	; 0x59
 800de7a:	5c9b      	ldrb	r3, [r3, r2]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d104      	bne.n	800de8a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	0018      	movs	r0, r3
 800de84:	f000 fdee 	bl	800ea64 <vPortFree>
	}
 800de88:	e006      	b.n	800de98 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2259      	movs	r2, #89	; 0x59
 800de8e:	5c9b      	ldrb	r3, [r3, r2]
 800de90:	2b02      	cmp	r3, #2
 800de92:	d001      	beq.n	800de98 <prvDeleteTCB+0x48>
 800de94:	b672      	cpsid	i
 800de96:	e7fe      	b.n	800de96 <prvDeleteTCB+0x46>
	}
 800de98:	46c0      	nop			; (mov r8, r8)
 800de9a:	46bd      	mov	sp, r7
 800de9c:	b002      	add	sp, #8
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dea6:	4b0b      	ldr	r3, [pc, #44]	; (800ded4 <prvResetNextTaskUnblockTime+0x34>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d104      	bne.n	800deba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800deb0:	4b09      	ldr	r3, [pc, #36]	; (800ded8 <prvResetNextTaskUnblockTime+0x38>)
 800deb2:	2201      	movs	r2, #1
 800deb4:	4252      	negs	r2, r2
 800deb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800deb8:	e008      	b.n	800decc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deba:	4b06      	ldr	r3, [pc, #24]	; (800ded4 <prvResetNextTaskUnblockTime+0x34>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	4b03      	ldr	r3, [pc, #12]	; (800ded8 <prvResetNextTaskUnblockTime+0x38>)
 800deca:	601a      	str	r2, [r3, #0]
}
 800decc:	46c0      	nop			; (mov r8, r8)
 800dece:	46bd      	mov	sp, r7
 800ded0:	b002      	add	sp, #8
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	200011f8 	.word	0x200011f8
 800ded8:	20001260 	.word	0x20001260

0800dedc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dee2:	4b0a      	ldr	r3, [pc, #40]	; (800df0c <xTaskGetSchedulerState+0x30>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d102      	bne.n	800def0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800deea:	2301      	movs	r3, #1
 800deec:	607b      	str	r3, [r7, #4]
 800deee:	e008      	b.n	800df02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def0:	4b07      	ldr	r3, [pc, #28]	; (800df10 <xTaskGetSchedulerState+0x34>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800def8:	2302      	movs	r3, #2
 800defa:	607b      	str	r3, [r7, #4]
 800defc:	e001      	b.n	800df02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800defe:	2300      	movs	r3, #0
 800df00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df02:	687b      	ldr	r3, [r7, #4]
	}
 800df04:	0018      	movs	r0, r3
 800df06:	46bd      	mov	sp, r7
 800df08:	b002      	add	sp, #8
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	2000124c 	.word	0x2000124c
 800df10:	20001268 	.word	0x20001268

0800df14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800df20:	2300      	movs	r3, #0
 800df22:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d044      	beq.n	800dfb4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df2a:	4b25      	ldr	r3, [pc, #148]	; (800dfc0 <xTaskPriorityDisinherit+0xac>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	429a      	cmp	r2, r3
 800df32:	d001      	beq.n	800df38 <xTaskPriorityDisinherit+0x24>
 800df34:	b672      	cpsid	i
 800df36:	e7fe      	b.n	800df36 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <xTaskPriorityDisinherit+0x30>
 800df40:	b672      	cpsid	i
 800df42:	e7fe      	b.n	800df42 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df48:	1e5a      	subs	r2, r3, #1
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df56:	429a      	cmp	r2, r3
 800df58:	d02c      	beq.n	800dfb4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d128      	bne.n	800dfb4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	3304      	adds	r3, #4
 800df66:	0018      	movs	r0, r3
 800df68:	f7fe fdcf 	bl	800cb0a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df78:	2238      	movs	r2, #56	; 0x38
 800df7a:	1ad2      	subs	r2, r2, r3
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df84:	4b0f      	ldr	r3, [pc, #60]	; (800dfc4 <xTaskPriorityDisinherit+0xb0>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d903      	bls.n	800df94 <xTaskPriorityDisinherit+0x80>
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df90:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <xTaskPriorityDisinherit+0xb0>)
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df98:	0013      	movs	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	189b      	adds	r3, r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4a09      	ldr	r2, [pc, #36]	; (800dfc8 <xTaskPriorityDisinherit+0xb4>)
 800dfa2:	189a      	adds	r2, r3, r2
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	0019      	movs	r1, r3
 800dfaa:	0010      	movs	r0, r2
 800dfac:	f7fe fd55 	bl	800ca5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
	}
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	b004      	add	sp, #16
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	46c0      	nop			; (mov r8, r8)
 800dfc0:	20000d6c 	.word	0x20000d6c
 800dfc4:	20001248 	.word	0x20001248
 800dfc8:	20000d70 	.word	0x20000d70

0800dfcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfd6:	4b21      	ldr	r3, [pc, #132]	; (800e05c <prvAddCurrentTaskToDelayedList+0x90>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfdc:	4b20      	ldr	r3, [pc, #128]	; (800e060 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	0018      	movs	r0, r3
 800dfe4:	f7fe fd91 	bl	800cb0a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3301      	adds	r3, #1
 800dfec:	d10b      	bne.n	800e006 <prvAddCurrentTaskToDelayedList+0x3a>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d008      	beq.n	800e006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dff4:	4b1a      	ldr	r3, [pc, #104]	; (800e060 <prvAddCurrentTaskToDelayedList+0x94>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	1d1a      	adds	r2, r3, #4
 800dffa:	4b1a      	ldr	r3, [pc, #104]	; (800e064 <prvAddCurrentTaskToDelayedList+0x98>)
 800dffc:	0011      	movs	r1, r2
 800dffe:	0018      	movs	r0, r3
 800e000:	f7fe fd2b 	bl	800ca5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e004:	e026      	b.n	800e054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	18d3      	adds	r3, r2, r3
 800e00c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e00e:	4b14      	ldr	r3, [pc, #80]	; (800e060 <prvAddCurrentTaskToDelayedList+0x94>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d209      	bcs.n	800e032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e01e:	4b12      	ldr	r3, [pc, #72]	; (800e068 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	4b0f      	ldr	r3, [pc, #60]	; (800e060 <prvAddCurrentTaskToDelayedList+0x94>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	3304      	adds	r3, #4
 800e028:	0019      	movs	r1, r3
 800e02a:	0010      	movs	r0, r2
 800e02c:	f7fe fd37 	bl	800ca9e <vListInsert>
}
 800e030:	e010      	b.n	800e054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e032:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <prvAddCurrentTaskToDelayedList+0x94>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3304      	adds	r3, #4
 800e03c:	0019      	movs	r1, r3
 800e03e:	0010      	movs	r0, r2
 800e040:	f7fe fd2d 	bl	800ca9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d202      	bcs.n	800e054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e04e:	4b08      	ldr	r3, [pc, #32]	; (800e070 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	601a      	str	r2, [r3, #0]
}
 800e054:	46c0      	nop			; (mov r8, r8)
 800e056:	46bd      	mov	sp, r7
 800e058:	b004      	add	sp, #16
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	20001244 	.word	0x20001244
 800e060:	20000d6c 	.word	0x20000d6c
 800e064:	2000122c 	.word	0x2000122c
 800e068:	200011fc 	.word	0x200011fc
 800e06c:	200011f8 	.word	0x200011f8
 800e070:	20001260 	.word	0x20001260

0800e074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b089      	sub	sp, #36	; 0x24
 800e078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e07e:	f000 facb 	bl	800e618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e082:	4b17      	ldr	r3, [pc, #92]	; (800e0e0 <xTimerCreateTimerTask+0x6c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d020      	beq.n	800e0cc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e08a:	2300      	movs	r3, #0
 800e08c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e08e:	2300      	movs	r3, #0
 800e090:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e092:	003a      	movs	r2, r7
 800e094:	1d39      	adds	r1, r7, #4
 800e096:	2308      	movs	r3, #8
 800e098:	18fb      	adds	r3, r7, r3
 800e09a:	0018      	movs	r0, r3
 800e09c:	f7fe fc9c 	bl	800c9d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e0a0:	683c      	ldr	r4, [r7, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	490f      	ldr	r1, [pc, #60]	; (800e0e4 <xTimerCreateTimerTask+0x70>)
 800e0a8:	480f      	ldr	r0, [pc, #60]	; (800e0e8 <xTimerCreateTimerTask+0x74>)
 800e0aa:	9202      	str	r2, [sp, #8]
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	2302      	movs	r3, #2
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	0022      	movs	r2, r4
 800e0b6:	f7ff f97c 	bl	800d3b2 <xTaskCreateStatic>
 800e0ba:	0002      	movs	r2, r0
 800e0bc:	4b0b      	ldr	r3, [pc, #44]	; (800e0ec <xTimerCreateTimerTask+0x78>)
 800e0be:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e0c0:	4b0a      	ldr	r3, [pc, #40]	; (800e0ec <xTimerCreateTimerTask+0x78>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d101      	bne.n	800e0d6 <xTimerCreateTimerTask+0x62>
 800e0d2:	b672      	cpsid	i
 800e0d4:	e7fe      	b.n	800e0d4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
}
 800e0d8:	0018      	movs	r0, r3
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	b005      	add	sp, #20
 800e0de:	bd90      	pop	{r4, r7, pc}
 800e0e0:	2000129c 	.word	0x2000129c
 800e0e4:	08010024 	.word	0x08010024
 800e0e8:	0800e20d 	.word	0x0800e20d
 800e0ec:	200012a0 	.word	0x200012a0

0800e0f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0f0:	b590      	push	{r4, r7, lr}
 800e0f2:	b08b      	sub	sp, #44	; 0x2c
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0fe:	2300      	movs	r3, #0
 800e100:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <xTimerGenericCommand+0x1c>
 800e108:	b672      	cpsid	i
 800e10a:	e7fe      	b.n	800e10a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e10c:	4b1c      	ldr	r3, [pc, #112]	; (800e180 <xTimerGenericCommand+0x90>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d030      	beq.n	800e176 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e114:	2414      	movs	r4, #20
 800e116:	193b      	adds	r3, r7, r4
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e11c:	193b      	adds	r3, r7, r4
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e122:	193b      	adds	r3, r7, r4
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2b05      	cmp	r3, #5
 800e12c:	dc19      	bgt.n	800e162 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e12e:	f7ff fed5 	bl	800dedc <xTaskGetSchedulerState>
 800e132:	0003      	movs	r3, r0
 800e134:	2b02      	cmp	r3, #2
 800e136:	d109      	bne.n	800e14c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e138:	4b11      	ldr	r3, [pc, #68]	; (800e180 <xTimerGenericCommand+0x90>)
 800e13a:	6818      	ldr	r0, [r3, #0]
 800e13c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e13e:	1939      	adds	r1, r7, r4
 800e140:	2300      	movs	r3, #0
 800e142:	f7fe fdd1 	bl	800cce8 <xQueueGenericSend>
 800e146:	0003      	movs	r3, r0
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
 800e14a:	e014      	b.n	800e176 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e14c:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <xTimerGenericCommand+0x90>)
 800e14e:	6818      	ldr	r0, [r3, #0]
 800e150:	2314      	movs	r3, #20
 800e152:	18f9      	adds	r1, r7, r3
 800e154:	2300      	movs	r3, #0
 800e156:	2200      	movs	r2, #0
 800e158:	f7fe fdc6 	bl	800cce8 <xQueueGenericSend>
 800e15c:	0003      	movs	r3, r0
 800e15e:	627b      	str	r3, [r7, #36]	; 0x24
 800e160:	e009      	b.n	800e176 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e162:	4b07      	ldr	r3, [pc, #28]	; (800e180 <xTimerGenericCommand+0x90>)
 800e164:	6818      	ldr	r0, [r3, #0]
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	2314      	movs	r3, #20
 800e16a:	18f9      	adds	r1, r7, r3
 800e16c:	2300      	movs	r3, #0
 800e16e:	f7fe fe7f 	bl	800ce70 <xQueueGenericSendFromISR>
 800e172:	0003      	movs	r3, r0
 800e174:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e178:	0018      	movs	r0, r3
 800e17a:	46bd      	mov	sp, r7
 800e17c:	b00b      	add	sp, #44	; 0x2c
 800e17e:	bd90      	pop	{r4, r7, pc}
 800e180:	2000129c 	.word	0x2000129c

0800e184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af02      	add	r7, sp, #8
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e18e:	4b1e      	ldr	r3, [pc, #120]	; (800e208 <prvProcessExpiredTimer+0x84>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3304      	adds	r3, #4
 800e19c:	0018      	movs	r0, r3
 800e19e:	f7fe fcb4 	bl	800cb0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2228      	movs	r2, #40	; 0x28
 800e1a6:	5c9b      	ldrb	r3, [r3, r2]
 800e1a8:	001a      	movs	r2, r3
 800e1aa:	2304      	movs	r3, #4
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	d019      	beq.n	800e1e4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	699a      	ldr	r2, [r3, #24]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	18d1      	adds	r1, r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	683a      	ldr	r2, [r7, #0]
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f000 f8c5 	bl	800e34c <prvInsertTimerInActiveList>
 800e1c2:	1e03      	subs	r3, r0, #0
 800e1c4:	d017      	beq.n	800e1f6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	f7ff ff8d 	bl	800e0f0 <xTimerGenericCommand>
 800e1d6:	0003      	movs	r3, r0
 800e1d8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10a      	bne.n	800e1f6 <prvProcessExpiredTimer+0x72>
 800e1e0:	b672      	cpsid	i
 800e1e2:	e7fe      	b.n	800e1e2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2228      	movs	r2, #40	; 0x28
 800e1e8:	5c9b      	ldrb	r3, [r3, r2]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	4393      	bics	r3, r2
 800e1ee:	b2d9      	uxtb	r1, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2228      	movs	r2, #40	; 0x28
 800e1f4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	0010      	movs	r0, r2
 800e1fe:	4798      	blx	r3
}
 800e200:	46c0      	nop			; (mov r8, r8)
 800e202:	46bd      	mov	sp, r7
 800e204:	b004      	add	sp, #16
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20001294 	.word	0x20001294

0800e20c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800e214:	f7fa fbfe 	bl	8008a14 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e218:	2308      	movs	r3, #8
 800e21a:	18fb      	adds	r3, r7, r3
 800e21c:	0018      	movs	r0, r3
 800e21e:	f000 f853 	bl	800e2c8 <prvGetNextExpireTime>
 800e222:	0003      	movs	r3, r0
 800e224:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e226:	68ba      	ldr	r2, [r7, #8]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	0011      	movs	r1, r2
 800e22c:	0018      	movs	r0, r3
 800e22e:	f000 f803 	bl	800e238 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e232:	f000 f8cd 	bl	800e3d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e236:	e7ef      	b.n	800e218 <prvTimerTask+0xc>

0800e238 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e242:	f7ff fab3 	bl	800d7ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e246:	2308      	movs	r3, #8
 800e248:	18fb      	adds	r3, r7, r3
 800e24a:	0018      	movs	r0, r3
 800e24c:	f000 f85e 	bl	800e30c <prvSampleTimeNow>
 800e250:	0003      	movs	r3, r0
 800e252:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d12b      	bne.n	800e2b2 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10c      	bne.n	800e27a <prvProcessTimerOrBlockTask+0x42>
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	429a      	cmp	r2, r3
 800e266:	d808      	bhi.n	800e27a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800e268:	f7ff faac 	bl	800d7c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	0011      	movs	r1, r2
 800e272:	0018      	movs	r0, r3
 800e274:	f7ff ff86 	bl	800e184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e278:	e01d      	b.n	800e2b6 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d008      	beq.n	800e292 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <prvProcessTimerOrBlockTask+0x88>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <prvProcessTimerOrBlockTask+0x56>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e000      	b.n	800e290 <prvProcessTimerOrBlockTask+0x58>
 800e28e:	2300      	movs	r3, #0
 800e290:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e292:	4b0c      	ldr	r3, [pc, #48]	; (800e2c4 <prvProcessTimerOrBlockTask+0x8c>)
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	0019      	movs	r1, r3
 800e2a0:	f7ff f854 	bl	800d34c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2a4:	f7ff fa8e 	bl	800d7c4 <xTaskResumeAll>
 800e2a8:	1e03      	subs	r3, r0, #0
 800e2aa:	d104      	bne.n	800e2b6 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800e2ac:	f000 fa80 	bl	800e7b0 <vPortYield>
}
 800e2b0:	e001      	b.n	800e2b6 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800e2b2:	f7ff fa87 	bl	800d7c4 <xTaskResumeAll>
}
 800e2b6:	46c0      	nop			; (mov r8, r8)
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	b004      	add	sp, #16
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	46c0      	nop			; (mov r8, r8)
 800e2c0:	20001298 	.word	0x20001298
 800e2c4:	2000129c 	.word	0x2000129c

0800e2c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2d0:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <prvGetNextExpireTime+0x40>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <prvGetNextExpireTime+0x16>
 800e2da:	2201      	movs	r2, #1
 800e2dc:	e000      	b.n	800e2e0 <prvGetNextExpireTime+0x18>
 800e2de:	2200      	movs	r2, #0
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d105      	bne.n	800e2f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2ec:	4b06      	ldr	r3, [pc, #24]	; (800e308 <prvGetNextExpireTime+0x40>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	60fb      	str	r3, [r7, #12]
 800e2f6:	e001      	b.n	800e2fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
}
 800e2fe:	0018      	movs	r0, r3
 800e300:	46bd      	mov	sp, r7
 800e302:	b004      	add	sp, #16
 800e304:	bd80      	pop	{r7, pc}
 800e306:	46c0      	nop			; (mov r8, r8)
 800e308:	20001294 	.word	0x20001294

0800e30c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e314:	f7ff fae2 	bl	800d8dc <xTaskGetTickCount>
 800e318:	0003      	movs	r3, r0
 800e31a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <prvSampleTimeNow+0x3c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	429a      	cmp	r2, r3
 800e324:	d205      	bcs.n	800e332 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800e326:	f000 f919 	bl	800e55c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2201      	movs	r2, #1
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	e002      	b.n	800e338 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e338:	4b03      	ldr	r3, [pc, #12]	; (800e348 <prvSampleTimeNow+0x3c>)
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800e33e:	68fb      	ldr	r3, [r7, #12]
}
 800e340:	0018      	movs	r0, r3
 800e342:	46bd      	mov	sp, r7
 800e344:	b004      	add	sp, #16
 800e346:	bd80      	pop	{r7, pc}
 800e348:	200012a4 	.word	0x200012a4

0800e34c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d812      	bhi.n	800e398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	1ad2      	subs	r2, r2, r3
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d302      	bcc.n	800e386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e380:	2301      	movs	r3, #1
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	e01b      	b.n	800e3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e386:	4b10      	ldr	r3, [pc, #64]	; (800e3c8 <prvInsertTimerInActiveList+0x7c>)
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3304      	adds	r3, #4
 800e38e:	0019      	movs	r1, r3
 800e390:	0010      	movs	r0, r2
 800e392:	f7fe fb84 	bl	800ca9e <vListInsert>
 800e396:	e012      	b.n	800e3be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d206      	bcs.n	800e3ae <prvInsertTimerInActiveList+0x62>
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d302      	bcc.n	800e3ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	617b      	str	r3, [r7, #20]
 800e3ac:	e007      	b.n	800e3be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3ae:	4b07      	ldr	r3, [pc, #28]	; (800e3cc <prvInsertTimerInActiveList+0x80>)
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	0019      	movs	r1, r3
 800e3b8:	0010      	movs	r0, r2
 800e3ba:	f7fe fb70 	bl	800ca9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3be:	697b      	ldr	r3, [r7, #20]
}
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	b006      	add	sp, #24
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	20001298 	.word	0x20001298
 800e3cc:	20001294 	.word	0x20001294

0800e3d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3d0:	b590      	push	{r4, r7, lr}
 800e3d2:	b08d      	sub	sp, #52	; 0x34
 800e3d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3d6:	e0ac      	b.n	800e532 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3d8:	2208      	movs	r2, #8
 800e3da:	18bb      	adds	r3, r7, r2
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	da0f      	bge.n	800e402 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e3e2:	18bb      	adds	r3, r7, r2
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d101      	bne.n	800e3f2 <prvProcessReceivedCommands+0x22>
 800e3ee:	b672      	cpsid	i
 800e3f0:	e7fe      	b.n	800e3f0 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	6858      	ldr	r0, [r3, #4]
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	0019      	movs	r1, r3
 800e400:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e402:	2208      	movs	r2, #8
 800e404:	18bb      	adds	r3, r7, r2
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	da00      	bge.n	800e40e <prvProcessReceivedCommands+0x3e>
 800e40c:	e090      	b.n	800e530 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e40e:	18bb      	adds	r3, r7, r2
 800e410:	689b      	ldr	r3, [r3, #8]
 800e412:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	695b      	ldr	r3, [r3, #20]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d004      	beq.n	800e426 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	3304      	adds	r3, #4
 800e420:	0018      	movs	r0, r3
 800e422:	f7fe fb72 	bl	800cb0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e426:	1d3b      	adds	r3, r7, #4
 800e428:	0018      	movs	r0, r3
 800e42a:	f7ff ff6f 	bl	800e30c <prvSampleTimeNow>
 800e42e:	0003      	movs	r3, r0
 800e430:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800e432:	2308      	movs	r3, #8
 800e434:	18fb      	adds	r3, r7, r3
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b09      	cmp	r3, #9
 800e43a:	d900      	bls.n	800e43e <prvProcessReceivedCommands+0x6e>
 800e43c:	e079      	b.n	800e532 <prvProcessReceivedCommands+0x162>
 800e43e:	009a      	lsls	r2, r3, #2
 800e440:	4b44      	ldr	r3, [pc, #272]	; (800e554 <prvProcessReceivedCommands+0x184>)
 800e442:	18d3      	adds	r3, r2, r3
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e448:	6a3b      	ldr	r3, [r7, #32]
 800e44a:	2228      	movs	r2, #40	; 0x28
 800e44c:	5c9b      	ldrb	r3, [r3, r2]
 800e44e:	2201      	movs	r2, #1
 800e450:	4313      	orrs	r3, r2
 800e452:	b2d9      	uxtb	r1, r3
 800e454:	6a3b      	ldr	r3, [r7, #32]
 800e456:	2228      	movs	r2, #40	; 0x28
 800e458:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e45a:	2408      	movs	r4, #8
 800e45c:	193b      	adds	r3, r7, r4
 800e45e:	685a      	ldr	r2, [r3, #4]
 800e460:	6a3b      	ldr	r3, [r7, #32]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	18d1      	adds	r1, r2, r3
 800e466:	193b      	adds	r3, r7, r4
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	69fa      	ldr	r2, [r7, #28]
 800e46c:	6a38      	ldr	r0, [r7, #32]
 800e46e:	f7ff ff6d 	bl	800e34c <prvInsertTimerInActiveList>
 800e472:	1e03      	subs	r3, r0, #0
 800e474:	d05d      	beq.n	800e532 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	6a3a      	ldr	r2, [r7, #32]
 800e47c:	0010      	movs	r0, r2
 800e47e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e480:	6a3b      	ldr	r3, [r7, #32]
 800e482:	2228      	movs	r2, #40	; 0x28
 800e484:	5c9b      	ldrb	r3, [r3, r2]
 800e486:	001a      	movs	r2, r3
 800e488:	2304      	movs	r3, #4
 800e48a:	4013      	ands	r3, r2
 800e48c:	d051      	beq.n	800e532 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e48e:	193b      	adds	r3, r7, r4
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	18d2      	adds	r2, r2, r3
 800e498:	6a38      	ldr	r0, [r7, #32]
 800e49a:	2300      	movs	r3, #0
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	f7ff fe25 	bl	800e0f0 <xTimerGenericCommand>
 800e4a6:	0003      	movs	r3, r0
 800e4a8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d140      	bne.n	800e532 <prvProcessReceivedCommands+0x162>
 800e4b0:	b672      	cpsid	i
 800e4b2:	e7fe      	b.n	800e4b2 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	2228      	movs	r2, #40	; 0x28
 800e4b8:	5c9b      	ldrb	r3, [r3, r2]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4393      	bics	r3, r2
 800e4be:	b2d9      	uxtb	r1, r3
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	2228      	movs	r2, #40	; 0x28
 800e4c4:	5499      	strb	r1, [r3, r2]
					break;
 800e4c6:	e034      	b.n	800e532 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	2228      	movs	r2, #40	; 0x28
 800e4cc:	5c9b      	ldrb	r3, [r3, r2]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b2d9      	uxtb	r1, r3
 800e4d4:	6a3b      	ldr	r3, [r7, #32]
 800e4d6:	2228      	movs	r2, #40	; 0x28
 800e4d8:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4da:	2308      	movs	r3, #8
 800e4dc:	18fb      	adds	r3, r7, r3
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	6a3b      	ldr	r3, [r7, #32]
 800e4e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d101      	bne.n	800e4f0 <prvProcessReceivedCommands+0x120>
 800e4ec:	b672      	cpsid	i
 800e4ee:	e7fe      	b.n	800e4ee <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4f0:	6a3b      	ldr	r3, [r7, #32]
 800e4f2:	699a      	ldr	r2, [r3, #24]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	18d1      	adds	r1, r2, r3
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	69fa      	ldr	r2, [r7, #28]
 800e4fc:	6a38      	ldr	r0, [r7, #32]
 800e4fe:	f7ff ff25 	bl	800e34c <prvInsertTimerInActiveList>
					break;
 800e502:	e016      	b.n	800e532 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	2228      	movs	r2, #40	; 0x28
 800e508:	5c9b      	ldrb	r3, [r3, r2]
 800e50a:	001a      	movs	r2, r3
 800e50c:	2302      	movs	r3, #2
 800e50e:	4013      	ands	r3, r2
 800e510:	d104      	bne.n	800e51c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	0018      	movs	r0, r3
 800e516:	f000 faa5 	bl	800ea64 <vPortFree>
 800e51a:	e00a      	b.n	800e532 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	2228      	movs	r2, #40	; 0x28
 800e520:	5c9b      	ldrb	r3, [r3, r2]
 800e522:	2201      	movs	r2, #1
 800e524:	4393      	bics	r3, r2
 800e526:	b2d9      	uxtb	r1, r3
 800e528:	6a3b      	ldr	r3, [r7, #32]
 800e52a:	2228      	movs	r2, #40	; 0x28
 800e52c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e52e:	e000      	b.n	800e532 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e530:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e532:	4b09      	ldr	r3, [pc, #36]	; (800e558 <prvProcessReceivedCommands+0x188>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2208      	movs	r2, #8
 800e538:	18b9      	adds	r1, r7, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	0018      	movs	r0, r3
 800e53e:	f7fe fd0b 	bl	800cf58 <xQueueReceive>
 800e542:	1e03      	subs	r3, r0, #0
 800e544:	d000      	beq.n	800e548 <prvProcessReceivedCommands+0x178>
 800e546:	e747      	b.n	800e3d8 <prvProcessReceivedCommands+0x8>
	}
}
 800e548:	46c0      	nop			; (mov r8, r8)
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	46bd      	mov	sp, r7
 800e54e:	b00b      	add	sp, #44	; 0x2c
 800e550:	bd90      	pop	{r4, r7, pc}
 800e552:	46c0      	nop			; (mov r8, r8)
 800e554:	08010708 	.word	0x08010708
 800e558:	2000129c 	.word	0x2000129c

0800e55c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b088      	sub	sp, #32
 800e560:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e562:	e041      	b.n	800e5e8 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e564:	4b2a      	ldr	r3, [pc, #168]	; (800e610 <prvSwitchTimerLists+0xb4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e56e:	4b28      	ldr	r3, [pc, #160]	; (800e610 <prvSwitchTimerLists+0xb4>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	3304      	adds	r3, #4
 800e57c:	0018      	movs	r0, r3
 800e57e:	f7fe fac4 	bl	800cb0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6a1b      	ldr	r3, [r3, #32]
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	0010      	movs	r0, r2
 800e58a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2228      	movs	r2, #40	; 0x28
 800e590:	5c9b      	ldrb	r3, [r3, r2]
 800e592:	001a      	movs	r2, r3
 800e594:	2304      	movs	r3, #4
 800e596:	4013      	ands	r3, r2
 800e598:	d026      	beq.n	800e5e8 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	699b      	ldr	r3, [r3, #24]
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	18d3      	adds	r3, r2, r3
 800e5a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e5a4:	68ba      	ldr	r2, [r7, #8]
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d90e      	bls.n	800e5ca <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5b8:	4b15      	ldr	r3, [pc, #84]	; (800e610 <prvSwitchTimerLists+0xb4>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	0019      	movs	r1, r3
 800e5c2:	0010      	movs	r0, r2
 800e5c4:	f7fe fa6b 	bl	800ca9e <vListInsert>
 800e5c8:	e00e      	b.n	800e5e8 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	f7ff fd8b 	bl	800e0f0 <xTimerGenericCommand>
 800e5da:	0003      	movs	r3, r0
 800e5dc:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <prvSwitchTimerLists+0x8c>
 800e5e4:	b672      	cpsid	i
 800e5e6:	e7fe      	b.n	800e5e6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5e8:	4b09      	ldr	r3, [pc, #36]	; (800e610 <prvSwitchTimerLists+0xb4>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1b8      	bne.n	800e564 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e5f2:	4b07      	ldr	r3, [pc, #28]	; (800e610 <prvSwitchTimerLists+0xb4>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e5f8:	4b06      	ldr	r3, [pc, #24]	; (800e614 <prvSwitchTimerLists+0xb8>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	4b04      	ldr	r3, [pc, #16]	; (800e610 <prvSwitchTimerLists+0xb4>)
 800e5fe:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800e600:	4b04      	ldr	r3, [pc, #16]	; (800e614 <prvSwitchTimerLists+0xb8>)
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	601a      	str	r2, [r3, #0]
}
 800e606:	46c0      	nop			; (mov r8, r8)
 800e608:	46bd      	mov	sp, r7
 800e60a:	b006      	add	sp, #24
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	46c0      	nop			; (mov r8, r8)
 800e610:	20001294 	.word	0x20001294
 800e614:	20001298 	.word	0x20001298

0800e618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e61e:	f000 f8d7 	bl	800e7d0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e622:	4b16      	ldr	r3, [pc, #88]	; (800e67c <prvCheckForValidListAndQueue+0x64>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d123      	bne.n	800e672 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800e62a:	4b15      	ldr	r3, [pc, #84]	; (800e680 <prvCheckForValidListAndQueue+0x68>)
 800e62c:	0018      	movs	r0, r3
 800e62e:	f7fe f9eb 	bl	800ca08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e632:	4b14      	ldr	r3, [pc, #80]	; (800e684 <prvCheckForValidListAndQueue+0x6c>)
 800e634:	0018      	movs	r0, r3
 800e636:	f7fe f9e7 	bl	800ca08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e63a:	4b13      	ldr	r3, [pc, #76]	; (800e688 <prvCheckForValidListAndQueue+0x70>)
 800e63c:	4a10      	ldr	r2, [pc, #64]	; (800e680 <prvCheckForValidListAndQueue+0x68>)
 800e63e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e640:	4b12      	ldr	r3, [pc, #72]	; (800e68c <prvCheckForValidListAndQueue+0x74>)
 800e642:	4a10      	ldr	r2, [pc, #64]	; (800e684 <prvCheckForValidListAndQueue+0x6c>)
 800e644:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e646:	4b12      	ldr	r3, [pc, #72]	; (800e690 <prvCheckForValidListAndQueue+0x78>)
 800e648:	4a12      	ldr	r2, [pc, #72]	; (800e694 <prvCheckForValidListAndQueue+0x7c>)
 800e64a:	2100      	movs	r1, #0
 800e64c:	9100      	str	r1, [sp, #0]
 800e64e:	2110      	movs	r1, #16
 800e650:	200a      	movs	r0, #10
 800e652:	f7fe fad6 	bl	800cc02 <xQueueGenericCreateStatic>
 800e656:	0002      	movs	r2, r0
 800e658:	4b08      	ldr	r3, [pc, #32]	; (800e67c <prvCheckForValidListAndQueue+0x64>)
 800e65a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e65c:	4b07      	ldr	r3, [pc, #28]	; (800e67c <prvCheckForValidListAndQueue+0x64>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e664:	4b05      	ldr	r3, [pc, #20]	; (800e67c <prvCheckForValidListAndQueue+0x64>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a0b      	ldr	r2, [pc, #44]	; (800e698 <prvCheckForValidListAndQueue+0x80>)
 800e66a:	0011      	movs	r1, r2
 800e66c:	0018      	movs	r0, r3
 800e66e:	f7fe fe45 	bl	800d2fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e672:	f000 f8bf 	bl	800e7f4 <vPortExitCritical>
}
 800e676:	46c0      	nop			; (mov r8, r8)
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	2000129c 	.word	0x2000129c
 800e680:	2000126c 	.word	0x2000126c
 800e684:	20001280 	.word	0x20001280
 800e688:	20001294 	.word	0x20001294
 800e68c:	20001298 	.word	0x20001298
 800e690:	20001348 	.word	0x20001348
 800e694:	200012a8 	.word	0x200012a8
 800e698:	0801002c 	.word	0x0801002c

0800e69c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3b04      	subs	r3, #4
 800e6ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2280      	movs	r2, #128	; 0x80
 800e6b2:	0452      	lsls	r2, r2, #17
 800e6b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3b04      	subs	r3, #4
 800e6ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	3b04      	subs	r3, #4
 800e6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6c8:	4a08      	ldr	r2, [pc, #32]	; (800e6ec <pxPortInitialiseStack+0x50>)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3b14      	subs	r3, #20
 800e6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3b20      	subs	r3, #32
 800e6de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
}
 800e6e2:	0018      	movs	r0, r3
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	b004      	add	sp, #16
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	46c0      	nop			; (mov r8, r8)
 800e6ec:	0800e6f1 	.word	0x0800e6f1

0800e6f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6fa:	4b08      	ldr	r3, [pc, #32]	; (800e71c <prvTaskExitError+0x2c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3301      	adds	r3, #1
 800e700:	d001      	beq.n	800e706 <prvTaskExitError+0x16>
 800e702:	b672      	cpsid	i
 800e704:	e7fe      	b.n	800e704 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800e706:	b672      	cpsid	i
	while( ulDummy == 0 )
 800e708:	46c0      	nop			; (mov r8, r8)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d0fc      	beq.n	800e70a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e710:	46c0      	nop			; (mov r8, r8)
 800e712:	46c0      	nop			; (mov r8, r8)
 800e714:	46bd      	mov	sp, r7
 800e716:	b002      	add	sp, #8
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	46c0      	nop			; (mov r8, r8)
 800e71c:	20000488 	.word	0x20000488

0800e720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800e724:	46c0      	nop			; (mov r8, r8)
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	0000      	movs	r0, r0
 800e72c:	0000      	movs	r0, r0
	...

0800e730 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e730:	4a0b      	ldr	r2, [pc, #44]	; (800e760 <pxCurrentTCBConst2>)
 800e732:	6813      	ldr	r3, [r2, #0]
 800e734:	6818      	ldr	r0, [r3, #0]
 800e736:	3020      	adds	r0, #32
 800e738:	f380 8809 	msr	PSP, r0
 800e73c:	2002      	movs	r0, #2
 800e73e:	f380 8814 	msr	CONTROL, r0
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e748:	46ae      	mov	lr, r5
 800e74a:	bc08      	pop	{r3}
 800e74c:	bc04      	pop	{r2}
 800e74e:	b662      	cpsie	i
 800e750:	4718      	bx	r3
 800e752:	46c0      	nop			; (mov r8, r8)
 800e754:	46c0      	nop			; (mov r8, r8)
 800e756:	46c0      	nop			; (mov r8, r8)
 800e758:	46c0      	nop			; (mov r8, r8)
 800e75a:	46c0      	nop			; (mov r8, r8)
 800e75c:	46c0      	nop			; (mov r8, r8)
 800e75e:	46c0      	nop			; (mov r8, r8)

0800e760 <pxCurrentTCBConst2>:
 800e760:	20000d6c 	.word	0x20000d6c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800e764:	46c0      	nop			; (mov r8, r8)
 800e766:	46c0      	nop			; (mov r8, r8)

0800e768 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e76c:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <xPortStartScheduler+0x40>)
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	4b0d      	ldr	r3, [pc, #52]	; (800e7a8 <xPortStartScheduler+0x40>)
 800e772:	21ff      	movs	r1, #255	; 0xff
 800e774:	0409      	lsls	r1, r1, #16
 800e776:	430a      	orrs	r2, r1
 800e778:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e77a:	4b0b      	ldr	r3, [pc, #44]	; (800e7a8 <xPortStartScheduler+0x40>)
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	4b0a      	ldr	r3, [pc, #40]	; (800e7a8 <xPortStartScheduler+0x40>)
 800e780:	21ff      	movs	r1, #255	; 0xff
 800e782:	0609      	lsls	r1, r1, #24
 800e784:	430a      	orrs	r2, r1
 800e786:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e788:	f000 f898 	bl	800e8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e78c:	4b07      	ldr	r3, [pc, #28]	; (800e7ac <xPortStartScheduler+0x44>)
 800e78e:	2200      	movs	r2, #0
 800e790:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800e792:	f7ff ffcd 	bl	800e730 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e796:	f7ff f967 	bl	800da68 <vTaskSwitchContext>
	prvTaskExitError();
 800e79a:	f7ff ffa9 	bl	800e6f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	0018      	movs	r0, r3
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	46c0      	nop			; (mov r8, r8)
 800e7a8:	e000ed20 	.word	0xe000ed20
 800e7ac:	20000488 	.word	0x20000488

0800e7b0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7b4:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <vPortYield+0x1c>)
 800e7b6:	2280      	movs	r2, #128	; 0x80
 800e7b8:	0552      	lsls	r2, r2, #21
 800e7ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800e7bc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e7c0:	f3bf 8f6f 	isb	sy
}
 800e7c4:	46c0      	nop			; (mov r8, r8)
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	46c0      	nop			; (mov r8, r8)
 800e7cc:	e000ed04 	.word	0xe000ed04

0800e7d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800e7d4:	b672      	cpsid	i
	uxCriticalNesting++;
 800e7d6:	4b06      	ldr	r3, [pc, #24]	; (800e7f0 <vPortEnterCritical+0x20>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	4b04      	ldr	r3, [pc, #16]	; (800e7f0 <vPortEnterCritical+0x20>)
 800e7de:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800e7e0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e7e4:	f3bf 8f6f 	isb	sy
}
 800e7e8:	46c0      	nop			; (mov r8, r8)
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	46c0      	nop			; (mov r8, r8)
 800e7f0:	20000488 	.word	0x20000488

0800e7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7f8:	4b09      	ldr	r3, [pc, #36]	; (800e820 <vPortExitCritical+0x2c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <vPortExitCritical+0x10>
 800e800:	b672      	cpsid	i
 800e802:	e7fe      	b.n	800e802 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800e804:	4b06      	ldr	r3, [pc, #24]	; (800e820 <vPortExitCritical+0x2c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	1e5a      	subs	r2, r3, #1
 800e80a:	4b05      	ldr	r3, [pc, #20]	; (800e820 <vPortExitCritical+0x2c>)
 800e80c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800e80e:	4b04      	ldr	r3, [pc, #16]	; (800e820 <vPortExitCritical+0x2c>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d100      	bne.n	800e818 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800e816:	b662      	cpsie	i
	}
}
 800e818:	46c0      	nop			; (mov r8, r8)
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	46c0      	nop			; (mov r8, r8)
 800e820:	20000488 	.word	0x20000488

0800e824 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800e824:	f3ef 8010 	mrs	r0, PRIMASK
 800e828:	b672      	cpsid	i
 800e82a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800e82c:	46c0      	nop			; (mov r8, r8)
 800e82e:	0018      	movs	r0, r3

0800e830 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800e830:	f380 8810 	msr	PRIMASK, r0
 800e834:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800e836:	46c0      	nop			; (mov r8, r8)
	...

0800e840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e840:	f3ef 8009 	mrs	r0, PSP
 800e844:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <pxCurrentTCBConst>)
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	3820      	subs	r0, #32
 800e84a:	6010      	str	r0, [r2, #0]
 800e84c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e84e:	4644      	mov	r4, r8
 800e850:	464d      	mov	r5, r9
 800e852:	4656      	mov	r6, sl
 800e854:	465f      	mov	r7, fp
 800e856:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e858:	b508      	push	{r3, lr}
 800e85a:	b672      	cpsid	i
 800e85c:	f7ff f904 	bl	800da68 <vTaskSwitchContext>
 800e860:	b662      	cpsie	i
 800e862:	bc0c      	pop	{r2, r3}
 800e864:	6811      	ldr	r1, [r2, #0]
 800e866:	6808      	ldr	r0, [r1, #0]
 800e868:	3010      	adds	r0, #16
 800e86a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e86c:	46a0      	mov	r8, r4
 800e86e:	46a9      	mov	r9, r5
 800e870:	46b2      	mov	sl, r6
 800e872:	46bb      	mov	fp, r7
 800e874:	f380 8809 	msr	PSP, r0
 800e878:	3820      	subs	r0, #32
 800e87a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e87c:	4718      	bx	r3
 800e87e:	46c0      	nop			; (mov r8, r8)

0800e880 <pxCurrentTCBConst>:
 800e880:	20000d6c 	.word	0x20000d6c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800e884:	46c0      	nop			; (mov r8, r8)
 800e886:	46c0      	nop			; (mov r8, r8)

0800e888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e88e:	f7ff ffc9 	bl	800e824 <ulSetInterruptMaskFromISR>
 800e892:	0003      	movs	r3, r0
 800e894:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e896:	f7ff f82f 	bl	800d8f8 <xTaskIncrementTick>
 800e89a:	1e03      	subs	r3, r0, #0
 800e89c:	d003      	beq.n	800e8a6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e89e:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <xPortSysTickHandler+0x30>)
 800e8a0:	2280      	movs	r2, #128	; 0x80
 800e8a2:	0552      	lsls	r2, r2, #21
 800e8a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	0018      	movs	r0, r3
 800e8aa:	f7ff ffc1 	bl	800e830 <vClearInterruptMaskFromISR>
}
 800e8ae:	46c0      	nop			; (mov r8, r8)
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b002      	add	sp, #8
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	46c0      	nop			; (mov r8, r8)
 800e8b8:	e000ed04 	.word	0xe000ed04

0800e8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8c0:	4b0b      	ldr	r3, [pc, #44]	; (800e8f0 <vPortSetupTimerInterrupt+0x34>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8c6:	4b0b      	ldr	r3, [pc, #44]	; (800e8f4 <vPortSetupTimerInterrupt+0x38>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8cc:	4b0a      	ldr	r3, [pc, #40]	; (800e8f8 <vPortSetupTimerInterrupt+0x3c>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	22fa      	movs	r2, #250	; 0xfa
 800e8d2:	0091      	lsls	r1, r2, #2
 800e8d4:	0018      	movs	r0, r3
 800e8d6:	f7f1 fc29 	bl	800012c <__udivsi3>
 800e8da:	0003      	movs	r3, r0
 800e8dc:	001a      	movs	r2, r3
 800e8de:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <vPortSetupTimerInterrupt+0x40>)
 800e8e0:	3a01      	subs	r2, #1
 800e8e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e8e4:	4b02      	ldr	r3, [pc, #8]	; (800e8f0 <vPortSetupTimerInterrupt+0x34>)
 800e8e6:	2207      	movs	r2, #7
 800e8e8:	601a      	str	r2, [r3, #0]
}
 800e8ea:	46c0      	nop			; (mov r8, r8)
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	e000e010 	.word	0xe000e010
 800e8f4:	e000e018 	.word	0xe000e018
 800e8f8:	2000047c 	.word	0x2000047c
 800e8fc:	e000e014 	.word	0xe000e014

0800e900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e908:	2300      	movs	r3, #0
 800e90a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800e90c:	f7fe ff4e 	bl	800d7ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e910:	4b4e      	ldr	r3, [pc, #312]	; (800ea4c <pvPortMalloc+0x14c>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e918:	f000 f8f2 	bl	800eb00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e91c:	4b4c      	ldr	r3, [pc, #304]	; (800ea50 <pvPortMalloc+0x150>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	4013      	ands	r3, r2
 800e924:	d000      	beq.n	800e928 <pvPortMalloc+0x28>
 800e926:	e07e      	b.n	800ea26 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d012      	beq.n	800e954 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800e92e:	2208      	movs	r2, #8
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	189b      	adds	r3, r3, r2
 800e934:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2207      	movs	r2, #7
 800e93a:	4013      	ands	r3, r2
 800e93c:	d00a      	beq.n	800e954 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2207      	movs	r2, #7
 800e942:	4393      	bics	r3, r2
 800e944:	3308      	adds	r3, #8
 800e946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2207      	movs	r2, #7
 800e94c:	4013      	ands	r3, r2
 800e94e:	d001      	beq.n	800e954 <pvPortMalloc+0x54>
 800e950:	b672      	cpsid	i
 800e952:	e7fe      	b.n	800e952 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d065      	beq.n	800ea26 <pvPortMalloc+0x126>
 800e95a:	4b3e      	ldr	r3, [pc, #248]	; (800ea54 <pvPortMalloc+0x154>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	429a      	cmp	r2, r3
 800e962:	d860      	bhi.n	800ea26 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e964:	4b3c      	ldr	r3, [pc, #240]	; (800ea58 <pvPortMalloc+0x158>)
 800e966:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800e968:	4b3b      	ldr	r3, [pc, #236]	; (800ea58 <pvPortMalloc+0x158>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e96e:	e004      	b.n	800e97a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	429a      	cmp	r2, r3
 800e982:	d903      	bls.n	800e98c <pvPortMalloc+0x8c>
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1f1      	bne.n	800e970 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e98c:	4b2f      	ldr	r3, [pc, #188]	; (800ea4c <pvPortMalloc+0x14c>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	697a      	ldr	r2, [r7, #20]
 800e992:	429a      	cmp	r2, r3
 800e994:	d047      	beq.n	800ea26 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2208      	movs	r2, #8
 800e99c:	189b      	adds	r3, r3, r2
 800e99e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	1ad2      	subs	r2, r2, r3
 800e9b0:	2308      	movs	r3, #8
 800e9b2:	005b      	lsls	r3, r3, #1
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d916      	bls.n	800e9e6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9b8:	697a      	ldr	r2, [r7, #20]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	18d3      	adds	r3, r2, r3
 800e9be:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2207      	movs	r2, #7
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	d001      	beq.n	800e9cc <pvPortMalloc+0xcc>
 800e9c8:	b672      	cpsid	i
 800e9ca:	e7fe      	b.n	800e9ca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	1ad2      	subs	r2, r2, r3
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	f000 f8ed 	bl	800ebc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9e6:	4b1b      	ldr	r3, [pc, #108]	; (800ea54 <pvPortMalloc+0x154>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	4b18      	ldr	r3, [pc, #96]	; (800ea54 <pvPortMalloc+0x154>)
 800e9f2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9f4:	4b17      	ldr	r3, [pc, #92]	; (800ea54 <pvPortMalloc+0x154>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	4b18      	ldr	r3, [pc, #96]	; (800ea5c <pvPortMalloc+0x15c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d203      	bcs.n	800ea08 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea00:	4b14      	ldr	r3, [pc, #80]	; (800ea54 <pvPortMalloc+0x154>)
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	4b15      	ldr	r3, [pc, #84]	; (800ea5c <pvPortMalloc+0x15c>)
 800ea06:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	4b10      	ldr	r3, [pc, #64]	; (800ea50 <pvPortMalloc+0x150>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	431a      	orrs	r2, r3
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea1c:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <pvPortMalloc+0x160>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	4b0f      	ldr	r3, [pc, #60]	; (800ea60 <pvPortMalloc+0x160>)
 800ea24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea26:	f7fe fecd 	bl	800d7c4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d101      	bne.n	800ea34 <pvPortMalloc+0x134>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ea30:	f7f9 ffeb 	bl	8008a0a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2207      	movs	r2, #7
 800ea38:	4013      	ands	r3, r2
 800ea3a:	d001      	beq.n	800ea40 <pvPortMalloc+0x140>
 800ea3c:	b672      	cpsid	i
 800ea3e:	e7fe      	b.n	800ea3e <pvPortMalloc+0x13e>
	return pvReturn;
 800ea40:	68fb      	ldr	r3, [r7, #12]
}
 800ea42:	0018      	movs	r0, r3
 800ea44:	46bd      	mov	sp, r7
 800ea46:	b006      	add	sp, #24
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	46c0      	nop			; (mov r8, r8)
 800ea4c:	2000539c 	.word	0x2000539c
 800ea50:	200053b0 	.word	0x200053b0
 800ea54:	200053a0 	.word	0x200053a0
 800ea58:	20005394 	.word	0x20005394
 800ea5c:	200053a4 	.word	0x200053a4
 800ea60:	200053a8 	.word	0x200053a8

0800ea64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d03a      	beq.n	800eaec <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea76:	2308      	movs	r3, #8
 800ea78:	425b      	negs	r3, r3
 800ea7a:	68fa      	ldr	r2, [r7, #12]
 800ea7c:	18d3      	adds	r3, r2, r3
 800ea7e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	4b1a      	ldr	r3, [pc, #104]	; (800eaf4 <vPortFree+0x90>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	d101      	bne.n	800ea94 <vPortFree+0x30>
 800ea90:	b672      	cpsid	i
 800ea92:	e7fe      	b.n	800ea92 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <vPortFree+0x3c>
 800ea9c:	b672      	cpsid	i
 800ea9e:	e7fe      	b.n	800ea9e <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	4b13      	ldr	r3, [pc, #76]	; (800eaf4 <vPortFree+0x90>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	d01f      	beq.n	800eaec <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d11b      	bne.n	800eaec <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	685a      	ldr	r2, [r3, #4]
 800eab8:	4b0e      	ldr	r3, [pc, #56]	; (800eaf4 <vPortFree+0x90>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	43db      	mvns	r3, r3
 800eabe:	401a      	ands	r2, r3
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eac4:	f7fe fe72 	bl	800d7ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	4b0a      	ldr	r3, [pc, #40]	; (800eaf8 <vPortFree+0x94>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	18d2      	adds	r2, r2, r3
 800ead2:	4b09      	ldr	r3, [pc, #36]	; (800eaf8 <vPortFree+0x94>)
 800ead4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	0018      	movs	r0, r3
 800eada:	f000 f871 	bl	800ebc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eade:	4b07      	ldr	r3, [pc, #28]	; (800eafc <vPortFree+0x98>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	1c5a      	adds	r2, r3, #1
 800eae4:	4b05      	ldr	r3, [pc, #20]	; (800eafc <vPortFree+0x98>)
 800eae6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800eae8:	f7fe fe6c 	bl	800d7c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaec:	46c0      	nop			; (mov r8, r8)
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	b004      	add	sp, #16
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	200053b0 	.word	0x200053b0
 800eaf8:	200053a0 	.word	0x200053a0
 800eafc:	200053ac 	.word	0x200053ac

0800eb00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb06:	4b27      	ldr	r3, [pc, #156]	; (800eba4 <prvHeapInit+0xa4>)
 800eb08:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb0a:	4b27      	ldr	r3, [pc, #156]	; (800eba8 <prvHeapInit+0xa8>)
 800eb0c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2207      	movs	r2, #7
 800eb12:	4013      	ands	r3, r2
 800eb14:	d00c      	beq.n	800eb30 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	3307      	adds	r3, #7
 800eb1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2207      	movs	r2, #7
 800eb20:	4393      	bics	r3, r2
 800eb22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	1ad2      	subs	r2, r2, r3
 800eb2a:	4b1f      	ldr	r3, [pc, #124]	; (800eba8 <prvHeapInit+0xa8>)
 800eb2c:	18d3      	adds	r3, r2, r3
 800eb2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb34:	4b1d      	ldr	r3, [pc, #116]	; (800ebac <prvHeapInit+0xac>)
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb3a:	4b1c      	ldr	r3, [pc, #112]	; (800ebac <prvHeapInit+0xac>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	18d3      	adds	r3, r2, r3
 800eb46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb48:	2208      	movs	r2, #8
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	1a9b      	subs	r3, r3, r2
 800eb4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2207      	movs	r2, #7
 800eb54:	4393      	bics	r3, r2
 800eb56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	4b15      	ldr	r3, [pc, #84]	; (800ebb0 <prvHeapInit+0xb0>)
 800eb5c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800eb5e:	4b14      	ldr	r3, [pc, #80]	; (800ebb0 <prvHeapInit+0xb0>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2200      	movs	r2, #0
 800eb64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb66:	4b12      	ldr	r3, [pc, #72]	; (800ebb0 <prvHeapInit+0xb0>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	1ad2      	subs	r2, r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb7c:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <prvHeapInit+0xb0>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <prvHeapInit+0xb4>)
 800eb8a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	4b09      	ldr	r3, [pc, #36]	; (800ebb8 <prvHeapInit+0xb8>)
 800eb92:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb94:	4b09      	ldr	r3, [pc, #36]	; (800ebbc <prvHeapInit+0xbc>)
 800eb96:	2280      	movs	r2, #128	; 0x80
 800eb98:	0612      	lsls	r2, r2, #24
 800eb9a:	601a      	str	r2, [r3, #0]
}
 800eb9c:	46c0      	nop			; (mov r8, r8)
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	b004      	add	sp, #16
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	00003ffc 	.word	0x00003ffc
 800eba8:	20001398 	.word	0x20001398
 800ebac:	20005394 	.word	0x20005394
 800ebb0:	2000539c 	.word	0x2000539c
 800ebb4:	200053a4 	.word	0x200053a4
 800ebb8:	200053a0 	.word	0x200053a0
 800ebbc:	200053b0 	.word	0x200053b0

0800ebc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebc8:	4b27      	ldr	r3, [pc, #156]	; (800ec68 <prvInsertBlockIntoFreeList+0xa8>)
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	e002      	b.n	800ebd4 <prvInsertBlockIntoFreeList+0x14>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d8f7      	bhi.n	800ebce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	18d3      	adds	r3, r2, r3
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d108      	bne.n	800ec02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	18d2      	adds	r2, r2, r3
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	18d2      	adds	r2, r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d118      	bne.n	800ec48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	4b14      	ldr	r3, [pc, #80]	; (800ec6c <prvInsertBlockIntoFreeList+0xac>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d00d      	beq.n	800ec3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685a      	ldr	r2, [r3, #4]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	18d2      	adds	r2, r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	601a      	str	r2, [r3, #0]
 800ec3c:	e008      	b.n	800ec50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec3e:	4b0b      	ldr	r3, [pc, #44]	; (800ec6c <prvInsertBlockIntoFreeList+0xac>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	e003      	b.n	800ec50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d002      	beq.n	800ec5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec5e:	46c0      	nop			; (mov r8, r8)
 800ec60:	46bd      	mov	sp, r7
 800ec62:	b004      	add	sp, #16
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	46c0      	nop			; (mov r8, r8)
 800ec68:	20005394 	.word	0x20005394
 800ec6c:	2000539c 	.word	0x2000539c

0800ec70 <calloc>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	4b03      	ldr	r3, [pc, #12]	; (800ec80 <calloc+0x10>)
 800ec74:	000a      	movs	r2, r1
 800ec76:	0001      	movs	r1, r0
 800ec78:	6818      	ldr	r0, [r3, #0]
 800ec7a:	f000 fa5b 	bl	800f134 <_calloc_r>
 800ec7e:	bd10      	pop	{r4, pc}
 800ec80:	2000048c 	.word	0x2000048c

0800ec84 <__errno>:
 800ec84:	4b01      	ldr	r3, [pc, #4]	; (800ec8c <__errno+0x8>)
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	4770      	bx	lr
 800ec8a:	46c0      	nop			; (mov r8, r8)
 800ec8c:	2000048c 	.word	0x2000048c

0800ec90 <__sflush_r>:
 800ec90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec92:	898b      	ldrh	r3, [r1, #12]
 800ec94:	0005      	movs	r5, r0
 800ec96:	000c      	movs	r4, r1
 800ec98:	071a      	lsls	r2, r3, #28
 800ec9a:	d45f      	bmi.n	800ed5c <__sflush_r+0xcc>
 800ec9c:	684a      	ldr	r2, [r1, #4]
 800ec9e:	2a00      	cmp	r2, #0
 800eca0:	dc04      	bgt.n	800ecac <__sflush_r+0x1c>
 800eca2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	dc01      	bgt.n	800ecac <__sflush_r+0x1c>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ecac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ecae:	2f00      	cmp	r7, #0
 800ecb0:	d0fa      	beq.n	800eca8 <__sflush_r+0x18>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	2180      	movs	r1, #128	; 0x80
 800ecb6:	682e      	ldr	r6, [r5, #0]
 800ecb8:	602a      	str	r2, [r5, #0]
 800ecba:	001a      	movs	r2, r3
 800ecbc:	0149      	lsls	r1, r1, #5
 800ecbe:	400a      	ands	r2, r1
 800ecc0:	420b      	tst	r3, r1
 800ecc2:	d034      	beq.n	800ed2e <__sflush_r+0x9e>
 800ecc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	075b      	lsls	r3, r3, #29
 800ecca:	d506      	bpl.n	800ecda <__sflush_r+0x4a>
 800eccc:	6863      	ldr	r3, [r4, #4]
 800ecce:	1ac0      	subs	r0, r0, r3
 800ecd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <__sflush_r+0x4a>
 800ecd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecd8:	1ac0      	subs	r0, r0, r3
 800ecda:	0002      	movs	r2, r0
 800ecdc:	6a21      	ldr	r1, [r4, #32]
 800ecde:	2300      	movs	r3, #0
 800ece0:	0028      	movs	r0, r5
 800ece2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ece4:	47b8      	blx	r7
 800ece6:	89a1      	ldrh	r1, [r4, #12]
 800ece8:	1c43      	adds	r3, r0, #1
 800ecea:	d106      	bne.n	800ecfa <__sflush_r+0x6a>
 800ecec:	682b      	ldr	r3, [r5, #0]
 800ecee:	2b1d      	cmp	r3, #29
 800ecf0:	d831      	bhi.n	800ed56 <__sflush_r+0xc6>
 800ecf2:	4a2c      	ldr	r2, [pc, #176]	; (800eda4 <__sflush_r+0x114>)
 800ecf4:	40da      	lsrs	r2, r3
 800ecf6:	07d3      	lsls	r3, r2, #31
 800ecf8:	d52d      	bpl.n	800ed56 <__sflush_r+0xc6>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	6063      	str	r3, [r4, #4]
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	04cb      	lsls	r3, r1, #19
 800ed04:	d505      	bpl.n	800ed12 <__sflush_r+0x82>
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	d102      	bne.n	800ed10 <__sflush_r+0x80>
 800ed0a:	682b      	ldr	r3, [r5, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d100      	bne.n	800ed12 <__sflush_r+0x82>
 800ed10:	6560      	str	r0, [r4, #84]	; 0x54
 800ed12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed14:	602e      	str	r6, [r5, #0]
 800ed16:	2900      	cmp	r1, #0
 800ed18:	d0c6      	beq.n	800eca8 <__sflush_r+0x18>
 800ed1a:	0023      	movs	r3, r4
 800ed1c:	3344      	adds	r3, #68	; 0x44
 800ed1e:	4299      	cmp	r1, r3
 800ed20:	d002      	beq.n	800ed28 <__sflush_r+0x98>
 800ed22:	0028      	movs	r0, r5
 800ed24:	f000 fa14 	bl	800f150 <_free_r>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	6360      	str	r0, [r4, #52]	; 0x34
 800ed2c:	e7bd      	b.n	800ecaa <__sflush_r+0x1a>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	0028      	movs	r0, r5
 800ed32:	6a21      	ldr	r1, [r4, #32]
 800ed34:	47b8      	blx	r7
 800ed36:	1c43      	adds	r3, r0, #1
 800ed38:	d1c5      	bne.n	800ecc6 <__sflush_r+0x36>
 800ed3a:	682b      	ldr	r3, [r5, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d0c2      	beq.n	800ecc6 <__sflush_r+0x36>
 800ed40:	2b1d      	cmp	r3, #29
 800ed42:	d001      	beq.n	800ed48 <__sflush_r+0xb8>
 800ed44:	2b16      	cmp	r3, #22
 800ed46:	d101      	bne.n	800ed4c <__sflush_r+0xbc>
 800ed48:	602e      	str	r6, [r5, #0]
 800ed4a:	e7ad      	b.n	800eca8 <__sflush_r+0x18>
 800ed4c:	2340      	movs	r3, #64	; 0x40
 800ed4e:	89a2      	ldrh	r2, [r4, #12]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	e7a9      	b.n	800ecaa <__sflush_r+0x1a>
 800ed56:	2340      	movs	r3, #64	; 0x40
 800ed58:	430b      	orrs	r3, r1
 800ed5a:	e7fa      	b.n	800ed52 <__sflush_r+0xc2>
 800ed5c:	690f      	ldr	r7, [r1, #16]
 800ed5e:	2f00      	cmp	r7, #0
 800ed60:	d0a2      	beq.n	800eca8 <__sflush_r+0x18>
 800ed62:	680a      	ldr	r2, [r1, #0]
 800ed64:	600f      	str	r7, [r1, #0]
 800ed66:	1bd2      	subs	r2, r2, r7
 800ed68:	9201      	str	r2, [sp, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	079b      	lsls	r3, r3, #30
 800ed6e:	d100      	bne.n	800ed72 <__sflush_r+0xe2>
 800ed70:	694a      	ldr	r2, [r1, #20]
 800ed72:	60a2      	str	r2, [r4, #8]
 800ed74:	9b01      	ldr	r3, [sp, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	dc00      	bgt.n	800ed7c <__sflush_r+0xec>
 800ed7a:	e795      	b.n	800eca8 <__sflush_r+0x18>
 800ed7c:	003a      	movs	r2, r7
 800ed7e:	0028      	movs	r0, r5
 800ed80:	9b01      	ldr	r3, [sp, #4]
 800ed82:	6a21      	ldr	r1, [r4, #32]
 800ed84:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed86:	47b0      	blx	r6
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	dc06      	bgt.n	800ed9a <__sflush_r+0x10a>
 800ed8c:	2340      	movs	r3, #64	; 0x40
 800ed8e:	2001      	movs	r0, #1
 800ed90:	89a2      	ldrh	r2, [r4, #12]
 800ed92:	4240      	negs	r0, r0
 800ed94:	4313      	orrs	r3, r2
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	e787      	b.n	800ecaa <__sflush_r+0x1a>
 800ed9a:	9b01      	ldr	r3, [sp, #4]
 800ed9c:	183f      	adds	r7, r7, r0
 800ed9e:	1a1b      	subs	r3, r3, r0
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	e7e7      	b.n	800ed74 <__sflush_r+0xe4>
 800eda4:	20400001 	.word	0x20400001

0800eda8 <_fflush_r>:
 800eda8:	690b      	ldr	r3, [r1, #16]
 800edaa:	b570      	push	{r4, r5, r6, lr}
 800edac:	0005      	movs	r5, r0
 800edae:	000c      	movs	r4, r1
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d102      	bne.n	800edba <_fflush_r+0x12>
 800edb4:	2500      	movs	r5, #0
 800edb6:	0028      	movs	r0, r5
 800edb8:	bd70      	pop	{r4, r5, r6, pc}
 800edba:	2800      	cmp	r0, #0
 800edbc:	d004      	beq.n	800edc8 <_fflush_r+0x20>
 800edbe:	6983      	ldr	r3, [r0, #24]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d101      	bne.n	800edc8 <_fflush_r+0x20>
 800edc4:	f000 f8a8 	bl	800ef18 <__sinit>
 800edc8:	4b14      	ldr	r3, [pc, #80]	; (800ee1c <_fflush_r+0x74>)
 800edca:	429c      	cmp	r4, r3
 800edcc:	d11b      	bne.n	800ee06 <_fflush_r+0x5e>
 800edce:	686c      	ldr	r4, [r5, #4]
 800edd0:	220c      	movs	r2, #12
 800edd2:	5ea3      	ldrsh	r3, [r4, r2]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0ed      	beq.n	800edb4 <_fflush_r+0xc>
 800edd8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800edda:	07d2      	lsls	r2, r2, #31
 800eddc:	d404      	bmi.n	800ede8 <_fflush_r+0x40>
 800edde:	059b      	lsls	r3, r3, #22
 800ede0:	d402      	bmi.n	800ede8 <_fflush_r+0x40>
 800ede2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ede4:	f000 f95d 	bl	800f0a2 <__retarget_lock_acquire_recursive>
 800ede8:	0028      	movs	r0, r5
 800edea:	0021      	movs	r1, r4
 800edec:	f7ff ff50 	bl	800ec90 <__sflush_r>
 800edf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edf2:	0005      	movs	r5, r0
 800edf4:	07db      	lsls	r3, r3, #31
 800edf6:	d4de      	bmi.n	800edb6 <_fflush_r+0xe>
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	059b      	lsls	r3, r3, #22
 800edfc:	d4db      	bmi.n	800edb6 <_fflush_r+0xe>
 800edfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee00:	f000 f950 	bl	800f0a4 <__retarget_lock_release_recursive>
 800ee04:	e7d7      	b.n	800edb6 <_fflush_r+0xe>
 800ee06:	4b06      	ldr	r3, [pc, #24]	; (800ee20 <_fflush_r+0x78>)
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	d101      	bne.n	800ee10 <_fflush_r+0x68>
 800ee0c:	68ac      	ldr	r4, [r5, #8]
 800ee0e:	e7df      	b.n	800edd0 <_fflush_r+0x28>
 800ee10:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <_fflush_r+0x7c>)
 800ee12:	429c      	cmp	r4, r3
 800ee14:	d1dc      	bne.n	800edd0 <_fflush_r+0x28>
 800ee16:	68ec      	ldr	r4, [r5, #12]
 800ee18:	e7da      	b.n	800edd0 <_fflush_r+0x28>
 800ee1a:	46c0      	nop			; (mov r8, r8)
 800ee1c:	08010750 	.word	0x08010750
 800ee20:	08010770 	.word	0x08010770
 800ee24:	08010730 	.word	0x08010730

0800ee28 <fflush>:
 800ee28:	0001      	movs	r1, r0
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d105      	bne.n	800ee3c <fflush+0x14>
 800ee30:	4b05      	ldr	r3, [pc, #20]	; (800ee48 <fflush+0x20>)
 800ee32:	4906      	ldr	r1, [pc, #24]	; (800ee4c <fflush+0x24>)
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	f000 f8ef 	bl	800f018 <_fwalk_reent>
 800ee3a:	bd10      	pop	{r4, pc}
 800ee3c:	4b04      	ldr	r3, [pc, #16]	; (800ee50 <fflush+0x28>)
 800ee3e:	6818      	ldr	r0, [r3, #0]
 800ee40:	f7ff ffb2 	bl	800eda8 <_fflush_r>
 800ee44:	e7f9      	b.n	800ee3a <fflush+0x12>
 800ee46:	46c0      	nop			; (mov r8, r8)
 800ee48:	08010790 	.word	0x08010790
 800ee4c:	0800eda9 	.word	0x0800eda9
 800ee50:	2000048c 	.word	0x2000048c

0800ee54 <std>:
 800ee54:	2300      	movs	r3, #0
 800ee56:	b510      	push	{r4, lr}
 800ee58:	0004      	movs	r4, r0
 800ee5a:	6003      	str	r3, [r0, #0]
 800ee5c:	6043      	str	r3, [r0, #4]
 800ee5e:	6083      	str	r3, [r0, #8]
 800ee60:	8181      	strh	r1, [r0, #12]
 800ee62:	6643      	str	r3, [r0, #100]	; 0x64
 800ee64:	0019      	movs	r1, r3
 800ee66:	81c2      	strh	r2, [r0, #14]
 800ee68:	6103      	str	r3, [r0, #16]
 800ee6a:	6143      	str	r3, [r0, #20]
 800ee6c:	6183      	str	r3, [r0, #24]
 800ee6e:	2208      	movs	r2, #8
 800ee70:	305c      	adds	r0, #92	; 0x5c
 800ee72:	f000 f957 	bl	800f124 <memset>
 800ee76:	4b05      	ldr	r3, [pc, #20]	; (800ee8c <std+0x38>)
 800ee78:	6263      	str	r3, [r4, #36]	; 0x24
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <std+0x3c>)
 800ee7c:	6224      	str	r4, [r4, #32]
 800ee7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee80:	4b04      	ldr	r3, [pc, #16]	; (800ee94 <std+0x40>)
 800ee82:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee84:	4b04      	ldr	r3, [pc, #16]	; (800ee98 <std+0x44>)
 800ee86:	6323      	str	r3, [r4, #48]	; 0x30
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	46c0      	nop			; (mov r8, r8)
 800ee8c:	0800f3f1 	.word	0x0800f3f1
 800ee90:	0800f419 	.word	0x0800f419
 800ee94:	0800f451 	.word	0x0800f451
 800ee98:	0800f47d 	.word	0x0800f47d

0800ee9c <_cleanup_r>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	4902      	ldr	r1, [pc, #8]	; (800eea8 <_cleanup_r+0xc>)
 800eea0:	f000 f8ba 	bl	800f018 <_fwalk_reent>
 800eea4:	bd10      	pop	{r4, pc}
 800eea6:	46c0      	nop			; (mov r8, r8)
 800eea8:	0800eda9 	.word	0x0800eda9

0800eeac <__sfmoreglue>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	2568      	movs	r5, #104	; 0x68
 800eeb0:	1e4a      	subs	r2, r1, #1
 800eeb2:	4355      	muls	r5, r2
 800eeb4:	000e      	movs	r6, r1
 800eeb6:	0029      	movs	r1, r5
 800eeb8:	3174      	adds	r1, #116	; 0x74
 800eeba:	f000 f993 	bl	800f1e4 <_malloc_r>
 800eebe:	1e04      	subs	r4, r0, #0
 800eec0:	d008      	beq.n	800eed4 <__sfmoreglue+0x28>
 800eec2:	2100      	movs	r1, #0
 800eec4:	002a      	movs	r2, r5
 800eec6:	6001      	str	r1, [r0, #0]
 800eec8:	6046      	str	r6, [r0, #4]
 800eeca:	300c      	adds	r0, #12
 800eecc:	60a0      	str	r0, [r4, #8]
 800eece:	3268      	adds	r2, #104	; 0x68
 800eed0:	f000 f928 	bl	800f124 <memset>
 800eed4:	0020      	movs	r0, r4
 800eed6:	bd70      	pop	{r4, r5, r6, pc}

0800eed8 <__sfp_lock_acquire>:
 800eed8:	b510      	push	{r4, lr}
 800eeda:	4802      	ldr	r0, [pc, #8]	; (800eee4 <__sfp_lock_acquire+0xc>)
 800eedc:	f000 f8e1 	bl	800f0a2 <__retarget_lock_acquire_recursive>
 800eee0:	bd10      	pop	{r4, pc}
 800eee2:	46c0      	nop			; (mov r8, r8)
 800eee4:	20005620 	.word	0x20005620

0800eee8 <__sfp_lock_release>:
 800eee8:	b510      	push	{r4, lr}
 800eeea:	4802      	ldr	r0, [pc, #8]	; (800eef4 <__sfp_lock_release+0xc>)
 800eeec:	f000 f8da 	bl	800f0a4 <__retarget_lock_release_recursive>
 800eef0:	bd10      	pop	{r4, pc}
 800eef2:	46c0      	nop			; (mov r8, r8)
 800eef4:	20005620 	.word	0x20005620

0800eef8 <__sinit_lock_acquire>:
 800eef8:	b510      	push	{r4, lr}
 800eefa:	4802      	ldr	r0, [pc, #8]	; (800ef04 <__sinit_lock_acquire+0xc>)
 800eefc:	f000 f8d1 	bl	800f0a2 <__retarget_lock_acquire_recursive>
 800ef00:	bd10      	pop	{r4, pc}
 800ef02:	46c0      	nop			; (mov r8, r8)
 800ef04:	2000561b 	.word	0x2000561b

0800ef08 <__sinit_lock_release>:
 800ef08:	b510      	push	{r4, lr}
 800ef0a:	4802      	ldr	r0, [pc, #8]	; (800ef14 <__sinit_lock_release+0xc>)
 800ef0c:	f000 f8ca 	bl	800f0a4 <__retarget_lock_release_recursive>
 800ef10:	bd10      	pop	{r4, pc}
 800ef12:	46c0      	nop			; (mov r8, r8)
 800ef14:	2000561b 	.word	0x2000561b

0800ef18 <__sinit>:
 800ef18:	b513      	push	{r0, r1, r4, lr}
 800ef1a:	0004      	movs	r4, r0
 800ef1c:	f7ff ffec 	bl	800eef8 <__sinit_lock_acquire>
 800ef20:	69a3      	ldr	r3, [r4, #24]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d002      	beq.n	800ef2c <__sinit+0x14>
 800ef26:	f7ff ffef 	bl	800ef08 <__sinit_lock_release>
 800ef2a:	bd13      	pop	{r0, r1, r4, pc}
 800ef2c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ef2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ef30:	6523      	str	r3, [r4, #80]	; 0x50
 800ef32:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <__sinit+0x68>)
 800ef34:	4a13      	ldr	r2, [pc, #76]	; (800ef84 <__sinit+0x6c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef3a:	9301      	str	r3, [sp, #4]
 800ef3c:	42a3      	cmp	r3, r4
 800ef3e:	d101      	bne.n	800ef44 <__sinit+0x2c>
 800ef40:	2301      	movs	r3, #1
 800ef42:	61a3      	str	r3, [r4, #24]
 800ef44:	0020      	movs	r0, r4
 800ef46:	f000 f81f 	bl	800ef88 <__sfp>
 800ef4a:	6060      	str	r0, [r4, #4]
 800ef4c:	0020      	movs	r0, r4
 800ef4e:	f000 f81b 	bl	800ef88 <__sfp>
 800ef52:	60a0      	str	r0, [r4, #8]
 800ef54:	0020      	movs	r0, r4
 800ef56:	f000 f817 	bl	800ef88 <__sfp>
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	2104      	movs	r1, #4
 800ef5e:	60e0      	str	r0, [r4, #12]
 800ef60:	6860      	ldr	r0, [r4, #4]
 800ef62:	f7ff ff77 	bl	800ee54 <std>
 800ef66:	2201      	movs	r2, #1
 800ef68:	2109      	movs	r1, #9
 800ef6a:	68a0      	ldr	r0, [r4, #8]
 800ef6c:	f7ff ff72 	bl	800ee54 <std>
 800ef70:	2202      	movs	r2, #2
 800ef72:	2112      	movs	r1, #18
 800ef74:	68e0      	ldr	r0, [r4, #12]
 800ef76:	f7ff ff6d 	bl	800ee54 <std>
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	61a3      	str	r3, [r4, #24]
 800ef7e:	e7d2      	b.n	800ef26 <__sinit+0xe>
 800ef80:	08010790 	.word	0x08010790
 800ef84:	0800ee9d 	.word	0x0800ee9d

0800ef88 <__sfp>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	0007      	movs	r7, r0
 800ef8c:	f7ff ffa4 	bl	800eed8 <__sfp_lock_acquire>
 800ef90:	4b1f      	ldr	r3, [pc, #124]	; (800f010 <__sfp+0x88>)
 800ef92:	681e      	ldr	r6, [r3, #0]
 800ef94:	69b3      	ldr	r3, [r6, #24]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <__sfp+0x18>
 800ef9a:	0030      	movs	r0, r6
 800ef9c:	f7ff ffbc 	bl	800ef18 <__sinit>
 800efa0:	3648      	adds	r6, #72	; 0x48
 800efa2:	68b4      	ldr	r4, [r6, #8]
 800efa4:	6873      	ldr	r3, [r6, #4]
 800efa6:	3b01      	subs	r3, #1
 800efa8:	d504      	bpl.n	800efb4 <__sfp+0x2c>
 800efaa:	6833      	ldr	r3, [r6, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d022      	beq.n	800eff6 <__sfp+0x6e>
 800efb0:	6836      	ldr	r6, [r6, #0]
 800efb2:	e7f6      	b.n	800efa2 <__sfp+0x1a>
 800efb4:	220c      	movs	r2, #12
 800efb6:	5ea5      	ldrsh	r5, [r4, r2]
 800efb8:	2d00      	cmp	r5, #0
 800efba:	d11a      	bne.n	800eff2 <__sfp+0x6a>
 800efbc:	0020      	movs	r0, r4
 800efbe:	4b15      	ldr	r3, [pc, #84]	; (800f014 <__sfp+0x8c>)
 800efc0:	3058      	adds	r0, #88	; 0x58
 800efc2:	60e3      	str	r3, [r4, #12]
 800efc4:	6665      	str	r5, [r4, #100]	; 0x64
 800efc6:	f000 f86b 	bl	800f0a0 <__retarget_lock_init_recursive>
 800efca:	f7ff ff8d 	bl	800eee8 <__sfp_lock_release>
 800efce:	0020      	movs	r0, r4
 800efd0:	2208      	movs	r2, #8
 800efd2:	0029      	movs	r1, r5
 800efd4:	6025      	str	r5, [r4, #0]
 800efd6:	60a5      	str	r5, [r4, #8]
 800efd8:	6065      	str	r5, [r4, #4]
 800efda:	6125      	str	r5, [r4, #16]
 800efdc:	6165      	str	r5, [r4, #20]
 800efde:	61a5      	str	r5, [r4, #24]
 800efe0:	305c      	adds	r0, #92	; 0x5c
 800efe2:	f000 f89f 	bl	800f124 <memset>
 800efe6:	6365      	str	r5, [r4, #52]	; 0x34
 800efe8:	63a5      	str	r5, [r4, #56]	; 0x38
 800efea:	64a5      	str	r5, [r4, #72]	; 0x48
 800efec:	64e5      	str	r5, [r4, #76]	; 0x4c
 800efee:	0020      	movs	r0, r4
 800eff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff2:	3468      	adds	r4, #104	; 0x68
 800eff4:	e7d7      	b.n	800efa6 <__sfp+0x1e>
 800eff6:	2104      	movs	r1, #4
 800eff8:	0038      	movs	r0, r7
 800effa:	f7ff ff57 	bl	800eeac <__sfmoreglue>
 800effe:	1e04      	subs	r4, r0, #0
 800f000:	6030      	str	r0, [r6, #0]
 800f002:	d1d5      	bne.n	800efb0 <__sfp+0x28>
 800f004:	f7ff ff70 	bl	800eee8 <__sfp_lock_release>
 800f008:	230c      	movs	r3, #12
 800f00a:	603b      	str	r3, [r7, #0]
 800f00c:	e7ef      	b.n	800efee <__sfp+0x66>
 800f00e:	46c0      	nop			; (mov r8, r8)
 800f010:	08010790 	.word	0x08010790
 800f014:	ffff0001 	.word	0xffff0001

0800f018 <_fwalk_reent>:
 800f018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f01a:	0004      	movs	r4, r0
 800f01c:	0006      	movs	r6, r0
 800f01e:	2700      	movs	r7, #0
 800f020:	9101      	str	r1, [sp, #4]
 800f022:	3448      	adds	r4, #72	; 0x48
 800f024:	6863      	ldr	r3, [r4, #4]
 800f026:	68a5      	ldr	r5, [r4, #8]
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	9b00      	ldr	r3, [sp, #0]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	d504      	bpl.n	800f03c <_fwalk_reent+0x24>
 800f032:	6824      	ldr	r4, [r4, #0]
 800f034:	2c00      	cmp	r4, #0
 800f036:	d1f5      	bne.n	800f024 <_fwalk_reent+0xc>
 800f038:	0038      	movs	r0, r7
 800f03a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f03c:	89ab      	ldrh	r3, [r5, #12]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d908      	bls.n	800f054 <_fwalk_reent+0x3c>
 800f042:	220e      	movs	r2, #14
 800f044:	5eab      	ldrsh	r3, [r5, r2]
 800f046:	3301      	adds	r3, #1
 800f048:	d004      	beq.n	800f054 <_fwalk_reent+0x3c>
 800f04a:	0029      	movs	r1, r5
 800f04c:	0030      	movs	r0, r6
 800f04e:	9b01      	ldr	r3, [sp, #4]
 800f050:	4798      	blx	r3
 800f052:	4307      	orrs	r7, r0
 800f054:	3568      	adds	r5, #104	; 0x68
 800f056:	e7e8      	b.n	800f02a <_fwalk_reent+0x12>

0800f058 <__libc_init_array>:
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	2600      	movs	r6, #0
 800f05c:	4d0c      	ldr	r5, [pc, #48]	; (800f090 <__libc_init_array+0x38>)
 800f05e:	4c0d      	ldr	r4, [pc, #52]	; (800f094 <__libc_init_array+0x3c>)
 800f060:	1b64      	subs	r4, r4, r5
 800f062:	10a4      	asrs	r4, r4, #2
 800f064:	42a6      	cmp	r6, r4
 800f066:	d109      	bne.n	800f07c <__libc_init_array+0x24>
 800f068:	2600      	movs	r6, #0
 800f06a:	f000 feb9 	bl	800fde0 <_init>
 800f06e:	4d0a      	ldr	r5, [pc, #40]	; (800f098 <__libc_init_array+0x40>)
 800f070:	4c0a      	ldr	r4, [pc, #40]	; (800f09c <__libc_init_array+0x44>)
 800f072:	1b64      	subs	r4, r4, r5
 800f074:	10a4      	asrs	r4, r4, #2
 800f076:	42a6      	cmp	r6, r4
 800f078:	d105      	bne.n	800f086 <__libc_init_array+0x2e>
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	00b3      	lsls	r3, r6, #2
 800f07e:	58eb      	ldr	r3, [r5, r3]
 800f080:	4798      	blx	r3
 800f082:	3601      	adds	r6, #1
 800f084:	e7ee      	b.n	800f064 <__libc_init_array+0xc>
 800f086:	00b3      	lsls	r3, r6, #2
 800f088:	58eb      	ldr	r3, [r5, r3]
 800f08a:	4798      	blx	r3
 800f08c:	3601      	adds	r6, #1
 800f08e:	e7f2      	b.n	800f076 <__libc_init_array+0x1e>
 800f090:	080107c8 	.word	0x080107c8
 800f094:	080107c8 	.word	0x080107c8
 800f098:	080107c8 	.word	0x080107c8
 800f09c:	080107cc 	.word	0x080107cc

0800f0a0 <__retarget_lock_init_recursive>:
 800f0a0:	4770      	bx	lr

0800f0a2 <__retarget_lock_acquire_recursive>:
 800f0a2:	4770      	bx	lr

0800f0a4 <__retarget_lock_release_recursive>:
 800f0a4:	4770      	bx	lr
	...

0800f0a8 <malloc>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4b03      	ldr	r3, [pc, #12]	; (800f0b8 <malloc+0x10>)
 800f0ac:	0001      	movs	r1, r0
 800f0ae:	6818      	ldr	r0, [r3, #0]
 800f0b0:	f000 f898 	bl	800f1e4 <_malloc_r>
 800f0b4:	bd10      	pop	{r4, pc}
 800f0b6:	46c0      	nop			; (mov r8, r8)
 800f0b8:	2000048c 	.word	0x2000048c

0800f0bc <free>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	4b03      	ldr	r3, [pc, #12]	; (800f0cc <free+0x10>)
 800f0c0:	0001      	movs	r1, r0
 800f0c2:	6818      	ldr	r0, [r3, #0]
 800f0c4:	f000 f844 	bl	800f150 <_free_r>
 800f0c8:	bd10      	pop	{r4, pc}
 800f0ca:	46c0      	nop			; (mov r8, r8)
 800f0cc:	2000048c 	.word	0x2000048c

0800f0d0 <memcmp>:
 800f0d0:	b530      	push	{r4, r5, lr}
 800f0d2:	2400      	movs	r4, #0
 800f0d4:	3901      	subs	r1, #1
 800f0d6:	42a2      	cmp	r2, r4
 800f0d8:	d101      	bne.n	800f0de <memcmp+0xe>
 800f0da:	2000      	movs	r0, #0
 800f0dc:	e005      	b.n	800f0ea <memcmp+0x1a>
 800f0de:	5d03      	ldrb	r3, [r0, r4]
 800f0e0:	3401      	adds	r4, #1
 800f0e2:	5d0d      	ldrb	r5, [r1, r4]
 800f0e4:	42ab      	cmp	r3, r5
 800f0e6:	d0f6      	beq.n	800f0d6 <memcmp+0x6>
 800f0e8:	1b58      	subs	r0, r3, r5
 800f0ea:	bd30      	pop	{r4, r5, pc}

0800f0ec <memcpy>:
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	b510      	push	{r4, lr}
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d100      	bne.n	800f0f6 <memcpy+0xa>
 800f0f4:	bd10      	pop	{r4, pc}
 800f0f6:	5ccc      	ldrb	r4, [r1, r3]
 800f0f8:	54c4      	strb	r4, [r0, r3]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	e7f8      	b.n	800f0f0 <memcpy+0x4>

0800f0fe <memmove>:
 800f0fe:	b510      	push	{r4, lr}
 800f100:	4288      	cmp	r0, r1
 800f102:	d902      	bls.n	800f10a <memmove+0xc>
 800f104:	188b      	adds	r3, r1, r2
 800f106:	4298      	cmp	r0, r3
 800f108:	d303      	bcc.n	800f112 <memmove+0x14>
 800f10a:	2300      	movs	r3, #0
 800f10c:	e007      	b.n	800f11e <memmove+0x20>
 800f10e:	5c8b      	ldrb	r3, [r1, r2]
 800f110:	5483      	strb	r3, [r0, r2]
 800f112:	3a01      	subs	r2, #1
 800f114:	d2fb      	bcs.n	800f10e <memmove+0x10>
 800f116:	bd10      	pop	{r4, pc}
 800f118:	5ccc      	ldrb	r4, [r1, r3]
 800f11a:	54c4      	strb	r4, [r0, r3]
 800f11c:	3301      	adds	r3, #1
 800f11e:	429a      	cmp	r2, r3
 800f120:	d1fa      	bne.n	800f118 <memmove+0x1a>
 800f122:	e7f8      	b.n	800f116 <memmove+0x18>

0800f124 <memset>:
 800f124:	0003      	movs	r3, r0
 800f126:	1882      	adds	r2, r0, r2
 800f128:	4293      	cmp	r3, r2
 800f12a:	d100      	bne.n	800f12e <memset+0xa>
 800f12c:	4770      	bx	lr
 800f12e:	7019      	strb	r1, [r3, #0]
 800f130:	3301      	adds	r3, #1
 800f132:	e7f9      	b.n	800f128 <memset+0x4>

0800f134 <_calloc_r>:
 800f134:	434a      	muls	r2, r1
 800f136:	b570      	push	{r4, r5, r6, lr}
 800f138:	0011      	movs	r1, r2
 800f13a:	0015      	movs	r5, r2
 800f13c:	f000 f852 	bl	800f1e4 <_malloc_r>
 800f140:	1e04      	subs	r4, r0, #0
 800f142:	d003      	beq.n	800f14c <_calloc_r+0x18>
 800f144:	002a      	movs	r2, r5
 800f146:	2100      	movs	r1, #0
 800f148:	f7ff ffec 	bl	800f124 <memset>
 800f14c:	0020      	movs	r0, r4
 800f14e:	bd70      	pop	{r4, r5, r6, pc}

0800f150 <_free_r>:
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	0005      	movs	r5, r0
 800f154:	2900      	cmp	r1, #0
 800f156:	d010      	beq.n	800f17a <_free_r+0x2a>
 800f158:	1f0c      	subs	r4, r1, #4
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da00      	bge.n	800f162 <_free_r+0x12>
 800f160:	18e4      	adds	r4, r4, r3
 800f162:	0028      	movs	r0, r5
 800f164:	f000 fb04 	bl	800f770 <__malloc_lock>
 800f168:	4a1d      	ldr	r2, [pc, #116]	; (800f1e0 <_free_r+0x90>)
 800f16a:	6813      	ldr	r3, [r2, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d105      	bne.n	800f17c <_free_r+0x2c>
 800f170:	6063      	str	r3, [r4, #4]
 800f172:	6014      	str	r4, [r2, #0]
 800f174:	0028      	movs	r0, r5
 800f176:	f000 fb03 	bl	800f780 <__malloc_unlock>
 800f17a:	bd70      	pop	{r4, r5, r6, pc}
 800f17c:	42a3      	cmp	r3, r4
 800f17e:	d908      	bls.n	800f192 <_free_r+0x42>
 800f180:	6821      	ldr	r1, [r4, #0]
 800f182:	1860      	adds	r0, r4, r1
 800f184:	4283      	cmp	r3, r0
 800f186:	d1f3      	bne.n	800f170 <_free_r+0x20>
 800f188:	6818      	ldr	r0, [r3, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	1841      	adds	r1, r0, r1
 800f18e:	6021      	str	r1, [r4, #0]
 800f190:	e7ee      	b.n	800f170 <_free_r+0x20>
 800f192:	001a      	movs	r2, r3
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <_free_r+0x4e>
 800f19a:	42a3      	cmp	r3, r4
 800f19c:	d9f9      	bls.n	800f192 <_free_r+0x42>
 800f19e:	6811      	ldr	r1, [r2, #0]
 800f1a0:	1850      	adds	r0, r2, r1
 800f1a2:	42a0      	cmp	r0, r4
 800f1a4:	d10b      	bne.n	800f1be <_free_r+0x6e>
 800f1a6:	6820      	ldr	r0, [r4, #0]
 800f1a8:	1809      	adds	r1, r1, r0
 800f1aa:	1850      	adds	r0, r2, r1
 800f1ac:	6011      	str	r1, [r2, #0]
 800f1ae:	4283      	cmp	r3, r0
 800f1b0:	d1e0      	bne.n	800f174 <_free_r+0x24>
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	1841      	adds	r1, r0, r1
 800f1b8:	6011      	str	r1, [r2, #0]
 800f1ba:	6053      	str	r3, [r2, #4]
 800f1bc:	e7da      	b.n	800f174 <_free_r+0x24>
 800f1be:	42a0      	cmp	r0, r4
 800f1c0:	d902      	bls.n	800f1c8 <_free_r+0x78>
 800f1c2:	230c      	movs	r3, #12
 800f1c4:	602b      	str	r3, [r5, #0]
 800f1c6:	e7d5      	b.n	800f174 <_free_r+0x24>
 800f1c8:	6821      	ldr	r1, [r4, #0]
 800f1ca:	1860      	adds	r0, r4, r1
 800f1cc:	4283      	cmp	r3, r0
 800f1ce:	d103      	bne.n	800f1d8 <_free_r+0x88>
 800f1d0:	6818      	ldr	r0, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	1841      	adds	r1, r0, r1
 800f1d6:	6021      	str	r1, [r4, #0]
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	6054      	str	r4, [r2, #4]
 800f1dc:	e7ca      	b.n	800f174 <_free_r+0x24>
 800f1de:	46c0      	nop			; (mov r8, r8)
 800f1e0:	200053b4 	.word	0x200053b4

0800f1e4 <_malloc_r>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	1ccd      	adds	r5, r1, #3
 800f1ea:	439d      	bics	r5, r3
 800f1ec:	3508      	adds	r5, #8
 800f1ee:	0006      	movs	r6, r0
 800f1f0:	2d0c      	cmp	r5, #12
 800f1f2:	d21f      	bcs.n	800f234 <_malloc_r+0x50>
 800f1f4:	250c      	movs	r5, #12
 800f1f6:	42a9      	cmp	r1, r5
 800f1f8:	d81e      	bhi.n	800f238 <_malloc_r+0x54>
 800f1fa:	0030      	movs	r0, r6
 800f1fc:	f000 fab8 	bl	800f770 <__malloc_lock>
 800f200:	4925      	ldr	r1, [pc, #148]	; (800f298 <_malloc_r+0xb4>)
 800f202:	680a      	ldr	r2, [r1, #0]
 800f204:	0014      	movs	r4, r2
 800f206:	2c00      	cmp	r4, #0
 800f208:	d11a      	bne.n	800f240 <_malloc_r+0x5c>
 800f20a:	4f24      	ldr	r7, [pc, #144]	; (800f29c <_malloc_r+0xb8>)
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d104      	bne.n	800f21c <_malloc_r+0x38>
 800f212:	0021      	movs	r1, r4
 800f214:	0030      	movs	r0, r6
 800f216:	f000 f8d9 	bl	800f3cc <_sbrk_r>
 800f21a:	6038      	str	r0, [r7, #0]
 800f21c:	0029      	movs	r1, r5
 800f21e:	0030      	movs	r0, r6
 800f220:	f000 f8d4 	bl	800f3cc <_sbrk_r>
 800f224:	1c43      	adds	r3, r0, #1
 800f226:	d12b      	bne.n	800f280 <_malloc_r+0x9c>
 800f228:	230c      	movs	r3, #12
 800f22a:	0030      	movs	r0, r6
 800f22c:	6033      	str	r3, [r6, #0]
 800f22e:	f000 faa7 	bl	800f780 <__malloc_unlock>
 800f232:	e003      	b.n	800f23c <_malloc_r+0x58>
 800f234:	2d00      	cmp	r5, #0
 800f236:	dade      	bge.n	800f1f6 <_malloc_r+0x12>
 800f238:	230c      	movs	r3, #12
 800f23a:	6033      	str	r3, [r6, #0]
 800f23c:	2000      	movs	r0, #0
 800f23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	1b5b      	subs	r3, r3, r5
 800f244:	d419      	bmi.n	800f27a <_malloc_r+0x96>
 800f246:	2b0b      	cmp	r3, #11
 800f248:	d903      	bls.n	800f252 <_malloc_r+0x6e>
 800f24a:	6023      	str	r3, [r4, #0]
 800f24c:	18e4      	adds	r4, r4, r3
 800f24e:	6025      	str	r5, [r4, #0]
 800f250:	e003      	b.n	800f25a <_malloc_r+0x76>
 800f252:	6863      	ldr	r3, [r4, #4]
 800f254:	42a2      	cmp	r2, r4
 800f256:	d10e      	bne.n	800f276 <_malloc_r+0x92>
 800f258:	600b      	str	r3, [r1, #0]
 800f25a:	0030      	movs	r0, r6
 800f25c:	f000 fa90 	bl	800f780 <__malloc_unlock>
 800f260:	0020      	movs	r0, r4
 800f262:	2207      	movs	r2, #7
 800f264:	300b      	adds	r0, #11
 800f266:	1d23      	adds	r3, r4, #4
 800f268:	4390      	bics	r0, r2
 800f26a:	1ac2      	subs	r2, r0, r3
 800f26c:	4298      	cmp	r0, r3
 800f26e:	d0e6      	beq.n	800f23e <_malloc_r+0x5a>
 800f270:	1a1b      	subs	r3, r3, r0
 800f272:	50a3      	str	r3, [r4, r2]
 800f274:	e7e3      	b.n	800f23e <_malloc_r+0x5a>
 800f276:	6053      	str	r3, [r2, #4]
 800f278:	e7ef      	b.n	800f25a <_malloc_r+0x76>
 800f27a:	0022      	movs	r2, r4
 800f27c:	6864      	ldr	r4, [r4, #4]
 800f27e:	e7c2      	b.n	800f206 <_malloc_r+0x22>
 800f280:	2303      	movs	r3, #3
 800f282:	1cc4      	adds	r4, r0, #3
 800f284:	439c      	bics	r4, r3
 800f286:	42a0      	cmp	r0, r4
 800f288:	d0e1      	beq.n	800f24e <_malloc_r+0x6a>
 800f28a:	1a21      	subs	r1, r4, r0
 800f28c:	0030      	movs	r0, r6
 800f28e:	f000 f89d 	bl	800f3cc <_sbrk_r>
 800f292:	1c43      	adds	r3, r0, #1
 800f294:	d1db      	bne.n	800f24e <_malloc_r+0x6a>
 800f296:	e7c7      	b.n	800f228 <_malloc_r+0x44>
 800f298:	200053b4 	.word	0x200053b4
 800f29c:	200053b8 	.word	0x200053b8

0800f2a0 <iprintf>:
 800f2a0:	b40f      	push	{r0, r1, r2, r3}
 800f2a2:	4b0b      	ldr	r3, [pc, #44]	; (800f2d0 <iprintf+0x30>)
 800f2a4:	b513      	push	{r0, r1, r4, lr}
 800f2a6:	681c      	ldr	r4, [r3, #0]
 800f2a8:	2c00      	cmp	r4, #0
 800f2aa:	d005      	beq.n	800f2b8 <iprintf+0x18>
 800f2ac:	69a3      	ldr	r3, [r4, #24]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d102      	bne.n	800f2b8 <iprintf+0x18>
 800f2b2:	0020      	movs	r0, r4
 800f2b4:	f7ff fe30 	bl	800ef18 <__sinit>
 800f2b8:	ab05      	add	r3, sp, #20
 800f2ba:	0020      	movs	r0, r4
 800f2bc:	9a04      	ldr	r2, [sp, #16]
 800f2be:	68a1      	ldr	r1, [r4, #8]
 800f2c0:	9301      	str	r3, [sp, #4]
 800f2c2:	f000 fa8d 	bl	800f7e0 <_vfiprintf_r>
 800f2c6:	bc16      	pop	{r1, r2, r4}
 800f2c8:	bc08      	pop	{r3}
 800f2ca:	b004      	add	sp, #16
 800f2cc:	4718      	bx	r3
 800f2ce:	46c0      	nop			; (mov r8, r8)
 800f2d0:	2000048c 	.word	0x2000048c

0800f2d4 <_puts_r>:
 800f2d4:	b570      	push	{r4, r5, r6, lr}
 800f2d6:	0005      	movs	r5, r0
 800f2d8:	000e      	movs	r6, r1
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d004      	beq.n	800f2e8 <_puts_r+0x14>
 800f2de:	6983      	ldr	r3, [r0, #24]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <_puts_r+0x14>
 800f2e4:	f7ff fe18 	bl	800ef18 <__sinit>
 800f2e8:	69ab      	ldr	r3, [r5, #24]
 800f2ea:	68ac      	ldr	r4, [r5, #8]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d102      	bne.n	800f2f6 <_puts_r+0x22>
 800f2f0:	0028      	movs	r0, r5
 800f2f2:	f7ff fe11 	bl	800ef18 <__sinit>
 800f2f6:	4b2d      	ldr	r3, [pc, #180]	; (800f3ac <_puts_r+0xd8>)
 800f2f8:	429c      	cmp	r4, r3
 800f2fa:	d122      	bne.n	800f342 <_puts_r+0x6e>
 800f2fc:	686c      	ldr	r4, [r5, #4]
 800f2fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f300:	07db      	lsls	r3, r3, #31
 800f302:	d405      	bmi.n	800f310 <_puts_r+0x3c>
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	059b      	lsls	r3, r3, #22
 800f308:	d402      	bmi.n	800f310 <_puts_r+0x3c>
 800f30a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30c:	f7ff fec9 	bl	800f0a2 <__retarget_lock_acquire_recursive>
 800f310:	89a3      	ldrh	r3, [r4, #12]
 800f312:	071b      	lsls	r3, r3, #28
 800f314:	d502      	bpl.n	800f31c <_puts_r+0x48>
 800f316:	6923      	ldr	r3, [r4, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d129      	bne.n	800f370 <_puts_r+0x9c>
 800f31c:	0021      	movs	r1, r4
 800f31e:	0028      	movs	r0, r5
 800f320:	f000 f91c 	bl	800f55c <__swsetup_r>
 800f324:	2800      	cmp	r0, #0
 800f326:	d023      	beq.n	800f370 <_puts_r+0x9c>
 800f328:	2501      	movs	r5, #1
 800f32a:	426d      	negs	r5, r5
 800f32c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f32e:	07db      	lsls	r3, r3, #31
 800f330:	d405      	bmi.n	800f33e <_puts_r+0x6a>
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	059b      	lsls	r3, r3, #22
 800f336:	d402      	bmi.n	800f33e <_puts_r+0x6a>
 800f338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f33a:	f7ff feb3 	bl	800f0a4 <__retarget_lock_release_recursive>
 800f33e:	0028      	movs	r0, r5
 800f340:	bd70      	pop	{r4, r5, r6, pc}
 800f342:	4b1b      	ldr	r3, [pc, #108]	; (800f3b0 <_puts_r+0xdc>)
 800f344:	429c      	cmp	r4, r3
 800f346:	d101      	bne.n	800f34c <_puts_r+0x78>
 800f348:	68ac      	ldr	r4, [r5, #8]
 800f34a:	e7d8      	b.n	800f2fe <_puts_r+0x2a>
 800f34c:	4b19      	ldr	r3, [pc, #100]	; (800f3b4 <_puts_r+0xe0>)
 800f34e:	429c      	cmp	r4, r3
 800f350:	d1d5      	bne.n	800f2fe <_puts_r+0x2a>
 800f352:	68ec      	ldr	r4, [r5, #12]
 800f354:	e7d3      	b.n	800f2fe <_puts_r+0x2a>
 800f356:	3601      	adds	r6, #1
 800f358:	60a3      	str	r3, [r4, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	da04      	bge.n	800f368 <_puts_r+0x94>
 800f35e:	69a2      	ldr	r2, [r4, #24]
 800f360:	429a      	cmp	r2, r3
 800f362:	dc16      	bgt.n	800f392 <_puts_r+0xbe>
 800f364:	290a      	cmp	r1, #10
 800f366:	d014      	beq.n	800f392 <_puts_r+0xbe>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	1c5a      	adds	r2, r3, #1
 800f36c:	6022      	str	r2, [r4, #0]
 800f36e:	7019      	strb	r1, [r3, #0]
 800f370:	68a3      	ldr	r3, [r4, #8]
 800f372:	7831      	ldrb	r1, [r6, #0]
 800f374:	3b01      	subs	r3, #1
 800f376:	2900      	cmp	r1, #0
 800f378:	d1ed      	bne.n	800f356 <_puts_r+0x82>
 800f37a:	60a3      	str	r3, [r4, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	da0f      	bge.n	800f3a0 <_puts_r+0xcc>
 800f380:	0028      	movs	r0, r5
 800f382:	0022      	movs	r2, r4
 800f384:	310a      	adds	r1, #10
 800f386:	f000 f87f 	bl	800f488 <__swbuf_r>
 800f38a:	250a      	movs	r5, #10
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d1cd      	bne.n	800f32c <_puts_r+0x58>
 800f390:	e7ca      	b.n	800f328 <_puts_r+0x54>
 800f392:	0022      	movs	r2, r4
 800f394:	0028      	movs	r0, r5
 800f396:	f000 f877 	bl	800f488 <__swbuf_r>
 800f39a:	1c43      	adds	r3, r0, #1
 800f39c:	d1e8      	bne.n	800f370 <_puts_r+0x9c>
 800f39e:	e7c3      	b.n	800f328 <_puts_r+0x54>
 800f3a0:	250a      	movs	r5, #10
 800f3a2:	6823      	ldr	r3, [r4, #0]
 800f3a4:	1c5a      	adds	r2, r3, #1
 800f3a6:	6022      	str	r2, [r4, #0]
 800f3a8:	701d      	strb	r5, [r3, #0]
 800f3aa:	e7bf      	b.n	800f32c <_puts_r+0x58>
 800f3ac:	08010750 	.word	0x08010750
 800f3b0:	08010770 	.word	0x08010770
 800f3b4:	08010730 	.word	0x08010730

0800f3b8 <puts>:
 800f3b8:	b510      	push	{r4, lr}
 800f3ba:	4b03      	ldr	r3, [pc, #12]	; (800f3c8 <puts+0x10>)
 800f3bc:	0001      	movs	r1, r0
 800f3be:	6818      	ldr	r0, [r3, #0]
 800f3c0:	f7ff ff88 	bl	800f2d4 <_puts_r>
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	46c0      	nop			; (mov r8, r8)
 800f3c8:	2000048c 	.word	0x2000048c

0800f3cc <_sbrk_r>:
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	b570      	push	{r4, r5, r6, lr}
 800f3d0:	4d06      	ldr	r5, [pc, #24]	; (800f3ec <_sbrk_r+0x20>)
 800f3d2:	0004      	movs	r4, r0
 800f3d4:	0008      	movs	r0, r1
 800f3d6:	602b      	str	r3, [r5, #0]
 800f3d8:	f7fa fbfc 	bl	8009bd4 <_sbrk>
 800f3dc:	1c43      	adds	r3, r0, #1
 800f3de:	d103      	bne.n	800f3e8 <_sbrk_r+0x1c>
 800f3e0:	682b      	ldr	r3, [r5, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d000      	beq.n	800f3e8 <_sbrk_r+0x1c>
 800f3e6:	6023      	str	r3, [r4, #0]
 800f3e8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ea:	46c0      	nop			; (mov r8, r8)
 800f3ec:	20005624 	.word	0x20005624

0800f3f0 <__sread>:
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	000c      	movs	r4, r1
 800f3f4:	250e      	movs	r5, #14
 800f3f6:	5f49      	ldrsh	r1, [r1, r5]
 800f3f8:	f000 fcae 	bl	800fd58 <_read_r>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	db03      	blt.n	800f408 <__sread+0x18>
 800f400:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f402:	181b      	adds	r3, r3, r0
 800f404:	6563      	str	r3, [r4, #84]	; 0x54
 800f406:	bd70      	pop	{r4, r5, r6, pc}
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	4a02      	ldr	r2, [pc, #8]	; (800f414 <__sread+0x24>)
 800f40c:	4013      	ands	r3, r2
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	e7f9      	b.n	800f406 <__sread+0x16>
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	ffffefff 	.word	0xffffefff

0800f418 <__swrite>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	001f      	movs	r7, r3
 800f41c:	898b      	ldrh	r3, [r1, #12]
 800f41e:	0005      	movs	r5, r0
 800f420:	000c      	movs	r4, r1
 800f422:	0016      	movs	r6, r2
 800f424:	05db      	lsls	r3, r3, #23
 800f426:	d505      	bpl.n	800f434 <__swrite+0x1c>
 800f428:	230e      	movs	r3, #14
 800f42a:	5ec9      	ldrsh	r1, [r1, r3]
 800f42c:	2200      	movs	r2, #0
 800f42e:	2302      	movs	r3, #2
 800f430:	f000 f91e 	bl	800f670 <_lseek_r>
 800f434:	89a3      	ldrh	r3, [r4, #12]
 800f436:	4a05      	ldr	r2, [pc, #20]	; (800f44c <__swrite+0x34>)
 800f438:	0028      	movs	r0, r5
 800f43a:	4013      	ands	r3, r2
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	0032      	movs	r2, r6
 800f440:	230e      	movs	r3, #14
 800f442:	5ee1      	ldrsh	r1, [r4, r3]
 800f444:	003b      	movs	r3, r7
 800f446:	f000 f875 	bl	800f534 <_write_r>
 800f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44c:	ffffefff 	.word	0xffffefff

0800f450 <__sseek>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	000c      	movs	r4, r1
 800f454:	250e      	movs	r5, #14
 800f456:	5f49      	ldrsh	r1, [r1, r5]
 800f458:	f000 f90a 	bl	800f670 <_lseek_r>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	1c42      	adds	r2, r0, #1
 800f460:	d103      	bne.n	800f46a <__sseek+0x1a>
 800f462:	4a05      	ldr	r2, [pc, #20]	; (800f478 <__sseek+0x28>)
 800f464:	4013      	ands	r3, r2
 800f466:	81a3      	strh	r3, [r4, #12]
 800f468:	bd70      	pop	{r4, r5, r6, pc}
 800f46a:	2280      	movs	r2, #128	; 0x80
 800f46c:	0152      	lsls	r2, r2, #5
 800f46e:	4313      	orrs	r3, r2
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	6560      	str	r0, [r4, #84]	; 0x54
 800f474:	e7f8      	b.n	800f468 <__sseek+0x18>
 800f476:	46c0      	nop			; (mov r8, r8)
 800f478:	ffffefff 	.word	0xffffefff

0800f47c <__sclose>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	230e      	movs	r3, #14
 800f480:	5ec9      	ldrsh	r1, [r1, r3]
 800f482:	f000 f8e3 	bl	800f64c <_close_r>
 800f486:	bd10      	pop	{r4, pc}

0800f488 <__swbuf_r>:
 800f488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48a:	0005      	movs	r5, r0
 800f48c:	000e      	movs	r6, r1
 800f48e:	0014      	movs	r4, r2
 800f490:	2800      	cmp	r0, #0
 800f492:	d004      	beq.n	800f49e <__swbuf_r+0x16>
 800f494:	6983      	ldr	r3, [r0, #24]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d101      	bne.n	800f49e <__swbuf_r+0x16>
 800f49a:	f7ff fd3d 	bl	800ef18 <__sinit>
 800f49e:	4b22      	ldr	r3, [pc, #136]	; (800f528 <__swbuf_r+0xa0>)
 800f4a0:	429c      	cmp	r4, r3
 800f4a2:	d12e      	bne.n	800f502 <__swbuf_r+0x7a>
 800f4a4:	686c      	ldr	r4, [r5, #4]
 800f4a6:	69a3      	ldr	r3, [r4, #24]
 800f4a8:	60a3      	str	r3, [r4, #8]
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	071b      	lsls	r3, r3, #28
 800f4ae:	d532      	bpl.n	800f516 <__swbuf_r+0x8e>
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d02f      	beq.n	800f516 <__swbuf_r+0x8e>
 800f4b6:	6823      	ldr	r3, [r4, #0]
 800f4b8:	6922      	ldr	r2, [r4, #16]
 800f4ba:	b2f7      	uxtb	r7, r6
 800f4bc:	1a98      	subs	r0, r3, r2
 800f4be:	6963      	ldr	r3, [r4, #20]
 800f4c0:	b2f6      	uxtb	r6, r6
 800f4c2:	4283      	cmp	r3, r0
 800f4c4:	dc05      	bgt.n	800f4d2 <__swbuf_r+0x4a>
 800f4c6:	0021      	movs	r1, r4
 800f4c8:	0028      	movs	r0, r5
 800f4ca:	f7ff fc6d 	bl	800eda8 <_fflush_r>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d127      	bne.n	800f522 <__swbuf_r+0x9a>
 800f4d2:	68a3      	ldr	r3, [r4, #8]
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	60a3      	str	r3, [r4, #8]
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	6022      	str	r2, [r4, #0]
 800f4e0:	701f      	strb	r7, [r3, #0]
 800f4e2:	6963      	ldr	r3, [r4, #20]
 800f4e4:	4283      	cmp	r3, r0
 800f4e6:	d004      	beq.n	800f4f2 <__swbuf_r+0x6a>
 800f4e8:	89a3      	ldrh	r3, [r4, #12]
 800f4ea:	07db      	lsls	r3, r3, #31
 800f4ec:	d507      	bpl.n	800f4fe <__swbuf_r+0x76>
 800f4ee:	2e0a      	cmp	r6, #10
 800f4f0:	d105      	bne.n	800f4fe <__swbuf_r+0x76>
 800f4f2:	0021      	movs	r1, r4
 800f4f4:	0028      	movs	r0, r5
 800f4f6:	f7ff fc57 	bl	800eda8 <_fflush_r>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d111      	bne.n	800f522 <__swbuf_r+0x9a>
 800f4fe:	0030      	movs	r0, r6
 800f500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f502:	4b0a      	ldr	r3, [pc, #40]	; (800f52c <__swbuf_r+0xa4>)
 800f504:	429c      	cmp	r4, r3
 800f506:	d101      	bne.n	800f50c <__swbuf_r+0x84>
 800f508:	68ac      	ldr	r4, [r5, #8]
 800f50a:	e7cc      	b.n	800f4a6 <__swbuf_r+0x1e>
 800f50c:	4b08      	ldr	r3, [pc, #32]	; (800f530 <__swbuf_r+0xa8>)
 800f50e:	429c      	cmp	r4, r3
 800f510:	d1c9      	bne.n	800f4a6 <__swbuf_r+0x1e>
 800f512:	68ec      	ldr	r4, [r5, #12]
 800f514:	e7c7      	b.n	800f4a6 <__swbuf_r+0x1e>
 800f516:	0021      	movs	r1, r4
 800f518:	0028      	movs	r0, r5
 800f51a:	f000 f81f 	bl	800f55c <__swsetup_r>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d0c9      	beq.n	800f4b6 <__swbuf_r+0x2e>
 800f522:	2601      	movs	r6, #1
 800f524:	4276      	negs	r6, r6
 800f526:	e7ea      	b.n	800f4fe <__swbuf_r+0x76>
 800f528:	08010750 	.word	0x08010750
 800f52c:	08010770 	.word	0x08010770
 800f530:	08010730 	.word	0x08010730

0800f534 <_write_r>:
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	0004      	movs	r4, r0
 800f538:	0008      	movs	r0, r1
 800f53a:	0011      	movs	r1, r2
 800f53c:	001a      	movs	r2, r3
 800f53e:	2300      	movs	r3, #0
 800f540:	4d05      	ldr	r5, [pc, #20]	; (800f558 <_write_r+0x24>)
 800f542:	602b      	str	r3, [r5, #0]
 800f544:	f7fa fafd 	bl	8009b42 <_write>
 800f548:	1c43      	adds	r3, r0, #1
 800f54a:	d103      	bne.n	800f554 <_write_r+0x20>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d000      	beq.n	800f554 <_write_r+0x20>
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	bd70      	pop	{r4, r5, r6, pc}
 800f556:	46c0      	nop			; (mov r8, r8)
 800f558:	20005624 	.word	0x20005624

0800f55c <__swsetup_r>:
 800f55c:	4b37      	ldr	r3, [pc, #220]	; (800f63c <__swsetup_r+0xe0>)
 800f55e:	b570      	push	{r4, r5, r6, lr}
 800f560:	681d      	ldr	r5, [r3, #0]
 800f562:	0006      	movs	r6, r0
 800f564:	000c      	movs	r4, r1
 800f566:	2d00      	cmp	r5, #0
 800f568:	d005      	beq.n	800f576 <__swsetup_r+0x1a>
 800f56a:	69ab      	ldr	r3, [r5, #24]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d102      	bne.n	800f576 <__swsetup_r+0x1a>
 800f570:	0028      	movs	r0, r5
 800f572:	f7ff fcd1 	bl	800ef18 <__sinit>
 800f576:	4b32      	ldr	r3, [pc, #200]	; (800f640 <__swsetup_r+0xe4>)
 800f578:	429c      	cmp	r4, r3
 800f57a:	d10f      	bne.n	800f59c <__swsetup_r+0x40>
 800f57c:	686c      	ldr	r4, [r5, #4]
 800f57e:	230c      	movs	r3, #12
 800f580:	5ee2      	ldrsh	r2, [r4, r3]
 800f582:	b293      	uxth	r3, r2
 800f584:	0711      	lsls	r1, r2, #28
 800f586:	d42d      	bmi.n	800f5e4 <__swsetup_r+0x88>
 800f588:	06d9      	lsls	r1, r3, #27
 800f58a:	d411      	bmi.n	800f5b0 <__swsetup_r+0x54>
 800f58c:	2309      	movs	r3, #9
 800f58e:	2001      	movs	r0, #1
 800f590:	6033      	str	r3, [r6, #0]
 800f592:	3337      	adds	r3, #55	; 0x37
 800f594:	4313      	orrs	r3, r2
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	4240      	negs	r0, r0
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	4b29      	ldr	r3, [pc, #164]	; (800f644 <__swsetup_r+0xe8>)
 800f59e:	429c      	cmp	r4, r3
 800f5a0:	d101      	bne.n	800f5a6 <__swsetup_r+0x4a>
 800f5a2:	68ac      	ldr	r4, [r5, #8]
 800f5a4:	e7eb      	b.n	800f57e <__swsetup_r+0x22>
 800f5a6:	4b28      	ldr	r3, [pc, #160]	; (800f648 <__swsetup_r+0xec>)
 800f5a8:	429c      	cmp	r4, r3
 800f5aa:	d1e8      	bne.n	800f57e <__swsetup_r+0x22>
 800f5ac:	68ec      	ldr	r4, [r5, #12]
 800f5ae:	e7e6      	b.n	800f57e <__swsetup_r+0x22>
 800f5b0:	075b      	lsls	r3, r3, #29
 800f5b2:	d513      	bpl.n	800f5dc <__swsetup_r+0x80>
 800f5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5b6:	2900      	cmp	r1, #0
 800f5b8:	d008      	beq.n	800f5cc <__swsetup_r+0x70>
 800f5ba:	0023      	movs	r3, r4
 800f5bc:	3344      	adds	r3, #68	; 0x44
 800f5be:	4299      	cmp	r1, r3
 800f5c0:	d002      	beq.n	800f5c8 <__swsetup_r+0x6c>
 800f5c2:	0030      	movs	r0, r6
 800f5c4:	f7ff fdc4 	bl	800f150 <_free_r>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	6363      	str	r3, [r4, #52]	; 0x34
 800f5cc:	2224      	movs	r2, #36	; 0x24
 800f5ce:	89a3      	ldrh	r3, [r4, #12]
 800f5d0:	4393      	bics	r3, r2
 800f5d2:	81a3      	strh	r3, [r4, #12]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	6063      	str	r3, [r4, #4]
 800f5d8:	6923      	ldr	r3, [r4, #16]
 800f5da:	6023      	str	r3, [r4, #0]
 800f5dc:	2308      	movs	r3, #8
 800f5de:	89a2      	ldrh	r2, [r4, #12]
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	81a3      	strh	r3, [r4, #12]
 800f5e4:	6923      	ldr	r3, [r4, #16]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10b      	bne.n	800f602 <__swsetup_r+0xa6>
 800f5ea:	21a0      	movs	r1, #160	; 0xa0
 800f5ec:	2280      	movs	r2, #128	; 0x80
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	0089      	lsls	r1, r1, #2
 800f5f2:	0092      	lsls	r2, r2, #2
 800f5f4:	400b      	ands	r3, r1
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d003      	beq.n	800f602 <__swsetup_r+0xa6>
 800f5fa:	0021      	movs	r1, r4
 800f5fc:	0030      	movs	r0, r6
 800f5fe:	f000 f873 	bl	800f6e8 <__smakebuf_r>
 800f602:	220c      	movs	r2, #12
 800f604:	5ea3      	ldrsh	r3, [r4, r2]
 800f606:	2001      	movs	r0, #1
 800f608:	001a      	movs	r2, r3
 800f60a:	b299      	uxth	r1, r3
 800f60c:	4002      	ands	r2, r0
 800f60e:	4203      	tst	r3, r0
 800f610:	d00f      	beq.n	800f632 <__swsetup_r+0xd6>
 800f612:	2200      	movs	r2, #0
 800f614:	60a2      	str	r2, [r4, #8]
 800f616:	6962      	ldr	r2, [r4, #20]
 800f618:	4252      	negs	r2, r2
 800f61a:	61a2      	str	r2, [r4, #24]
 800f61c:	2000      	movs	r0, #0
 800f61e:	6922      	ldr	r2, [r4, #16]
 800f620:	4282      	cmp	r2, r0
 800f622:	d1ba      	bne.n	800f59a <__swsetup_r+0x3e>
 800f624:	060a      	lsls	r2, r1, #24
 800f626:	d5b8      	bpl.n	800f59a <__swsetup_r+0x3e>
 800f628:	2240      	movs	r2, #64	; 0x40
 800f62a:	4313      	orrs	r3, r2
 800f62c:	81a3      	strh	r3, [r4, #12]
 800f62e:	3801      	subs	r0, #1
 800f630:	e7b3      	b.n	800f59a <__swsetup_r+0x3e>
 800f632:	0788      	lsls	r0, r1, #30
 800f634:	d400      	bmi.n	800f638 <__swsetup_r+0xdc>
 800f636:	6962      	ldr	r2, [r4, #20]
 800f638:	60a2      	str	r2, [r4, #8]
 800f63a:	e7ef      	b.n	800f61c <__swsetup_r+0xc0>
 800f63c:	2000048c 	.word	0x2000048c
 800f640:	08010750 	.word	0x08010750
 800f644:	08010770 	.word	0x08010770
 800f648:	08010730 	.word	0x08010730

0800f64c <_close_r>:
 800f64c:	2300      	movs	r3, #0
 800f64e:	b570      	push	{r4, r5, r6, lr}
 800f650:	4d06      	ldr	r5, [pc, #24]	; (800f66c <_close_r+0x20>)
 800f652:	0004      	movs	r4, r0
 800f654:	0008      	movs	r0, r1
 800f656:	602b      	str	r3, [r5, #0]
 800f658:	f7fa fa8f 	bl	8009b7a <_close>
 800f65c:	1c43      	adds	r3, r0, #1
 800f65e:	d103      	bne.n	800f668 <_close_r+0x1c>
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d000      	beq.n	800f668 <_close_r+0x1c>
 800f666:	6023      	str	r3, [r4, #0]
 800f668:	bd70      	pop	{r4, r5, r6, pc}
 800f66a:	46c0      	nop			; (mov r8, r8)
 800f66c:	20005624 	.word	0x20005624

0800f670 <_lseek_r>:
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	0004      	movs	r4, r0
 800f674:	0008      	movs	r0, r1
 800f676:	0011      	movs	r1, r2
 800f678:	001a      	movs	r2, r3
 800f67a:	2300      	movs	r3, #0
 800f67c:	4d05      	ldr	r5, [pc, #20]	; (800f694 <_lseek_r+0x24>)
 800f67e:	602b      	str	r3, [r5, #0]
 800f680:	f7fa fa9c 	bl	8009bbc <_lseek>
 800f684:	1c43      	adds	r3, r0, #1
 800f686:	d103      	bne.n	800f690 <_lseek_r+0x20>
 800f688:	682b      	ldr	r3, [r5, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d000      	beq.n	800f690 <_lseek_r+0x20>
 800f68e:	6023      	str	r3, [r4, #0]
 800f690:	bd70      	pop	{r4, r5, r6, pc}
 800f692:	46c0      	nop			; (mov r8, r8)
 800f694:	20005624 	.word	0x20005624

0800f698 <__swhatbuf_r>:
 800f698:	b570      	push	{r4, r5, r6, lr}
 800f69a:	000e      	movs	r6, r1
 800f69c:	001d      	movs	r5, r3
 800f69e:	230e      	movs	r3, #14
 800f6a0:	5ec9      	ldrsh	r1, [r1, r3]
 800f6a2:	0014      	movs	r4, r2
 800f6a4:	b096      	sub	sp, #88	; 0x58
 800f6a6:	2900      	cmp	r1, #0
 800f6a8:	da07      	bge.n	800f6ba <__swhatbuf_r+0x22>
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	602b      	str	r3, [r5, #0]
 800f6ae:	89b3      	ldrh	r3, [r6, #12]
 800f6b0:	061b      	lsls	r3, r3, #24
 800f6b2:	d411      	bmi.n	800f6d8 <__swhatbuf_r+0x40>
 800f6b4:	2380      	movs	r3, #128	; 0x80
 800f6b6:	00db      	lsls	r3, r3, #3
 800f6b8:	e00f      	b.n	800f6da <__swhatbuf_r+0x42>
 800f6ba:	466a      	mov	r2, sp
 800f6bc:	f000 fb60 	bl	800fd80 <_fstat_r>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	dbf2      	blt.n	800f6aa <__swhatbuf_r+0x12>
 800f6c4:	23f0      	movs	r3, #240	; 0xf0
 800f6c6:	9901      	ldr	r1, [sp, #4]
 800f6c8:	021b      	lsls	r3, r3, #8
 800f6ca:	4019      	ands	r1, r3
 800f6cc:	4b05      	ldr	r3, [pc, #20]	; (800f6e4 <__swhatbuf_r+0x4c>)
 800f6ce:	18c9      	adds	r1, r1, r3
 800f6d0:	424b      	negs	r3, r1
 800f6d2:	4159      	adcs	r1, r3
 800f6d4:	6029      	str	r1, [r5, #0]
 800f6d6:	e7ed      	b.n	800f6b4 <__swhatbuf_r+0x1c>
 800f6d8:	2340      	movs	r3, #64	; 0x40
 800f6da:	2000      	movs	r0, #0
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	b016      	add	sp, #88	; 0x58
 800f6e0:	bd70      	pop	{r4, r5, r6, pc}
 800f6e2:	46c0      	nop			; (mov r8, r8)
 800f6e4:	ffffe000 	.word	0xffffe000

0800f6e8 <__smakebuf_r>:
 800f6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6ea:	2602      	movs	r6, #2
 800f6ec:	898b      	ldrh	r3, [r1, #12]
 800f6ee:	0005      	movs	r5, r0
 800f6f0:	000c      	movs	r4, r1
 800f6f2:	4233      	tst	r3, r6
 800f6f4:	d006      	beq.n	800f704 <__smakebuf_r+0x1c>
 800f6f6:	0023      	movs	r3, r4
 800f6f8:	3347      	adds	r3, #71	; 0x47
 800f6fa:	6023      	str	r3, [r4, #0]
 800f6fc:	6123      	str	r3, [r4, #16]
 800f6fe:	2301      	movs	r3, #1
 800f700:	6163      	str	r3, [r4, #20]
 800f702:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f704:	466a      	mov	r2, sp
 800f706:	ab01      	add	r3, sp, #4
 800f708:	f7ff ffc6 	bl	800f698 <__swhatbuf_r>
 800f70c:	9900      	ldr	r1, [sp, #0]
 800f70e:	0007      	movs	r7, r0
 800f710:	0028      	movs	r0, r5
 800f712:	f7ff fd67 	bl	800f1e4 <_malloc_r>
 800f716:	2800      	cmp	r0, #0
 800f718:	d108      	bne.n	800f72c <__smakebuf_r+0x44>
 800f71a:	220c      	movs	r2, #12
 800f71c:	5ea3      	ldrsh	r3, [r4, r2]
 800f71e:	059a      	lsls	r2, r3, #22
 800f720:	d4ef      	bmi.n	800f702 <__smakebuf_r+0x1a>
 800f722:	2203      	movs	r2, #3
 800f724:	4393      	bics	r3, r2
 800f726:	431e      	orrs	r6, r3
 800f728:	81a6      	strh	r6, [r4, #12]
 800f72a:	e7e4      	b.n	800f6f6 <__smakebuf_r+0xe>
 800f72c:	4b0f      	ldr	r3, [pc, #60]	; (800f76c <__smakebuf_r+0x84>)
 800f72e:	62ab      	str	r3, [r5, #40]	; 0x28
 800f730:	2380      	movs	r3, #128	; 0x80
 800f732:	89a2      	ldrh	r2, [r4, #12]
 800f734:	6020      	str	r0, [r4, #0]
 800f736:	4313      	orrs	r3, r2
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	9b00      	ldr	r3, [sp, #0]
 800f73c:	6120      	str	r0, [r4, #16]
 800f73e:	6163      	str	r3, [r4, #20]
 800f740:	9b01      	ldr	r3, [sp, #4]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00d      	beq.n	800f762 <__smakebuf_r+0x7a>
 800f746:	0028      	movs	r0, r5
 800f748:	230e      	movs	r3, #14
 800f74a:	5ee1      	ldrsh	r1, [r4, r3]
 800f74c:	f000 fb2a 	bl	800fda4 <_isatty_r>
 800f750:	2800      	cmp	r0, #0
 800f752:	d006      	beq.n	800f762 <__smakebuf_r+0x7a>
 800f754:	2203      	movs	r2, #3
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	4393      	bics	r3, r2
 800f75a:	001a      	movs	r2, r3
 800f75c:	2301      	movs	r3, #1
 800f75e:	4313      	orrs	r3, r2
 800f760:	81a3      	strh	r3, [r4, #12]
 800f762:	89a0      	ldrh	r0, [r4, #12]
 800f764:	4307      	orrs	r7, r0
 800f766:	81a7      	strh	r7, [r4, #12]
 800f768:	e7cb      	b.n	800f702 <__smakebuf_r+0x1a>
 800f76a:	46c0      	nop			; (mov r8, r8)
 800f76c:	0800ee9d 	.word	0x0800ee9d

0800f770 <__malloc_lock>:
 800f770:	b510      	push	{r4, lr}
 800f772:	4802      	ldr	r0, [pc, #8]	; (800f77c <__malloc_lock+0xc>)
 800f774:	f7ff fc95 	bl	800f0a2 <__retarget_lock_acquire_recursive>
 800f778:	bd10      	pop	{r4, pc}
 800f77a:	46c0      	nop			; (mov r8, r8)
 800f77c:	2000561c 	.word	0x2000561c

0800f780 <__malloc_unlock>:
 800f780:	b510      	push	{r4, lr}
 800f782:	4802      	ldr	r0, [pc, #8]	; (800f78c <__malloc_unlock+0xc>)
 800f784:	f7ff fc8e 	bl	800f0a4 <__retarget_lock_release_recursive>
 800f788:	bd10      	pop	{r4, pc}
 800f78a:	46c0      	nop			; (mov r8, r8)
 800f78c:	2000561c 	.word	0x2000561c

0800f790 <__sfputc_r>:
 800f790:	6893      	ldr	r3, [r2, #8]
 800f792:	b510      	push	{r4, lr}
 800f794:	3b01      	subs	r3, #1
 800f796:	6093      	str	r3, [r2, #8]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	da04      	bge.n	800f7a6 <__sfputc_r+0x16>
 800f79c:	6994      	ldr	r4, [r2, #24]
 800f79e:	42a3      	cmp	r3, r4
 800f7a0:	db07      	blt.n	800f7b2 <__sfputc_r+0x22>
 800f7a2:	290a      	cmp	r1, #10
 800f7a4:	d005      	beq.n	800f7b2 <__sfputc_r+0x22>
 800f7a6:	6813      	ldr	r3, [r2, #0]
 800f7a8:	1c58      	adds	r0, r3, #1
 800f7aa:	6010      	str	r0, [r2, #0]
 800f7ac:	7019      	strb	r1, [r3, #0]
 800f7ae:	0008      	movs	r0, r1
 800f7b0:	bd10      	pop	{r4, pc}
 800f7b2:	f7ff fe69 	bl	800f488 <__swbuf_r>
 800f7b6:	0001      	movs	r1, r0
 800f7b8:	e7f9      	b.n	800f7ae <__sfputc_r+0x1e>

0800f7ba <__sfputs_r>:
 800f7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7bc:	0006      	movs	r6, r0
 800f7be:	000f      	movs	r7, r1
 800f7c0:	0014      	movs	r4, r2
 800f7c2:	18d5      	adds	r5, r2, r3
 800f7c4:	42ac      	cmp	r4, r5
 800f7c6:	d101      	bne.n	800f7cc <__sfputs_r+0x12>
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	e007      	b.n	800f7dc <__sfputs_r+0x22>
 800f7cc:	7821      	ldrb	r1, [r4, #0]
 800f7ce:	003a      	movs	r2, r7
 800f7d0:	0030      	movs	r0, r6
 800f7d2:	f7ff ffdd 	bl	800f790 <__sfputc_r>
 800f7d6:	3401      	adds	r4, #1
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	d1f3      	bne.n	800f7c4 <__sfputs_r+0xa>
 800f7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7e0 <_vfiprintf_r>:
 800f7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7e2:	b0a1      	sub	sp, #132	; 0x84
 800f7e4:	0006      	movs	r6, r0
 800f7e6:	000c      	movs	r4, r1
 800f7e8:	001f      	movs	r7, r3
 800f7ea:	9203      	str	r2, [sp, #12]
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d004      	beq.n	800f7fa <_vfiprintf_r+0x1a>
 800f7f0:	6983      	ldr	r3, [r0, #24]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <_vfiprintf_r+0x1a>
 800f7f6:	f7ff fb8f 	bl	800ef18 <__sinit>
 800f7fa:	4b8e      	ldr	r3, [pc, #568]	; (800fa34 <_vfiprintf_r+0x254>)
 800f7fc:	429c      	cmp	r4, r3
 800f7fe:	d11c      	bne.n	800f83a <_vfiprintf_r+0x5a>
 800f800:	6874      	ldr	r4, [r6, #4]
 800f802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f804:	07db      	lsls	r3, r3, #31
 800f806:	d405      	bmi.n	800f814 <_vfiprintf_r+0x34>
 800f808:	89a3      	ldrh	r3, [r4, #12]
 800f80a:	059b      	lsls	r3, r3, #22
 800f80c:	d402      	bmi.n	800f814 <_vfiprintf_r+0x34>
 800f80e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f810:	f7ff fc47 	bl	800f0a2 <__retarget_lock_acquire_recursive>
 800f814:	89a3      	ldrh	r3, [r4, #12]
 800f816:	071b      	lsls	r3, r3, #28
 800f818:	d502      	bpl.n	800f820 <_vfiprintf_r+0x40>
 800f81a:	6923      	ldr	r3, [r4, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d11d      	bne.n	800f85c <_vfiprintf_r+0x7c>
 800f820:	0021      	movs	r1, r4
 800f822:	0030      	movs	r0, r6
 800f824:	f7ff fe9a 	bl	800f55c <__swsetup_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d017      	beq.n	800f85c <_vfiprintf_r+0x7c>
 800f82c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f82e:	07db      	lsls	r3, r3, #31
 800f830:	d50d      	bpl.n	800f84e <_vfiprintf_r+0x6e>
 800f832:	2001      	movs	r0, #1
 800f834:	4240      	negs	r0, r0
 800f836:	b021      	add	sp, #132	; 0x84
 800f838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f83a:	4b7f      	ldr	r3, [pc, #508]	; (800fa38 <_vfiprintf_r+0x258>)
 800f83c:	429c      	cmp	r4, r3
 800f83e:	d101      	bne.n	800f844 <_vfiprintf_r+0x64>
 800f840:	68b4      	ldr	r4, [r6, #8]
 800f842:	e7de      	b.n	800f802 <_vfiprintf_r+0x22>
 800f844:	4b7d      	ldr	r3, [pc, #500]	; (800fa3c <_vfiprintf_r+0x25c>)
 800f846:	429c      	cmp	r4, r3
 800f848:	d1db      	bne.n	800f802 <_vfiprintf_r+0x22>
 800f84a:	68f4      	ldr	r4, [r6, #12]
 800f84c:	e7d9      	b.n	800f802 <_vfiprintf_r+0x22>
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	059b      	lsls	r3, r3, #22
 800f852:	d4ee      	bmi.n	800f832 <_vfiprintf_r+0x52>
 800f854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f856:	f7ff fc25 	bl	800f0a4 <__retarget_lock_release_recursive>
 800f85a:	e7ea      	b.n	800f832 <_vfiprintf_r+0x52>
 800f85c:	2300      	movs	r3, #0
 800f85e:	ad08      	add	r5, sp, #32
 800f860:	616b      	str	r3, [r5, #20]
 800f862:	3320      	adds	r3, #32
 800f864:	766b      	strb	r3, [r5, #25]
 800f866:	3310      	adds	r3, #16
 800f868:	76ab      	strb	r3, [r5, #26]
 800f86a:	9707      	str	r7, [sp, #28]
 800f86c:	9f03      	ldr	r7, [sp, #12]
 800f86e:	783b      	ldrb	r3, [r7, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <_vfiprintf_r+0x98>
 800f874:	2b25      	cmp	r3, #37	; 0x25
 800f876:	d14e      	bne.n	800f916 <_vfiprintf_r+0x136>
 800f878:	9b03      	ldr	r3, [sp, #12]
 800f87a:	1afb      	subs	r3, r7, r3
 800f87c:	9305      	str	r3, [sp, #20]
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	429f      	cmp	r7, r3
 800f882:	d00d      	beq.n	800f8a0 <_vfiprintf_r+0xc0>
 800f884:	9b05      	ldr	r3, [sp, #20]
 800f886:	0021      	movs	r1, r4
 800f888:	0030      	movs	r0, r6
 800f88a:	9a03      	ldr	r2, [sp, #12]
 800f88c:	f7ff ff95 	bl	800f7ba <__sfputs_r>
 800f890:	1c43      	adds	r3, r0, #1
 800f892:	d100      	bne.n	800f896 <_vfiprintf_r+0xb6>
 800f894:	e0b5      	b.n	800fa02 <_vfiprintf_r+0x222>
 800f896:	696a      	ldr	r2, [r5, #20]
 800f898:	9b05      	ldr	r3, [sp, #20]
 800f89a:	4694      	mov	ip, r2
 800f89c:	4463      	add	r3, ip
 800f89e:	616b      	str	r3, [r5, #20]
 800f8a0:	783b      	ldrb	r3, [r7, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d100      	bne.n	800f8a8 <_vfiprintf_r+0xc8>
 800f8a6:	e0ac      	b.n	800fa02 <_vfiprintf_r+0x222>
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	1c7b      	adds	r3, r7, #1
 800f8ac:	9303      	str	r3, [sp, #12]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	4252      	negs	r2, r2
 800f8b2:	606a      	str	r2, [r5, #4]
 800f8b4:	a904      	add	r1, sp, #16
 800f8b6:	3254      	adds	r2, #84	; 0x54
 800f8b8:	1852      	adds	r2, r2, r1
 800f8ba:	602b      	str	r3, [r5, #0]
 800f8bc:	60eb      	str	r3, [r5, #12]
 800f8be:	60ab      	str	r3, [r5, #8]
 800f8c0:	7013      	strb	r3, [r2, #0]
 800f8c2:	65ab      	str	r3, [r5, #88]	; 0x58
 800f8c4:	9b03      	ldr	r3, [sp, #12]
 800f8c6:	2205      	movs	r2, #5
 800f8c8:	7819      	ldrb	r1, [r3, #0]
 800f8ca:	485d      	ldr	r0, [pc, #372]	; (800fa40 <_vfiprintf_r+0x260>)
 800f8cc:	f000 fa7c 	bl	800fdc8 <memchr>
 800f8d0:	9b03      	ldr	r3, [sp, #12]
 800f8d2:	1c5f      	adds	r7, r3, #1
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d120      	bne.n	800f91a <_vfiprintf_r+0x13a>
 800f8d8:	682a      	ldr	r2, [r5, #0]
 800f8da:	06d3      	lsls	r3, r2, #27
 800f8dc:	d504      	bpl.n	800f8e8 <_vfiprintf_r+0x108>
 800f8de:	2353      	movs	r3, #83	; 0x53
 800f8e0:	a904      	add	r1, sp, #16
 800f8e2:	185b      	adds	r3, r3, r1
 800f8e4:	2120      	movs	r1, #32
 800f8e6:	7019      	strb	r1, [r3, #0]
 800f8e8:	0713      	lsls	r3, r2, #28
 800f8ea:	d504      	bpl.n	800f8f6 <_vfiprintf_r+0x116>
 800f8ec:	2353      	movs	r3, #83	; 0x53
 800f8ee:	a904      	add	r1, sp, #16
 800f8f0:	185b      	adds	r3, r3, r1
 800f8f2:	212b      	movs	r1, #43	; 0x2b
 800f8f4:	7019      	strb	r1, [r3, #0]
 800f8f6:	9b03      	ldr	r3, [sp, #12]
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800f8fc:	d016      	beq.n	800f92c <_vfiprintf_r+0x14c>
 800f8fe:	2100      	movs	r1, #0
 800f900:	68eb      	ldr	r3, [r5, #12]
 800f902:	9f03      	ldr	r7, [sp, #12]
 800f904:	783a      	ldrb	r2, [r7, #0]
 800f906:	1c78      	adds	r0, r7, #1
 800f908:	3a30      	subs	r2, #48	; 0x30
 800f90a:	4684      	mov	ip, r0
 800f90c:	2a09      	cmp	r2, #9
 800f90e:	d94f      	bls.n	800f9b0 <_vfiprintf_r+0x1d0>
 800f910:	2900      	cmp	r1, #0
 800f912:	d111      	bne.n	800f938 <_vfiprintf_r+0x158>
 800f914:	e017      	b.n	800f946 <_vfiprintf_r+0x166>
 800f916:	3701      	adds	r7, #1
 800f918:	e7a9      	b.n	800f86e <_vfiprintf_r+0x8e>
 800f91a:	4b49      	ldr	r3, [pc, #292]	; (800fa40 <_vfiprintf_r+0x260>)
 800f91c:	682a      	ldr	r2, [r5, #0]
 800f91e:	1ac0      	subs	r0, r0, r3
 800f920:	2301      	movs	r3, #1
 800f922:	4083      	lsls	r3, r0
 800f924:	4313      	orrs	r3, r2
 800f926:	602b      	str	r3, [r5, #0]
 800f928:	9703      	str	r7, [sp, #12]
 800f92a:	e7cb      	b.n	800f8c4 <_vfiprintf_r+0xe4>
 800f92c:	9b07      	ldr	r3, [sp, #28]
 800f92e:	1d19      	adds	r1, r3, #4
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	9107      	str	r1, [sp, #28]
 800f934:	2b00      	cmp	r3, #0
 800f936:	db01      	blt.n	800f93c <_vfiprintf_r+0x15c>
 800f938:	930b      	str	r3, [sp, #44]	; 0x2c
 800f93a:	e004      	b.n	800f946 <_vfiprintf_r+0x166>
 800f93c:	425b      	negs	r3, r3
 800f93e:	60eb      	str	r3, [r5, #12]
 800f940:	2302      	movs	r3, #2
 800f942:	4313      	orrs	r3, r2
 800f944:	602b      	str	r3, [r5, #0]
 800f946:	783b      	ldrb	r3, [r7, #0]
 800f948:	2b2e      	cmp	r3, #46	; 0x2e
 800f94a:	d10a      	bne.n	800f962 <_vfiprintf_r+0x182>
 800f94c:	787b      	ldrb	r3, [r7, #1]
 800f94e:	2b2a      	cmp	r3, #42	; 0x2a
 800f950:	d137      	bne.n	800f9c2 <_vfiprintf_r+0x1e2>
 800f952:	9b07      	ldr	r3, [sp, #28]
 800f954:	3702      	adds	r7, #2
 800f956:	1d1a      	adds	r2, r3, #4
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	9207      	str	r2, [sp, #28]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	db2d      	blt.n	800f9bc <_vfiprintf_r+0x1dc>
 800f960:	9309      	str	r3, [sp, #36]	; 0x24
 800f962:	2203      	movs	r2, #3
 800f964:	7839      	ldrb	r1, [r7, #0]
 800f966:	4837      	ldr	r0, [pc, #220]	; (800fa44 <_vfiprintf_r+0x264>)
 800f968:	f000 fa2e 	bl	800fdc8 <memchr>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	d007      	beq.n	800f980 <_vfiprintf_r+0x1a0>
 800f970:	4b34      	ldr	r3, [pc, #208]	; (800fa44 <_vfiprintf_r+0x264>)
 800f972:	682a      	ldr	r2, [r5, #0]
 800f974:	1ac0      	subs	r0, r0, r3
 800f976:	2340      	movs	r3, #64	; 0x40
 800f978:	4083      	lsls	r3, r0
 800f97a:	4313      	orrs	r3, r2
 800f97c:	3701      	adds	r7, #1
 800f97e:	602b      	str	r3, [r5, #0]
 800f980:	7839      	ldrb	r1, [r7, #0]
 800f982:	1c7b      	adds	r3, r7, #1
 800f984:	2206      	movs	r2, #6
 800f986:	4830      	ldr	r0, [pc, #192]	; (800fa48 <_vfiprintf_r+0x268>)
 800f988:	9303      	str	r3, [sp, #12]
 800f98a:	7629      	strb	r1, [r5, #24]
 800f98c:	f000 fa1c 	bl	800fdc8 <memchr>
 800f990:	2800      	cmp	r0, #0
 800f992:	d045      	beq.n	800fa20 <_vfiprintf_r+0x240>
 800f994:	4b2d      	ldr	r3, [pc, #180]	; (800fa4c <_vfiprintf_r+0x26c>)
 800f996:	2b00      	cmp	r3, #0
 800f998:	d127      	bne.n	800f9ea <_vfiprintf_r+0x20a>
 800f99a:	2207      	movs	r2, #7
 800f99c:	9b07      	ldr	r3, [sp, #28]
 800f99e:	3307      	adds	r3, #7
 800f9a0:	4393      	bics	r3, r2
 800f9a2:	3308      	adds	r3, #8
 800f9a4:	9307      	str	r3, [sp, #28]
 800f9a6:	696b      	ldr	r3, [r5, #20]
 800f9a8:	9a04      	ldr	r2, [sp, #16]
 800f9aa:	189b      	adds	r3, r3, r2
 800f9ac:	616b      	str	r3, [r5, #20]
 800f9ae:	e75d      	b.n	800f86c <_vfiprintf_r+0x8c>
 800f9b0:	210a      	movs	r1, #10
 800f9b2:	434b      	muls	r3, r1
 800f9b4:	4667      	mov	r7, ip
 800f9b6:	189b      	adds	r3, r3, r2
 800f9b8:	3909      	subs	r1, #9
 800f9ba:	e7a3      	b.n	800f904 <_vfiprintf_r+0x124>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	425b      	negs	r3, r3
 800f9c0:	e7ce      	b.n	800f960 <_vfiprintf_r+0x180>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	001a      	movs	r2, r3
 800f9c6:	3701      	adds	r7, #1
 800f9c8:	606b      	str	r3, [r5, #4]
 800f9ca:	7839      	ldrb	r1, [r7, #0]
 800f9cc:	1c78      	adds	r0, r7, #1
 800f9ce:	3930      	subs	r1, #48	; 0x30
 800f9d0:	4684      	mov	ip, r0
 800f9d2:	2909      	cmp	r1, #9
 800f9d4:	d903      	bls.n	800f9de <_vfiprintf_r+0x1fe>
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d0c3      	beq.n	800f962 <_vfiprintf_r+0x182>
 800f9da:	9209      	str	r2, [sp, #36]	; 0x24
 800f9dc:	e7c1      	b.n	800f962 <_vfiprintf_r+0x182>
 800f9de:	230a      	movs	r3, #10
 800f9e0:	435a      	muls	r2, r3
 800f9e2:	4667      	mov	r7, ip
 800f9e4:	1852      	adds	r2, r2, r1
 800f9e6:	3b09      	subs	r3, #9
 800f9e8:	e7ef      	b.n	800f9ca <_vfiprintf_r+0x1ea>
 800f9ea:	ab07      	add	r3, sp, #28
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	0022      	movs	r2, r4
 800f9f0:	0029      	movs	r1, r5
 800f9f2:	0030      	movs	r0, r6
 800f9f4:	4b16      	ldr	r3, [pc, #88]	; (800fa50 <_vfiprintf_r+0x270>)
 800f9f6:	e000      	b.n	800f9fa <_vfiprintf_r+0x21a>
 800f9f8:	bf00      	nop
 800f9fa:	9004      	str	r0, [sp, #16]
 800f9fc:	9b04      	ldr	r3, [sp, #16]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	d1d1      	bne.n	800f9a6 <_vfiprintf_r+0x1c6>
 800fa02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa04:	07db      	lsls	r3, r3, #31
 800fa06:	d405      	bmi.n	800fa14 <_vfiprintf_r+0x234>
 800fa08:	89a3      	ldrh	r3, [r4, #12]
 800fa0a:	059b      	lsls	r3, r3, #22
 800fa0c:	d402      	bmi.n	800fa14 <_vfiprintf_r+0x234>
 800fa0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa10:	f7ff fb48 	bl	800f0a4 <__retarget_lock_release_recursive>
 800fa14:	89a3      	ldrh	r3, [r4, #12]
 800fa16:	065b      	lsls	r3, r3, #25
 800fa18:	d500      	bpl.n	800fa1c <_vfiprintf_r+0x23c>
 800fa1a:	e70a      	b.n	800f832 <_vfiprintf_r+0x52>
 800fa1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fa1e:	e70a      	b.n	800f836 <_vfiprintf_r+0x56>
 800fa20:	ab07      	add	r3, sp, #28
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	0022      	movs	r2, r4
 800fa26:	0029      	movs	r1, r5
 800fa28:	0030      	movs	r0, r6
 800fa2a:	4b09      	ldr	r3, [pc, #36]	; (800fa50 <_vfiprintf_r+0x270>)
 800fa2c:	f000 f882 	bl	800fb34 <_printf_i>
 800fa30:	e7e3      	b.n	800f9fa <_vfiprintf_r+0x21a>
 800fa32:	46c0      	nop			; (mov r8, r8)
 800fa34:	08010750 	.word	0x08010750
 800fa38:	08010770 	.word	0x08010770
 800fa3c:	08010730 	.word	0x08010730
 800fa40:	08010794 	.word	0x08010794
 800fa44:	0801079a 	.word	0x0801079a
 800fa48:	0801079e 	.word	0x0801079e
 800fa4c:	00000000 	.word	0x00000000
 800fa50:	0800f7bb 	.word	0x0800f7bb

0800fa54 <_printf_common>:
 800fa54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa56:	0015      	movs	r5, r2
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	688a      	ldr	r2, [r1, #8]
 800fa5c:	690b      	ldr	r3, [r1, #16]
 800fa5e:	000c      	movs	r4, r1
 800fa60:	9000      	str	r0, [sp, #0]
 800fa62:	4293      	cmp	r3, r2
 800fa64:	da00      	bge.n	800fa68 <_printf_common+0x14>
 800fa66:	0013      	movs	r3, r2
 800fa68:	0022      	movs	r2, r4
 800fa6a:	602b      	str	r3, [r5, #0]
 800fa6c:	3243      	adds	r2, #67	; 0x43
 800fa6e:	7812      	ldrb	r2, [r2, #0]
 800fa70:	2a00      	cmp	r2, #0
 800fa72:	d001      	beq.n	800fa78 <_printf_common+0x24>
 800fa74:	3301      	adds	r3, #1
 800fa76:	602b      	str	r3, [r5, #0]
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	069b      	lsls	r3, r3, #26
 800fa7c:	d502      	bpl.n	800fa84 <_printf_common+0x30>
 800fa7e:	682b      	ldr	r3, [r5, #0]
 800fa80:	3302      	adds	r3, #2
 800fa82:	602b      	str	r3, [r5, #0]
 800fa84:	6822      	ldr	r2, [r4, #0]
 800fa86:	2306      	movs	r3, #6
 800fa88:	0017      	movs	r7, r2
 800fa8a:	401f      	ands	r7, r3
 800fa8c:	421a      	tst	r2, r3
 800fa8e:	d027      	beq.n	800fae0 <_printf_common+0x8c>
 800fa90:	0023      	movs	r3, r4
 800fa92:	3343      	adds	r3, #67	; 0x43
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	1e5a      	subs	r2, r3, #1
 800fa98:	4193      	sbcs	r3, r2
 800fa9a:	6822      	ldr	r2, [r4, #0]
 800fa9c:	0692      	lsls	r2, r2, #26
 800fa9e:	d430      	bmi.n	800fb02 <_printf_common+0xae>
 800faa0:	0022      	movs	r2, r4
 800faa2:	9901      	ldr	r1, [sp, #4]
 800faa4:	9800      	ldr	r0, [sp, #0]
 800faa6:	9e08      	ldr	r6, [sp, #32]
 800faa8:	3243      	adds	r2, #67	; 0x43
 800faaa:	47b0      	blx	r6
 800faac:	1c43      	adds	r3, r0, #1
 800faae:	d025      	beq.n	800fafc <_printf_common+0xa8>
 800fab0:	2306      	movs	r3, #6
 800fab2:	6820      	ldr	r0, [r4, #0]
 800fab4:	682a      	ldr	r2, [r5, #0]
 800fab6:	68e1      	ldr	r1, [r4, #12]
 800fab8:	2500      	movs	r5, #0
 800faba:	4003      	ands	r3, r0
 800fabc:	2b04      	cmp	r3, #4
 800fabe:	d103      	bne.n	800fac8 <_printf_common+0x74>
 800fac0:	1a8d      	subs	r5, r1, r2
 800fac2:	43eb      	mvns	r3, r5
 800fac4:	17db      	asrs	r3, r3, #31
 800fac6:	401d      	ands	r5, r3
 800fac8:	68a3      	ldr	r3, [r4, #8]
 800faca:	6922      	ldr	r2, [r4, #16]
 800facc:	4293      	cmp	r3, r2
 800face:	dd01      	ble.n	800fad4 <_printf_common+0x80>
 800fad0:	1a9b      	subs	r3, r3, r2
 800fad2:	18ed      	adds	r5, r5, r3
 800fad4:	2700      	movs	r7, #0
 800fad6:	42bd      	cmp	r5, r7
 800fad8:	d120      	bne.n	800fb1c <_printf_common+0xc8>
 800fada:	2000      	movs	r0, #0
 800fadc:	e010      	b.n	800fb00 <_printf_common+0xac>
 800fade:	3701      	adds	r7, #1
 800fae0:	68e3      	ldr	r3, [r4, #12]
 800fae2:	682a      	ldr	r2, [r5, #0]
 800fae4:	1a9b      	subs	r3, r3, r2
 800fae6:	42bb      	cmp	r3, r7
 800fae8:	ddd2      	ble.n	800fa90 <_printf_common+0x3c>
 800faea:	0022      	movs	r2, r4
 800faec:	2301      	movs	r3, #1
 800faee:	9901      	ldr	r1, [sp, #4]
 800faf0:	9800      	ldr	r0, [sp, #0]
 800faf2:	9e08      	ldr	r6, [sp, #32]
 800faf4:	3219      	adds	r2, #25
 800faf6:	47b0      	blx	r6
 800faf8:	1c43      	adds	r3, r0, #1
 800fafa:	d1f0      	bne.n	800fade <_printf_common+0x8a>
 800fafc:	2001      	movs	r0, #1
 800fafe:	4240      	negs	r0, r0
 800fb00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb02:	2030      	movs	r0, #48	; 0x30
 800fb04:	18e1      	adds	r1, r4, r3
 800fb06:	3143      	adds	r1, #67	; 0x43
 800fb08:	7008      	strb	r0, [r1, #0]
 800fb0a:	0021      	movs	r1, r4
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	3145      	adds	r1, #69	; 0x45
 800fb10:	7809      	ldrb	r1, [r1, #0]
 800fb12:	18a2      	adds	r2, r4, r2
 800fb14:	3243      	adds	r2, #67	; 0x43
 800fb16:	3302      	adds	r3, #2
 800fb18:	7011      	strb	r1, [r2, #0]
 800fb1a:	e7c1      	b.n	800faa0 <_printf_common+0x4c>
 800fb1c:	0022      	movs	r2, r4
 800fb1e:	2301      	movs	r3, #1
 800fb20:	9901      	ldr	r1, [sp, #4]
 800fb22:	9800      	ldr	r0, [sp, #0]
 800fb24:	9e08      	ldr	r6, [sp, #32]
 800fb26:	321a      	adds	r2, #26
 800fb28:	47b0      	blx	r6
 800fb2a:	1c43      	adds	r3, r0, #1
 800fb2c:	d0e6      	beq.n	800fafc <_printf_common+0xa8>
 800fb2e:	3701      	adds	r7, #1
 800fb30:	e7d1      	b.n	800fad6 <_printf_common+0x82>
	...

0800fb34 <_printf_i>:
 800fb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb36:	b08b      	sub	sp, #44	; 0x2c
 800fb38:	9206      	str	r2, [sp, #24]
 800fb3a:	000a      	movs	r2, r1
 800fb3c:	3243      	adds	r2, #67	; 0x43
 800fb3e:	9307      	str	r3, [sp, #28]
 800fb40:	9005      	str	r0, [sp, #20]
 800fb42:	9204      	str	r2, [sp, #16]
 800fb44:	7e0a      	ldrb	r2, [r1, #24]
 800fb46:	000c      	movs	r4, r1
 800fb48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb4a:	2a78      	cmp	r2, #120	; 0x78
 800fb4c:	d806      	bhi.n	800fb5c <_printf_i+0x28>
 800fb4e:	2a62      	cmp	r2, #98	; 0x62
 800fb50:	d808      	bhi.n	800fb64 <_printf_i+0x30>
 800fb52:	2a00      	cmp	r2, #0
 800fb54:	d100      	bne.n	800fb58 <_printf_i+0x24>
 800fb56:	e0c0      	b.n	800fcda <_printf_i+0x1a6>
 800fb58:	2a58      	cmp	r2, #88	; 0x58
 800fb5a:	d052      	beq.n	800fc02 <_printf_i+0xce>
 800fb5c:	0026      	movs	r6, r4
 800fb5e:	3642      	adds	r6, #66	; 0x42
 800fb60:	7032      	strb	r2, [r6, #0]
 800fb62:	e022      	b.n	800fbaa <_printf_i+0x76>
 800fb64:	0010      	movs	r0, r2
 800fb66:	3863      	subs	r0, #99	; 0x63
 800fb68:	2815      	cmp	r0, #21
 800fb6a:	d8f7      	bhi.n	800fb5c <_printf_i+0x28>
 800fb6c:	f7f0 fad4 	bl	8000118 <__gnu_thumb1_case_shi>
 800fb70:	001f0016 	.word	0x001f0016
 800fb74:	fff6fff6 	.word	0xfff6fff6
 800fb78:	fff6fff6 	.word	0xfff6fff6
 800fb7c:	fff6001f 	.word	0xfff6001f
 800fb80:	fff6fff6 	.word	0xfff6fff6
 800fb84:	00a8fff6 	.word	0x00a8fff6
 800fb88:	009a0036 	.word	0x009a0036
 800fb8c:	fff6fff6 	.word	0xfff6fff6
 800fb90:	fff600b9 	.word	0xfff600b9
 800fb94:	fff60036 	.word	0xfff60036
 800fb98:	009efff6 	.word	0x009efff6
 800fb9c:	0026      	movs	r6, r4
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	3642      	adds	r6, #66	; 0x42
 800fba2:	1d11      	adds	r1, r2, #4
 800fba4:	6019      	str	r1, [r3, #0]
 800fba6:	6813      	ldr	r3, [r2, #0]
 800fba8:	7033      	strb	r3, [r6, #0]
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e0a7      	b.n	800fcfe <_printf_i+0x1ca>
 800fbae:	6808      	ldr	r0, [r1, #0]
 800fbb0:	6819      	ldr	r1, [r3, #0]
 800fbb2:	1d0a      	adds	r2, r1, #4
 800fbb4:	0605      	lsls	r5, r0, #24
 800fbb6:	d50b      	bpl.n	800fbd0 <_printf_i+0x9c>
 800fbb8:	680d      	ldr	r5, [r1, #0]
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	2d00      	cmp	r5, #0
 800fbbe:	da03      	bge.n	800fbc8 <_printf_i+0x94>
 800fbc0:	232d      	movs	r3, #45	; 0x2d
 800fbc2:	9a04      	ldr	r2, [sp, #16]
 800fbc4:	426d      	negs	r5, r5
 800fbc6:	7013      	strb	r3, [r2, #0]
 800fbc8:	4b61      	ldr	r3, [pc, #388]	; (800fd50 <_printf_i+0x21c>)
 800fbca:	270a      	movs	r7, #10
 800fbcc:	9303      	str	r3, [sp, #12]
 800fbce:	e032      	b.n	800fc36 <_printf_i+0x102>
 800fbd0:	680d      	ldr	r5, [r1, #0]
 800fbd2:	601a      	str	r2, [r3, #0]
 800fbd4:	0641      	lsls	r1, r0, #25
 800fbd6:	d5f1      	bpl.n	800fbbc <_printf_i+0x88>
 800fbd8:	b22d      	sxth	r5, r5
 800fbda:	e7ef      	b.n	800fbbc <_printf_i+0x88>
 800fbdc:	680d      	ldr	r5, [r1, #0]
 800fbde:	6819      	ldr	r1, [r3, #0]
 800fbe0:	1d08      	adds	r0, r1, #4
 800fbe2:	6018      	str	r0, [r3, #0]
 800fbe4:	062e      	lsls	r6, r5, #24
 800fbe6:	d501      	bpl.n	800fbec <_printf_i+0xb8>
 800fbe8:	680d      	ldr	r5, [r1, #0]
 800fbea:	e003      	b.n	800fbf4 <_printf_i+0xc0>
 800fbec:	066d      	lsls	r5, r5, #25
 800fbee:	d5fb      	bpl.n	800fbe8 <_printf_i+0xb4>
 800fbf0:	680d      	ldr	r5, [r1, #0]
 800fbf2:	b2ad      	uxth	r5, r5
 800fbf4:	4b56      	ldr	r3, [pc, #344]	; (800fd50 <_printf_i+0x21c>)
 800fbf6:	270a      	movs	r7, #10
 800fbf8:	9303      	str	r3, [sp, #12]
 800fbfa:	2a6f      	cmp	r2, #111	; 0x6f
 800fbfc:	d117      	bne.n	800fc2e <_printf_i+0xfa>
 800fbfe:	2708      	movs	r7, #8
 800fc00:	e015      	b.n	800fc2e <_printf_i+0xfa>
 800fc02:	3145      	adds	r1, #69	; 0x45
 800fc04:	700a      	strb	r2, [r1, #0]
 800fc06:	4a52      	ldr	r2, [pc, #328]	; (800fd50 <_printf_i+0x21c>)
 800fc08:	9203      	str	r2, [sp, #12]
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	6821      	ldr	r1, [r4, #0]
 800fc0e:	ca20      	ldmia	r2!, {r5}
 800fc10:	601a      	str	r2, [r3, #0]
 800fc12:	0608      	lsls	r0, r1, #24
 800fc14:	d550      	bpl.n	800fcb8 <_printf_i+0x184>
 800fc16:	07cb      	lsls	r3, r1, #31
 800fc18:	d502      	bpl.n	800fc20 <_printf_i+0xec>
 800fc1a:	2320      	movs	r3, #32
 800fc1c:	4319      	orrs	r1, r3
 800fc1e:	6021      	str	r1, [r4, #0]
 800fc20:	2710      	movs	r7, #16
 800fc22:	2d00      	cmp	r5, #0
 800fc24:	d103      	bne.n	800fc2e <_printf_i+0xfa>
 800fc26:	2320      	movs	r3, #32
 800fc28:	6822      	ldr	r2, [r4, #0]
 800fc2a:	439a      	bics	r2, r3
 800fc2c:	6022      	str	r2, [r4, #0]
 800fc2e:	0023      	movs	r3, r4
 800fc30:	2200      	movs	r2, #0
 800fc32:	3343      	adds	r3, #67	; 0x43
 800fc34:	701a      	strb	r2, [r3, #0]
 800fc36:	6863      	ldr	r3, [r4, #4]
 800fc38:	60a3      	str	r3, [r4, #8]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	db03      	blt.n	800fc46 <_printf_i+0x112>
 800fc3e:	2204      	movs	r2, #4
 800fc40:	6821      	ldr	r1, [r4, #0]
 800fc42:	4391      	bics	r1, r2
 800fc44:	6021      	str	r1, [r4, #0]
 800fc46:	2d00      	cmp	r5, #0
 800fc48:	d102      	bne.n	800fc50 <_printf_i+0x11c>
 800fc4a:	9e04      	ldr	r6, [sp, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00c      	beq.n	800fc6a <_printf_i+0x136>
 800fc50:	9e04      	ldr	r6, [sp, #16]
 800fc52:	0028      	movs	r0, r5
 800fc54:	0039      	movs	r1, r7
 800fc56:	f7f0 faef 	bl	8000238 <__aeabi_uidivmod>
 800fc5a:	9b03      	ldr	r3, [sp, #12]
 800fc5c:	3e01      	subs	r6, #1
 800fc5e:	5c5b      	ldrb	r3, [r3, r1]
 800fc60:	7033      	strb	r3, [r6, #0]
 800fc62:	002b      	movs	r3, r5
 800fc64:	0005      	movs	r5, r0
 800fc66:	429f      	cmp	r7, r3
 800fc68:	d9f3      	bls.n	800fc52 <_printf_i+0x11e>
 800fc6a:	2f08      	cmp	r7, #8
 800fc6c:	d109      	bne.n	800fc82 <_printf_i+0x14e>
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	07db      	lsls	r3, r3, #31
 800fc72:	d506      	bpl.n	800fc82 <_printf_i+0x14e>
 800fc74:	6863      	ldr	r3, [r4, #4]
 800fc76:	6922      	ldr	r2, [r4, #16]
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	dc02      	bgt.n	800fc82 <_printf_i+0x14e>
 800fc7c:	2330      	movs	r3, #48	; 0x30
 800fc7e:	3e01      	subs	r6, #1
 800fc80:	7033      	strb	r3, [r6, #0]
 800fc82:	9b04      	ldr	r3, [sp, #16]
 800fc84:	1b9b      	subs	r3, r3, r6
 800fc86:	6123      	str	r3, [r4, #16]
 800fc88:	9b07      	ldr	r3, [sp, #28]
 800fc8a:	0021      	movs	r1, r4
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	9805      	ldr	r0, [sp, #20]
 800fc90:	9b06      	ldr	r3, [sp, #24]
 800fc92:	aa09      	add	r2, sp, #36	; 0x24
 800fc94:	f7ff fede 	bl	800fa54 <_printf_common>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d135      	bne.n	800fd08 <_printf_i+0x1d4>
 800fc9c:	2001      	movs	r0, #1
 800fc9e:	4240      	negs	r0, r0
 800fca0:	b00b      	add	sp, #44	; 0x2c
 800fca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca4:	2220      	movs	r2, #32
 800fca6:	6809      	ldr	r1, [r1, #0]
 800fca8:	430a      	orrs	r2, r1
 800fcaa:	6022      	str	r2, [r4, #0]
 800fcac:	0022      	movs	r2, r4
 800fcae:	2178      	movs	r1, #120	; 0x78
 800fcb0:	3245      	adds	r2, #69	; 0x45
 800fcb2:	7011      	strb	r1, [r2, #0]
 800fcb4:	4a27      	ldr	r2, [pc, #156]	; (800fd54 <_printf_i+0x220>)
 800fcb6:	e7a7      	b.n	800fc08 <_printf_i+0xd4>
 800fcb8:	0648      	lsls	r0, r1, #25
 800fcba:	d5ac      	bpl.n	800fc16 <_printf_i+0xe2>
 800fcbc:	b2ad      	uxth	r5, r5
 800fcbe:	e7aa      	b.n	800fc16 <_printf_i+0xe2>
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	680d      	ldr	r5, [r1, #0]
 800fcc4:	1d10      	adds	r0, r2, #4
 800fcc6:	6949      	ldr	r1, [r1, #20]
 800fcc8:	6018      	str	r0, [r3, #0]
 800fcca:	6813      	ldr	r3, [r2, #0]
 800fccc:	062e      	lsls	r6, r5, #24
 800fcce:	d501      	bpl.n	800fcd4 <_printf_i+0x1a0>
 800fcd0:	6019      	str	r1, [r3, #0]
 800fcd2:	e002      	b.n	800fcda <_printf_i+0x1a6>
 800fcd4:	066d      	lsls	r5, r5, #25
 800fcd6:	d5fb      	bpl.n	800fcd0 <_printf_i+0x19c>
 800fcd8:	8019      	strh	r1, [r3, #0]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	9e04      	ldr	r6, [sp, #16]
 800fcde:	6123      	str	r3, [r4, #16]
 800fce0:	e7d2      	b.n	800fc88 <_printf_i+0x154>
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	1d11      	adds	r1, r2, #4
 800fce6:	6019      	str	r1, [r3, #0]
 800fce8:	6816      	ldr	r6, [r2, #0]
 800fcea:	2100      	movs	r1, #0
 800fcec:	0030      	movs	r0, r6
 800fcee:	6862      	ldr	r2, [r4, #4]
 800fcf0:	f000 f86a 	bl	800fdc8 <memchr>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d001      	beq.n	800fcfc <_printf_i+0x1c8>
 800fcf8:	1b80      	subs	r0, r0, r6
 800fcfa:	6060      	str	r0, [r4, #4]
 800fcfc:	6863      	ldr	r3, [r4, #4]
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	2300      	movs	r3, #0
 800fd02:	9a04      	ldr	r2, [sp, #16]
 800fd04:	7013      	strb	r3, [r2, #0]
 800fd06:	e7bf      	b.n	800fc88 <_printf_i+0x154>
 800fd08:	6923      	ldr	r3, [r4, #16]
 800fd0a:	0032      	movs	r2, r6
 800fd0c:	9906      	ldr	r1, [sp, #24]
 800fd0e:	9805      	ldr	r0, [sp, #20]
 800fd10:	9d07      	ldr	r5, [sp, #28]
 800fd12:	47a8      	blx	r5
 800fd14:	1c43      	adds	r3, r0, #1
 800fd16:	d0c1      	beq.n	800fc9c <_printf_i+0x168>
 800fd18:	6823      	ldr	r3, [r4, #0]
 800fd1a:	079b      	lsls	r3, r3, #30
 800fd1c:	d415      	bmi.n	800fd4a <_printf_i+0x216>
 800fd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd20:	68e0      	ldr	r0, [r4, #12]
 800fd22:	4298      	cmp	r0, r3
 800fd24:	dabc      	bge.n	800fca0 <_printf_i+0x16c>
 800fd26:	0018      	movs	r0, r3
 800fd28:	e7ba      	b.n	800fca0 <_printf_i+0x16c>
 800fd2a:	0022      	movs	r2, r4
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	9906      	ldr	r1, [sp, #24]
 800fd30:	9805      	ldr	r0, [sp, #20]
 800fd32:	9e07      	ldr	r6, [sp, #28]
 800fd34:	3219      	adds	r2, #25
 800fd36:	47b0      	blx	r6
 800fd38:	1c43      	adds	r3, r0, #1
 800fd3a:	d0af      	beq.n	800fc9c <_printf_i+0x168>
 800fd3c:	3501      	adds	r5, #1
 800fd3e:	68e3      	ldr	r3, [r4, #12]
 800fd40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd42:	1a9b      	subs	r3, r3, r2
 800fd44:	42ab      	cmp	r3, r5
 800fd46:	dcf0      	bgt.n	800fd2a <_printf_i+0x1f6>
 800fd48:	e7e9      	b.n	800fd1e <_printf_i+0x1ea>
 800fd4a:	2500      	movs	r5, #0
 800fd4c:	e7f7      	b.n	800fd3e <_printf_i+0x20a>
 800fd4e:	46c0      	nop			; (mov r8, r8)
 800fd50:	080107a5 	.word	0x080107a5
 800fd54:	080107b6 	.word	0x080107b6

0800fd58 <_read_r>:
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	0004      	movs	r4, r0
 800fd5c:	0008      	movs	r0, r1
 800fd5e:	0011      	movs	r1, r2
 800fd60:	001a      	movs	r2, r3
 800fd62:	2300      	movs	r3, #0
 800fd64:	4d05      	ldr	r5, [pc, #20]	; (800fd7c <_read_r+0x24>)
 800fd66:	602b      	str	r3, [r5, #0]
 800fd68:	f7f9 fece 	bl	8009b08 <_read>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	d103      	bne.n	800fd78 <_read_r+0x20>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d000      	beq.n	800fd78 <_read_r+0x20>
 800fd76:	6023      	str	r3, [r4, #0]
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
 800fd7a:	46c0      	nop			; (mov r8, r8)
 800fd7c:	20005624 	.word	0x20005624

0800fd80 <_fstat_r>:
 800fd80:	2300      	movs	r3, #0
 800fd82:	b570      	push	{r4, r5, r6, lr}
 800fd84:	4d06      	ldr	r5, [pc, #24]	; (800fda0 <_fstat_r+0x20>)
 800fd86:	0004      	movs	r4, r0
 800fd88:	0008      	movs	r0, r1
 800fd8a:	0011      	movs	r1, r2
 800fd8c:	602b      	str	r3, [r5, #0]
 800fd8e:	f7f9 fefe 	bl	8009b8e <_fstat>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	d103      	bne.n	800fd9e <_fstat_r+0x1e>
 800fd96:	682b      	ldr	r3, [r5, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d000      	beq.n	800fd9e <_fstat_r+0x1e>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd70      	pop	{r4, r5, r6, pc}
 800fda0:	20005624 	.word	0x20005624

0800fda4 <_isatty_r>:
 800fda4:	2300      	movs	r3, #0
 800fda6:	b570      	push	{r4, r5, r6, lr}
 800fda8:	4d06      	ldr	r5, [pc, #24]	; (800fdc4 <_isatty_r+0x20>)
 800fdaa:	0004      	movs	r4, r0
 800fdac:	0008      	movs	r0, r1
 800fdae:	602b      	str	r3, [r5, #0]
 800fdb0:	f7f9 fefb 	bl	8009baa <_isatty>
 800fdb4:	1c43      	adds	r3, r0, #1
 800fdb6:	d103      	bne.n	800fdc0 <_isatty_r+0x1c>
 800fdb8:	682b      	ldr	r3, [r5, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d000      	beq.n	800fdc0 <_isatty_r+0x1c>
 800fdbe:	6023      	str	r3, [r4, #0]
 800fdc0:	bd70      	pop	{r4, r5, r6, pc}
 800fdc2:	46c0      	nop			; (mov r8, r8)
 800fdc4:	20005624 	.word	0x20005624

0800fdc8 <memchr>:
 800fdc8:	b2c9      	uxtb	r1, r1
 800fdca:	1882      	adds	r2, r0, r2
 800fdcc:	4290      	cmp	r0, r2
 800fdce:	d101      	bne.n	800fdd4 <memchr+0xc>
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	4770      	bx	lr
 800fdd4:	7803      	ldrb	r3, [r0, #0]
 800fdd6:	428b      	cmp	r3, r1
 800fdd8:	d0fb      	beq.n	800fdd2 <memchr+0xa>
 800fdda:	3001      	adds	r0, #1
 800fddc:	e7f6      	b.n	800fdcc <memchr+0x4>
	...

0800fde0 <_init>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde6:	bc08      	pop	{r3}
 800fde8:	469e      	mov	lr, r3
 800fdea:	4770      	bx	lr

0800fdec <_fini>:
 800fdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdee:	46c0      	nop			; (mov r8, r8)
 800fdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdf2:	bc08      	pop	{r3}
 800fdf4:	469e      	mov	lr, r3
 800fdf6:	4770      	bx	lr
