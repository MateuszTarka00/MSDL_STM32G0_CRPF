
MSDL_STM32G0_CRPF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c0c  08004c0c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c0c  08004c0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000010  08004c24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a30  08004c24  00021a30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019841  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003421  00000000  00000000  00039879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db1c  00000000  00000000  0003f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017112  00000000  00000000  0005d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c25ee  00000000  00000000  000742f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001368e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e38  00000000  00000000  00136938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004af0 	.word	0x08004af0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004af0 	.word	0x08004af0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <MX_FREERTOS_Init+0x30>)
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <MX_FREERTOS_Init+0x34>)
 8000228:	2100      	movs	r1, #0
 800022a:	0018      	movs	r0, r3
 800022c:	f002 fa34 	bl	8002698 <osThreadNew>
 8000230:	0002      	movs	r2, r0
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_FREERTOS_Init+0x38>)
 8000234:	601a      	str	r2, [r3, #0]

  /* creation of CanOpenMenagerT */
  CanOpenMenagerTHandle = osThreadNew(CanOpenMenager, NULL, &CanOpenMenagerT_attributes);
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <MX_FREERTOS_Init+0x3c>)
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_FREERTOS_Init+0x40>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f002 fa2b 	bl	8002698 <osThreadNew>
 8000242:	0002      	movs	r2, r0
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_FREERTOS_Init+0x44>)
 8000246:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	08004b3c 	.word	0x08004b3c
 8000254:	08000269 	.word	0x08000269
 8000258:	20001934 	.word	0x20001934
 800025c:	08004b60 	.word	0x08004b60
 8000260:	08000279 	.word	0x08000279
 8000264:	20001938 	.word	0x20001938

08000268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f002 faa7 	bl	80027c4 <osDelay>
 8000276:	e7fb      	b.n	8000270 <StartDefaultTask+0x8>

08000278 <CanOpenMenager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanOpenMenager */
void CanOpenMenager(void *argument)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanOpenMenager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f002 fa9f 	bl	80027c4 <osDelay>
 8000286:	e7fb      	b.n	8000280 <CanOpenMenager+0x8>

08000288 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <MX_FDCAN2_Init+0x80>)
 800028e:	4a1f      	ldr	r2, [pc, #124]	; (800030c <MX_FDCAN2_Init+0x84>)
 8000290:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_FDCAN2_Init+0x80>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_FDCAN2_Init+0x80>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002be:	220d      	movs	r2, #13
 80002c0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002dc:	2201      	movs	r2, #1
 80002de:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fb29 	bl	800094c <HAL_FDCAN_Init>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 80002fe:	f000 f949 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000193c 	.word	0x2000193c
 800030c:	40006800 	.word	0x40006800

08000310 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b08b      	sub	sp, #44	; 0x2c
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	2414      	movs	r4, #20
 800031a:	193b      	adds	r3, r7, r4
 800031c:	0018      	movs	r0, r3
 800031e:	2314      	movs	r3, #20
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 fbdb 	bl	8004ade <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <HAL_FDCAN_MspInit+0x8c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d12f      	bne.n	8000392 <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000338:	2180      	movs	r1, #128	; 0x80
 800033a:	0149      	lsls	r1, r1, #5
 800033c:	430a      	orrs	r2, r1
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000344:	2380      	movs	r3, #128	; 0x80
 8000346:	015b      	lsls	r3, r3, #5
 8000348:	4013      	ands	r3, r2
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000354:	2104      	movs	r1, #4
 8000356:	430a      	orrs	r2, r1
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 800035c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035e:	2204      	movs	r2, #4
 8000360:	4013      	ands	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PC2     ------> FDCAN2_RX
    PC3     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000366:	0021      	movs	r1, r4
 8000368:	187b      	adds	r3, r7, r1
 800036a:	220c      	movs	r2, #12
 800036c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2202      	movs	r2, #2
 8000372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2203      	movs	r2, #3
 8000384:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	187b      	adds	r3, r7, r1
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <HAL_FDCAN_MspInit+0x94>)
 800038a:	0019      	movs	r1, r3
 800038c:	0010      	movs	r0, r2
 800038e:	f000 fcaf 	bl	8000cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b00b      	add	sp, #44	; 0x2c
 8000398:	bd90      	pop	{r4, r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	40006800 	.word	0x40006800
 80003a0:	40021000 	.word	0x40021000
 80003a4:	50000800 	.word	0x50000800

080003a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b08b      	sub	sp, #44	; 0x2c
 80003ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	2414      	movs	r4, #20
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2314      	movs	r3, #20
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f004 fb90 	bl	8004ade <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b26      	ldr	r3, [pc, #152]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003c4:	2120      	movs	r1, #32
 80003c6:	430a      	orrs	r2, r1
 80003c8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ca:	4b23      	ldr	r3, [pc, #140]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ce:	2220      	movs	r2, #32
 80003d0:	4013      	ands	r3, r2
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003dc:	2104      	movs	r1, #4
 80003de:	430a      	orrs	r2, r1
 80003e0:	635a      	str	r2, [r3, #52]	; 0x34
 80003e2:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e6:	2204      	movs	r2, #4
 80003e8:	4013      	ands	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	430a      	orrs	r2, r1
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003fe:	2201      	movs	r2, #1
 8000400:	4013      	ands	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_GPIO_Init+0xb0>)
 8000408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_GPIO_Init+0xb0>)
 800040c:	2110      	movs	r1, #16
 800040e:	430a      	orrs	r2, r1
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_GPIO_Init+0xb0>)
 8000414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000416:	2210      	movs	r2, #16
 8000418:	4013      	ands	r3, r2
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAN_OK_Pin|CAN_FAULT_Pin, GPIO_PIN_RESET);
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_GPIO_Init+0xb4>)
 8000420:	2200      	movs	r2, #0
 8000422:	210c      	movs	r1, #12
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fdcf 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = CAN_OK_Pin|CAN_FAULT_Pin;
 800042a:	0021      	movs	r1, r4
 800042c:	187b      	adds	r3, r7, r1
 800042e:	220c      	movs	r2, #12
 8000430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2201      	movs	r2, #1
 8000436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000444:	187b      	adds	r3, r7, r1
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <MX_GPIO_Init+0xb4>)
 8000448:	0019      	movs	r1, r3
 800044a:	0010      	movs	r0, r2
 800044c:	f000 fc50 	bl	8000cf0 <HAL_GPIO_Init>

}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b00b      	add	sp, #44	; 0x2c
 8000456:	bd90      	pop	{r4, r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	50001000 	.word	0x50001000

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000464:	f000 f972 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000468:	f000 f80b 	bl	8000482 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046c:	f7ff ff9c 	bl	80003a8 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000470:	f7ff ff0a 	bl	8000288 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000474:	f002 f8c8 	bl	8002608 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000478:	f7ff fed2 	bl	8000220 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800047c:	f002 f8e6 	bl	800264c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000480:	e7fe      	b.n	8000480 <main+0x20>

08000482 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000482:	b590      	push	{r4, r7, lr}
 8000484:	b0a7      	sub	sp, #156	; 0x9c
 8000486:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000488:	245c      	movs	r4, #92	; 0x5c
 800048a:	193b      	adds	r3, r7, r4
 800048c:	0018      	movs	r0, r3
 800048e:	233c      	movs	r3, #60	; 0x3c
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f004 fb23 	bl	8004ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	234c      	movs	r3, #76	; 0x4c
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	0018      	movs	r0, r3
 800049e:	2310      	movs	r3, #16
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f004 fb1b 	bl	8004ade <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a8:	003b      	movs	r3, r7
 80004aa:	0018      	movs	r0, r3
 80004ac:	234c      	movs	r3, #76	; 0x4c
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f004 fb14 	bl	8004ade <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fda2 	bl	8001004 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2202      	movs	r2, #2
 80004c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0052      	lsls	r2, r2, #1
 80004cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2240      	movs	r2, #64	; 0x40
 80004da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2202      	movs	r2, #2
 80004e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2202      	movs	r2, #2
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2208      	movs	r2, #8
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	0292      	lsls	r2, r2, #10
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	0492      	lsls	r2, r2, #18
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	0592      	lsls	r2, r2, #22
 800050a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	187b      	adds	r3, r7, r1
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fdc4 	bl	800109c <HAL_RCC_OscConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000518:	f000 f83c 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	214c      	movs	r1, #76	; 0x4c
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2207      	movs	r2, #7
 8000522:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2102      	movs	r1, #2
 800053a:	0018      	movs	r0, r3
 800053c:	f001 f914 	bl	8001768 <HAL_RCC_ClockConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000544:	f000 f826 	bl	8000594 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000548:	003b      	movs	r3, r7
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0492      	lsls	r2, r2, #18
 800054e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000550:	003b      	movs	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	649a      	str	r2, [r3, #72]	; 0x48

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000556:	003b      	movs	r3, r7
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fad9 	bl	8001b10 <HAL_RCCEx_PeriphCLKConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000562:	f000 f817 	bl	8000594 <Error_Handler>
  }
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b027      	add	sp, #156	; 0x9c
 800056c:	bd90      	pop	{r4, r7, pc}
	...

08000570 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d101      	bne.n	8000586 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000582:	f000 f903 	bl	800078c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40012c00 	.word	0x40012c00

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_MspInit+0x5c>)
 80005a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_MspInit+0x5c>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	641a      	str	r2, [r3, #64]	; 0x40
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_MspInit+0x5c>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x5c>)
 80005c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_MspInit+0x5c>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0549      	lsls	r1, r1, #21
 80005c8:	430a      	orrs	r2, r1
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <HAL_MspInit+0x5c>)
 80005ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	055b      	lsls	r3, r3, #21
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80005da:	2302      	movs	r3, #2
 80005dc:	425b      	negs	r3, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	2103      	movs	r1, #3
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 f98c 	bl	8000900 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80005e8:	23c0      	movs	r3, #192	; 0xc0
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 f8e9 	bl	80007c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	0019      	movs	r1, r3
 8000616:	200d      	movs	r0, #13
 8000618:	f000 f972 	bl	8000900 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800061c:	200d      	movs	r0, #13
 800061e:	f000 f984 	bl	800092a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <HAL_InitTick+0xa8>)
 8000624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <HAL_InitTick+0xa8>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0109      	lsls	r1, r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	641a      	str	r2, [r3, #64]	; 0x40
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <HAL_InitTick+0xa8>)
 8000632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800063e:	230c      	movs	r3, #12
 8000640:	18fa      	adds	r2, r7, r3
 8000642:	2310      	movs	r3, #16
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fa37 	bl	8001abc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800064e:	f001 fa1f 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8000652:	0003      	movs	r3, r0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	4914      	ldr	r1, [pc, #80]	; (80006ac <HAL_InitTick+0xac>)
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff fd54 	bl	8000108 <__udivsi3>
 8000660:	0003      	movs	r3, r0
 8000662:	3b01      	subs	r3, #1
 8000664:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0xb0>)
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <HAL_InitTick+0xb4>)
 800066a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_InitTick+0xb0>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <HAL_InitTick+0xb8>)
 8000670:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_InitTick+0xb0>)
 8000674:	6a3a      	ldr	r2, [r7, #32]
 8000676:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_InitTick+0xb0>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_InitTick+0xb0>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_InitTick+0xb0>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fc7e 	bl	8001f88 <HAL_TIM_Base_Init>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d105      	bne.n	800069c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HAL_InitTick+0xb0>)
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fcd8 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000698:	0003      	movs	r3, r0
 800069a:	e000      	b.n	800069e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800069c:	2301      	movs	r3, #1
}
 800069e:	0018      	movs	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b00a      	add	sp, #40	; 0x28
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40021000 	.word	0x40021000
 80006ac:	000f4240 	.word	0x000f4240
 80006b0:	200019a0 	.word	0x200019a0
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	000003e7 	.word	0x000003e7

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fd1c 	bl	800210c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	200019a0 	.word	0x200019a0

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <SystemInit+0x14>)
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0512      	lsls	r2, r2, #20
 80006ea:	609a      	str	r2, [r3, #8]
#endif
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006fc:	f7ff fff0 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000726:	f004 f9ad 	bl	8004a84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800072a:	f7ff fe99 	bl	8000460 <main>

0800072e <LoopForever>:

LoopForever:
  b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   r0, =_estack
 8000730:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800073c:	08004c14 	.word	0x08004c14
  ldr r2, =_sbss
 8000740:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000744:	20001a30 	.word	0x20001a30

08000748 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_COMP_IRQHandler>
	...

0800074c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_Init+0x3c>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_Init+0x3c>)
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	0049      	lsls	r1, r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff4a 	bl	8000600 <HAL_InitTick>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d003      	beq.n	8000778 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e001      	b.n	800077c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff ff12 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b002      	add	sp, #8
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	18d2      	adds	r2, r2, r3
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_IncTick+0x20>)
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008
 80007ac:	200019ec 	.word	0x200019ec

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	200019ec 	.word	0x200019ec

080007c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007d2:	4013      	ands	r3, r2
 80007d4:	0019      	movs	r1, r3
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	430a      	orrs	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40010000 	.word	0x40010000
 80007ec:	fffff9ff 	.word	0xfffff9ff

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b7f      	cmp	r3, #127	; 0x7f
 8000802:	d809      	bhi.n	8000818 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	231f      	movs	r3, #31
 800080c:	401a      	ands	r2, r3
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_EnableIRQ+0x30>)
 8000810:	2101      	movs	r1, #1
 8000812:	4091      	lsls	r1, r2
 8000814:	000a      	movs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	0002      	movs	r2, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b7f      	cmp	r3, #127	; 0x7f
 8000838:	d828      	bhi.n	800088c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <__NVIC_SetPriority+0xd4>)
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	33c0      	adds	r3, #192	; 0xc0
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	589b      	ldr	r3, [r3, r2]
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	0011      	movs	r1, r2
 8000850:	2203      	movs	r2, #3
 8000852:	400a      	ands	r2, r1
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	21ff      	movs	r1, #255	; 0xff
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	401a      	ands	r2, r3
 8000860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	401a      	ands	r2, r3
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	2303      	movs	r3, #3
 8000872:	4003      	ands	r3, r0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	481f      	ldr	r0, [pc, #124]	; (80008f8 <__NVIC_SetPriority+0xd4>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	430a      	orrs	r2, r1
 8000884:	33c0      	adds	r3, #192	; 0xc0
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088a:	e031      	b.n	80008f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <__NVIC_SetPriority+0xd8>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0019      	movs	r1, r3
 8000894:	230f      	movs	r3, #15
 8000896:	400b      	ands	r3, r1
 8000898:	3b08      	subs	r3, #8
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	3306      	adds	r3, #6
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	3304      	adds	r3, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1dfa      	adds	r2, r7, #7
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	0011      	movs	r1, r2
 80008ac:	2203      	movs	r2, #3
 80008ae:	400a      	ands	r2, r1
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	4091      	lsls	r1, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	401a      	ands	r2, r3
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	2303      	movs	r3, #3
 80008ce:	4003      	ands	r3, r0
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <__NVIC_SetPriority+0xd8>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	001c      	movs	r4, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	4023      	ands	r3, r4
 80008e0:	3b08      	subs	r3, #8
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	430a      	orrs	r2, r1
 80008e6:	3306      	adds	r3, #6
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	18c3      	adds	r3, r0, r3
 80008ec:	3304      	adds	r3, #4
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b003      	add	sp, #12
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	210f      	movs	r1, #15
 800090c:	187b      	adds	r3, r7, r1
 800090e:	1c02      	adds	r2, r0, #0
 8000910:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	187b      	adds	r3, r7, r1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ff81 	bl	8000824 <__NVIC_SetPriority>
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b004      	add	sp, #16
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	0002      	movs	r2, r0
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b25b      	sxtb	r3, r3
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ff57 	bl	80007f0 <__NVIC_EnableIRQ>
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e14e      	b.n	8000bfc <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	225c      	movs	r2, #92	; 0x5c
 8000962:	5c9b      	ldrb	r3, [r3, r2]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d107      	bne.n	800097a <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	225d      	movs	r2, #93	; 0x5d
 800096e:	2100      	movs	r1, #0
 8000970:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff fccb 	bl	8000310 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2110      	movs	r1, #16
 8000986:	438a      	bics	r2, r1
 8000988:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800098a:	f7ff ff11 	bl	80007b0 <HAL_GetTick>
 800098e:	0003      	movs	r3, r0
 8000990:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000992:	e012      	b.n	80009ba <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000994:	f7ff ff0c 	bl	80007b0 <HAL_GetTick>
 8000998:	0002      	movs	r2, r0
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	d90b      	bls.n	80009ba <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	2201      	movs	r2, #1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	225c      	movs	r2, #92	; 0x5c
 80009b2:	2103      	movs	r1, #3
 80009b4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e120      	b.n	8000bfc <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	2208      	movs	r2, #8
 80009c2:	4013      	ands	r3, r2
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d0e5      	beq.n	8000994 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2101      	movs	r1, #1
 80009d4:	430a      	orrs	r2, r1
 80009d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d8:	f7ff feea 	bl	80007b0 <HAL_GetTick>
 80009dc:	0003      	movs	r3, r0
 80009de:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80009e0:	e012      	b.n	8000a08 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009e2:	f7ff fee5 	bl	80007b0 <HAL_GetTick>
 80009e6:	0002      	movs	r2, r0
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b0a      	cmp	r3, #10
 80009ee:	d90b      	bls.n	8000a08 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f4:	2201      	movs	r2, #1
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	225c      	movs	r2, #92	; 0x5c
 8000a00:	2103      	movs	r1, #3
 8000a02:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e0f9      	b.n	8000bfc <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4013      	ands	r3, r2
 8000a12:	d0e6      	beq.n	80009e2 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	699a      	ldr	r2, [r3, #24]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2102      	movs	r1, #2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a76      	ldr	r2, [pc, #472]	; (8000c04 <HAL_FDCAN_Init+0x2b8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d103      	bne.n	8000a36 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000a2e:	4a76      	ldr	r2, [pc, #472]	; (8000c08 <HAL_FDCAN_Init+0x2bc>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7c1b      	ldrb	r3, [r3, #16]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d108      	bne.n	8000a50 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	699a      	ldr	r2, [r3, #24]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2140      	movs	r1, #64	; 0x40
 8000a4a:	438a      	bics	r2, r1
 8000a4c:	619a      	str	r2, [r3, #24]
 8000a4e:	e007      	b.n	8000a60 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7c5b      	ldrb	r3, [r3, #17]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d109      	bne.n	8000a7c <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	699a      	ldr	r2, [r3, #24]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	01c9      	lsls	r1, r1, #7
 8000a76:	430a      	orrs	r2, r1
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	e007      	b.n	8000a8c <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	699a      	ldr	r2, [r3, #24]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <HAL_FDCAN_Init+0x2c0>)
 8000a88:	400a      	ands	r2, r1
 8000a8a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7c9b      	ldrb	r3, [r3, #18]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d108      	bne.n	8000aa6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	699a      	ldr	r2, [r3, #24]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	495c      	ldr	r1, [pc, #368]	; (8000c10 <HAL_FDCAN_Init+0x2c4>)
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	619a      	str	r2, [r3, #24]
 8000aa4:	e008      	b.n	8000ab8 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0149      	lsls	r1, r1, #5
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a55      	ldr	r2, [pc, #340]	; (8000c14 <HAL_FDCAN_Init+0x2c8>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	21a4      	movs	r1, #164	; 0xa4
 8000adc:	438a      	bics	r2, r1
 8000ade:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2110      	movs	r1, #16
 8000aec:	438a      	bics	r2, r1
 8000aee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2104      	movs	r1, #4
 8000b04:	430a      	orrs	r2, r1
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	e02c      	b.n	8000b64 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d028      	beq.n	8000b64 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d01c      	beq.n	8000b54 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	430a      	orrs	r2, r1
 8000b28:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2110      	movs	r1, #16
 8000b36:	430a      	orrs	r2, r1
 8000b38:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d110      	bne.n	8000b64 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	619a      	str	r2, [r3, #24]
 8000b52:	e007      	b.n	8000b64 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2120      	movs	r1, #32
 8000b60:	430a      	orrs	r2, r1
 8000b62:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b74:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b8c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b8e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d115      	bne.n	8000bc8 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000baa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bc4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bc6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	22c0      	movs	r2, #192	; 0xc0
 8000bce:	5899      	ldr	r1, [r3, r2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	21c0      	movs	r1, #192	; 0xc0
 8000bdc:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 f819 	bl	8000c18 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	225c      	movs	r2, #92	; 0x5c
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b004      	add	sp, #16
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40006400 	.word	0x40006400
 8000c08:	40006500 	.word	0x40006500
 8000c0c:	ffffbfff 	.word	0xffffbfff
 8000c10:	ffffefff 	.word	0xffffefff
 8000c14:	fffffcff 	.word	0xfffffcff

08000c18 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8000c22:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2e      	ldr	r2, [pc, #184]	; (8000ce4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d105      	bne.n	8000c3a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	22d4      	movs	r2, #212	; 0xd4
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	4694      	mov	ip, r2
 8000c36:	4463      	add	r3, ip
 8000c38:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	589b      	ldr	r3, [r3, r2]
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c52:	041a      	lsls	r2, r3, #16
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	3370      	adds	r3, #112	; 0x70
 8000c62:	001a      	movs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	589b      	ldr	r3, [r3, r2]
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7a:	061a      	lsls	r2, r3, #24
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	33b0      	adds	r3, #176	; 0xb0
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3389      	adds	r3, #137	; 0x89
 8000c94:	33ff      	adds	r3, #255	; 0xff
 8000c96:	001a      	movs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2298      	movs	r2, #152	; 0x98
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	189a      	adds	r2, r3, r2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	229e      	movs	r2, #158	; 0x9e
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	189a      	adds	r2, r3, r2
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e005      	b.n	8000cc6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	22d4      	movs	r2, #212	; 0xd4
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4694      	mov	ip, r2
 8000cce:	4463      	add	r3, ip
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3f1      	bcc.n	8000cba <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	4000b400 	.word	0x4000b400
 8000ce4:	40006800 	.word	0x40006800
 8000ce8:	ffe0ffff 	.word	0xffe0ffff
 8000cec:	f0ffffff 	.word	0xf0ffffff

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e14d      	b.n	8000f9c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <HAL_GPIO_Init+0x28>
 8000d16:	e13e      	b.n	8000f96 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d00b      	beq.n	8000d38 <HAL_GPIO_Init+0x48>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2c:	2b11      	cmp	r3, #17
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b12      	cmp	r3, #18
 8000d36:	d130      	bne.n	8000d9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	2201      	movs	r2, #1
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0xea>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d123      	bne.n	8000e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	58d3      	ldr	r3, [r2, r3]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2207      	movs	r2, #7
 8000dec:	4013      	ands	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2107      	movs	r1, #7
 8000e06:	400b      	ands	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	6939      	ldr	r1, [r7, #16]
 8000e20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	401a      	ands	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	055b      	lsls	r3, r3, #21
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d100      	bne.n	8000e64 <HAL_GPIO_Init+0x174>
 8000e62:	e098      	b.n	8000f96 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e64:	4a53      	ldr	r2, [pc, #332]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3318      	adds	r3, #24
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	589b      	ldr	r3, [r3, r2]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4013      	ands	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	0013      	movs	r3, r2
 8000e80:	43da      	mvns	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	23a0      	movs	r3, #160	; 0xa0
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x1d6>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x1d2>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a47      	ldr	r2, [pc, #284]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x1ce>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x1ca>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <HAL_GPIO_Init+0x2d4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x1c6>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	2103      	movs	r1, #3
 8000ecc:	400a      	ands	r2, r1
 8000ece:	00d2      	lsls	r2, r2, #3
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ed8:	4936      	ldr	r1, [pc, #216]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3318      	adds	r3, #24
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ee6:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	58d3      	ldr	r3, [r2, r3]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	025b      	lsls	r3, r3, #9
 8000f00:	4013      	ands	r3, r2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f0c:	4929      	ldr	r1, [pc, #164]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f16:	2384      	movs	r3, #132	; 0x84
 8000f18:	58d3      	ldr	r3, [r2, r3]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3a:	491e      	ldr	r1, [pc, #120]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f3c:	2284      	movs	r2, #132	; 0x84
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	035b      	lsls	r3, r3, #13
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43da      	mvns	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	039b      	lsls	r3, r3, #14
 8000f84:	4013      	ands	r3, r2
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	40da      	lsrs	r2, r3
 8000fa4:	1e13      	subs	r3, r2, #0
 8000fa6:	d000      	beq.n	8000faa <HAL_GPIO_Init+0x2ba>
 8000fa8:	e6aa      	b.n	8000d00 <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b006      	add	sp, #24
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021800 	.word	0x40021800
 8000fb8:	50000400 	.word	0x50000400
 8000fbc:	50000800 	.word	0x50000800
 8000fc0:	50000c00 	.word	0x50000c00
 8000fc4:	50001000 	.word	0x50001000

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	0008      	movs	r0, r1
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	1cbb      	adds	r3, r7, #2
 8000fd6:	1c02      	adds	r2, r0, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
 8000fda:	1c7b      	adds	r3, r7, #1
 8000fdc:	1c0a      	adds	r2, r1, #0
 8000fde:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe0:	1c7b      	adds	r3, r7, #1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe8:	1cbb      	adds	r3, r7, #2
 8000fea:	881a      	ldrh	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff2:	1cbb      	adds	r3, r7, #2
 8000ff4:	881a      	ldrh	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001012:	4013      	ands	r3, r2
 8001014:	0019      	movs	r1, r3
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	430a      	orrs	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	429a      	cmp	r2, r3
 8001026:	d11f      	bne.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	0013      	movs	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	189b      	adds	r3, r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4912      	ldr	r1, [pc, #72]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff f866 	bl	8000108 <__udivsi3>
 800103c:	0003      	movs	r3, r0
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001042:	e008      	b.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3b01      	subs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e009      	b.n	800106a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	401a      	ands	r2, r3
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	429a      	cmp	r2, r3
 8001066:	d0ed      	beq.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40007000 	.word	0x40007000
 8001078:	fffff9ff 	.word	0xfffff9ff
 800107c:	20000000 	.word	0x20000000
 8001080:	000f4240 	.word	0x000f4240

08001084 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <LL_RCC_GetAPB1Prescaler+0x14>)
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	23e0      	movs	r3, #224	; 0xe0
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	4013      	ands	r3, r2
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f000 fb56 	bl	800175c <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	d100      	bne.n	80010bc <HAL_RCC_OscConfig+0x20>
 80010ba:	e07d      	b.n	80011b8 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010bc:	4bc3      	ldr	r3, [pc, #780]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2238      	movs	r2, #56	; 0x38
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c6:	4bc1      	ldr	r3, [pc, #772]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x40>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d002      	beq.n	80010e2 <HAL_RCC_OscConfig+0x46>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	4bba      	ldr	r3, [pc, #744]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d063      	beq.n	80011b6 <HAL_RCC_OscConfig+0x11a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d15f      	bne.n	80011b6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f000 fb30 	bl	800175c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	025b      	lsls	r3, r3, #9
 8001104:	429a      	cmp	r2, r3
 8001106:	d107      	bne.n	8001118 <HAL_RCC_OscConfig+0x7c>
 8001108:	4bb0      	ldr	r3, [pc, #704]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4baf      	ldr	r3, [pc, #700]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0249      	lsls	r1, r1, #9
 8001112:	430a      	orrs	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e020      	b.n	800115a <HAL_RCC_OscConfig+0xbe>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	23a0      	movs	r3, #160	; 0xa0
 800111e:	02db      	lsls	r3, r3, #11
 8001120:	429a      	cmp	r2, r3
 8001122:	d10e      	bne.n	8001142 <HAL_RCC_OscConfig+0xa6>
 8001124:	4ba9      	ldr	r3, [pc, #676]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	02c9      	lsls	r1, r1, #11
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	4ba6      	ldr	r3, [pc, #664]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4ba5      	ldr	r3, [pc, #660]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0249      	lsls	r1, r1, #9
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e00b      	b.n	800115a <HAL_RCC_OscConfig+0xbe>
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4ba1      	ldr	r3, [pc, #644]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001148:	49a1      	ldr	r1, [pc, #644]	; (80013d0 <HAL_RCC_OscConfig+0x334>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001154:	499f      	ldr	r1, [pc, #636]	; (80013d4 <HAL_RCC_OscConfig+0x338>)
 8001156:	400a      	ands	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d014      	beq.n	800118c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fb25 	bl	80007b0 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fb20 	bl	80007b0 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e2ee      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117e:	4b93      	ldr	r3, [pc, #588]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	029b      	lsls	r3, r3, #10
 8001186:	4013      	ands	r3, r2
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xd0>
 800118a:	e015      	b.n	80011b8 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fb10 	bl	80007b0 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001196:	f7ff fb0b 	bl	80007b0 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b64      	cmp	r3, #100	; 0x64
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e2d9      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011a8:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	4013      	ands	r3, r2
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0xfa>
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2202      	movs	r2, #2
 80011be:	4013      	ands	r3, r2
 80011c0:	d100      	bne.n	80011c4 <HAL_RCC_OscConfig+0x128>
 80011c2:	e099      	b.n	80012f8 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c4:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2238      	movs	r2, #56	; 0x38
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2203      	movs	r2, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d102      	bne.n	80011e4 <HAL_RCC_OscConfig+0x148>
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d002      	beq.n	80011ea <HAL_RCC_OscConfig+0x14e>
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d135      	bne.n	8001256 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4013      	ands	r3, r2
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x166>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e2ac      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a74      	ldr	r2, [pc, #464]	; (80013d8 <HAL_RCC_OscConfig+0x33c>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	021a      	lsls	r2, r3, #8
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001214:	430a      	orrs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d112      	bne.n	8001244 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800121e:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x340>)
 8001224:	4013      	ands	r3, r2
 8001226:	0019      	movs	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0adb      	lsrs	r3, r3, #11
 8001238:	2207      	movs	r2, #7
 800123a:	4013      	ands	r3, r2
 800123c:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x344>)
 800123e:	40da      	lsrs	r2, r3
 8001240:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x348>)
 8001242:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x34c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff f9d9 	bl	8000600 <HAL_InitTick>
 800124e:	1e03      	subs	r3, r0, #0
 8001250:	d051      	beq.n	80012f6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e282      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d030      	beq.n	80012c0 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a5e      	ldr	r2, [pc, #376]	; (80013dc <HAL_RCC_OscConfig+0x340>)
 8001264:	4013      	ands	r3, r2
 8001266:	0019      	movs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001272:	4b56      	ldr	r3, [pc, #344]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0049      	lsls	r1, r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fa96 	bl	80007b0 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fa91 	bl	80007b0 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e25f      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a4a      	ldr	r2, [pc, #296]	; (80013d8 <HAL_RCC_OscConfig+0x33c>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	021a      	lsls	r2, r3, #8
 80012b8:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	e01b      	b.n	80012f8 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012c0:	4b42      	ldr	r3, [pc, #264]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80012c6:	4949      	ldr	r1, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x350>)
 80012c8:	400a      	ands	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fa70 	bl	80007b0 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fa6b 	bl	80007b0 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e239      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x23a>
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2208      	movs	r2, #8
 80012fe:	4013      	ands	r3, r2
 8001300:	d047      	beq.n	8001392 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2238      	movs	r2, #56	; 0x38
 8001308:	4013      	ands	r3, r2
 800130a:	2b18      	cmp	r3, #24
 800130c:	d10a      	bne.n	8001324 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d03c      	beq.n	8001392 <HAL_RCC_OscConfig+0x2f6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d138      	bne.n	8001392 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e21b      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d019      	beq.n	8001360 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800132e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fa3a 	bl	80007b0 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fa35 	bl	80007b0 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e203      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d0f1      	beq.n	8001342 <HAL_RCC_OscConfig+0x2a6>
 800135e:	e018      	b.n	8001392 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fa20 	bl	80007b0 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fa1b 	bl	80007b0 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e1e9      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d1f1      	bne.n	8001376 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	d100      	bne.n	800139e <HAL_RCC_OscConfig+0x302>
 800139c:	e0c6      	b.n	800152c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	231f      	movs	r3, #31
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2238      	movs	r2, #56	; 0x38
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	d11e      	bne.n	80013f0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_RCC_OscConfig+0x330>)
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x322>
 80013bc:	e0b6      	b.n	800152c <HAL_RCC_OscConfig+0x490>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d000      	beq.n	80013c8 <HAL_RCC_OscConfig+0x32c>
 80013c6:	e0b1      	b.n	800152c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e1c7      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	fffeffff 	.word	0xfffeffff
 80013d4:	fffbffff 	.word	0xfffbffff
 80013d8:	ffff80ff 	.word	0xffff80ff
 80013dc:	ffffc7ff 	.word	0xffffc7ff
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004
 80013ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013f0:	4bb8      	ldr	r3, [pc, #736]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80013f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	055b      	lsls	r3, r3, #21
 80013f8:	4013      	ands	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_OscConfig+0x364>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x366>
 8001400:	2300      	movs	r3, #0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d011      	beq.n	800142a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4bb3      	ldr	r3, [pc, #716]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800140a:	4bb2      	ldr	r3, [pc, #712]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0549      	lsls	r1, r1, #21
 8001410:	430a      	orrs	r2, r1
 8001412:	63da      	str	r2, [r3, #60]	; 0x3c
 8001414:	4baf      	ldr	r3, [pc, #700]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	055b      	lsls	r3, r3, #21
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142a:	4bab      	ldr	r3, [pc, #684]	; (80016d8 <HAL_RCC_OscConfig+0x63c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4013      	ands	r3, r2
 8001434:	d11a      	bne.n	800146c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001436:	4ba8      	ldr	r3, [pc, #672]	; (80016d8 <HAL_RCC_OscConfig+0x63c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4ba7      	ldr	r3, [pc, #668]	; (80016d8 <HAL_RCC_OscConfig+0x63c>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0049      	lsls	r1, r1, #1
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001444:	f7ff f9b4 	bl	80007b0 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff f9af 	bl	80007b0 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e17d      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001460:	4b9d      	ldr	r3, [pc, #628]	; (80016d8 <HAL_RCC_OscConfig+0x63c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x3e6>
 8001474:	4b97      	ldr	r3, [pc, #604]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001476:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001478:	4b96      	ldr	r3, [pc, #600]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800147a:	2101      	movs	r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001480:	e01c      	b.n	80014bc <HAL_RCC_OscConfig+0x420>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x408>
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800148c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800148e:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001490:	2104      	movs	r1, #4
 8001492:	430a      	orrs	r2, r1
 8001494:	65da      	str	r2, [r3, #92]	; 0x5c
 8001496:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800149a:	4b8e      	ldr	r3, [pc, #568]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0x420>
 80014a4:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80014a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014a8:	4b8a      	ldr	r3, [pc, #552]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80014b0:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80014b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014b4:	4b87      	ldr	r3, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	438a      	bics	r2, r1
 80014ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d014      	beq.n	80014ee <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff f974 	bl	80007b0 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014cc:	e009      	b.n	80014e2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f96f 	bl	80007b0 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a80      	ldr	r2, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x640>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e13c      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e2:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x432>
 80014ec:	e013      	b.n	8001516 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff f95f 	bl	80007b0 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f6:	e009      	b.n	800150c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff f95a 	bl	80007b0 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	4a76      	ldr	r2, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x640>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e127      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150c:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001516:	231f      	movs	r3, #31
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001524:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001526:	496e      	ldr	r1, [pc, #440]	; (80016e0 <HAL_RCC_OscConfig+0x644>)
 8001528:	400a      	ands	r2, r1
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2220      	movs	r2, #32
 8001532:	4013      	ands	r3, r2
 8001534:	d039      	beq.n	80015aa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01b      	beq.n	8001576 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	03c9      	lsls	r1, r1, #15
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff f930 	bl	80007b0 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001556:	f7ff f92b 	bl	80007b0 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0f9      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	4013      	ands	r3, r2
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x4ba>
 8001574:	e019      	b.n	80015aa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800157c:	4959      	ldr	r1, [pc, #356]	; (80016e4 <HAL_RCC_OscConfig+0x648>)
 800157e:	400a      	ands	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff f915 	bl	80007b0 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158c:	f7ff f910 	bl	80007b0 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0de      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x518>
 80015b2:	e0d2      	b.n	800175a <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2238      	movs	r2, #56	; 0x38
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b10      	cmp	r3, #16
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x526>
 80015c0:	e081      	b.n	80016c6 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d156      	bne.n	8001678 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80015d0:	4945      	ldr	r1, [pc, #276]	; (80016e8 <HAL_RCC_OscConfig+0x64c>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff f8eb 	bl	80007b0 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff f8e6 	bl	80007b0 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0b4      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	049b      	lsls	r3, r3, #18
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <HAL_RCC_OscConfig+0x650>)
 8001604:	4013      	ands	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	431a      	orrs	r2, r3
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800162e:	430a      	orrs	r2, r1
 8001630:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0449      	lsls	r1, r1, #17
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0549      	lsls	r1, r1, #21
 800164a:	430a      	orrs	r2, r1
 800164c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff f8af 	bl	80007b0 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff f8aa 	bl	80007b0 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e078      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x5bc>
 8001676:	e070      	b.n	800175a <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800167e:	491a      	ldr	r1, [pc, #104]	; (80016e8 <HAL_RCC_OscConfig+0x64c>)
 8001680:	400a      	ands	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 800168a:	2103      	movs	r1, #3
 800168c:	438a      	bics	r2, r1
 800168e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 8001696:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_OscConfig+0x654>)
 8001698:	400a      	ands	r2, r1
 800169a:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff f888 	bl	80007b0 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff f883 	bl	80007b0 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e051      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_OscConfig+0x638>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	049b      	lsls	r3, r3, #18
 80016c0:	4013      	ands	r3, r2
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x60a>
 80016c4:	e049      	b.n	800175a <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d112      	bne.n	80016f4 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e044      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	00001388 	.word	0x00001388
 80016e0:	efffffff 	.word	0xefffffff
 80016e4:	ffbfffff 	.word	0xffbfffff
 80016e8:	feffffff 	.word	0xfeffffff
 80016ec:	11c1808c 	.word	0x11c1808c
 80016f0:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x6c8>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2203      	movs	r2, #3
 80016fe:	401a      	ands	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	429a      	cmp	r2, r3
 8001706:	d126      	bne.n	8001756 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2270      	movs	r2, #112	; 0x70
 800170c:	401a      	ands	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11f      	bne.n	8001756 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	23fe      	movs	r3, #254	; 0xfe
 800171a:	01db      	lsls	r3, r3, #7
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d116      	bne.n	8001756 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	23f8      	movs	r3, #248	; 0xf8
 800172c:	039b      	lsls	r3, r3, #14
 800172e:	401a      	ands	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d10e      	bne.n	8001756 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	23e0      	movs	r3, #224	; 0xe0
 800173c:	051b      	lsls	r3, r3, #20
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	0f5b      	lsrs	r3, r3, #29
 800174c:	075a      	lsls	r2, r3, #29
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b008      	add	sp, #32
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0e9      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2207      	movs	r2, #7
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d91e      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b73      	ldr	r3, [pc, #460]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2207      	movs	r2, #7
 8001790:	4393      	bics	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800179c:	f7ff f808 	bl	80007b0 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7ff f803 	bl	80007b0 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_RCC_ClockConfig+0x1f4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0ca      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ba:	4b67      	ldr	r3, [pc, #412]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2207      	movs	r2, #7
 80017c0:	4013      	ands	r3, r2
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d015      	beq.n	80017fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2204      	movs	r2, #4
 80017d8:	4013      	ands	r3, r2
 80017da:	d006      	beq.n	80017ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017dc:	4b60      	ldr	r3, [pc, #384]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	21e0      	movs	r1, #224	; 0xe0
 80017e4:	01c9      	lsls	r1, r1, #7
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ea:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <HAL_RCC_ClockConfig+0x1fc>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	d057      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	d12b      	bne.n	8001874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e097      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d107      	bne.n	8001838 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001828:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	049b      	lsls	r3, r3, #18
 8001830:	4013      	ands	r3, r2
 8001832:	d11f      	bne.n	8001874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e08b      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4013      	ands	r3, r2
 800184a:	d113      	bne.n	8001874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e07f      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d106      	bne.n	8001866 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d108      	bne.n	8001874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e074      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001866:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e06d      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001874:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2207      	movs	r2, #7
 800187a:	4393      	bics	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001888:	f7fe ff92 	bl	80007b0 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001890:	e009      	b.n	80018a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f7fe ff8d 	bl	80007b0 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a2f      	ldr	r2, [pc, #188]	; (800195c <HAL_RCC_ClockConfig+0x1f4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e054      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2238      	movs	r2, #56	; 0x38
 80018ac:	401a      	ands	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1ec      	bne.n	8001892 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2207      	movs	r2, #7
 80018be:	4013      	ands	r3, r2
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d21e      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2207      	movs	r2, #7
 80018cc:	4393      	bics	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018d8:	f7fe ff6a 	bl	80007b0 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7fe ff65 	bl	80007b0 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <HAL_RCC_ClockConfig+0x1f4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e02c      	b.n	8001950 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2204      	movs	r2, #4
 800190a:	4013      	ands	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_RCC_ClockConfig+0x200>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 800191e:	430a      	orrs	r2, r1
 8001920:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001922:	f000 f829 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001926:	0001      	movs	r1, r0
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_ClockConfig+0x1f8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	220f      	movs	r2, #15
 8001930:	401a      	ands	r2, r3
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_RCC_ClockConfig+0x204>)
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	58d3      	ldr	r3, [r2, r3]
 8001938:	221f      	movs	r2, #31
 800193a:	4013      	ands	r3, r2
 800193c:	000a      	movs	r2, r1
 800193e:	40da      	lsrs	r2, r3
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x208>)
 8001942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x20c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0018      	movs	r0, r3
 800194a:	f7fe fe59 	bl	8000600 <HAL_InitTick>
 800194e:	0003      	movs	r3, r0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40022000 	.word	0x40022000
 800195c:	00001388 	.word	0x00001388
 8001960:	40021000 	.word	0x40021000
 8001964:	fffff0ff 	.word	0xfffff0ff
 8001968:	ffff8fff 	.word	0xffff8fff
 800196c:	08004b84 	.word	0x08004b84
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2238      	movs	r2, #56	; 0x38
 8001984:	4013      	ands	r3, r2
 8001986:	d10f      	bne.n	80019a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0adb      	lsrs	r3, r3, #11
 800198e:	2207      	movs	r2, #7
 8001990:	4013      	ands	r3, r2
 8001992:	2201      	movs	r2, #1
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	4835      	ldr	r0, [pc, #212]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xfc>)
 800199e:	f7fe fbb3 	bl	8000108 <__udivsi3>
 80019a2:	0003      	movs	r3, r0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e05d      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2238      	movs	r2, #56	; 0x38
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x100>)
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e054      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2238      	movs	r2, #56	; 0x38
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d138      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2203      	movs	r2, #3
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	2207      	movs	r2, #7
 80019d8:	4013      	ands	r3, r2
 80019da:	3301      	adds	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	4824      	ldr	r0, [pc, #144]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x100>)
 80019e8:	f7fe fb8e 	bl	8000108 <__udivsi3>
 80019ec:	0003      	movs	r3, r0
 80019ee:	0019      	movs	r1, r3
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	227f      	movs	r2, #127	; 0x7f
 80019f8:	4013      	ands	r3, r2
 80019fa:	434b      	muls	r3, r1
 80019fc:	617b      	str	r3, [r7, #20]
        break;
 80019fe:	e00d      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	481c      	ldr	r0, [pc, #112]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a04:	f7fe fb80 	bl	8000108 <__udivsi3>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	227f      	movs	r2, #127	; 0x7f
 8001a14:	4013      	ands	r3, r2
 8001a16:	434b      	muls	r3, r1
 8001a18:	617b      	str	r3, [r7, #20]
        break;
 8001a1a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0f5b      	lsrs	r3, r3, #29
 8001a22:	2207      	movs	r2, #7
 8001a24:	4013      	ands	r3, r2
 8001a26:	3301      	adds	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6978      	ldr	r0, [r7, #20]
 8001a2e:	f7fe fb6b 	bl	8000108 <__udivsi3>
 8001a32:	0003      	movs	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e015      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2238      	movs	r2, #56	; 0x38
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d103      	bne.n	8001a4c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2238      	movs	r2, #56	; 0x38
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b18      	cmp	r3, #24
 8001a56:	d103      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a58:	23fa      	movs	r3, #250	; 0xfa
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e001      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a64:	693b      	ldr	r3, [r7, #16]
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a94:	f7ff fff2 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a98:	0004      	movs	r4, r0
 8001a9a:	f7ff faf3 	bl	8001084 <LL_RCC_GetAPB1Prescaler>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	0b1a      	lsrs	r2, r3, #12
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	58d3      	ldr	r3, [r2, r3]
 8001aa8:	221f      	movs	r2, #31
 8001aaa:	4013      	ands	r3, r2
 8001aac:	40dc      	lsrs	r4, r3
 8001aae:	0023      	movs	r3, r4
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	08004bc4 	.word	0x08004bc4

08001abc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_RCC_GetClockConfig+0x4c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetClockConfig+0x4c>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	23f0      	movs	r3, #240	; 0xf0
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_GetClockConfig+0x4c>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	23e0      	movs	r3, #224	; 0xe0
 8001aec:	01db      	lsls	r3, r3, #7
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetClockConfig+0x50>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2207      	movs	r2, #7
 8001afa:	401a      	ands	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b18:	2313      	movs	r3, #19
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b20:	2312      	movs	r3, #18
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	4013      	ands	r3, r2
 8001b32:	d100      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b34:	e0ad      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	2011      	movs	r0, #17
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	055b      	lsls	r3, r3, #21
 8001b46:	4013      	ands	r3, r2
 8001b48:	d110      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0549      	lsls	r1, r1, #21
 8001b54:	430a      	orrs	r2, r1
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0049      	lsls	r1, r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b7a:	f7fe fe19 	bl	80007b0 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b82:	e00b      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7fe fe14 	bl	80007b0 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d904      	bls.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b92:	2313      	movs	r3, #19
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2203      	movs	r2, #3
 8001b98:	701a      	strb	r2, [r3, #0]
        break;
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d0ed      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ba8:	2313      	movs	r3, #19
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d15e      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d019      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d014      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	0249      	lsls	r1, r1, #9
 8001be2:	430a      	orrs	r2, r1
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bec:	491e      	ldr	r1, [pc, #120]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d016      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7fe fdd6 	bl	80007b0 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c08:	e00c      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe fdd1 	bl	80007b0 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d904      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c1a:	2313      	movs	r3, #19
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
            break;
 8001c22:	e004      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d0ed      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c2e:	2313      	movs	r3, #19
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c4c:	e016      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2213      	movs	r2, #19
 8001c54:	18ba      	adds	r2, r7, r2
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	fffffcff 	.word	0xfffffcff
 8001c68:	fffeffff 	.word	0xfffeffff
 8001c6c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c70:	2312      	movs	r3, #18
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2213      	movs	r2, #19
 8001c76:	18ba      	adds	r2, r7, r2
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7c:	2311      	movs	r3, #17
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4bb6      	ldr	r3, [pc, #728]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8a:	4bb5      	ldr	r3, [pc, #724]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c8c:	49b5      	ldr	r1, [pc, #724]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c9c:	4bb0      	ldr	r3, [pc, #704]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4bad      	ldr	r3, [pc, #692]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cba:	4ba9      	ldr	r3, [pc, #676]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4ba5      	ldr	r3, [pc, #660]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cd8:	4ba1      	ldr	r3, [pc, #644]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	2230      	movs	r2, #48	; 0x30
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b9e      	ldr	r3, [pc, #632]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cf6:	4b9a      	ldr	r3, [pc, #616]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	4a9b      	ldr	r2, [pc, #620]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	015b      	lsls	r3, r3, #5
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001d16:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	4a94      	ldr	r2, [pc, #592]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d36:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	4a8d      	ldr	r2, [pc, #564]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d44:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4013      	ands	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	4a86      	ldr	r2, [pc, #536]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d64:	4b7e      	ldr	r3, [pc, #504]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	4013      	ands	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	4a7f      	ldr	r2, [pc, #508]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	4b77      	ldr	r3, [pc, #476]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2240      	movs	r2, #64	; 0x40
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	4a79      	ldr	r2, [pc, #484]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	01db      	lsls	r3, r3, #7
 8001dae:	4013      	ands	r3, r2
 8001db0:	d015      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	0899      	lsrs	r1, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d106      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0249      	lsls	r1, r1, #9
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	031b      	lsls	r3, r3, #12
 8001de6:	4013      	ands	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	4013      	ands	r3, r2
 8001e08:	d016      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e0a:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	4a5c      	ldr	r2, [pc, #368]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e18:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	03db      	lsls	r3, r3, #15
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0449      	lsls	r1, r1, #17
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	03db      	lsls	r3, r3, #15
 8001e40:	4013      	ands	r3, r2
 8001e42:	d016      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e44:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	4a4e      	ldr	r2, [pc, #312]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	045b      	lsls	r3, r3, #17
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0449      	lsls	r1, r1, #17
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	2203      	movs	r2, #3
 8001e84:	4393      	bics	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0249      	lsls	r1, r1, #9
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	019b      	lsls	r3, r3, #6
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d014      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	220c      	movs	r2, #12
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d106      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0249      	lsls	r1, r1, #9
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	045b      	lsls	r3, r3, #17
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d106      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0449      	lsls	r1, r1, #17
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	049b      	lsls	r3, r3, #18
 8001f20:	4013      	ands	r3, r2
 8001f22:	d016      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	0449      	lsls	r1, r1, #17
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f52:	2312      	movs	r3, #18
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b006      	add	sp, #24
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	fffff3ff 	.word	0xfffff3ff
 8001f6c:	fffffcff 	.word	0xfffffcff
 8001f70:	fff3ffff 	.word	0xfff3ffff
 8001f74:	ffcfffff 	.word	0xffcfffff
 8001f78:	ffffcfff 	.word	0xffffcfff
 8001f7c:	ffff3fff 	.word	0xffff3fff
 8001f80:	ffbfffff 	.word	0xffbfffff
 8001f84:	feffffff 	.word	0xfeffffff

08001f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e04a      	b.n	8002030 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	223d      	movs	r2, #61	; 0x3d
 8001f9e:	5c9b      	ldrb	r3, [r3, r2]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d107      	bne.n	8001fb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	223c      	movs	r2, #60	; 0x3c
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 f841 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	223d      	movs	r2, #61	; 0x3d
 8001fba:	2102      	movs	r1, #2
 8001fbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	0010      	movs	r0, r2
 8001fca:	f000 f9f1 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2248      	movs	r2, #72	; 0x48
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223e      	movs	r2, #62	; 0x3e
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	223f      	movs	r2, #63	; 0x3f
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2241      	movs	r2, #65	; 0x41
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2242      	movs	r2, #66	; 0x42
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2243      	movs	r2, #67	; 0x43
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2244      	movs	r2, #68	; 0x44
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2245      	movs	r2, #69	; 0x45
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2246      	movs	r2, #70	; 0x46
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2247      	movs	r2, #71	; 0x47
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	223d      	movs	r2, #61	; 0x3d
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	223d      	movs	r2, #61	; 0x3d
 8002054:	5c9b      	ldrb	r3, [r3, r2]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e047      	b.n	80020f0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	223d      	movs	r2, #61	; 0x3d
 8002064:	2102      	movs	r1, #2
 8002066:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d014      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x64>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	429a      	cmp	r2, r3
 800208c:	d00e      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x64>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_TIM_Base_Start_IT+0xb4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x64>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_TIM_Base_Start_IT+0xb8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x64>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_TIM_Base_Start_IT+0xbc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d116      	bne.n	80020da <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_TIM_Base_Start_IT+0xc0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d016      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0xa4>
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	025b      	lsls	r3, r3, #9
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d011      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2101      	movs	r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d8:	e008      	b.n	80020ec <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e000      	b.n	80020ee <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ec:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b004      	add	sp, #16
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40014000 	.word	0x40014000
 8002108:	00010007 	.word	0x00010007

0800210c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d124      	bne.n	800216c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2202      	movs	r2, #2
 800212a:	4013      	ands	r3, r2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11d      	bne.n	800216c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2203      	movs	r2, #3
 8002136:	4252      	negs	r2, r2
 8002138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2203      	movs	r2, #3
 8002148:	4013      	ands	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f916 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002154:	e007      	b.n	8002166 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f909 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f000 f915 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	2b04      	cmp	r3, #4
 8002178:	d125      	bne.n	80021c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2204      	movs	r2, #4
 8002182:	4013      	ands	r3, r2
 8002184:	2b04      	cmp	r3, #4
 8002186:	d11e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2205      	movs	r2, #5
 800218e:	4252      	negs	r2, r2
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	23c0      	movs	r3, #192	; 0xc0
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 f8e9 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80021ae:	e007      	b.n	80021c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f8dc 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f8e8 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2208      	movs	r2, #8
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d124      	bne.n	800221e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2208      	movs	r2, #8
 80021dc:	4013      	ands	r3, r2
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11d      	bne.n	800221e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2209      	movs	r2, #9
 80021e8:	4252      	negs	r2, r2
 80021ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2204      	movs	r2, #4
 80021f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4013      	ands	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f8bd 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002206:	e007      	b.n	8002218 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f8b0 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 f8bc 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2210      	movs	r2, #16
 8002226:	4013      	ands	r3, r2
 8002228:	2b10      	cmp	r3, #16
 800222a:	d125      	bne.n	8002278 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2210      	movs	r2, #16
 8002234:	4013      	ands	r3, r2
 8002236:	2b10      	cmp	r3, #16
 8002238:	d11e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2211      	movs	r2, #17
 8002240:	4252      	negs	r2, r2
 8002242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2208      	movs	r2, #8
 8002248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d004      	beq.n	8002262 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f890 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002260:	e007      	b.n	8002272 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f883 	bl	8002370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f88f 	bl	8002390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2201      	movs	r2, #1
 8002280:	4013      	ands	r3, r2
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10f      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	2b01      	cmp	r3, #1
 8002292:	d108      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2202      	movs	r2, #2
 800229a:	4252      	negs	r2, r2
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe f965 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d10f      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	4013      	ands	r3, r2
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d108      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2281      	movs	r2, #129	; 0x81
 80022c8:	4252      	negs	r2, r2
 80022ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 f900 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	401a      	ands	r2, r3
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d10e      	bne.n	8002306 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d107      	bne.n	8002306 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_TIM_IRQHandler+0x260>)
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f8ef 	bl	80024e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2240      	movs	r2, #64	; 0x40
 800230e:	4013      	ands	r3, r2
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d10f      	bne.n	8002334 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	4013      	ands	r3, r2
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d108      	bne.n	8002334 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2241      	movs	r2, #65	; 0x41
 8002328:	4252      	negs	r2, r2
 800232a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f836 	bl	80023a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2220      	movs	r2, #32
 800233c:	4013      	ands	r3, r2
 800233e:	2b20      	cmp	r3, #32
 8002340:	d10f      	bne.n	8002362 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	4013      	ands	r3, r2
 800234c:	2b20      	cmp	r3, #32
 800234e:	d108      	bne.n	8002362 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2221      	movs	r2, #33	; 0x21
 8002356:	4252      	negs	r2, r2
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 f8b1 	bl	80024c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	fffffeff 	.word	0xfffffeff

08002370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a38      	ldr	r2, [pc, #224]	; (80024a4 <TIM_Base_SetConfig+0xf4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00c      	beq.n	80023e2 <TIM_Base_SetConfig+0x32>
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x32>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <TIM_Base_SetConfig+0xf8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x32>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a33      	ldr	r2, [pc, #204]	; (80024ac <TIM_Base_SetConfig+0xfc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2270      	movs	r2, #112	; 0x70
 80023e6:	4393      	bics	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <TIM_Base_SetConfig+0xf4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01c      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	05db      	lsls	r3, r3, #23
 8002402:	429a      	cmp	r2, r3
 8002404:	d017      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <TIM_Base_SetConfig+0xf8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <TIM_Base_SetConfig+0xfc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00f      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <TIM_Base_SetConfig+0x100>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00b      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <TIM_Base_SetConfig+0x104>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <TIM_Base_SetConfig+0x108>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0x86>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a22      	ldr	r2, [pc, #136]	; (80024bc <TIM_Base_SetConfig+0x10c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d108      	bne.n	8002448 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <TIM_Base_SetConfig+0x110>)
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	4393      	bics	r3, r2
 800244e:	001a      	movs	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <TIM_Base_SetConfig+0xf4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00b      	beq.n	800248e <TIM_Base_SetConfig+0xde>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <TIM_Base_SetConfig+0x104>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0xde>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <TIM_Base_SetConfig+0x108>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0xde>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <TIM_Base_SetConfig+0x10c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d103      	bne.n	8002496 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	615a      	str	r2, [r3, #20]
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800
 80024b0:	40002000 	.word	0x40002000
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800
 80024c0:	fffffcff 	.word	0xfffffcff

080024c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <__NVIC_SetPriority>:
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	0002      	movs	r2, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b7f      	cmp	r3, #127	; 0x7f
 8002508:	d828      	bhi.n	800255c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800250a:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <__NVIC_SetPriority+0xd4>)
 800250c:	1dfb      	adds	r3, r7, #7
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b25b      	sxtb	r3, r3
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	33c0      	adds	r3, #192	; 0xc0
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	589b      	ldr	r3, [r3, r2]
 800251a:	1dfa      	adds	r2, r7, #7
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	0011      	movs	r1, r2
 8002520:	2203      	movs	r2, #3
 8002522:	400a      	ands	r2, r1
 8002524:	00d2      	lsls	r2, r2, #3
 8002526:	21ff      	movs	r1, #255	; 0xff
 8002528:	4091      	lsls	r1, r2
 800252a:	000a      	movs	r2, r1
 800252c:	43d2      	mvns	r2, r2
 800252e:	401a      	ands	r2, r3
 8002530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	22ff      	movs	r2, #255	; 0xff
 8002538:	401a      	ands	r2, r3
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	0018      	movs	r0, r3
 8002540:	2303      	movs	r3, #3
 8002542:	4003      	ands	r3, r0
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002548:	481f      	ldr	r0, [pc, #124]	; (80025c8 <__NVIC_SetPriority+0xd4>)
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	430a      	orrs	r2, r1
 8002554:	33c0      	adds	r3, #192	; 0xc0
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	501a      	str	r2, [r3, r0]
}
 800255a:	e031      	b.n	80025c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <__NVIC_SetPriority+0xd8>)
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	0019      	movs	r1, r3
 8002564:	230f      	movs	r3, #15
 8002566:	400b      	ands	r3, r1
 8002568:	3b08      	subs	r3, #8
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3306      	adds	r3, #6
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	18d3      	adds	r3, r2, r3
 8002572:	3304      	adds	r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1dfa      	adds	r2, r7, #7
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	0011      	movs	r1, r2
 800257c:	2203      	movs	r2, #3
 800257e:	400a      	ands	r2, r1
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	21ff      	movs	r1, #255	; 0xff
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	43d2      	mvns	r2, r2
 800258a:	401a      	ands	r2, r3
 800258c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	401a      	ands	r2, r3
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	2303      	movs	r3, #3
 800259e:	4003      	ands	r3, r0
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a4:	4809      	ldr	r0, [pc, #36]	; (80025cc <__NVIC_SetPriority+0xd8>)
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	001c      	movs	r4, r3
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	3b08      	subs	r3, #8
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	430a      	orrs	r2, r1
 80025b6:	3306      	adds	r3, #6
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	18c3      	adds	r3, r0, r3
 80025bc:	3304      	adds	r3, #4
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b003      	add	sp, #12
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SysTick_Handler+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025d8:	f001 fb90 	bl	8003cfc <xTaskGetSchedulerState>
 80025dc:	0003      	movs	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025e2:	f002 f861 	bl	80046a8 <xPortSysTickHandler>
  }
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025f4:	2305      	movs	r3, #5
 80025f6:	425b      	negs	r3, r3
 80025f8:	2100      	movs	r1, #0
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff7a 	bl	80024f4 <__NVIC_SetPriority>
#endif
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260e:	f3ef 8305 	mrs	r3, IPSR
 8002612:	603b      	str	r3, [r7, #0]
  return(result);
 8002614:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800261a:	2306      	movs	r3, #6
 800261c:	425b      	negs	r3, r3
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	e00c      	b.n	800263c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <osKernelInitialize+0x40>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <osKernelInitialize+0x40>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	e002      	b.n	800263c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002636:	2301      	movs	r3, #1
 8002638:	425b      	negs	r3, r3
 800263a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b002      	add	sp, #8
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	2000002c 	.word	0x2000002c

0800264c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002652:	f3ef 8305 	mrs	r3, IPSR
 8002656:	603b      	str	r3, [r7, #0]
  return(result);
 8002658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <osKernelStart+0x1a>
    stat = osErrorISR;
 800265e:	2306      	movs	r3, #6
 8002660:	425b      	negs	r3, r3
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	e010      	b.n	8002688 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <osKernelStart+0x48>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d109      	bne.n	8002682 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800266e:	f7ff ffbf 	bl	80025f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <osKernelStart+0x48>)
 8002674:	2202      	movs	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002678:	f000 ff6e 	bl	8003558 <vTaskStartScheduler>
      stat = osOK;
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	e002      	b.n	8002688 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002682:	2301      	movs	r3, #1
 8002684:	425b      	negs	r3, r3
 8002686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b002      	add	sp, #8
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	2000002c 	.word	0x2000002c

08002698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b08e      	sub	sp, #56	; 0x38
 800269c:	af04      	add	r7, sp, #16
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a8:	f3ef 8305 	mrs	r3, IPSR
 80026ac:	617b      	str	r3, [r7, #20]
  return(result);
 80026ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d000      	beq.n	80026b6 <osThreadNew+0x1e>
 80026b4:	e081      	b.n	80027ba <osThreadNew+0x122>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d100      	bne.n	80026be <osThreadNew+0x26>
 80026bc:	e07d      	b.n	80027ba <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80026c2:	2318      	movs	r3, #24
 80026c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	425b      	negs	r3, r3
 80026ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <osThreadNew+0x4c>
        name = attr->name;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <osThreadNew+0x70>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b38      	cmp	r3, #56	; 0x38
 80026fc:	d804      	bhi.n	8002708 <osThreadNew+0x70>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d001      	beq.n	800270c <osThreadNew+0x74>
        return (NULL);
 8002708:	2300      	movs	r3, #0
 800270a:	e057      	b.n	80027bc <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <osThreadNew+0xaa>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b5b      	cmp	r3, #91	; 0x5b
 800272a:	d90a      	bls.n	8002742 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <osThreadNew+0xaa>
        mem = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e010      	b.n	8002764 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <osThreadNew+0xcc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <osThreadNew+0xcc>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <osThreadNew+0xcc>
          mem = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e001      	b.n	8002764 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d112      	bne.n	8002790 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002772:	68bd      	ldr	r5, [r7, #8]
 8002774:	6a3c      	ldr	r4, [r7, #32]
 8002776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	9201      	str	r2, [sp, #4]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	002b      	movs	r3, r5
 8002784:	0022      	movs	r2, r4
 8002786:	f000 fd3e 	bl	8003206 <xTaskCreateStatic>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	e014      	b.n	80027ba <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d111      	bne.n	80027ba <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	b29a      	uxth	r2, r3
 800279a:	68bc      	ldr	r4, [r7, #8]
 800279c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	2310      	movs	r3, #16
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	0023      	movs	r3, r4
 80027ac:	f000 fd6f 	bl	800328e <xTaskCreate>
 80027b0:	0003      	movs	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <osThreadNew+0x122>
            hTask = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027ba:	693b      	ldr	r3, [r7, #16]
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b00a      	add	sp, #40	; 0x28
 80027c2:	bdb0      	pop	{r4, r5, r7, pc}

080027c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027cc:	f3ef 8305 	mrs	r3, IPSR
 80027d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80027d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <osDelay+0x1c>
    stat = osErrorISR;
 80027d8:	2306      	movs	r3, #6
 80027da:	425b      	negs	r3, r3
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e008      	b.n	80027f2 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <osDelay+0x2e>
      vTaskDelay(ticks);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fe8d 	bl	800350c <vTaskDelay>
    }
  }

  return (stat);
 80027f2:	68fb      	ldr	r3, [r7, #12]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}

080027fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <vApplicationGetIdleTaskMemory+0x28>)
 800280c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4a05      	ldr	r2, [pc, #20]	; (8002828 <vApplicationGetIdleTaskMemory+0x2c>)
 8002812:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b004      	add	sp, #16
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000030 	.word	0x20000030
 8002828:	2000008c 	.word	0x2000008c

0800282c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a06      	ldr	r2, [pc, #24]	; (8002854 <vApplicationGetTimerTaskMemory+0x28>)
 800283c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4a05      	ldr	r2, [pc, #20]	; (8002858 <vApplicationGetTimerTaskMemory+0x2c>)
 8002842:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0052      	lsls	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b004      	add	sp, #16
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000028c 	.word	0x2000028c
 8002858:	200002e8 	.word	0x200002e8

0800285c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3308      	adds	r3, #8
 8002868:	001a      	movs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	4252      	negs	r2, r2
 8002874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3308      	adds	r3, #8
 800287a:	001a      	movs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3308      	adds	r3, #8
 8002884:	001a      	movs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}

08002898 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b002      	add	sp, #8
 80028ac:	bd80      	pop	{r7, pc}

080028ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	d103      	bne.n	8002910 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e00c      	b.n	800292a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3308      	adds	r3, #8
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e002      	b.n	800291e <vListInsert+0x2c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d2f6      	bcs.n	8002918 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}

0800295e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6892      	ldr	r2, [r2, #8]
 8002974:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6852      	ldr	r2, [r2, #4]
 800297e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d103      	bne.n	8002992 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}

080029ae <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <xQueueGenericReset+0x18>
 80029c2:	b672      	cpsid	i
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80029c6:	f001 fe13 	bl	80045f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	434b      	muls	r3, r1
 80029d8:	18d2      	adds	r2, r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	1e59      	subs	r1, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	434b      	muls	r3, r1
 80029fc:	18d2      	adds	r2, r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2244      	movs	r2, #68	; 0x44
 8002a06:	21ff      	movs	r1, #255	; 0xff
 8002a08:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2245      	movs	r2, #69	; 0x45
 8002a0e:	21ff      	movs	r1, #255	; 0xff
 8002a10:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3310      	adds	r3, #16
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 ffd7 	bl	80039d8 <xTaskRemoveFromEventList>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d00c      	beq.n	8002a48 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a2e:	f001 fdcf 	bl	80045d0 <vPortYield>
 8002a32:	e009      	b.n	8002a48 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3310      	adds	r3, #16
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff ff0f 	bl	800285c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff ff0a 	bl	800285c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a48:	f001 fde4 	bl	8004614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a56:	b590      	push	{r4, r7, lr}
 8002a58:	b089      	sub	sp, #36	; 0x24
 8002a5a:	af02      	add	r7, sp, #8
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <xQueueGenericCreateStatic+0x18>
 8002a6a:	b672      	cpsid	i
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <xQueueGenericCreateStatic+0x22>
 8002a74:	b672      	cpsid	i
 8002a76:	e7fe      	b.n	8002a76 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <xQueueGenericCreateStatic+0x2e>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <xQueueGenericCreateStatic+0x32>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <xQueueGenericCreateStatic+0x34>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <xQueueGenericCreateStatic+0x3c>
 8002a8e:	b672      	cpsid	i
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <xQueueGenericCreateStatic+0x48>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <xQueueGenericCreateStatic+0x4c>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <xQueueGenericCreateStatic+0x4e>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <xQueueGenericCreateStatic+0x56>
 8002aa8:	b672      	cpsid	i
 8002aaa:	e7fe      	b.n	8002aaa <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aac:	2350      	movs	r3, #80	; 0x50
 8002aae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b50      	cmp	r3, #80	; 0x50
 8002ab4:	d001      	beq.n	8002aba <xQueueGenericCreateStatic+0x64>
 8002ab6:	b672      	cpsid	i
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002aba:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2246      	movs	r2, #70	; 0x46
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ace:	2328      	movs	r3, #40	; 0x28
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	781c      	ldrb	r4, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	0023      	movs	r3, r4
 8002ae0:	f000 f805 	bl	8002aee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ae4:	697b      	ldr	r3, [r7, #20]
	}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b007      	add	sp, #28
 8002aec:	bd90      	pop	{r4, r7, pc}

08002aee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	001a      	movs	r2, r3
 8002afc:	1cfb      	adds	r3, r7, #3
 8002afe:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e002      	b.n	8002b14 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2101      	movs	r1, #1
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff ff42 	bl	80029ae <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1cfa      	adds	r2, r7, #3
 8002b2e:	214c      	movs	r1, #76	; 0x4c
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <xQueueGenericSend+0x20>
 8002b58:	b672      	cpsid	i
 8002b5a:	e7fe      	b.n	8002b5a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x2e>
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <xQueueGenericSend+0x32>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <xQueueGenericSend+0x34>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <xQueueGenericSend+0x3c>
 8002b74:	b672      	cpsid	i
 8002b76:	e7fe      	b.n	8002b76 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d103      	bne.n	8002b86 <xQueueGenericSend+0x4a>
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <xQueueGenericSend+0x4e>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <xQueueGenericSend+0x50>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <xQueueGenericSend+0x58>
 8002b90:	b672      	cpsid	i
 8002b92:	e7fe      	b.n	8002b92 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b94:	f001 f8b2 	bl	8003cfc <xTaskGetSchedulerState>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d102      	bne.n	8002ba2 <xQueueGenericSend+0x66>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericSend+0x6a>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericSend+0x6c>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <xQueueGenericSend+0x74>
 8002bac:	b672      	cpsid	i
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bb0:	f001 fd1e 	bl	80045f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <xQueueGenericSend+0x8a>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d11e      	bne.n	8002c04 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f9a2 	bl	8002f16 <prvCopyDataToQueue>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	3324      	adds	r3, #36	; 0x24
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fef8 	bl	80039d8 <xTaskRemoveFromEventList>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d007      	beq.n	8002bfc <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bec:	f001 fcf0 	bl	80045d0 <vPortYield>
 8002bf0:	e004      	b.n	8002bfc <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bf8:	f001 fcea 	bl	80045d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bfc:	f001 fd0a 	bl	8004614 <vPortExitCritical>
				return pdPASS;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e05b      	b.n	8002cbc <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c0a:	f001 fd03 	bl	8004614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e054      	b.n	8002cbc <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c18:	2314      	movs	r3, #20
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 ff37 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c26:	f001 fcf5 	bl	8004614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c2a:	f000 fce9 	bl	8003600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c2e:	f001 fcdf 	bl	80045f0 <vPortEnterCritical>
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2244      	movs	r2, #68	; 0x44
 8002c36:	5c9b      	ldrb	r3, [r3, r2]
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSend+0x10a>
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	2244      	movs	r2, #68	; 0x44
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	2245      	movs	r2, #69	; 0x45
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	d103      	bne.n	8002c5a <xQueueGenericSend+0x11e>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2245      	movs	r2, #69	; 0x45
 8002c56:	2100      	movs	r1, #0
 8002c58:	5499      	strb	r1, [r3, r2]
 8002c5a:	f001 fcdb 	bl	8004614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c5e:	1d3a      	adds	r2, r7, #4
 8002c60:	2314      	movs	r3, #20
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	0011      	movs	r1, r2
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 ff26 	bl	8003ab8 <xTaskCheckForTimeOut>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d11e      	bne.n	8002cae <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fa54 	bl	8003120 <prvIsQueueFull>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d011      	beq.n	8002ca0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	3310      	adds	r3, #16
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 fe63 	bl	8003950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f9d3 	bl	8003038 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c92:	f000 fcc1 	bl	8003618 <xTaskResumeAll>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d18a      	bne.n	8002bb0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002c9a:	f001 fc99 	bl	80045d0 <vPortYield>
 8002c9e:	e787      	b.n	8002bb0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 f9c8 	bl	8003038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ca8:	f000 fcb6 	bl	8003618 <xTaskResumeAll>
 8002cac:	e780      	b.n	8002bb0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 f9c1 	bl	8003038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cb6:	f000 fcaf 	bl	8003618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b00a      	add	sp, #40	; 0x28
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b08b      	sub	sp, #44	; 0x2c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericSendFromISR+0x1c>
 8002cdc:	b672      	cpsid	i
 8002cde:	e7fe      	b.n	8002cde <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <xQueueGenericSendFromISR+0x2a>
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <xQueueGenericSendFromISR+0x2e>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <xQueueGenericSendFromISR+0x30>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <xQueueGenericSendFromISR+0x38>
 8002cf8:	b672      	cpsid	i
 8002cfa:	e7fe      	b.n	8002cfa <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSendFromISR+0x46>
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <xQueueGenericSendFromISR+0x4a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericSendFromISR+0x4c>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <xQueueGenericSendFromISR+0x54>
 8002d14:	b672      	cpsid	i
 8002d16:	e7fe      	b.n	8002d16 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d18:	f001 fc94 	bl	8004644 <ulSetInterruptMaskFromISR>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <xQueueGenericSendFromISR+0x6e>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d131      	bne.n	8002d96 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d32:	241b      	movs	r4, #27
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	2145      	movs	r1, #69	; 0x45
 8002d3a:	5c52      	ldrb	r2, [r2, r1]
 8002d3c:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8e3 	bl	8002f16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	d111      	bne.n	8002d7e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 fe36 	bl	80039d8 <xTaskRemoveFromEventList>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d00f      	beq.n	8002d90 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e008      	b.n	8002d90 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d7e:	231b      	movs	r3, #27
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	b259      	sxtb	r1, r3
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2245      	movs	r2, #69	; 0x45
 8002d8e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8002d94:	e001      	b.n	8002d9a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f001 fc57 	bl	8004650 <vClearInterruptMaskFromISR>

	return xReturn;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b00b      	add	sp, #44	; 0x2c
 8002daa:	bd90      	pop	{r4, r7, pc}

08002dac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <xQueueReceive+0x1e>
 8002dc6:	b672      	cpsid	i
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <xQueueReceive+0x2c>
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <xQueueReceive+0x30>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <xQueueReceive+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <xQueueReceive+0x3a>
 8002de2:	b672      	cpsid	i
 8002de4:	e7fe      	b.n	8002de4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002de6:	f000 ff89 	bl	8003cfc <xTaskGetSchedulerState>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d102      	bne.n	8002df4 <xQueueReceive+0x48>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <xQueueReceive+0x4c>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <xQueueReceive+0x4e>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <xQueueReceive+0x56>
 8002dfe:	b672      	cpsid	i
 8002e00:	e7fe      	b.n	8002e00 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e02:	f001 fbf5 	bl	80045f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01a      	beq.n	8002e48 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	0011      	movs	r1, r2
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 f8e7 	bl	8002fec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	3310      	adds	r3, #16
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 fdd0 	bl	80039d8 <xTaskRemoveFromEventList>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e3c:	f001 fbc8 	bl	80045d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e40:	f001 fbe8 	bl	8004614 <vPortExitCritical>
				return pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e062      	b.n	8002f0e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4e:	f001 fbe1 	bl	8004614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e05b      	b.n	8002f0e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e5c:	2314      	movs	r3, #20
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 fe15 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6a:	f001 fbd3 	bl	8004614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6e:	f000 fbc7 	bl	8003600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e72:	f001 fbbd 	bl	80045f0 <vPortEnterCritical>
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2244      	movs	r2, #68	; 0x44
 8002e7a:	5c9b      	ldrb	r3, [r3, r2]
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	d103      	bne.n	8002e8a <xQueueReceive+0xde>
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2244      	movs	r2, #68	; 0x44
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2245      	movs	r2, #69	; 0x45
 8002e8e:	5c9b      	ldrb	r3, [r3, r2]
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	d103      	bne.n	8002e9e <xQueueReceive+0xf2>
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2245      	movs	r2, #69	; 0x45
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]
 8002e9e:	f001 fbb9 	bl	8004614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea2:	1d3a      	adds	r2, r7, #4
 8002ea4:	2314      	movs	r3, #20
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fe04 	bl	8003ab8 <xTaskCheckForTimeOut>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d11e      	bne.n	8002ef2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f91c 	bl	80030f4 <prvIsQueueEmpty>
 8002ebc:	1e03      	subs	r3, r0, #0
 8002ebe:	d011      	beq.n	8002ee4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3324      	adds	r3, #36	; 0x24
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 fd41 	bl	8003950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 f8b1 	bl	8003038 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ed6:	f000 fb9f 	bl	8003618 <xTaskResumeAll>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d191      	bne.n	8002e02 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002ede:	f001 fb77 	bl	80045d0 <vPortYield>
 8002ee2:	e78e      	b.n	8002e02 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f8a6 	bl	8003038 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eec:	f000 fb94 	bl	8003618 <xTaskResumeAll>
 8002ef0:	e787      	b.n	8002e02 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f89f 	bl	8003038 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efa:	f000 fb8d 	bl	8003618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f8f7 	bl	80030f4 <prvIsQueueEmpty>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d100      	bne.n	8002f0c <xQueueReceive+0x160>
 8002f0a:	e77a      	b.n	8002e02 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b00a      	add	sp, #40	; 0x28
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10e      	bne.n	8002f52 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d14e      	bne.n	8002fda <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fef7 	bl	8003d34 <xTaskPriorityDisinherit>
 8002f46:	0003      	movs	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e043      	b.n	8002fda <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d119      	bne.n	8002f8c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6858      	ldr	r0, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0019      	movs	r1, r3
 8002f64:	f001 fdb2 	bl	8004acc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	18d2      	adds	r2, r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d32b      	bcc.n	8002fda <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	e026      	b.n	8002fda <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68d8      	ldr	r0, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0019      	movs	r1, r3
 8002f98:	f001 fd98 	bl	8004acc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	425b      	negs	r3, r3
 8002fa6:	18d2      	adds	r2, r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d207      	bcs.n	8002fc8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	425b      	negs	r3, r3
 8002fc2:	18d2      	adds	r2, r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d105      	bne.n	8002fda <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fe2:	697b      	ldr	r3, [r7, #20]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b006      	add	sp, #24
 8002fea:	bd80      	pop	{r7, pc}

08002fec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	18d2      	adds	r2, r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d303      	bcc.n	8003020 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68d9      	ldr	r1, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	0018      	movs	r0, r3
 800302c:	f001 fd4e 	bl	8004acc <memcpy>
	}
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003040:	f001 fad6 	bl	80045f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003044:	230f      	movs	r3, #15
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	2145      	movs	r1, #69	; 0x45
 800304c:	5c52      	ldrb	r2, [r2, r1]
 800304e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003050:	e013      	b.n	800307a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3324      	adds	r3, #36	; 0x24
 800305e:	0018      	movs	r0, r3
 8003060:	f000 fcba 	bl	80039d8 <xTaskRemoveFromEventList>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003068:	f000 fd76 	bl	8003b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800306c:	210f      	movs	r1, #15
 800306e:	187b      	adds	r3, r7, r1
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	3b01      	subs	r3, #1
 8003074:	b2da      	uxtb	r2, r3
 8003076:	187b      	adds	r3, r7, r1
 8003078:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307a:	230f      	movs	r3, #15
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b25b      	sxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce5      	bgt.n	8003052 <prvUnlockQueue+0x1a>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x52>
					break;
 8003088:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2245      	movs	r2, #69	; 0x45
 800308e:	21ff      	movs	r1, #255	; 0xff
 8003090:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003092:	f001 fabf 	bl	8004614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003096:	f001 faab 	bl	80045f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309a:	230e      	movs	r3, #14
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	2144      	movs	r1, #68	; 0x44
 80030a2:	5c52      	ldrb	r2, [r2, r1]
 80030a4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a6:	e013      	b.n	80030d0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3310      	adds	r3, #16
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 fc8f 	bl	80039d8 <xTaskRemoveFromEventList>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d001      	beq.n	80030c2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80030be:	f000 fd4b 	bl	8003b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c2:	210e      	movs	r1, #14
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030d0:	230e      	movs	r3, #14
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	dce5      	bgt.n	80030a8 <prvUnlockQueue+0x70>
 80030dc:	e000      	b.n	80030e0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80030de:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2244      	movs	r2, #68	; 0x44
 80030e4:	21ff      	movs	r1, #255	; 0xff
 80030e6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80030e8:	f001 fa94 	bl	8004614 <vPortExitCritical>
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030fc:	f001 fa78 	bl	80045f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003108:	2301      	movs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e001      	b.n	8003112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f001 fa7f 	bl	8004614 <vPortExitCritical>

	return xReturn;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b004      	add	sp, #16
 800311e:	bd80      	pop	{r7, pc}

08003120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003128:	f001 fa62 	bl	80045f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	429a      	cmp	r2, r3
 8003136:	d102      	bne.n	800313e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e001      	b.n	8003142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003142:	f001 fa67 	bl	8004614 <vPortExitCritical>

	return xReturn;
 8003146:	68fb      	ldr	r3, [r7, #12]
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}

08003150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e015      	b.n	800318c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <vQueueAddToRegistry+0x4c>)
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	00d2      	lsls	r2, r2, #3
 8003166:	58d3      	ldr	r3, [r2, r3]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <vQueueAddToRegistry+0x4c>)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	00d2      	lsls	r2, r2, #3
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <vQueueAddToRegistry+0x4c>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	3304      	adds	r3, #4
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003184:	e006      	b.n	8003194 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b07      	cmp	r3, #7
 8003190:	d9e6      	bls.n	8003160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b004      	add	sp, #16
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200019f0 	.word	0x200019f0

080031a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031b0:	f001 fa1e 	bl	80045f0 <vPortEnterCritical>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2244      	movs	r2, #68	; 0x44
 80031b8:	5c9b      	ldrb	r3, [r3, r2]
 80031ba:	b25b      	sxtb	r3, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	d103      	bne.n	80031c8 <vQueueWaitForMessageRestricted+0x28>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2244      	movs	r2, #68	; 0x44
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2245      	movs	r2, #69	; 0x45
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	d103      	bne.n	80031dc <vQueueWaitForMessageRestricted+0x3c>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2245      	movs	r2, #69	; 0x45
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]
 80031dc:	f001 fa1a 	bl	8004614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3324      	adds	r3, #36	; 0x24
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 fbcb 	bl	800398c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff ff1d 	bl	8003038 <prvUnlockQueue>
	}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}

08003206 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003206:	b590      	push	{r4, r7, lr}
 8003208:	b08d      	sub	sp, #52	; 0x34
 800320a:	af04      	add	r7, sp, #16
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xTaskCreateStatic+0x18>
 800321a:	b672      	cpsid	i
 800321c:	e7fe      	b.n	800321c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <xTaskCreateStatic+0x22>
 8003224:	b672      	cpsid	i
 8003226:	e7fe      	b.n	8003226 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003228:	235c      	movs	r3, #92	; 0x5c
 800322a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b5c      	cmp	r3, #92	; 0x5c
 8003230:	d001      	beq.n	8003236 <xTaskCreateStatic+0x30>
 8003232:	b672      	cpsid	i
 8003234:	e7fe      	b.n	8003234 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003236:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <xTaskCreateStatic+0x7a>
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01d      	beq.n	8003280 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800324c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2259      	movs	r2, #89	; 0x59
 8003252:	2102      	movs	r1, #2
 8003254:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003256:	683c      	ldr	r4, [r7, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	9303      	str	r3, [sp, #12]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	9302      	str	r3, [sp, #8]
 8003266:	2318      	movs	r3, #24
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	0023      	movs	r3, r4
 8003272:	f000 f859 	bl	8003328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f8df 	bl	800343c <prvAddNewTaskToReadyList>
 800327e:	e001      	b.n	8003284 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003284:	69bb      	ldr	r3, [r7, #24]
	}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b009      	add	sp, #36	; 0x24
 800328c:	bd90      	pop	{r4, r7, pc}

0800328e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800328e:	b590      	push	{r4, r7, lr}
 8003290:	b08d      	sub	sp, #52	; 0x34
 8003292:	af04      	add	r7, sp, #16
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	1dbb      	adds	r3, r7, #6
 800329c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800329e:	1dbb      	adds	r3, r7, #6
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f001 fa3b 	bl	8004720 <pvPortMalloc>
 80032aa:	0003      	movs	r3, r0
 80032ac:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032b4:	205c      	movs	r0, #92	; 0x5c
 80032b6:	f001 fa33 	bl	8004720 <pvPortMalloc>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ca:	e006      	b.n	80032da <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f001 fad2 	bl	8004878 <vPortFree>
 80032d4:	e001      	b.n	80032da <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01a      	beq.n	8003316 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2259      	movs	r2, #89	; 0x59
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032e8:	1dbb      	adds	r3, r7, #6
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	683c      	ldr	r4, [r7, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	2300      	movs	r3, #0
 80032f4:	9303      	str	r3, [sp, #12]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	0023      	movs	r3, r4
 8003304:	f000 f810 	bl	8003328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f896 	bl	800343c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003310:	2301      	movs	r3, #1
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e002      	b.n	800331c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003316:	2301      	movs	r3, #1
 8003318:	425b      	negs	r3, r3
 800331a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800331c:	69bb      	ldr	r3, [r7, #24]
	}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b009      	add	sp, #36	; 0x24
 8003324:	bd90      	pop	{r4, r7, pc}
	...

08003328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	001a      	movs	r2, r3
 8003340:	21a5      	movs	r1, #165	; 0xa5
 8003342:	f001 fbcc 	bl	8004ade <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	493a      	ldr	r1, [pc, #232]	; (8003438 <prvInitialiseNewTask+0x110>)
 800334e:	468c      	mov	ip, r1
 8003350:	4463      	add	r3, ip
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	18d3      	adds	r3, r2, r3
 8003356:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2207      	movs	r2, #7
 800335c:	4393      	bics	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2207      	movs	r2, #7
 8003364:	4013      	ands	r3, r2
 8003366:	d001      	beq.n	800336c <prvInitialiseNewTask+0x44>
 8003368:	b672      	cpsid	i
 800336a:	e7fe      	b.n	800336a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d020      	beq.n	80033b4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e013      	b.n	80033a0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	7818      	ldrb	r0, [r3, #0]
 8003380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003382:	2134      	movs	r1, #52	; 0x34
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	18d3      	adds	r3, r2, r3
 8003388:	185b      	adds	r3, r3, r1
 800338a:	1c02      	adds	r2, r0, #0
 800338c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	18d3      	adds	r3, r2, r3
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	d9e8      	bls.n	8003378 <prvInitialiseNewTask+0x50>
 80033a6:	e000      	b.n	80033aa <prvInitialiseNewTask+0x82>
			{
				break;
 80033a8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	2243      	movs	r2, #67	; 0x43
 80033ae:	2100      	movs	r1, #0
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	e003      	b.n	80033bc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	2234      	movs	r2, #52	; 0x34
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b37      	cmp	r3, #55	; 0x37
 80033c0:	d901      	bls.n	80033c6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033c2:	2337      	movs	r3, #55	; 0x37
 80033c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	2200      	movs	r2, #0
 80033d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	3304      	adds	r3, #4
 80033dc:	0018      	movs	r0, r3
 80033de:	f7ff fa5b 	bl	8002898 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	3318      	adds	r3, #24
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff fa56 	bl	8002898 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2238      	movs	r2, #56	; 0x38
 80033f6:	1ad2      	subs	r2, r2, r3
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	2200      	movs	r2, #0
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2258      	movs	r2, #88	; 0x58
 800340c:	2100      	movs	r1, #0
 800340e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	0018      	movs	r0, r3
 8003418:	f001 f84e 	bl	80044b8 <pxPortInitialiseStack>
 800341c:	0002      	movs	r2, r0
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b006      	add	sp, #24
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	3fffffff 	.word	0x3fffffff

0800343c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003444:	f001 f8d4 	bl	80045f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <prvAddNewTaskToReadyList+0xb8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <prvAddNewTaskToReadyList+0xb8>)
 8003450:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <prvAddNewTaskToReadyList+0xbc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <prvAddNewTaskToReadyList+0xbc>)
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003460:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <prvAddNewTaskToReadyList+0xb8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d110      	bne.n	800348a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003468:	f000 fb90 	bl	8003b8c <prvInitialiseTaskLists>
 800346c:	e00d      	b.n	800348a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <prvAddNewTaskToReadyList+0xc0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <prvAddNewTaskToReadyList+0xbc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	429a      	cmp	r2, r3
 8003482:	d802      	bhi.n	800348a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <prvAddNewTaskToReadyList+0xbc>)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <prvAddNewTaskToReadyList+0xc4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <prvAddNewTaskToReadyList+0xc4>)
 8003492:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <prvAddNewTaskToReadyList+0xc4>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <prvAddNewTaskToReadyList+0xc8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d903      	bls.n	80034b0 <prvAddNewTaskToReadyList+0x74>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <prvAddNewTaskToReadyList+0xc8>)
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	0013      	movs	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4a12      	ldr	r2, [pc, #72]	; (8003508 <prvAddNewTaskToReadyList+0xcc>)
 80034be:	189a      	adds	r2, r3, r2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	0019      	movs	r1, r3
 80034c6:	0010      	movs	r0, r2
 80034c8:	f7ff f9f1 	bl	80028ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034cc:	f001 f8a2 	bl	8004614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <prvAddNewTaskToReadyList+0xc0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <prvAddNewTaskToReadyList+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d201      	bcs.n	80034ea <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034e6:	f001 f873 	bl	80045d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000bbc 	.word	0x20000bbc
 80034f8:	200006e8 	.word	0x200006e8
 80034fc:	20000bc8 	.word	0x20000bc8
 8003500:	20000bd8 	.word	0x20000bd8
 8003504:	20000bc4 	.word	0x20000bc4
 8003508:	200006ec 	.word	0x200006ec

0800350c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <vTaskDelay+0x48>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <vTaskDelay+0x1e>
 8003526:	b672      	cpsid	i
 8003528:	e7fe      	b.n	8003528 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800352a:	f000 f869 	bl	8003600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2100      	movs	r1, #0
 8003532:	0018      	movs	r0, r3
 8003534:	f000 fc5a 	bl	8003dec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003538:	f000 f86e 	bl	8003618 <xTaskResumeAll>
 800353c:	0003      	movs	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003546:	f001 f843 	bl	80045d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	20000be4 	.word	0x20000be4

08003558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003566:	003a      	movs	r2, r7
 8003568:	1d39      	adds	r1, r7, #4
 800356a:	2308      	movs	r3, #8
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	0018      	movs	r0, r3
 8003570:	f7ff f944 	bl	80027fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003574:	683c      	ldr	r4, [r7, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	491b      	ldr	r1, [pc, #108]	; (80035e8 <vTaskStartScheduler+0x90>)
 800357c:	481b      	ldr	r0, [pc, #108]	; (80035ec <vTaskStartScheduler+0x94>)
 800357e:	9202      	str	r2, [sp, #8]
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2300      	movs	r3, #0
 8003588:	0022      	movs	r2, r4
 800358a:	f7ff fe3c 	bl	8003206 <xTaskCreateStatic>
 800358e:	0002      	movs	r2, r0
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <vTaskStartScheduler+0x98>)
 8003592:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <vTaskStartScheduler+0x98>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800359c:	2301      	movs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e001      	b.n	80035a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d103      	bne.n	80035b4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80035ac:	f000 fc72 	bl	8003e94 <xTimerCreateTimerTask>
 80035b0:	0003      	movs	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10d      	bne.n	80035d6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80035ba:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <vTaskStartScheduler+0x9c>)
 80035be:	2201      	movs	r2, #1
 80035c0:	4252      	negs	r2, r2
 80035c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <vTaskStartScheduler+0xa0>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <vTaskStartScheduler+0xa4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035d0:	f000 ffda 	bl	8004588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035d4:	e004      	b.n	80035e0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	d101      	bne.n	80035e0 <vTaskStartScheduler+0x88>
 80035dc:	b672      	cpsid	i
 80035de:	e7fe      	b.n	80035de <vTaskStartScheduler+0x86>
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b005      	add	sp, #20
 80035e6:	bd90      	pop	{r4, r7, pc}
 80035e8:	08004b24 	.word	0x08004b24
 80035ec:	08003b6d 	.word	0x08003b6d
 80035f0:	20000be0 	.word	0x20000be0
 80035f4:	20000bdc 	.word	0x20000bdc
 80035f8:	20000bc8 	.word	0x20000bc8
 80035fc:	20000bc0 	.word	0x20000bc0

08003600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <vTaskSuspendAll+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	4b02      	ldr	r3, [pc, #8]	; (8003614 <vTaskSuspendAll+0x14>)
 800360c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000be4 	.word	0x20000be4

08003618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003626:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <xTaskResumeAll+0xf8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <xTaskResumeAll+0x1a>
 800362e:	b672      	cpsid	i
 8003630:	e7fe      	b.n	8003630 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003632:	f000 ffdd 	bl	80045f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <xTaskResumeAll+0xf8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	4b34      	ldr	r3, [pc, #208]	; (8003710 <xTaskResumeAll+0xf8>)
 800363e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003640:	4b33      	ldr	r3, [pc, #204]	; (8003710 <xTaskResumeAll+0xf8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d15b      	bne.n	8003700 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003648:	4b32      	ldr	r3, [pc, #200]	; (8003714 <xTaskResumeAll+0xfc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d057      	beq.n	8003700 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003650:	e02f      	b.n	80036b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <xTaskResumeAll+0x100>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3318      	adds	r3, #24
 800365e:	0018      	movs	r0, r3
 8003660:	f7ff f97d 	bl	800295e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3304      	adds	r3, #4
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff f978 	bl	800295e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <xTaskResumeAll+0x104>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d903      	bls.n	8003682 <xTaskResumeAll+0x6a>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <xTaskResumeAll+0x104>)
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	0013      	movs	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	189b      	adds	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <xTaskResumeAll+0x108>)
 8003690:	189a      	adds	r2, r3, r2
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3304      	adds	r3, #4
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f7ff f908 	bl	80028ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <xTaskResumeAll+0x10c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <xTaskResumeAll+0x110>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <xTaskResumeAll+0x100>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1cb      	bne.n	8003652 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036c0:	f000 fafe 	bl	8003cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <xTaskResumeAll+0x114>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00f      	beq.n	80036f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036d0:	f000 f83c 	bl	800374c <xTaskIncrementTick>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d002      	beq.n	80036de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <xTaskResumeAll+0x110>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f2      	bne.n	80036d0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <xTaskResumeAll+0x114>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <xTaskResumeAll+0x110>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036fc:	f000 ff68 	bl	80045d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003700:	f000 ff88 	bl	8004614 <vPortExitCritical>

	return xAlreadyYielded;
 8003704:	68bb      	ldr	r3, [r7, #8]
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000be4 	.word	0x20000be4
 8003714:	20000bbc 	.word	0x20000bbc
 8003718:	20000b7c 	.word	0x20000b7c
 800371c:	20000bc4 	.word	0x20000bc4
 8003720:	200006ec 	.word	0x200006ec
 8003724:	200006e8 	.word	0x200006e8
 8003728:	20000bd0 	.word	0x20000bd0
 800372c:	20000bcc 	.word	0x20000bcc

08003730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <xTaskGetTickCount+0x18>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	20000bc0 	.word	0x20000bc0

0800374c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003756:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <xTaskIncrementTick+0x134>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d000      	beq.n	8003760 <xTaskIncrementTick+0x14>
 800375e:	e084      	b.n	800386a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003760:	4b48      	ldr	r3, [pc, #288]	; (8003884 <xTaskIncrementTick+0x138>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003768:	4b46      	ldr	r3, [pc, #280]	; (8003884 <xTaskIncrementTick+0x138>)
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d117      	bne.n	80037a4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003774:	4b44      	ldr	r3, [pc, #272]	; (8003888 <xTaskIncrementTick+0x13c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <xTaskIncrementTick+0x36>
 800377e:	b672      	cpsid	i
 8003780:	e7fe      	b.n	8003780 <xTaskIncrementTick+0x34>
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <xTaskIncrementTick+0x13c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <xTaskIncrementTick+0x140>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <xTaskIncrementTick+0x13c>)
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	4b3e      	ldr	r3, [pc, #248]	; (800388c <xTaskIncrementTick+0x140>)
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <xTaskIncrementTick+0x144>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <xTaskIncrementTick+0x144>)
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f000 fa8e 	bl	8003cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <xTaskIncrementTick+0x148>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d349      	bcc.n	8003842 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <xTaskIncrementTick+0x13c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <xTaskIncrementTick+0x148>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	4252      	negs	r2, r2
 80037be:	601a      	str	r2, [r3, #0]
					break;
 80037c0:	e03f      	b.n	8003842 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <xTaskIncrementTick+0x13c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d203      	bcs.n	80037e2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <xTaskIncrementTick+0x148>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037e0:	e02f      	b.n	8003842 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3304      	adds	r3, #4
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7ff f8b9 	bl	800295e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3318      	adds	r3, #24
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7ff f8b0 	bl	800295e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <xTaskIncrementTick+0x14c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d903      	bls.n	8003812 <xTaskIncrementTick+0xc6>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <xTaskIncrementTick+0x14c>)
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	0013      	movs	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	189b      	adds	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <xTaskIncrementTick+0x150>)
 8003820:	189a      	adds	r2, r3, r2
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3304      	adds	r3, #4
 8003826:	0019      	movs	r1, r3
 8003828:	0010      	movs	r0, r2
 800382a:	f7ff f840 	bl	80028ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <xTaskIncrementTick+0x154>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	429a      	cmp	r2, r3
 800383a:	d3b8      	bcc.n	80037ae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003840:	e7b5      	b.n	80037ae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <xTaskIncrementTick+0x154>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	4914      	ldr	r1, [pc, #80]	; (800389c <xTaskIncrementTick+0x150>)
 800384a:	0013      	movs	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	189b      	adds	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	585b      	ldr	r3, [r3, r1]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d901      	bls.n	800385c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <xTaskIncrementTick+0x158>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e004      	b.n	8003874 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <xTaskIncrementTick+0x15c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <xTaskIncrementTick+0x15c>)
 8003872:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003874:	697b      	ldr	r3, [r7, #20]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b006      	add	sp, #24
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000be4 	.word	0x20000be4
 8003884:	20000bc0 	.word	0x20000bc0
 8003888:	20000b74 	.word	0x20000b74
 800388c:	20000b78 	.word	0x20000b78
 8003890:	20000bd4 	.word	0x20000bd4
 8003894:	20000bdc 	.word	0x20000bdc
 8003898:	20000bc4 	.word	0x20000bc4
 800389c:	200006ec 	.word	0x200006ec
 80038a0:	200006e8 	.word	0x200006e8
 80038a4:	20000bd0 	.word	0x20000bd0
 80038a8:	20000bcc 	.word	0x20000bcc

080038ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <vTaskSwitchContext+0x90>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <vTaskSwitchContext+0x94>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038c0:	e037      	b.n	8003932 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80038c2:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <vTaskSwitchContext+0x94>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <vTaskSwitchContext+0x98>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	e007      	b.n	80038e0 <vTaskSwitchContext+0x34>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <vTaskSwitchContext+0x2e>
 80038d6:	b672      	cpsid	i
 80038d8:	e7fe      	b.n	80038d8 <vTaskSwitchContext+0x2c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3b01      	subs	r3, #1
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	4919      	ldr	r1, [pc, #100]	; (8003948 <vTaskSwitchContext+0x9c>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	0013      	movs	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	585b      	ldr	r3, [r3, r1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <vTaskSwitchContext+0x24>
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	0013      	movs	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	189b      	adds	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <vTaskSwitchContext+0x9c>)
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	429a      	cmp	r2, r3
 8003916:	d104      	bne.n	8003922 <vTaskSwitchContext+0x76>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <vTaskSwitchContext+0xa0>)
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <vTaskSwitchContext+0x98>)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000be4 	.word	0x20000be4
 8003940:	20000bd0 	.word	0x20000bd0
 8003944:	20000bc4 	.word	0x20000bc4
 8003948:	200006ec 	.word	0x200006ec
 800394c:	200006e8 	.word	0x200006e8

08003950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <vTaskPlaceOnEventList+0x14>
 8003960:	b672      	cpsid	i
 8003962:	e7fe      	b.n	8003962 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <vTaskPlaceOnEventList+0x38>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3318      	adds	r3, #24
 800396a:	001a      	movs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f7fe ffbe 	bl	80028f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fa36 	bl	8003dec <prvAddCurrentTaskToDelayedList>
}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200006e8 	.word	0x200006e8

0800398c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <vTaskPlaceOnEventListRestricted+0x16>
 800399e:	b672      	cpsid	i
 80039a0:	e7fe      	b.n	80039a0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <vTaskPlaceOnEventListRestricted+0x48>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3318      	adds	r3, #24
 80039a8:	001a      	movs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7fe ff7d 	bl	80028ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80039ba:	2301      	movs	r3, #1
 80039bc:	425b      	negs	r3, r3
 80039be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	0011      	movs	r1, r2
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fa10 	bl	8003dec <prvAddCurrentTaskToDelayedList>
	}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b004      	add	sp, #16
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200006e8 	.word	0x200006e8

080039d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <xTaskRemoveFromEventList+0x1a>
 80039ee:	b672      	cpsid	i
 80039f0:	e7fe      	b.n	80039f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3318      	adds	r3, #24
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fe ffb1 	bl	800295e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <xTaskRemoveFromEventList+0xa0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11d      	bne.n	8003a40 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	3304      	adds	r3, #4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7fe ffa8 	bl	800295e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <xTaskRemoveFromEventList+0xa4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d903      	bls.n	8003a22 <xTaskRemoveFromEventList+0x4a>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xTaskRemoveFromEventList+0xa4>)
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	0013      	movs	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <xTaskRemoveFromEventList+0xa8>)
 8003a30:	189a      	adds	r2, r3, r2
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3304      	adds	r3, #4
 8003a36:	0019      	movs	r1, r3
 8003a38:	0010      	movs	r0, r2
 8003a3a:	f7fe ff38 	bl	80028ae <vListInsertEnd>
 8003a3e:	e007      	b.n	8003a50 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	3318      	adds	r3, #24
 8003a44:	001a      	movs	r2, r3
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <xTaskRemoveFromEventList+0xac>)
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fe ff2f 	bl	80028ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTaskRemoveFromEventList+0xb0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d905      	bls.n	8003a6a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xb4>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e001      	b.n	8003a6e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b004      	add	sp, #16
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000be4 	.word	0x20000be4
 8003a7c:	20000bc4 	.word	0x20000bc4
 8003a80:	200006ec 	.word	0x200006ec
 8003a84:	20000b7c 	.word	0x20000b7c
 8003a88:	200006e8 	.word	0x200006e8
 8003a8c:	20000bd0 	.word	0x20000bd0

08003a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <vTaskInternalSetTimeOutState+0x20>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000bd4 	.word	0x20000bd4
 8003ab4:	20000bc0 	.word	0x20000bc0

08003ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <xTaskCheckForTimeOut+0x14>
 8003ac8:	b672      	cpsid	i
 8003aca:	e7fe      	b.n	8003aca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <xTaskCheckForTimeOut+0x1e>
 8003ad2:	b672      	cpsid	i
 8003ad4:	e7fe      	b.n	8003ad4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003ad6:	f000 fd8b 	bl	80045f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <xTaskCheckForTimeOut+0x98>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	d102      	bne.n	8003af8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e024      	b.n	8003b42 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <xTaskCheckForTimeOut+0x9c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d007      	beq.n	8003b14 <xTaskCheckForTimeOut+0x5c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e016      	b.n	8003b42 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d20c      	bcs.n	8003b38 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7ff ffaf 	bl	8003a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e004      	b.n	8003b42 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003b42:	f000 fd67 	bl	8004614 <vPortExitCritical>

	return xReturn;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000bc0 	.word	0x20000bc0
 8003b54:	20000bd4 	.word	0x20000bd4

08003b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b5c:	4b02      	ldr	r3, [pc, #8]	; (8003b68 <vTaskMissedYield+0x10>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000bd0 	.word	0x20000bd0

08003b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b74:	f000 f84e 	bl	8003c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <prvIdleTask+0x1c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d9f9      	bls.n	8003b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b80:	f000 fd26 	bl	80045d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003b84:	e7f6      	b.n	8003b74 <prvIdleTask+0x8>
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	200006ec 	.word	0x200006ec

08003b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e00c      	b.n	8003bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	0013      	movs	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fe fe58 	bl	800285c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b37      	cmp	r3, #55	; 0x37
 8003bb6:	d9ef      	bls.n	8003b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <prvInitialiseTaskLists+0x6c>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fe fe4e 	bl	800285c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <prvInitialiseTaskLists+0x70>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7fe fe4a 	bl	800285c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <prvInitialiseTaskLists+0x74>)
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7fe fe46 	bl	800285c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <prvInitialiseTaskLists+0x78>)
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fe fe42 	bl	800285c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <prvInitialiseTaskLists+0x7c>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fe fe3e 	bl	800285c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <prvInitialiseTaskLists+0x80>)
 8003be2:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <prvInitialiseTaskLists+0x6c>)
 8003be4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <prvInitialiseTaskLists+0x84>)
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <prvInitialiseTaskLists+0x70>)
 8003bea:	601a      	str	r2, [r3, #0]
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200006ec 	.word	0x200006ec
 8003bf8:	20000b4c 	.word	0x20000b4c
 8003bfc:	20000b60 	.word	0x20000b60
 8003c00:	20000b7c 	.word	0x20000b7c
 8003c04:	20000b90 	.word	0x20000b90
 8003c08:	20000ba8 	.word	0x20000ba8
 8003c0c:	20000b74 	.word	0x20000b74
 8003c10:	20000b78 	.word	0x20000b78

08003c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c1a:	e01a      	b.n	8003c52 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003c1c:	f000 fce8 	bl	80045f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <prvCheckTasksWaitingTermination+0x50>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fe fe96 	bl	800295e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <prvCheckTasksWaitingTermination+0x54>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <prvCheckTasksWaitingTermination+0x54>)
 8003c3a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <prvCheckTasksWaitingTermination+0x58>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvCheckTasksWaitingTermination+0x58>)
 8003c44:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003c46:	f000 fce5 	bl	8004614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 f80f 	bl	8003c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <prvCheckTasksWaitingTermination+0x58>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e0      	bne.n	8003c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b002      	add	sp, #8
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000b90 	.word	0x20000b90
 8003c68:	20000bbc 	.word	0x20000bbc
 8003c6c:	20000ba4 	.word	0x20000ba4

08003c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2259      	movs	r2, #89	; 0x59
 8003c7c:	5c9b      	ldrb	r3, [r3, r2]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 fdf6 	bl	8004878 <vPortFree>
				vPortFree( pxTCB );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fdf2 	bl	8004878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c94:	e010      	b.n	8003cb8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2259      	movs	r2, #89	; 0x59
 8003c9a:	5c9b      	ldrb	r3, [r3, r2]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d104      	bne.n	8003caa <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 fde8 	bl	8004878 <vPortFree>
	}
 8003ca8:	e006      	b.n	8003cb8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2259      	movs	r2, #89	; 0x59
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d001      	beq.n	8003cb8 <prvDeleteTCB+0x48>
 8003cb4:	b672      	cpsid	i
 8003cb6:	e7fe      	b.n	8003cb6 <prvDeleteTCB+0x46>
	}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <prvResetNextTaskUnblockTime+0x34>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <prvResetNextTaskUnblockTime+0x38>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4252      	negs	r2, r2
 8003cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cd8:	e008      	b.n	8003cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <prvResetNextTaskUnblockTime+0x34>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <prvResetNextTaskUnblockTime+0x38>)
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000b74 	.word	0x20000b74
 8003cf8:	20000bdc 	.word	0x20000bdc

08003cfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <xTaskGetSchedulerState+0x30>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	e008      	b.n	8003d22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <xTaskGetSchedulerState+0x34>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	e001      	b.n	8003d22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d22:	687b      	ldr	r3, [r7, #4]
	}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000bc8 	.word	0x20000bc8
 8003d30:	20000be4 	.word	0x20000be4

08003d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d044      	beq.n	8003dd4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <xTaskPriorityDisinherit+0xac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <xTaskPriorityDisinherit+0x24>
 8003d54:	b672      	cpsid	i
 8003d56:	e7fe      	b.n	8003d56 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <xTaskPriorityDisinherit+0x30>
 8003d60:	b672      	cpsid	i
 8003d62:	e7fe      	b.n	8003d62 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d02c      	beq.n	8003dd4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d128      	bne.n	8003dd4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3304      	adds	r3, #4
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fe fde9 	bl	800295e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	2238      	movs	r2, #56	; 0x38
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <xTaskPriorityDisinherit+0xb0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d903      	bls.n	8003db4 <xTaskPriorityDisinherit+0x80>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <xTaskPriorityDisinherit+0xb0>)
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	0013      	movs	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <xTaskPriorityDisinherit+0xb4>)
 8003dc2:	189a      	adds	r2, r3, r2
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	0019      	movs	r1, r3
 8003dca:	0010      	movs	r0, r2
 8003dcc:	f7fe fd6f 	bl	80028ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
	}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	200006e8 	.word	0x200006e8
 8003de4:	20000bc4 	.word	0x20000bc4
 8003de8:	200006ec 	.word	0x200006ec

08003dec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <prvAddCurrentTaskToDelayedList+0x90>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3304      	adds	r3, #4
 8003e02:	0018      	movs	r0, r3
 8003e04:	f7fe fdab 	bl	800295e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	d10b      	bne.n	8003e26 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7fe fd45 	bl	80028ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e24:	e026      	b.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d209      	bcs.n	8003e52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	0019      	movs	r1, r3
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	f7fe fd51 	bl	80028f2 <vListInsert>
}
 8003e50:	e010      	b.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	0010      	movs	r0, r2
 8003e60:	f7fe fd47 	bl	80028f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d202      	bcs.n	8003e74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	601a      	str	r2, [r3, #0]
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000bc0 	.word	0x20000bc0
 8003e80:	200006e8 	.word	0x200006e8
 8003e84:	20000ba8 	.word	0x20000ba8
 8003e88:	20000b78 	.word	0x20000b78
 8003e8c:	20000b74 	.word	0x20000b74
 8003e90:	20000bdc 	.word	0x20000bdc

08003e94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e9e:	f000 fac9 	bl	8004434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <xTimerCreateTimerTask+0x6c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d020      	beq.n	8003eec <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eb2:	003a      	movs	r2, r7
 8003eb4:	1d39      	adds	r1, r7, #4
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fe fcb6 	bl	800282c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ec0:	683c      	ldr	r4, [r7, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	490f      	ldr	r1, [pc, #60]	; (8003f04 <xTimerCreateTimerTask+0x70>)
 8003ec8:	480f      	ldr	r0, [pc, #60]	; (8003f08 <xTimerCreateTimerTask+0x74>)
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	2302      	movs	r3, #2
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	0022      	movs	r2, r4
 8003ed6:	f7ff f996 	bl	8003206 <xTaskCreateStatic>
 8003eda:	0002      	movs	r2, r0
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <xTimerCreateTimerTask+0x78>)
 8003ede:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <xTimerCreateTimerTask+0x78>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <xTimerCreateTimerTask+0x62>
 8003ef2:	b672      	cpsid	i
 8003ef4:	e7fe      	b.n	8003ef4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b005      	add	sp, #20
 8003efe:	bd90      	pop	{r4, r7, pc}
 8003f00:	20000c18 	.word	0x20000c18
 8003f04:	08004b2c 	.word	0x08004b2c
 8003f08:	0800402d 	.word	0x0800402d
 8003f0c:	20000c1c 	.word	0x20000c1c

08003f10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b08b      	sub	sp, #44	; 0x2c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <xTimerGenericCommand+0x1c>
 8003f28:	b672      	cpsid	i
 8003f2a:	e7fe      	b.n	8003f2a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <xTimerGenericCommand+0x90>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d030      	beq.n	8003f96 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f34:	2414      	movs	r4, #20
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f42:	193b      	adds	r3, r7, r4
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	dc19      	bgt.n	8003f82 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f4e:	f7ff fed5 	bl	8003cfc <xTaskGetSchedulerState>
 8003f52:	0003      	movs	r3, r0
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d109      	bne.n	8003f6c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <xTimerGenericCommand+0x90>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f5e:	1939      	adds	r1, r7, r4
 8003f60:	2300      	movs	r3, #0
 8003f62:	f7fe fdeb 	bl	8002b3c <xQueueGenericSend>
 8003f66:	0003      	movs	r3, r0
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	e014      	b.n	8003f96 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <xTimerGenericCommand+0x90>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	2314      	movs	r3, #20
 8003f72:	18f9      	adds	r1, r7, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	2200      	movs	r2, #0
 8003f78:	f7fe fde0 	bl	8002b3c <xQueueGenericSend>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	e009      	b.n	8003f96 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <xTimerGenericCommand+0x90>)
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	2314      	movs	r3, #20
 8003f8a:	18f9      	adds	r1, r7, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f7fe fe99 	bl	8002cc4 <xQueueGenericSendFromISR>
 8003f92:	0003      	movs	r3, r0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b00b      	add	sp, #44	; 0x2c
 8003f9e:	bd90      	pop	{r4, r7, pc}
 8003fa0:	20000c18 	.word	0x20000c18

08003fa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <prvProcessExpiredTimer+0x84>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fe fcce 	bl	800295e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2228      	movs	r2, #40	; 0x28
 8003fc6:	5c9b      	ldrb	r3, [r3, r2]
 8003fc8:	001a      	movs	r2, r3
 8003fca:	2304      	movs	r3, #4
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d019      	beq.n	8004004 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	18d1      	adds	r1, r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f8c3 	bl	8004168 <prvInsertTimerInActiveList>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d017      	beq.n	8004016 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f7ff ff8d 	bl	8003f10 <xTimerGenericCommand>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <prvProcessExpiredTimer+0x72>
 8004000:	b672      	cpsid	i
 8004002:	e7fe      	b.n	8004002 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2228      	movs	r2, #40	; 0x28
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	2201      	movs	r2, #1
 800400c:	4393      	bics	r3, r2
 800400e:	b2d9      	uxtb	r1, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2228      	movs	r2, #40	; 0x28
 8004014:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	0010      	movs	r0, r2
 800401e:	4798      	blx	r3
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000c10 	.word	0x20000c10

0800402c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004034:	2308      	movs	r3, #8
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	0018      	movs	r0, r3
 800403a:	f000 f853 	bl	80040e4 <prvGetNextExpireTime>
 800403e:	0003      	movs	r3, r0
 8004040:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f000 f803 	bl	8004054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800404e:	f000 f8cd 	bl	80041ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004052:	e7ef      	b.n	8004034 <prvTimerTask+0x8>

08004054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800405e:	f7ff facf 	bl	8003600 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004062:	2308      	movs	r3, #8
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f85e 	bl	8004128 <prvSampleTimeNow>
 800406c:	0003      	movs	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d12b      	bne.n	80040ce <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10c      	bne.n	8004096 <prvProcessTimerOrBlockTask+0x42>
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	429a      	cmp	r2, r3
 8004082:	d808      	bhi.n	8004096 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004084:	f7ff fac8 	bl	8003618 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff ff88 	bl	8003fa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004094:	e01d      	b.n	80040d2 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <prvProcessTimerOrBlockTask+0x88>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <prvProcessTimerOrBlockTask+0x56>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <prvProcessTimerOrBlockTask+0x58>
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <prvProcessTimerOrBlockTask+0x8c>)
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	0019      	movs	r1, r3
 80040bc:	f7ff f870 	bl	80031a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040c0:	f7ff faaa 	bl	8003618 <xTaskResumeAll>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d104      	bne.n	80040d2 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80040c8:	f000 fa82 	bl	80045d0 <vPortYield>
}
 80040cc:	e001      	b.n	80040d2 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80040ce:	f7ff faa3 	bl	8003618 <xTaskResumeAll>
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	20000c14 	.word	0x20000c14
 80040e0:	20000c18 	.word	0x20000c18

080040e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <prvGetNextExpireTime+0x40>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <prvGetNextExpireTime+0x16>
 80040f6:	2201      	movs	r2, #1
 80040f8:	e000      	b.n	80040fc <prvGetNextExpireTime+0x18>
 80040fa:	2200      	movs	r2, #0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <prvGetNextExpireTime+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e001      	b.n	8004118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004118:	68fb      	ldr	r3, [r7, #12]
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20000c10 	.word	0x20000c10

08004128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004130:	f7ff fafe 	bl	8003730 <xTaskGetTickCount>
 8004134:	0003      	movs	r3, r0
 8004136:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <prvSampleTimeNow+0x3c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	429a      	cmp	r2, r3
 8004140:	d205      	bcs.n	800414e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004142:	f000 f919 	bl	8004378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e002      	b.n	8004154 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <prvSampleTimeNow+0x3c>)
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b004      	add	sp, #16
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000c20 	.word	0x20000c20

08004168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d812      	bhi.n	80041b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e01b      	b.n	80041da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <prvInsertTimerInActiveList+0x7c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3304      	adds	r3, #4
 80041aa:	0019      	movs	r1, r3
 80041ac:	0010      	movs	r0, r2
 80041ae:	f7fe fba0 	bl	80028f2 <vListInsert>
 80041b2:	e012      	b.n	80041da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d206      	bcs.n	80041ca <prvInsertTimerInActiveList+0x62>
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e007      	b.n	80041da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <prvInsertTimerInActiveList+0x80>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	0019      	movs	r1, r3
 80041d4:	0010      	movs	r0, r2
 80041d6:	f7fe fb8c 	bl	80028f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041da:	697b      	ldr	r3, [r7, #20]
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b006      	add	sp, #24
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000c14 	.word	0x20000c14
 80041e8:	20000c10 	.word	0x20000c10

080041ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b08d      	sub	sp, #52	; 0x34
 80041f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041f2:	e0ac      	b.n	800434e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041f4:	2208      	movs	r2, #8
 80041f6:	18bb      	adds	r3, r7, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	da0f      	bge.n	800421e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041fe:	18bb      	adds	r3, r7, r2
 8004200:	3304      	adds	r3, #4
 8004202:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <prvProcessReceivedCommands+0x22>
 800420a:	b672      	cpsid	i
 800420c:	e7fe      	b.n	800420c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	6858      	ldr	r0, [r3, #4]
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0019      	movs	r1, r3
 800421c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800421e:	2208      	movs	r2, #8
 8004220:	18bb      	adds	r3, r7, r2
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	da00      	bge.n	800422a <prvProcessReceivedCommands+0x3e>
 8004228:	e090      	b.n	800434c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800422a:	18bb      	adds	r3, r7, r2
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	3304      	adds	r3, #4
 800423c:	0018      	movs	r0, r3
 800423e:	f7fe fb8e 	bl	800295e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	0018      	movs	r0, r3
 8004246:	f7ff ff6f 	bl	8004128 <prvSampleTimeNow>
 800424a:	0003      	movs	r3, r0
 800424c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800424e:	2308      	movs	r3, #8
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b09      	cmp	r3, #9
 8004256:	d900      	bls.n	800425a <prvProcessReceivedCommands+0x6e>
 8004258:	e079      	b.n	800434e <prvProcessReceivedCommands+0x162>
 800425a:	009a      	lsls	r2, r3, #2
 800425c:	4b44      	ldr	r3, [pc, #272]	; (8004370 <prvProcessReceivedCommands+0x184>)
 800425e:	18d3      	adds	r3, r2, r3
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2228      	movs	r2, #40	; 0x28
 8004268:	5c9b      	ldrb	r3, [r3, r2]
 800426a:	2201      	movs	r2, #1
 800426c:	4313      	orrs	r3, r2
 800426e:	b2d9      	uxtb	r1, r3
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2228      	movs	r2, #40	; 0x28
 8004274:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004276:	2408      	movs	r4, #8
 8004278:	193b      	adds	r3, r7, r4
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	18d1      	adds	r1, r2, r3
 8004282:	193b      	adds	r3, r7, r4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	6a38      	ldr	r0, [r7, #32]
 800428a:	f7ff ff6d 	bl	8004168 <prvInsertTimerInActiveList>
 800428e:	1e03      	subs	r3, r0, #0
 8004290:	d05d      	beq.n	800434e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	0010      	movs	r0, r2
 800429a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2228      	movs	r2, #40	; 0x28
 80042a0:	5c9b      	ldrb	r3, [r3, r2]
 80042a2:	001a      	movs	r2, r3
 80042a4:	2304      	movs	r3, #4
 80042a6:	4013      	ands	r3, r2
 80042a8:	d051      	beq.n	800434e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	18d2      	adds	r2, r2, r3
 80042b4:	6a38      	ldr	r0, [r7, #32]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2300      	movs	r3, #0
 80042bc:	2100      	movs	r1, #0
 80042be:	f7ff fe27 	bl	8003f10 <xTimerGenericCommand>
 80042c2:	0003      	movs	r3, r0
 80042c4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d140      	bne.n	800434e <prvProcessReceivedCommands+0x162>
 80042cc:	b672      	cpsid	i
 80042ce:	e7fe      	b.n	80042ce <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	2228      	movs	r2, #40	; 0x28
 80042d4:	5c9b      	ldrb	r3, [r3, r2]
 80042d6:	2201      	movs	r2, #1
 80042d8:	4393      	bics	r3, r2
 80042da:	b2d9      	uxtb	r1, r3
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	2228      	movs	r2, #40	; 0x28
 80042e0:	5499      	strb	r1, [r3, r2]
					break;
 80042e2:	e034      	b.n	800434e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2228      	movs	r2, #40	; 0x28
 80042e8:	5c9b      	ldrb	r3, [r3, r2]
 80042ea:	2201      	movs	r2, #1
 80042ec:	4313      	orrs	r3, r2
 80042ee:	b2d9      	uxtb	r1, r3
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	2228      	movs	r2, #40	; 0x28
 80042f4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042f6:	2308      	movs	r3, #8
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <prvProcessReceivedCommands+0x120>
 8004308:	b672      	cpsid	i
 800430a:	e7fe      	b.n	800430a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	18d1      	adds	r1, r2, r3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	6a38      	ldr	r0, [r7, #32]
 800431a:	f7ff ff25 	bl	8004168 <prvInsertTimerInActiveList>
					break;
 800431e:	e016      	b.n	800434e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2228      	movs	r2, #40	; 0x28
 8004324:	5c9b      	ldrb	r3, [r3, r2]
 8004326:	001a      	movs	r2, r3
 8004328:	2302      	movs	r3, #2
 800432a:	4013      	ands	r3, r2
 800432c:	d104      	bne.n	8004338 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 faa1 	bl	8004878 <vPortFree>
 8004336:	e00a      	b.n	800434e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2228      	movs	r2, #40	; 0x28
 800433c:	5c9b      	ldrb	r3, [r3, r2]
 800433e:	2201      	movs	r2, #1
 8004340:	4393      	bics	r3, r2
 8004342:	b2d9      	uxtb	r1, r3
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2228      	movs	r2, #40	; 0x28
 8004348:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800434a:	e000      	b.n	800434e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800434c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <prvProcessReceivedCommands+0x188>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2208      	movs	r2, #8
 8004354:	18b9      	adds	r1, r7, r2
 8004356:	2200      	movs	r2, #0
 8004358:	0018      	movs	r0, r3
 800435a:	f7fe fd27 	bl	8002dac <xQueueReceive>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d000      	beq.n	8004364 <prvProcessReceivedCommands+0x178>
 8004362:	e747      	b.n	80041f4 <prvProcessReceivedCommands+0x8>
	}
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b00b      	add	sp, #44	; 0x2c
 800436c:	bd90      	pop	{r4, r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	08004be4 	.word	0x08004be4
 8004374:	20000c18 	.word	0x20000c18

08004378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800437e:	e041      	b.n	8004404 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004380:	4b2a      	ldr	r3, [pc, #168]	; (800442c <prvSwitchTimerLists+0xb4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <prvSwitchTimerLists+0xb4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3304      	adds	r3, #4
 8004398:	0018      	movs	r0, r3
 800439a:	f7fe fae0 	bl	800295e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	0010      	movs	r0, r2
 80043a6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2228      	movs	r2, #40	; 0x28
 80043ac:	5c9b      	ldrb	r3, [r3, r2]
 80043ae:	001a      	movs	r2, r3
 80043b0:	2304      	movs	r3, #4
 80043b2:	4013      	ands	r3, r2
 80043b4:	d026      	beq.n	8004404 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	18d3      	adds	r3, r2, r3
 80043be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d90e      	bls.n	80043e6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043d4:	4b15      	ldr	r3, [pc, #84]	; (800442c <prvSwitchTimerLists+0xb4>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3304      	adds	r3, #4
 80043dc:	0019      	movs	r1, r3
 80043de:	0010      	movs	r0, r2
 80043e0:	f7fe fa87 	bl	80028f2 <vListInsert>
 80043e4:	e00e      	b.n	8004404 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	f7ff fd8d 	bl	8003f10 <xTimerGenericCommand>
 80043f6:	0003      	movs	r3, r0
 80043f8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <prvSwitchTimerLists+0x8c>
 8004400:	b672      	cpsid	i
 8004402:	e7fe      	b.n	8004402 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <prvSwitchTimerLists+0xb4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1b8      	bne.n	8004380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <prvSwitchTimerLists+0xb4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <prvSwitchTimerLists+0xb8>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <prvSwitchTimerLists+0xb4>)
 800441a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <prvSwitchTimerLists+0xb8>)
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	46bd      	mov	sp, r7
 8004426:	b006      	add	sp, #24
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	20000c10 	.word	0x20000c10
 8004430:	20000c14 	.word	0x20000c14

08004434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800443a:	f000 f8d9 	bl	80045f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <prvCheckForValidListAndQueue+0x64>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d123      	bne.n	800448e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <prvCheckForValidListAndQueue+0x68>)
 8004448:	0018      	movs	r0, r3
 800444a:	f7fe fa07 	bl	800285c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <prvCheckForValidListAndQueue+0x6c>)
 8004450:	0018      	movs	r0, r3
 8004452:	f7fe fa03 	bl	800285c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <prvCheckForValidListAndQueue+0x70>)
 8004458:	4a10      	ldr	r2, [pc, #64]	; (800449c <prvCheckForValidListAndQueue+0x68>)
 800445a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <prvCheckForValidListAndQueue+0x74>)
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <prvCheckForValidListAndQueue+0x6c>)
 8004460:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <prvCheckForValidListAndQueue+0x78>)
 8004464:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <prvCheckForValidListAndQueue+0x7c>)
 8004466:	2100      	movs	r1, #0
 8004468:	9100      	str	r1, [sp, #0]
 800446a:	2110      	movs	r1, #16
 800446c:	200a      	movs	r0, #10
 800446e:	f7fe faf2 	bl	8002a56 <xQueueGenericCreateStatic>
 8004472:	0002      	movs	r2, r0
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <prvCheckForValidListAndQueue+0x64>)
 8004476:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <prvCheckForValidListAndQueue+0x64>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <prvCheckForValidListAndQueue+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <prvCheckForValidListAndQueue+0x80>)
 8004486:	0011      	movs	r1, r2
 8004488:	0018      	movs	r0, r3
 800448a:	f7fe fe61 	bl	8003150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800448e:	f000 f8c1 	bl	8004614 <vPortExitCritical>
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000c18 	.word	0x20000c18
 800449c:	20000be8 	.word	0x20000be8
 80044a0:	20000bfc 	.word	0x20000bfc
 80044a4:	20000c10 	.word	0x20000c10
 80044a8:	20000c14 	.word	0x20000c14
 80044ac:	20000cc4 	.word	0x20000cc4
 80044b0:	20000c24 	.word	0x20000c24
 80044b4:	08004b34 	.word	0x08004b34

080044b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3b04      	subs	r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	0452      	lsls	r2, r2, #17
 80044d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b04      	subs	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <pxPortInitialiseStack+0x50>)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b14      	subs	r3, #20
 80044ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3b20      	subs	r3, #32
 80044fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044fc:	68fb      	ldr	r3, [r7, #12]
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	0800450d 	.word	0x0800450d

0800450c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <prvTaskExitError+0x2c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	d001      	beq.n	8004522 <prvTaskExitError+0x16>
 800451e:	b672      	cpsid	i
 8004520:	e7fe      	b.n	8004520 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004522:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0fc      	beq.n	8004526 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	46bd      	mov	sp, r7
 8004532:	b002      	add	sp, #8
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	2000000c 	.word	0x2000000c

0800453c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004550 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004550:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <pxCurrentTCBConst2>)
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	3020      	adds	r0, #32
 8004558:	f380 8809 	msr	PSP, r0
 800455c:	2002      	movs	r0, #2
 800455e:	f380 8814 	msr	CONTROL, r0
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004568:	46ae      	mov	lr, r5
 800456a:	bc08      	pop	{r3}
 800456c:	bc04      	pop	{r2}
 800456e:	b662      	cpsie	i
 8004570:	4718      	bx	r3
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46c0      	nop			; (mov r8, r8)

08004580 <pxCurrentTCBConst2>:
 8004580:	200006e8 	.word	0x200006e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46c0      	nop			; (mov r8, r8)

08004588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <xPortStartScheduler+0x40>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <xPortStartScheduler+0x40>)
 8004592:	21ff      	movs	r1, #255	; 0xff
 8004594:	0409      	lsls	r1, r1, #16
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <xPortStartScheduler+0x40>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <xPortStartScheduler+0x40>)
 80045a0:	21ff      	movs	r1, #255	; 0xff
 80045a2:	0609      	lsls	r1, r1, #24
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045a8:	f000 f898 	bl	80046dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <xPortStartScheduler+0x44>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80045b2:	f7ff ffcd 	bl	8004550 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045b6:	f7ff f979 	bl	80038ac <vTaskSwitchContext>
	prvTaskExitError();
 80045ba:	f7ff ffa7 	bl	800450c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	e000ed20 	.word	0xe000ed20
 80045cc:	2000000c 	.word	0x2000000c

080045d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <vPortYield+0x1c>)
 80045d6:	2280      	movs	r2, #128	; 0x80
 80045d8:	0552      	lsls	r2, r2, #21
 80045da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80045dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80045e0:	f3bf 8f6f 	isb	sy
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80045f4:	b672      	cpsid	i
	uxCriticalNesting++;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <vPortEnterCritical+0x20>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <vPortEnterCritical+0x20>)
 80045fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004600:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004604:	f3bf 8f6f 	isb	sy
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	2000000c 	.word	0x2000000c

08004614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <vPortExitCritical+0x2c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <vPortExitCritical+0x10>
 8004620:	b672      	cpsid	i
 8004622:	e7fe      	b.n	8004622 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <vPortExitCritical+0x2c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1e5a      	subs	r2, r3, #1
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <vPortExitCritical+0x2c>)
 800462c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800462e:	4b04      	ldr	r3, [pc, #16]	; (8004640 <vPortExitCritical+0x2c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d100      	bne.n	8004638 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8004636:	b662      	cpsie	i
	}
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	2000000c 	.word	0x2000000c

08004644 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004644:	f3ef 8010 	mrs	r0, PRIMASK
 8004648:	b672      	cpsid	i
 800464a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	0018      	movs	r0, r3

08004650 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004650:	f380 8810 	msr	PRIMASK, r0
 8004654:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004656:	46c0      	nop			; (mov r8, r8)
	...

08004660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004660:	f3ef 8009 	mrs	r0, PSP
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <pxCurrentTCBConst>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	3820      	subs	r0, #32
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800466e:	4644      	mov	r4, r8
 8004670:	464d      	mov	r5, r9
 8004672:	4656      	mov	r6, sl
 8004674:	465f      	mov	r7, fp
 8004676:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004678:	b508      	push	{r3, lr}
 800467a:	b672      	cpsid	i
 800467c:	f7ff f916 	bl	80038ac <vTaskSwitchContext>
 8004680:	b662      	cpsie	i
 8004682:	bc0c      	pop	{r2, r3}
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	6808      	ldr	r0, [r1, #0]
 8004688:	3010      	adds	r0, #16
 800468a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800468c:	46a0      	mov	r8, r4
 800468e:	46a9      	mov	r9, r5
 8004690:	46b2      	mov	sl, r6
 8004692:	46bb      	mov	fp, r7
 8004694:	f380 8809 	msr	PSP, r0
 8004698:	3820      	subs	r0, #32
 800469a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800469c:	4718      	bx	r3
 800469e:	46c0      	nop			; (mov r8, r8)

080046a0 <pxCurrentTCBConst>:
 80046a0:	200006e8 	.word	0x200006e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46c0      	nop			; (mov r8, r8)

080046a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80046ae:	f7ff ffc9 	bl	8004644 <ulSetInterruptMaskFromISR>
 80046b2:	0003      	movs	r3, r0
 80046b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046b6:	f7ff f849 	bl	800374c <xTaskIncrementTick>
 80046ba:	1e03      	subs	r3, r0, #0
 80046bc:	d003      	beq.n	80046c6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <xPortSysTickHandler+0x30>)
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	0552      	lsls	r2, r2, #21
 80046c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ffc1 	bl	8004650 <vClearInterruptMaskFromISR>
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <vPortSetupTimerInterrupt+0x38>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <vPortSetupTimerInterrupt+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	22fa      	movs	r2, #250	; 0xfa
 80046f2:	0091      	lsls	r1, r2, #2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd07 	bl	8000108 <__udivsi3>
 80046fa:	0003      	movs	r3, r0
 80046fc:	001a      	movs	r2, r3
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <vPortSetupTimerInterrupt+0x40>)
 8004700:	3a01      	subs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004704:	4b02      	ldr	r3, [pc, #8]	; (8004710 <vPortSetupTimerInterrupt+0x34>)
 8004706:	2207      	movs	r2, #7
 8004708:	601a      	str	r2, [r3, #0]
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	e000e010 	.word	0xe000e010
 8004714:	e000e018 	.word	0xe000e018
 8004718:	20000000 	.word	0x20000000
 800471c:	e000e014 	.word	0xe000e014

08004720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800472c:	f7fe ff68 	bl	8003600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004730:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <pvPortMalloc+0x140>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004738:	f000 f8ec 	bl	8004914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800473c:	4b49      	ldr	r3, [pc, #292]	; (8004864 <pvPortMalloc+0x144>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4013      	ands	r3, r2
 8004744:	d000      	beq.n	8004748 <pvPortMalloc+0x28>
 8004746:	e07e      	b.n	8004846 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800474e:	2208      	movs	r2, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	189b      	adds	r3, r3, r2
 8004754:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2207      	movs	r2, #7
 800475a:	4013      	ands	r3, r2
 800475c:	d00a      	beq.n	8004774 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2207      	movs	r2, #7
 8004762:	4393      	bics	r3, r2
 8004764:	3308      	adds	r3, #8
 8004766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2207      	movs	r2, #7
 800476c:	4013      	ands	r3, r2
 800476e:	d001      	beq.n	8004774 <pvPortMalloc+0x54>
 8004770:	b672      	cpsid	i
 8004772:	e7fe      	b.n	8004772 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d065      	beq.n	8004846 <pvPortMalloc+0x126>
 800477a:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <pvPortMalloc+0x148>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d860      	bhi.n	8004846 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004784:	4b39      	ldr	r3, [pc, #228]	; (800486c <pvPortMalloc+0x14c>)
 8004786:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004788:	4b38      	ldr	r3, [pc, #224]	; (800486c <pvPortMalloc+0x14c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800478e:	e004      	b.n	800479a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d903      	bls.n	80047ac <pvPortMalloc+0x8c>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f1      	bne.n	8004790 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <pvPortMalloc+0x140>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d047      	beq.n	8004846 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2208      	movs	r2, #8
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	2308      	movs	r3, #8
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d916      	bls.n	8004806 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2207      	movs	r2, #7
 80047e4:	4013      	ands	r3, r2
 80047e6:	d001      	beq.n	80047ec <pvPortMalloc+0xcc>
 80047e8:	b672      	cpsid	i
 80047ea:	e7fe      	b.n	80047ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	1ad2      	subs	r2, r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f8e7 	bl	80049d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <pvPortMalloc+0x148>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <pvPortMalloc+0x148>)
 8004812:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <pvPortMalloc+0x148>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <pvPortMalloc+0x150>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d203      	bcs.n	8004828 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <pvPortMalloc+0x148>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <pvPortMalloc+0x150>)
 8004826:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <pvPortMalloc+0x144>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <pvPortMalloc+0x154>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <pvPortMalloc+0x154>)
 8004844:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004846:	f7fe fee7 	bl	8003618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2207      	movs	r2, #7
 800484e:	4013      	ands	r3, r2
 8004850:	d001      	beq.n	8004856 <pvPortMalloc+0x136>
 8004852:	b672      	cpsid	i
 8004854:	e7fe      	b.n	8004854 <pvPortMalloc+0x134>
	return pvReturn;
 8004856:	68fb      	ldr	r3, [r7, #12]
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b006      	add	sp, #24
 800485e:	bd80      	pop	{r7, pc}
 8004860:	2000191c 	.word	0x2000191c
 8004864:	20001930 	.word	0x20001930
 8004868:	20001920 	.word	0x20001920
 800486c:	20001914 	.word	0x20001914
 8004870:	20001924 	.word	0x20001924
 8004874:	20001928 	.word	0x20001928

08004878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03a      	beq.n	8004900 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800488a:	2308      	movs	r3, #8
 800488c:	425b      	negs	r3, r3
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	18d3      	adds	r3, r2, r3
 8004892:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <vPortFree+0x90>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4013      	ands	r3, r2
 80048a2:	d101      	bne.n	80048a8 <vPortFree+0x30>
 80048a4:	b672      	cpsid	i
 80048a6:	e7fe      	b.n	80048a6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <vPortFree+0x3c>
 80048b0:	b672      	cpsid	i
 80048b2:	e7fe      	b.n	80048b2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <vPortFree+0x90>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4013      	ands	r3, r2
 80048be:	d01f      	beq.n	8004900 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11b      	bne.n	8004900 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <vPortFree+0x90>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048d8:	f7fe fe92 	bl	8003600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <vPortFree+0x94>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	18d2      	adds	r2, r2, r3
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <vPortFree+0x94>)
 80048e8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 f871 	bl	80049d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <vPortFree+0x98>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <vPortFree+0x98>)
 80048fa:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80048fc:	f7fe fe8c 	bl	8003618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20001930 	.word	0x20001930
 800490c:	20001920 	.word	0x20001920
 8004910:	2000192c 	.word	0x2000192c

08004914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800491a:	23c0      	movs	r3, #192	; 0xc0
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <prvHeapInit+0xa8>)
 8004922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2207      	movs	r2, #7
 8004928:	4013      	ands	r3, r2
 800492a:	d00c      	beq.n	8004946 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3307      	adds	r3, #7
 8004930:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2207      	movs	r2, #7
 8004936:	4393      	bics	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <prvHeapInit+0xa8>)
 8004942:	18d3      	adds	r3, r2, r3
 8004944:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <prvHeapInit+0xac>)
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <prvHeapInit+0xac>)
 8004952:	2200      	movs	r2, #0
 8004954:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	18d3      	adds	r3, r2, r3
 800495c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800495e:	2208      	movs	r2, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2207      	movs	r2, #7
 800496a:	4393      	bics	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <prvHeapInit+0xb0>)
 8004972:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <prvHeapInit+0xb0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2200      	movs	r2, #0
 800497a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <prvHeapInit+0xb0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	1ad2      	subs	r2, r2, r3
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <prvHeapInit+0xb0>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <prvHeapInit+0xb4>)
 80049a0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	4b09      	ldr	r3, [pc, #36]	; (80049cc <prvHeapInit+0xb8>)
 80049a8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <prvHeapInit+0xbc>)
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	0612      	lsls	r2, r2, #24
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b004      	add	sp, #16
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20000d14 	.word	0x20000d14
 80049c0:	20001914 	.word	0x20001914
 80049c4:	2000191c 	.word	0x2000191c
 80049c8:	20001924 	.word	0x20001924
 80049cc:	20001920 	.word	0x20001920
 80049d0:	20001930 	.word	0x20001930

080049d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <prvInsertBlockIntoFreeList+0xa8>)
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e002      	b.n	80049e8 <prvInsertBlockIntoFreeList+0x14>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d8f7      	bhi.n	80049e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	18d3      	adds	r3, r2, r3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d108      	bne.n	8004a16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	18d2      	adds	r2, r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	18d2      	adds	r2, r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d118      	bne.n	8004a5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <prvInsertBlockIntoFreeList+0xac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d00d      	beq.n	8004a52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	18d2      	adds	r2, r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e008      	b.n	8004a64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <prvInsertBlockIntoFreeList+0xac>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e003      	b.n	8004a64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d002      	beq.n	8004a72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20001914 	.word	0x20001914
 8004a80:	2000191c 	.word	0x2000191c

08004a84 <__libc_init_array>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	2600      	movs	r6, #0
 8004a88:	4d0c      	ldr	r5, [pc, #48]	; (8004abc <__libc_init_array+0x38>)
 8004a8a:	4c0d      	ldr	r4, [pc, #52]	; (8004ac0 <__libc_init_array+0x3c>)
 8004a8c:	1b64      	subs	r4, r4, r5
 8004a8e:	10a4      	asrs	r4, r4, #2
 8004a90:	42a6      	cmp	r6, r4
 8004a92:	d109      	bne.n	8004aa8 <__libc_init_array+0x24>
 8004a94:	2600      	movs	r6, #0
 8004a96:	f000 f82b 	bl	8004af0 <_init>
 8004a9a:	4d0a      	ldr	r5, [pc, #40]	; (8004ac4 <__libc_init_array+0x40>)
 8004a9c:	4c0a      	ldr	r4, [pc, #40]	; (8004ac8 <__libc_init_array+0x44>)
 8004a9e:	1b64      	subs	r4, r4, r5
 8004aa0:	10a4      	asrs	r4, r4, #2
 8004aa2:	42a6      	cmp	r6, r4
 8004aa4:	d105      	bne.n	8004ab2 <__libc_init_array+0x2e>
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	00b3      	lsls	r3, r6, #2
 8004aaa:	58eb      	ldr	r3, [r5, r3]
 8004aac:	4798      	blx	r3
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7ee      	b.n	8004a90 <__libc_init_array+0xc>
 8004ab2:	00b3      	lsls	r3, r6, #2
 8004ab4:	58eb      	ldr	r3, [r5, r3]
 8004ab6:	4798      	blx	r3
 8004ab8:	3601      	adds	r6, #1
 8004aba:	e7f2      	b.n	8004aa2 <__libc_init_array+0x1e>
 8004abc:	08004c0c 	.word	0x08004c0c
 8004ac0:	08004c0c 	.word	0x08004c0c
 8004ac4:	08004c0c 	.word	0x08004c0c
 8004ac8:	08004c10 	.word	0x08004c10

08004acc <memcpy>:
 8004acc:	2300      	movs	r3, #0
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d100      	bne.n	8004ad6 <memcpy+0xa>
 8004ad4:	bd10      	pop	{r4, pc}
 8004ad6:	5ccc      	ldrb	r4, [r1, r3]
 8004ad8:	54c4      	strb	r4, [r0, r3]
 8004ada:	3301      	adds	r3, #1
 8004adc:	e7f8      	b.n	8004ad0 <memcpy+0x4>

08004ade <memset>:
 8004ade:	0003      	movs	r3, r0
 8004ae0:	1882      	adds	r2, r0, r2
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d100      	bne.n	8004ae8 <memset+0xa>
 8004ae6:	4770      	bx	lr
 8004ae8:	7019      	strb	r1, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	e7f9      	b.n	8004ae2 <memset+0x4>
	...

08004af0 <_init>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr

08004afc <_fini>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr
