
MSDL_STM32G0_CRPF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c18  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004ddc  08004ddc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ddc  08004ddc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a20  20000010  08004df4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a30  08004df4  00021a30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001987b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003421  00000000  00000000  000398b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004376  00000000  00000000  0003f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017188  00000000  00000000  00043a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2cc9  00000000  00000000  0005abfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d8c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e38  00000000  00000000  0011d91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cc0 	.word	0x08004cc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004cc0 	.word	0x08004cc0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <MX_FREERTOS_Init+0x30>)
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <MX_FREERTOS_Init+0x34>)
 8000228:	2100      	movs	r1, #0
 800022a:	0018      	movs	r0, r3
 800022c:	f002 fb20 	bl	8002870 <osThreadNew>
 8000230:	0002      	movs	r2, r0
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_FREERTOS_Init+0x38>)
 8000234:	601a      	str	r2, [r3, #0]

  /* creation of CanOpenMenagerT */
  CanOpenMenagerTHandle = osThreadNew(CanOpenMenager, NULL, &CanOpenMenagerT_attributes);
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <MX_FREERTOS_Init+0x3c>)
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_FREERTOS_Init+0x40>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f002 fb17 	bl	8002870 <osThreadNew>
 8000242:	0002      	movs	r2, r0
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_FREERTOS_Init+0x44>)
 8000246:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	08004d0c 	.word	0x08004d0c
 8000254:	08000269 	.word	0x08000269
 8000258:	20001934 	.word	0x20001934
 800025c:	08004d30 	.word	0x08004d30
 8000260:	08000279 	.word	0x08000279
 8000264:	20001938 	.word	0x20001938

08000268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f002 fb93 	bl	800299c <osDelay>
 8000276:	e7fb      	b.n	8000270 <StartDefaultTask+0x8>

08000278 <CanOpenMenager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CanOpenMenager */
void CanOpenMenager(void *argument)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CanOpenMenager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f002 fb8b 	bl	800299c <osDelay>
 8000286:	e7fb      	b.n	8000280 <CanOpenMenager+0x8>

08000288 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <MX_FDCAN2_Init+0x80>)
 800028e:	4a1f      	ldr	r2, [pc, #124]	; (800030c <MX_FDCAN2_Init+0x84>)
 8000290:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_FDCAN2_Init+0x80>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_FDCAN2_Init+0x80>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80002b0:	4b15      	ldr	r3, [pc, #84]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002be:	220d      	movs	r2, #13
 80002c0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002dc:	2201      	movs	r2, #1
 80002de:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <MX_FDCAN2_Init+0x80>)
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fc15 	bl	8000b24 <HAL_FDCAN_Init>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 80002fe:	f000 fa35 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000193c 	.word	0x2000193c
 800030c:	40006800 	.word	0x40006800

08000310 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b08b      	sub	sp, #44	; 0x2c
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	2414      	movs	r4, #20
 800031a:	193b      	adds	r3, r7, r4
 800031c:	0018      	movs	r0, r3
 800031e:	2314      	movs	r3, #20
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 fcc3 	bl	8004cae <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <HAL_FDCAN_MspInit+0x8c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d12f      	bne.n	8000392 <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000338:	2180      	movs	r1, #128	; 0x80
 800033a:	0149      	lsls	r1, r1, #5
 800033c:	430a      	orrs	r2, r1
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000344:	2380      	movs	r3, #128	; 0x80
 8000346:	015b      	lsls	r3, r3, #5
 8000348:	4013      	ands	r3, r2
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 8000354:	2104      	movs	r1, #4
 8000356:	430a      	orrs	r2, r1
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <HAL_FDCAN_MspInit+0x90>)
 800035c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035e:	2204      	movs	r2, #4
 8000360:	4013      	ands	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PC2     ------> FDCAN2_RX
    PC3     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000366:	0021      	movs	r1, r4
 8000368:	187b      	adds	r3, r7, r1
 800036a:	220c      	movs	r2, #12
 800036c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2202      	movs	r2, #2
 8000372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2203      	movs	r2, #3
 8000384:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	187b      	adds	r3, r7, r1
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <HAL_FDCAN_MspInit+0x94>)
 800038a:	0019      	movs	r1, r3
 800038c:	0010      	movs	r0, r2
 800038e:	f000 fd9b 	bl	8000ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b00b      	add	sp, #44	; 0x2c
 8000398:	bd90      	pop	{r4, r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	40006800 	.word	0x40006800
 80003a0:	40021000 	.word	0x40021000
 80003a4:	50000800 	.word	0x50000800

080003a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b08d      	sub	sp, #52	; 0x34
 80003ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	241c      	movs	r4, #28
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2314      	movs	r3, #20
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f004 fc78 	bl	8004cae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b95      	ldr	r3, [pc, #596]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003c2:	4b94      	ldr	r3, [pc, #592]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003c4:	2102      	movs	r1, #2
 80003c6:	430a      	orrs	r2, r1
 80003c8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ca:	4b92      	ldr	r3, [pc, #584]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ce:	2202      	movs	r2, #2
 80003d0:	4013      	ands	r3, r2
 80003d2:	61bb      	str	r3, [r7, #24]
 80003d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003d6:	4b8f      	ldr	r3, [pc, #572]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003da:	4b8e      	ldr	r3, [pc, #568]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003dc:	2110      	movs	r1, #16
 80003de:	430a      	orrs	r2, r1
 80003e0:	635a      	str	r2, [r3, #52]	; 0x34
 80003e2:	4b8c      	ldr	r3, [pc, #560]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e6:	2210      	movs	r2, #16
 80003e8:	4013      	ands	r3, r2
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b89      	ldr	r3, [pc, #548]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f2:	4b88      	ldr	r3, [pc, #544]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003f4:	2104      	movs	r1, #4
 80003f6:	430a      	orrs	r2, r1
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
 80003fa:	4b86      	ldr	r3, [pc, #536]	; (8000614 <MX_GPIO_Init+0x26c>)
 80003fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003fe:	2204      	movs	r2, #4
 8000400:	4013      	ands	r3, r2
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b83      	ldr	r3, [pc, #524]	; (8000614 <MX_GPIO_Init+0x26c>)
 8000408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040a:	4b82      	ldr	r3, [pc, #520]	; (8000614 <MX_GPIO_Init+0x26c>)
 800040c:	2120      	movs	r1, #32
 800040e:	430a      	orrs	r2, r1
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
 8000412:	4b80      	ldr	r3, [pc, #512]	; (8000614 <MX_GPIO_Init+0x26c>)
 8000414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000416:	2220      	movs	r2, #32
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b7d      	ldr	r3, [pc, #500]	; (8000614 <MX_GPIO_Init+0x26c>)
 8000420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000422:	4b7c      	ldr	r3, [pc, #496]	; (8000614 <MX_GPIO_Init+0x26c>)
 8000424:	2101      	movs	r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	635a      	str	r2, [r3, #52]	; 0x34
 800042a:	4b7a      	ldr	r3, [pc, #488]	; (8000614 <MX_GPIO_Init+0x26c>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042e:	2201      	movs	r2, #1
 8000430:	4013      	ands	r3, r2
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000436:	4b77      	ldr	r3, [pc, #476]	; (8000614 <MX_GPIO_Init+0x26c>)
 8000438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800043a:	4b76      	ldr	r3, [pc, #472]	; (8000614 <MX_GPIO_Init+0x26c>)
 800043c:	2108      	movs	r1, #8
 800043e:	430a      	orrs	r2, r1
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
 8000442:	4b74      	ldr	r3, [pc, #464]	; (8000614 <MX_GPIO_Init+0x26c>)
 8000444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000446:	2208      	movs	r2, #8
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_OUT_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
 800044e:	4972      	ldr	r1, [pc, #456]	; (8000618 <MX_GPIO_Init+0x270>)
 8000450:	4b72      	ldr	r3, [pc, #456]	; (800061c <MX_GPIO_Init+0x274>)
 8000452:	2200      	movs	r2, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fea3 	bl	80011a0 <HAL_GPIO_WritePin>
                          |OUT1_Pin|OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	211e      	movs	r1, #30
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fe9c 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT8_GPIO_Port, OUT8_Pin, GPIO_PIN_RESET);
 8000468:	4b6d      	ldr	r3, [pc, #436]	; (8000620 <MX_GPIO_Init+0x278>)
 800046a:	2200      	movs	r2, #0
 800046c:	2120      	movs	r1, #32
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fe96 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT12_Pin|OUT13_Pin, GPIO_PIN_RESET);
 8000474:	4b6b      	ldr	r3, [pc, #428]	; (8000624 <MX_GPIO_Init+0x27c>)
 8000476:	2200      	movs	r2, #0
 8000478:	21c0      	movs	r1, #192	; 0xc0
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fe90 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT14_Pin|OUT15_Pin|OUT16_Pin|CAN_OK_Pin
 8000480:	23e3      	movs	r3, #227	; 0xe3
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4868      	ldr	r0, [pc, #416]	; (8000628 <MX_GPIO_Init+0x280>)
 8000486:	2200      	movs	r2, #0
 8000488:	0019      	movs	r1, r3
 800048a:	f000 fe89 	bl	80011a0 <HAL_GPIO_WritePin>
                          |CAN_FAULT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUZZER_OUT_Pin|OUT9_Pin|OUT10_Pin|OUT11_Pin
 800048e:	193b      	adds	r3, r7, r4
 8000490:	4a61      	ldr	r2, [pc, #388]	; (8000618 <MX_GPIO_Init+0x270>)
 8000492:	601a      	str	r2, [r3, #0]
                          |OUT1_Pin|OUT2_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2201      	movs	r2, #1
 8000498:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	4a5c      	ldr	r2, [pc, #368]	; (800061c <MX_GPIO_Init+0x274>)
 80004aa:	0019      	movs	r1, r3
 80004ac:	0010      	movs	r0, r2
 80004ae:	f000 fd0b 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = BUZZER_IN_Pin|CAN_BUAD_RATE_Pin|ADD_S5_Pin|IN1_Pin
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	4a5d      	ldr	r2, [pc, #372]	; (800062c <MX_GPIO_Init+0x284>)
 80004b6:	601a      	str	r2, [r3, #0]
                          |IN2_Pin|IN3_Pin|IN4_Pin|IN5_Pin
                          |IN6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	4a58      	ldr	r2, [pc, #352]	; (8000628 <MX_GPIO_Init+0x280>)
 80004c8:	0019      	movs	r1, r3
 80004ca:	0010      	movs	r0, r2
 80004cc:	f000 fcfc 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ADD_S4_Pin|ADD_S3_Pin|ADD_S2_Pin|ADD_S1_Pin
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	4a57      	ldr	r2, [pc, #348]	; (8000630 <MX_GPIO_Init+0x288>)
 80004d4:	601a      	str	r2, [r3, #0]
                          |IN12_Pin|IN13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <MX_GPIO_Init+0x278>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 fced 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADD_S0_Pin;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2208      	movs	r2, #8
 80004f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADD_S0_GPIO_Port, &GPIO_InitStruct);
 8000500:	193b      	adds	r3, r7, r4
 8000502:	4a48      	ldr	r2, [pc, #288]	; (8000624 <MX_GPIO_Init+0x27c>)
 8000504:	0019      	movs	r1, r3
 8000506:	0010      	movs	r0, r2
 8000508:	f000 fcde 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUT4_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	221e      	movs	r2, #30
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	23a0      	movs	r3, #160	; 0xa0
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fccb 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT8_Pin;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2220      	movs	r2, #32
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OUT8_GPIO_Port, &GPIO_InitStruct);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	4a34      	ldr	r2, [pc, #208]	; (8000620 <MX_GPIO_Init+0x278>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 fcb9 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT12_Pin|OUT13_Pin;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	22c0      	movs	r2, #192	; 0xc0
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2201      	movs	r2, #1
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800056e:	193b      	adds	r3, r7, r4
 8000570:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <MX_GPIO_Init+0x27c>)
 8000572:	0019      	movs	r1, r3
 8000574:	0010      	movs	r0, r2
 8000576:	f000 fca7 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = OUT14_Pin|OUT15_Pin|OUT16_Pin|CAN_OK_Pin
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	22e3      	movs	r2, #227	; 0xe3
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	601a      	str	r2, [r3, #0]
                          |CAN_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	000c      	movs	r4, r1
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000598:	193b      	adds	r3, r7, r4
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <MX_GPIO_Init+0x280>)
 800059c:	0019      	movs	r1, r3
 800059e:	0010      	movs	r0, r2
 80005a0:	f000 fc92 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN8_Pin|IN9_Pin;
 80005a4:	0021      	movs	r1, r4
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	22e0      	movs	r2, #224	; 0xe0
 80005aa:	0152      	lsls	r2, r2, #5
 80005ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	000c      	movs	r4, r1
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_GPIO_Init+0x274>)
 80005c0:	0019      	movs	r1, r3
 80005c2:	0010      	movs	r0, r2
 80005c4:	f000 fc80 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN10_Pin|IN11_Pin;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	22c0      	movs	r2, #192	; 0xc0
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	193a      	adds	r2, r7, r4
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fc6f 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN14_Pin|IN15_Pin|IN16_Pin;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	22e0      	movs	r2, #224	; 0xe0
 80005f0:	00d2      	lsls	r2, r2, #3
 80005f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000600:	187b      	adds	r3, r7, r1
 8000602:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <MX_GPIO_Init+0x28c>)
 8000604:	0019      	movs	r1, r3
 8000606:	0010      	movs	r0, r2
 8000608:	f000 fc5e 	bl	8000ec8 <HAL_GPIO_Init>

}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b00d      	add	sp, #52	; 0x34
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	000003c7 	.word	0x000003c7
 800061c:	50000400 	.word	0x50000400
 8000620:	50000800 	.word	0x50000800
 8000624:	50001400 	.word	0x50001400
 8000628:	50001000 	.word	0x50001000
 800062c:	0000fc70 	.word	0x0000fc70
 8000630:	0000f0c0 	.word	0x0000f0c0
 8000634:	50000c00 	.word	0x50000c00

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 f972 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f80b 	bl	800065a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f7ff feb0 	bl	80003a8 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 8000648:	f7ff fe1e 	bl	8000288 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800064c:	f002 f8c8 	bl	80027e0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000650:	f7ff fde6 	bl	8000220 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000654:	f002 f8e6 	bl	8002824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0x20>

0800065a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	b0a7      	sub	sp, #156	; 0x9c
 800065e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000660:	245c      	movs	r4, #92	; 0x5c
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	233c      	movs	r3, #60	; 0x3c
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 fb1f 	bl	8004cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	234c      	movs	r3, #76	; 0x4c
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	0018      	movs	r0, r3
 8000676:	2310      	movs	r3, #16
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f004 fb17 	bl	8004cae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000680:	003b      	movs	r3, r7
 8000682:	0018      	movs	r0, r3
 8000684:	234c      	movs	r3, #76	; 0x4c
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f004 fb10 	bl	8004cae <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fda2 	bl	80011dc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2202      	movs	r2, #2
 800069c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a6:	0021      	movs	r1, r4
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2240      	movs	r2, #64	; 0x40
 80006b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2202      	movs	r2, #2
 80006b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2202      	movs	r2, #2
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2208      	movs	r2, #8
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0292      	lsls	r2, r2, #10
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0492      	lsls	r2, r2, #18
 80006da:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0592      	lsls	r2, r2, #22
 80006e2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fdc4 	bl	8001274 <HAL_RCC_OscConfig>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f0:	f000 f83c 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	214c      	movs	r1, #76	; 0x4c
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2202      	movs	r2, #2
 8000700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2102      	movs	r1, #2
 8000712:	0018      	movs	r0, r3
 8000714:	f001 f914 	bl	8001940 <HAL_RCC_ClockConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071c:	f000 f826 	bl	800076c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000720:	003b      	movs	r3, r7
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	0492      	lsls	r2, r2, #18
 8000726:	601a      	str	r2, [r3, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	649a      	str	r2, [r3, #72]	; 0x48

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	003b      	movs	r3, r7
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fad9 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800073a:	f000 f817 	bl	800076c <Error_Handler>
  }
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b027      	add	sp, #156	; 0x9c
 8000744:	bd90      	pop	{r4, r7, pc}
	...

08000748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d101      	bne.n	800075e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075a:	f000 f903 	bl	8000964 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40012c00 	.word	0x40012c00

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	641a      	str	r2, [r3, #64]	; 0x40
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0549      	lsls	r1, r1, #21
 80007a0:	430a      	orrs	r2, r1
 80007a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	4013      	ands	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007b2:	2302      	movs	r3, #2
 80007b4:	425b      	negs	r3, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	2103      	movs	r1, #3
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f98c 	bl	8000ad8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007c0:	23c0      	movs	r3, #192	; 0xc0
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f8e9 	bl	800099c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	0019      	movs	r1, r3
 80007ee:	200d      	movs	r0, #13
 80007f0:	f000 f972 	bl	8000ad8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007f4:	200d      	movs	r0, #13
 80007f6:	f000 f984 	bl	8000b02 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_InitTick+0xa8>)
 80007fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <HAL_InitTick+0xa8>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0109      	lsls	r1, r1, #4
 8000804:	430a      	orrs	r2, r1
 8000806:	641a      	str	r2, [r3, #64]	; 0x40
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <HAL_InitTick+0xa8>)
 800080a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000816:	230c      	movs	r3, #12
 8000818:	18fa      	adds	r2, r7, r3
 800081a:	2310      	movs	r3, #16
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fa37 	bl	8001c94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000826:	f001 fa1f 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 800082a:	0003      	movs	r3, r0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	4914      	ldr	r1, [pc, #80]	; (8000884 <HAL_InitTick+0xac>)
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff fc68 	bl	8000108 <__udivsi3>
 8000838:	0003      	movs	r3, r0
 800083a:	3b01      	subs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0xb0>)
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <HAL_InitTick+0xb4>)
 8000842:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_InitTick+0xb0>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <HAL_InitTick+0xb8>)
 8000848:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_InitTick+0xb0>)
 800084c:	6a3a      	ldr	r2, [r7, #32]
 800084e:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_InitTick+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_InitTick+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_InitTick+0xb0>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fc7e 	bl	8002160 <HAL_TIM_Base_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d105      	bne.n	8000874 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <HAL_InitTick+0xb0>)
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fcd8 	bl	8002220 <HAL_TIM_Base_Start_IT>
 8000870:	0003      	movs	r3, r0
 8000872:	e000      	b.n	8000876 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b00a      	add	sp, #40	; 0x28
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000
 8000884:	000f4240 	.word	0x000f4240
 8000888:	200019a0 	.word	0x200019a0
 800088c:	40012c00 	.word	0x40012c00
 8000890:	000003e7 	.word	0x000003e7

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fd1c 	bl	80022e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	200019a0 	.word	0x200019a0

080008b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <SystemInit+0x14>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	0512      	lsls	r2, r2, #20
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff fff0 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fe:	f004 f9a9 	bl	8004c54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000902:	f7ff fe99 	bl	8000638 <main>

08000906 <LoopForever>:

LoopForever:
  b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000914:	08004de4 	.word	0x08004de4
  ldr r2, =_sbss
 8000918:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800091c:	20001a30 	.word	0x20001a30

08000920 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_COMP_IRQHandler>
	...

08000924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x3c>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Init+0x3c>)
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	0049      	lsls	r1, r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ff4a 	bl	80007d8 <HAL_InitTick>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d003      	beq.n	8000950 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff ff12 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	001a      	movs	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	18d2      	adds	r2, r2, r3
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000008 	.word	0x20000008
 8000984:	200019ec 	.word	0x200019ec

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	200019ec 	.word	0x200019ec

0800099c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	0019      	movs	r1, r3
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40010000 	.word	0x40010000
 80009c4:	fffff9ff 	.word	0xfffff9ff

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0002      	movs	r2, r0
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b7f      	cmp	r3, #127	; 0x7f
 80009da:	d809      	bhi.n	80009f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	001a      	movs	r2, r3
 80009e2:	231f      	movs	r3, #31
 80009e4:	401a      	ands	r2, r3
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_EnableIRQ+0x30>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	4091      	lsls	r1, r2
 80009ec:	000a      	movs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	0002      	movs	r2, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a10:	d828      	bhi.n	8000a64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a12:	4a2f      	ldr	r2, [pc, #188]	; (8000ad0 <__NVIC_SetPriority+0xd4>)
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	33c0      	adds	r3, #192	; 0xc0
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	589b      	ldr	r3, [r3, r2]
 8000a22:	1dfa      	adds	r2, r7, #7
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	0011      	movs	r1, r2
 8000a28:	2203      	movs	r2, #3
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	21ff      	movs	r1, #255	; 0xff
 8000a30:	4091      	lsls	r1, r2
 8000a32:	000a      	movs	r2, r1
 8000a34:	43d2      	mvns	r2, r2
 8000a36:	401a      	ands	r2, r3
 8000a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	22ff      	movs	r2, #255	; 0xff
 8000a40:	401a      	ands	r2, r3
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0018      	movs	r0, r3
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a50:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <__NVIC_SetPriority+0xd4>)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	33c0      	adds	r3, #192	; 0xc0
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a62:	e031      	b.n	8000ac8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <__NVIC_SetPriority+0xd8>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	400b      	ands	r3, r1
 8000a70:	3b08      	subs	r3, #8
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3306      	adds	r3, #6
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <__NVIC_SetPriority+0xd8>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	001c      	movs	r4, r3
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	4023      	ands	r3, r4
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	430a      	orrs	r2, r1
 8000abe:	3306      	adds	r3, #6
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	18c3      	adds	r3, r0, r3
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	601a      	str	r2, [r3, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b003      	add	sp, #12
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	1c02      	adds	r2, r0, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff ff81 	bl	80009fc <__NVIC_SetPriority>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b004      	add	sp, #16
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	0002      	movs	r2, r0
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff ff57 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e14e      	b.n	8000dd4 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	225c      	movs	r2, #92	; 0x5c
 8000b3a:	5c9b      	ldrb	r3, [r3, r2]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d107      	bne.n	8000b52 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	225d      	movs	r2, #93	; 0x5d
 8000b46:	2100      	movs	r1, #0
 8000b48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fbdf 	bl	8000310 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	438a      	bics	r2, r1
 8000b60:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b62:	f7ff ff11 	bl	8000988 <HAL_GetTick>
 8000b66:	0003      	movs	r3, r0
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b6a:	e012      	b.n	8000b92 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b6c:	f7ff ff0c 	bl	8000988 <HAL_GetTick>
 8000b70:	0002      	movs	r2, r0
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b0a      	cmp	r3, #10
 8000b78:	d90b      	bls.n	8000b92 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	2201      	movs	r2, #1
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	225c      	movs	r2, #92	; 0x5c
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e120      	b.n	8000dd4 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	2208      	movs	r2, #8
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d0e5      	beq.n	8000b6c <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb0:	f7ff feea 	bl	8000988 <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000bb8:	e012      	b.n	8000be0 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000bba:	f7ff fee5 	bl	8000988 <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	d90b      	bls.n	8000be0 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bcc:	2201      	movs	r2, #1
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	225c      	movs	r2, #92	; 0x5c
 8000bd8:	2103      	movs	r1, #3
 8000bda:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e0f9      	b.n	8000dd4 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	2201      	movs	r2, #1
 8000be8:	4013      	ands	r3, r2
 8000bea:	d0e6      	beq.n	8000bba <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	699a      	ldr	r2, [r3, #24]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a76      	ldr	r2, [pc, #472]	; (8000ddc <HAL_FDCAN_Init+0x2b8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d103      	bne.n	8000c0e <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000c06:	4a76      	ldr	r2, [pc, #472]	; (8000de0 <HAL_FDCAN_Init+0x2bc>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7c1b      	ldrb	r3, [r3, #16]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d108      	bne.n	8000c28 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	438a      	bics	r2, r1
 8000c24:	619a      	str	r2, [r3, #24]
 8000c26:	e007      	b.n	8000c38 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	699a      	ldr	r2, [r3, #24]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	430a      	orrs	r2, r1
 8000c36:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7c5b      	ldrb	r3, [r3, #17]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d109      	bne.n	8000c54 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	699a      	ldr	r2, [r3, #24]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	01c9      	lsls	r1, r1, #7
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	e007      	b.n	8000c64 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4961      	ldr	r1, [pc, #388]	; (8000de4 <HAL_FDCAN_Init+0x2c0>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7c9b      	ldrb	r3, [r3, #18]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d108      	bne.n	8000c7e <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	699a      	ldr	r2, [r3, #24]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	495c      	ldr	r1, [pc, #368]	; (8000de8 <HAL_FDCAN_Init+0x2c4>)
 8000c78:	400a      	ands	r2, r1
 8000c7a:	619a      	str	r2, [r3, #24]
 8000c7c:	e008      	b.n	8000c90 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	699a      	ldr	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0149      	lsls	r1, r1, #5
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a55      	ldr	r2, [pc, #340]	; (8000dec <HAL_FDCAN_Init+0x2c8>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	21a4      	movs	r1, #164	; 0xa4
 8000cb4:	438a      	bics	r2, r1
 8000cb6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	438a      	bics	r2, r1
 8000cc6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d108      	bne.n	8000ce2 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	699a      	ldr	r2, [r3, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2104      	movs	r1, #4
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	e02c      	b.n	8000d3c <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d028      	beq.n	8000d3c <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d01c      	beq.n	8000d2c <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d110      	bne.n	8000d3c <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2120      	movs	r1, #32
 8000d26:	430a      	orrs	r2, r1
 8000d28:	619a      	str	r2, [r3, #24]
 8000d2a:	e007      	b.n	8000d3c <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2120      	movs	r1, #32
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d4c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d54:	431a      	orrs	r2, r3
 8000d56:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d64:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d66:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	23c0      	movs	r3, #192	; 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d115      	bne.n	8000da0 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d82:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	3b01      	subs	r3, #1
 8000d96:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d9c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d9e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	22c0      	movs	r2, #192	; 0xc0
 8000da6:	5899      	ldr	r1, [r3, r2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	21c0      	movs	r1, #192	; 0xc0
 8000db4:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 f819 	bl	8000df0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	225c      	movs	r2, #92	; 0x5c
 8000dce:	2101      	movs	r1, #1
 8000dd0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40006400 	.word	0x40006400
 8000de0:	40006500 	.word	0x40006500
 8000de4:	ffffbfff 	.word	0xffffbfff
 8000de8:	ffffefff 	.word	0xffffefff
 8000dec:	fffffcff 	.word	0xfffffcff

08000df0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8000dfa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d105      	bne.n	8000e12 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	22d4      	movs	r2, #212	; 0xd4
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	589b      	ldr	r3, [r3, r2]
 8000e20:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	0019      	movs	r1, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2a:	041a      	lsls	r2, r3, #16
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3370      	adds	r3, #112	; 0x70
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	589b      	ldr	r3, [r3, r2]
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e52:	061a      	lsls	r2, r3, #24
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	33b0      	adds	r3, #176	; 0xb0
 8000e62:	001a      	movs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	3389      	adds	r3, #137	; 0x89
 8000e6c:	33ff      	adds	r3, #255	; 0xff
 8000e6e:	001a      	movs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2298      	movs	r2, #152	; 0x98
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	189a      	adds	r2, r3, r2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	229e      	movs	r2, #158	; 0x9e
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	189a      	adds	r2, r3, r2
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e005      	b.n	8000e9e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	22d4      	movs	r2, #212	; 0xd4
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4694      	mov	ip, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3f1      	bcc.n	8000e92 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	4000b400 	.word	0x4000b400
 8000ebc:	40006800 	.word	0x40006800
 8000ec0:	ffe0ffff 	.word	0xffe0ffff
 8000ec4:	f0ffffff 	.word	0xf0ffffff

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e14d      	b.n	8001174 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x28>
 8000eee:	e13e      	b.n	800116e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0xea>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	58d3      	ldr	r3, [r2, r3]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2107      	movs	r1, #7
 8000fde:	400b      	ands	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	6939      	ldr	r1, [r7, #16]
 8000ff8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	401a      	ands	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	055b      	lsls	r3, r3, #21
 8001036:	4013      	ands	r3, r2
 8001038:	d100      	bne.n	800103c <HAL_GPIO_Init+0x174>
 800103a:	e098      	b.n	800116e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800103c:	4a53      	ldr	r2, [pc, #332]	; (800118c <HAL_GPIO_Init+0x2c4>)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3318      	adds	r3, #24
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	589b      	ldr	r3, [r3, r2]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2203      	movs	r2, #3
 800104e:	4013      	ands	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	220f      	movs	r2, #15
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	23a0      	movs	r3, #160	; 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	429a      	cmp	r2, r3
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x1d6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a48      	ldr	r2, [pc, #288]	; (8001190 <HAL_GPIO_Init+0x2c8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1d2>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1ce>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a46      	ldr	r2, [pc, #280]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1ca>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a45      	ldr	r2, [pc, #276]	; (800119c <HAL_GPIO_Init+0x2d4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1c6>
 800108a:	2304      	movs	r3, #4
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x1d8>
 800108e:	2305      	movs	r3, #5
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x1d8>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x1d8>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x1d8>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x1d8>
 800109e:	2300      	movs	r3, #0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2103      	movs	r1, #3
 80010a4:	400a      	ands	r2, r1
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	4093      	lsls	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010b0:	4936      	ldr	r1, [pc, #216]	; (800118c <HAL_GPIO_Init+0x2c4>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3318      	adds	r3, #24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <HAL_GPIO_Init+0x2c4>)
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	58d3      	ldr	r3, [r2, r3]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	025b      	lsls	r3, r3, #9
 80010d8:	4013      	ands	r3, r2
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e4:	4929      	ldr	r1, [pc, #164]	; (800118c <HAL_GPIO_Init+0x2c4>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <HAL_GPIO_Init+0x2c4>)
 80010ee:	2384      	movs	r3, #132	; 0x84
 80010f0:	58d3      	ldr	r3, [r2, r3]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	029b      	lsls	r3, r3, #10
 8001106:	4013      	ands	r3, r2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001112:	491e      	ldr	r1, [pc, #120]	; (800118c <HAL_GPIO_Init+0x2c4>)
 8001114:	2284      	movs	r2, #132	; 0x84
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_GPIO_Init+0x2c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	035b      	lsls	r3, r3, #13
 8001132:	4013      	ands	r3, r2
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_GPIO_Init+0x2c4>)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_GPIO_Init+0x2c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	039b      	lsls	r3, r3, #14
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_GPIO_Init+0x2c4>)
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	40da      	lsrs	r2, r3
 800117c:	1e13      	subs	r3, r2, #0
 800117e:	d000      	beq.n	8001182 <HAL_GPIO_Init+0x2ba>
 8001180:	e6aa      	b.n	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b006      	add	sp, #24
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021800 	.word	0x40021800
 8001190:	50000400 	.word	0x50000400
 8001194:	50000800 	.word	0x50000800
 8001198:	50000c00 	.word	0x50000c00
 800119c:	50001000 	.word	0x50001000

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	0008      	movs	r0, r1
 80011aa:	0011      	movs	r1, r2
 80011ac:	1cbb      	adds	r3, r7, #2
 80011ae:	1c02      	adds	r2, r0, #0
 80011b0:	801a      	strh	r2, [r3, #0]
 80011b2:	1c7b      	adds	r3, r7, #1
 80011b4:	1c0a      	adds	r2, r1, #0
 80011b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b8:	1c7b      	adds	r3, r7, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c0:	1cbb      	adds	r3, r7, #2
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ca:	1cbb      	adds	r3, r7, #2
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d11f      	bne.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	0013      	movs	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	189b      	adds	r3, r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4912      	ldr	r1, [pc, #72]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7fe ff7a 	bl	8000108 <__udivsi3>
 8001214:	0003      	movs	r3, r0
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800121a:	e008      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3b01      	subs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e001      	b.n	800122e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e009      	b.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	401a      	ands	r2, r3
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	429a      	cmp	r2, r3
 800123e:	d0ed      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	40007000 	.word	0x40007000
 8001250:	fffff9ff 	.word	0xfffff9ff
 8001254:	20000000 	.word	0x20000000
 8001258:	000f4240 	.word	0x000f4240

0800125c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	23e0      	movs	r3, #224	; 0xe0
 8001266:	01db      	lsls	r3, r3, #7
 8001268:	4013      	ands	r3, r2
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	f000 fb56 	bl	8001934 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_RCC_OscConfig+0x20>
 8001292:	e07d      	b.n	8001390 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001294:	4bc3      	ldr	r3, [pc, #780]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2238      	movs	r2, #56	; 0x38
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129e:	4bc1      	ldr	r3, [pc, #772]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2203      	movs	r2, #3
 80012a4:	4013      	ands	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x40>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d002      	beq.n	80012ba <HAL_RCC_OscConfig+0x46>
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4bba      	ldr	r3, [pc, #744]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	029b      	lsls	r3, r3, #10
 80012c2:	4013      	ands	r3, r2
 80012c4:	d063      	beq.n	800138e <HAL_RCC_OscConfig+0x11a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d15f      	bne.n	800138e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f000 fb30 	bl	8001934 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	429a      	cmp	r2, r3
 80012de:	d107      	bne.n	80012f0 <HAL_RCC_OscConfig+0x7c>
 80012e0:	4bb0      	ldr	r3, [pc, #704]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4baf      	ldr	r3, [pc, #700]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	0249      	lsls	r1, r1, #9
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e020      	b.n	8001332 <HAL_RCC_OscConfig+0xbe>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	23a0      	movs	r3, #160	; 0xa0
 80012f6:	02db      	lsls	r3, r3, #11
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10e      	bne.n	800131a <HAL_RCC_OscConfig+0xa6>
 80012fc:	4ba9      	ldr	r3, [pc, #676]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	02c9      	lsls	r1, r1, #11
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	4ba6      	ldr	r3, [pc, #664]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4ba5      	ldr	r3, [pc, #660]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0249      	lsls	r1, r1, #9
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0xbe>
 800131a:	4ba2      	ldr	r3, [pc, #648]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4ba1      	ldr	r3, [pc, #644]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001320:	49a1      	ldr	r1, [pc, #644]	; (80015a8 <HAL_RCC_OscConfig+0x334>)
 8001322:	400a      	ands	r2, r1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	4b9f      	ldr	r3, [pc, #636]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b9e      	ldr	r3, [pc, #632]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800132c:	499f      	ldr	r1, [pc, #636]	; (80015ac <HAL_RCC_OscConfig+0x338>)
 800132e:	400a      	ands	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d014      	beq.n	8001364 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fb25 	bl	8000988 <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fb20 	bl	8000988 <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e2ee      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	4013      	ands	r3, r2
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xd0>
 8001362:	e015      	b.n	8001390 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fb10 	bl	8000988 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff fb0b 	bl	8000988 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e2d9      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001380:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	4013      	ands	r3, r2
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0xfa>
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2202      	movs	r2, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d100      	bne.n	800139c <HAL_RCC_OscConfig+0x128>
 800139a:	e099      	b.n	80014d0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139c:	4b81      	ldr	r3, [pc, #516]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2238      	movs	r2, #56	; 0x38
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2203      	movs	r2, #3
 80013ac:	4013      	ands	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x148>
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d002      	beq.n	80013c2 <HAL_RCC_OscConfig+0x14e>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d135      	bne.n	800142e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4013      	ands	r3, r2
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x166>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e2ac      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a74      	ldr	r2, [pc, #464]	; (80015b0 <HAL_RCC_OscConfig+0x33c>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	021a      	lsls	r2, r3, #8
 80013ea:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d112      	bne.n	800141c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013f6:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800140a:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0adb      	lsrs	r3, r3, #11
 8001410:	2207      	movs	r2, #7
 8001412:	4013      	ands	r3, r2
 8001414:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x344>)
 8001416:	40da      	lsrs	r2, r3
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x348>)
 800141a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x34c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff f9d9 	bl	80007d8 <HAL_InitTick>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d051      	beq.n	80014ce <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e282      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d030      	beq.n	8001498 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001436:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <HAL_RCC_OscConfig+0x340>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0049      	lsls	r1, r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fa96 	bl	8000988 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff fa91 	bl	8000988 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e25f      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4013      	ands	r3, r2
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <HAL_RCC_OscConfig+0x33c>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	021a      	lsls	r2, r3, #8
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	e01b      	b.n	80014d0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800149e:	4949      	ldr	r1, [pc, #292]	; (80015c4 <HAL_RCC_OscConfig+0x350>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa70 	bl	8000988 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fa6b 	bl	8000988 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e239      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4013      	ands	r3, r2
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x23a>
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2208      	movs	r2, #8
 80014d6:	4013      	ands	r3, r2
 80014d8:	d047      	beq.n	800156a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2238      	movs	r2, #56	; 0x38
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b18      	cmp	r3, #24
 80014e4:	d10a      	bne.n	80014fc <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d03c      	beq.n	800156a <HAL_RCC_OscConfig+0x2f6>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d138      	bne.n	800156a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e21b      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d019      	beq.n	8001538 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800150a:	2101      	movs	r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fa3a 	bl	8000988 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fa35 	bl	8000988 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e203      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d0f1      	beq.n	800151a <HAL_RCC_OscConfig+0x2a6>
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800153a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800153e:	2101      	movs	r1, #1
 8001540:	438a      	bics	r2, r1
 8001542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fa20 	bl	8000988 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff fa1b 	bl	8000988 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1e9      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d1f1      	bne.n	800154e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x302>
 8001574:	e0c6      	b.n	8001704 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	231f      	movs	r3, #31
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2238      	movs	r2, #56	; 0x38
 8001584:	4013      	ands	r3, r2
 8001586:	2b20      	cmp	r3, #32
 8001588:	d11e      	bne.n	80015c8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x322>
 8001594:	e0b6      	b.n	8001704 <HAL_RCC_OscConfig+0x490>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d000      	beq.n	80015a0 <HAL_RCC_OscConfig+0x32c>
 800159e:	e0b1      	b.n	8001704 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e1c7      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
 80015a4:	40021000 	.word	0x40021000
 80015a8:	fffeffff 	.word	0xfffeffff
 80015ac:	fffbffff 	.word	0xfffbffff
 80015b0:	ffff80ff 	.word	0xffff80ff
 80015b4:	ffffc7ff 	.word	0xffffc7ff
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004
 80015c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015c8:	4bb8      	ldr	r3, [pc, #736]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80015ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_OscConfig+0x364>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x366>
 80015d8:	2300      	movs	r3, #0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d011      	beq.n	8001602 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4bb3      	ldr	r3, [pc, #716]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80015e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e2:	4bb2      	ldr	r3, [pc, #712]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	0549      	lsls	r1, r1, #21
 80015e8:	430a      	orrs	r2, r1
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ec:	4baf      	ldr	r3, [pc, #700]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80015ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	055b      	lsls	r3, r3, #21
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015fa:	231f      	movs	r3, #31
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	4bab      	ldr	r3, [pc, #684]	; (80018b0 <HAL_RCC_OscConfig+0x63c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4013      	ands	r3, r2
 800160c:	d11a      	bne.n	8001644 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800160e:	4ba8      	ldr	r3, [pc, #672]	; (80018b0 <HAL_RCC_OscConfig+0x63c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4ba7      	ldr	r3, [pc, #668]	; (80018b0 <HAL_RCC_OscConfig+0x63c>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	0049      	lsls	r1, r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800161c:	f7ff f9b4 	bl	8000988 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001626:	f7ff f9af 	bl	8000988 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e17d      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	4b9d      	ldr	r3, [pc, #628]	; (80018b0 <HAL_RCC_OscConfig+0x63c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4013      	ands	r3, r2
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x3e6>
 800164c:	4b97      	ldr	r3, [pc, #604]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800164e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001650:	4b96      	ldr	r3, [pc, #600]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x420>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x408>
 8001662:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001666:	4b91      	ldr	r3, [pc, #580]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001668:	2104      	movs	r1, #4
 800166a:	430a      	orrs	r2, r1
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
 800166e:	4b8f      	ldr	r3, [pc, #572]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001672:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001674:	2101      	movs	r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	65da      	str	r2, [r3, #92]	; 0x5c
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0x420>
 800167c:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800167e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001680:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001682:	2101      	movs	r1, #1
 8001684:	438a      	bics	r2, r1
 8001686:	65da      	str	r2, [r3, #92]	; 0x5c
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800168a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800168c:	4b87      	ldr	r3, [pc, #540]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800168e:	2104      	movs	r1, #4
 8001690:	438a      	bics	r2, r1
 8001692:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d014      	beq.n	80016c6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff f974 	bl	8000988 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff f96f 	bl	8000988 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a80      	ldr	r2, [pc, #512]	; (80018b4 <HAL_RCC_OscConfig+0x640>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e13c      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ba:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x432>
 80016c4:	e013      	b.n	80016ee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff f95f 	bl	8000988 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ce:	e009      	b.n	80016e4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff f95a 	bl	8000988 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a76      	ldr	r2, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x640>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e127      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	4b71      	ldr	r3, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ee:	231f      	movs	r3, #31
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016fc:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80016fe:	496e      	ldr	r1, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x644>)
 8001700:	400a      	ands	r2, r1
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	4013      	ands	r3, r2
 800170c:	d039      	beq.n	8001782 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01b      	beq.n	800174e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	03c9      	lsls	r1, r1, #15
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff f930 	bl	8000988 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800172e:	f7ff f92b 	bl	8000988 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0f9      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	4013      	ands	r3, r2
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x4ba>
 800174c:	e019      	b.n	8001782 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b56      	ldr	r3, [pc, #344]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001754:	4959      	ldr	r1, [pc, #356]	; (80018bc <HAL_RCC_OscConfig+0x648>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff f915 	bl	8000988 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001764:	f7ff f910 	bl	8000988 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0de      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	4013      	ands	r3, r2
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d100      	bne.n	800178c <HAL_RCC_OscConfig+0x518>
 800178a:	e0d2      	b.n	8001932 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2238      	movs	r2, #56	; 0x38
 8001792:	4013      	ands	r3, r2
 8001794:	2b10      	cmp	r3, #16
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x526>
 8001798:	e081      	b.n	800189e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d156      	bne.n	8001850 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80017a8:	4945      	ldr	r1, [pc, #276]	; (80018c0 <HAL_RCC_OscConfig+0x64c>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff f8eb 	bl	8000988 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f8e6 	bl	8000988 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0b4      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	049b      	lsls	r3, r3, #18
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d6:	4b35      	ldr	r3, [pc, #212]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4a3a      	ldr	r2, [pc, #232]	; (80018c4 <HAL_RCC_OscConfig+0x650>)
 80017dc:	4013      	ands	r3, r2
 80017de:	0019      	movs	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	431a      	orrs	r2, r3
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180a:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	0449      	lsls	r1, r1, #17
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	0549      	lsls	r1, r1, #21
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff f8af 	bl	8000988 <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f8aa 	bl	8000988 <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e078      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	049b      	lsls	r3, r3, #18
 800184a:	4013      	ands	r3, r2
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x5bc>
 800184e:	e070      	b.n	8001932 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001856:	491a      	ldr	r1, [pc, #104]	; (80018c0 <HAL_RCC_OscConfig+0x64c>)
 8001858:	400a      	ands	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001862:	2103      	movs	r1, #3
 8001864:	438a      	bics	r2, r1
 8001866:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 800186e:	4916      	ldr	r1, [pc, #88]	; (80018c8 <HAL_RCC_OscConfig+0x654>)
 8001870:	400a      	ands	r2, r1
 8001872:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f888 	bl	8000988 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff f883 	bl	8000988 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e051      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_OscConfig+0x638>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	049b      	lsls	r3, r3, #18
 8001898:	4013      	ands	r3, r2
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x60a>
 800189c:	e049      	b.n	8001932 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e044      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40007000 	.word	0x40007000
 80018b4:	00001388 	.word	0x00001388
 80018b8:	efffffff 	.word	0xefffffff
 80018bc:	ffbfffff 	.word	0xffbfffff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	11c1808c 	.word	0x11c1808c
 80018c8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x6c8>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2203      	movs	r2, #3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	429a      	cmp	r2, r3
 80018de:	d126      	bne.n	800192e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2270      	movs	r2, #112	; 0x70
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11f      	bne.n	800192e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	23fe      	movs	r3, #254	; 0xfe
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d116      	bne.n	800192e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	23f8      	movs	r3, #248	; 0xf8
 8001904:	039b      	lsls	r3, r3, #14
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d10e      	bne.n	800192e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	23e0      	movs	r3, #224	; 0xe0
 8001914:	051b      	lsls	r3, r3, #20
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	0f5b      	lsrs	r3, r3, #29
 8001924:	075a      	lsls	r2, r3, #29
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b008      	add	sp, #32
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0e9      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b76      	ldr	r3, [pc, #472]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2207      	movs	r2, #7
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d91e      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2207      	movs	r2, #7
 8001968:	4393      	bics	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001974:	f7ff f808 	bl	8000988 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197c:	e009      	b.n	8001992 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7ff f803 	bl	8000988 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a6a      	ldr	r2, [pc, #424]	; (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0ca      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2207      	movs	r2, #7
 8001998:	4013      	ands	r3, r2
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d1ee      	bne.n	800197e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d006      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019b4:	4b60      	ldr	r3, [pc, #384]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	21e0      	movs	r1, #224	; 0xe0
 80019bc:	01c9      	lsls	r1, r1, #7
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	4a5d      	ldr	r2, [pc, #372]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4013      	ands	r3, r2
 80019de:	d057      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	029b      	lsls	r3, r3, #10
 80019f0:	4013      	ands	r3, r2
 80019f2:	d12b      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e097      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	049b      	lsls	r3, r3, #18
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d11f      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e08b      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	d113      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e07f      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e074      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e06d      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2207      	movs	r2, #7
 8001a52:	4393      	bics	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a60:	f7fe ff92 	bl	8000988 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a68:	e009      	b.n	8001a7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7fe ff8d 	bl	8000988 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e054      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2238      	movs	r2, #56	; 0x38
 8001a84:	401a      	ands	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1ec      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4013      	ands	r3, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d21e      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab0:	f7fe ff6a 	bl	8000988 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7fe ff65 	bl	8000988 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e02c      	b.n	8001b28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <HAL_RCC_ClockConfig+0x200>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001afa:	f000 f829 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001afe:	0001      	movs	r1, r0
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	220f      	movs	r2, #15
 8001b08:	401a      	ands	r2, r3
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_RCC_ClockConfig+0x204>)
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	58d3      	ldr	r3, [r2, r3]
 8001b10:	221f      	movs	r2, #31
 8001b12:	4013      	ands	r3, r2
 8001b14:	000a      	movs	r2, r1
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x208>)
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x20c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7fe fe59 	bl	80007d8 <HAL_InitTick>
 8001b26:	0003      	movs	r3, r0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000
 8001b34:	00001388 	.word	0x00001388
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffff0ff 	.word	0xfffff0ff
 8001b40:	ffff8fff 	.word	0xffff8fff
 8001b44:	08004d54 	.word	0x08004d54
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2238      	movs	r2, #56	; 0x38
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d10f      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0adb      	lsrs	r3, r3, #11
 8001b66:	2207      	movs	r2, #7
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	4835      	ldr	r0, [pc, #212]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b76:	f7fe fac7 	bl	8000108 <__udivsi3>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e05d      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2238      	movs	r2, #56	; 0x38
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	e054      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2238      	movs	r2, #56	; 0x38
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d138      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	4824      	ldr	r0, [pc, #144]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bc0:	f7fe faa2 	bl	8000108 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	227f      	movs	r2, #127	; 0x7f
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	434b      	muls	r3, r1
 8001bd4:	617b      	str	r3, [r7, #20]
        break;
 8001bd6:	e00d      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	481c      	ldr	r0, [pc, #112]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bdc:	f7fe fa94 	bl	8000108 <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	227f      	movs	r2, #127	; 0x7f
 8001bec:	4013      	ands	r3, r2
 8001bee:	434b      	muls	r3, r1
 8001bf0:	617b      	str	r3, [r7, #20]
        break;
 8001bf2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0f5b      	lsrs	r3, r3, #29
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	3301      	adds	r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	6978      	ldr	r0, [r7, #20]
 8001c06:	f7fe fa7f 	bl	8000108 <__udivsi3>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e015      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2238      	movs	r2, #56	; 0x38
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d103      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2238      	movs	r2, #56	; 0x38
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b18      	cmp	r3, #24
 8001c2e:	d103      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c30:	23fa      	movs	r3, #250	; 0xfa
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e001      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c3c:	693b      	ldr	r3, [r7, #16]
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b006      	add	sp, #24
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	007a1200 	.word	0x007a1200

08001c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000000 	.word	0x20000000

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c6c:	f7ff fff2 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c70:	0004      	movs	r4, r0
 8001c72:	f7ff faf3 	bl	800125c <LL_RCC_GetAPB1Prescaler>
 8001c76:	0003      	movs	r3, r0
 8001c78:	0b1a      	lsrs	r2, r3, #12
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	58d3      	ldr	r3, [r2, r3]
 8001c80:	221f      	movs	r2, #31
 8001c82:	4013      	ands	r3, r2
 8001c84:	40dc      	lsrs	r4, r3
 8001c86:	0023      	movs	r3, r4
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	08004d94 	.word	0x08004d94

08001c94 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_RCC_GetClockConfig+0x4c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2207      	movs	r2, #7
 8001caa:	401a      	ands	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_GetClockConfig+0x4c>)
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	23f0      	movs	r3, #240	; 0xf0
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_RCC_GetClockConfig+0x4c>)
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	23e0      	movs	r3, #224	; 0xe0
 8001cc4:	01db      	lsls	r3, r3, #7
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetClockConfig+0x50>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	601a      	str	r2, [r3, #0]
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cf0:	2313      	movs	r3, #19
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d0c:	e0ad      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2011      	movs	r0, #17
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d110      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0549      	lsls	r1, r1, #21
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d44:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d52:	f7fe fe19 	bl	8000988 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7fe fe14 	bl	8000988 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d904      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d6a:	2313      	movs	r3, #19
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
        break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0ed      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d80:	2313      	movs	r3, #19
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d15e      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d019      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d014      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0249      	lsls	r1, r1, #9
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc4:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d016      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fdd6 	bl	8000988 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	e00c      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe fdd1 	bl	8000988 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d904      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001df2:	2313      	movs	r3, #19
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2203      	movs	r2, #3
 8001df8:	701a      	strb	r2, [r3, #0]
            break;
 8001dfa:	e004      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d0ed      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e06:	2313      	movs	r3, #19
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10a      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e24:	e016      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e26:	2312      	movs	r3, #18
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2213      	movs	r2, #19
 8001e2c:	18ba      	adds	r2, r7, r2
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e00f      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	fffffcff 	.word	0xfffffcff
 8001e40:	fffeffff 	.word	0xfffeffff
 8001e44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2213      	movs	r2, #19
 8001e4e:	18ba      	adds	r2, r7, r2
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e54:	2311      	movs	r3, #17
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4bb6      	ldr	r3, [pc, #728]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e62:	4bb5      	ldr	r3, [pc, #724]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e64:	49b5      	ldr	r1, [pc, #724]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e74:	4bb0      	ldr	r3, [pc, #704]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4bad      	ldr	r3, [pc, #692]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e92:	4ba9      	ldr	r3, [pc, #676]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	220c      	movs	r2, #12
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4ba5      	ldr	r3, [pc, #660]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eb0:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	2230      	movs	r2, #48	; 0x30
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ece:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	4a9b      	ldr	r2, [pc, #620]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	4013      	ands	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001eee:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	4a94      	ldr	r2, [pc, #592]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0e:	4b8a      	ldr	r3, [pc, #552]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	4a8d      	ldr	r2, [pc, #564]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1c:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f2e:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	4a86      	ldr	r2, [pc, #536]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	4013      	ands	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	4a79      	ldr	r2, [pc, #484]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	0899      	lsrs	r1, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f96:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b62      	ldr	r3, [pc, #392]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0249      	lsls	r1, r1, #9
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	031b      	lsls	r3, r3, #12
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	039b      	lsls	r3, r3, #14
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d016      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	03db      	lsls	r3, r3, #15
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0449      	lsls	r1, r1, #17
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	03db      	lsls	r3, r3, #15
 8002018:	4013      	ands	r3, r2
 800201a:	d016      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202c:	430a      	orrs	r2, r1
 800202e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	045b      	lsls	r3, r3, #17
 8002038:	429a      	cmp	r2, r3
 800203a:	d106      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0449      	lsls	r1, r1, #17
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d014      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	2203      	movs	r2, #3
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002066:	430a      	orrs	r2, r1
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d106      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0249      	lsls	r1, r1, #9
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	019b      	lsls	r3, r3, #6
 8002088:	4013      	ands	r3, r2
 800208a:	d014      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	220c      	movs	r2, #12
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209c:	430a      	orrs	r2, r1
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d106      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0249      	lsls	r1, r1, #9
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	045b      	lsls	r3, r3, #17
 80020be:	4013      	ands	r3, r2
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0449      	lsls	r1, r1, #17
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	049b      	lsls	r3, r3, #18
 80020f8:	4013      	ands	r3, r2
 80020fa:	d016      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	430a      	orrs	r2, r1
 800210e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0449      	lsls	r1, r1, #17
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800212a:	2312      	movs	r3, #18
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	781b      	ldrb	r3, [r3, #0]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b006      	add	sp, #24
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	efffffff 	.word	0xefffffff
 8002140:	fffff3ff 	.word	0xfffff3ff
 8002144:	fffffcff 	.word	0xfffffcff
 8002148:	fff3ffff 	.word	0xfff3ffff
 800214c:	ffcfffff 	.word	0xffcfffff
 8002150:	ffffcfff 	.word	0xffffcfff
 8002154:	ffff3fff 	.word	0xffff3fff
 8002158:	ffbfffff 	.word	0xffbfffff
 800215c:	feffffff 	.word	0xfeffffff

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e04a      	b.n	8002208 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	223d      	movs	r2, #61	; 0x3d
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	223c      	movs	r2, #60	; 0x3c
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f841 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	223d      	movs	r2, #61	; 0x3d
 8002192:	2102      	movs	r1, #2
 8002194:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f000 f9f1 	bl	8002588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2248      	movs	r2, #72	; 0x48
 80021aa:	2101      	movs	r1, #1
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	223e      	movs	r2, #62	; 0x3e
 80021b2:	2101      	movs	r1, #1
 80021b4:	5499      	strb	r1, [r3, r2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223f      	movs	r2, #63	; 0x3f
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2240      	movs	r2, #64	; 0x40
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2241      	movs	r2, #65	; 0x41
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2242      	movs	r2, #66	; 0x42
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2243      	movs	r2, #67	; 0x43
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2244      	movs	r2, #68	; 0x44
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2245      	movs	r2, #69	; 0x45
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2246      	movs	r2, #70	; 0x46
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2247      	movs	r2, #71	; 0x47
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	223d      	movs	r2, #61	; 0x3d
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	223d      	movs	r2, #61	; 0x3d
 800222c:	5c9b      	ldrb	r3, [r3, r2]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e047      	b.n	80022c8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	223d      	movs	r2, #61	; 0x3d
 800223c:	2102      	movs	r1, #2
 800223e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d014      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x64>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	429a      	cmp	r2, r3
 8002264:	d00e      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x64>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x64>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x64>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_TIM_Base_Start_IT+0xbc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d116      	bne.n	80022b2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d016      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0xa4>
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	025b      	lsls	r3, r3, #9
 800229c:	429a      	cmp	r2, r3
 800229e:	d011      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b0:	e008      	b.n	80022c4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e000      	b.n	80022c6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800
 80022dc:	40014000 	.word	0x40014000
 80022e0:	00010007 	.word	0x00010007

080022e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d124      	bne.n	8002344 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d11d      	bne.n	8002344 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2203      	movs	r2, #3
 800230e:	4252      	negs	r2, r2
 8002310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2203      	movs	r2, #3
 8002320:	4013      	ands	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f916 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 800232c:	e007      	b.n	800233e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 f909 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f915 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	2b04      	cmp	r3, #4
 8002350:	d125      	bne.n	800239e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2204      	movs	r2, #4
 800235a:	4013      	ands	r3, r2
 800235c:	2b04      	cmp	r3, #4
 800235e:	d11e      	bne.n	800239e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2205      	movs	r2, #5
 8002366:	4252      	negs	r2, r2
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	23c0      	movs	r3, #192	; 0xc0
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f8e9 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 8002386:	e007      	b.n	8002398 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f8dc 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f8e8 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2208      	movs	r2, #8
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d124      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2208      	movs	r2, #8
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d11d      	bne.n	80023f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2209      	movs	r2, #9
 80023c0:	4252      	negs	r2, r2
 80023c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2204      	movs	r2, #4
 80023c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2203      	movs	r2, #3
 80023d2:	4013      	ands	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f8bd 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 80023de:	e007      	b.n	80023f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f8b0 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f8bc 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2210      	movs	r2, #16
 80023fe:	4013      	ands	r3, r2
 8002400:	2b10      	cmp	r3, #16
 8002402:	d125      	bne.n	8002450 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	2b10      	cmp	r3, #16
 8002410:	d11e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2211      	movs	r2, #17
 8002418:	4252      	negs	r2, r2
 800241a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2208      	movs	r2, #8
 8002420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	23c0      	movs	r3, #192	; 0xc0
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f890 	bl	8002558 <HAL_TIM_IC_CaptureCallback>
 8002438:	e007      	b.n	800244a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f883 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f88f 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10f      	bne.n	800247e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2202      	movs	r2, #2
 8002472:	4252      	negs	r2, r2
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe f965 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	4013      	ands	r3, r2
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d10f      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	4013      	ands	r3, r2
 8002496:	2b80      	cmp	r3, #128	; 0x80
 8002498:	d108      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2281      	movs	r2, #129	; 0x81
 80024a0:	4252      	negs	r2, r2
 80024a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f900 	bl	80026ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	401a      	ands	r2, r3
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	429a      	cmp	r2, r3
 80024be:	d10e      	bne.n	80024de <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b80      	cmp	r3, #128	; 0x80
 80024cc:	d107      	bne.n	80024de <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_IRQHandler+0x260>)
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f8ef 	bl	80026bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2240      	movs	r2, #64	; 0x40
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d10f      	bne.n	800250c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d108      	bne.n	800250c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2241      	movs	r2, #65	; 0x41
 8002500:	4252      	negs	r2, r2
 8002502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f836 	bl	8002578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2220      	movs	r2, #32
 8002514:	4013      	ands	r3, r2
 8002516:	2b20      	cmp	r3, #32
 8002518:	d10f      	bne.n	800253a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	4013      	ands	r3, r2
 8002524:	2b20      	cmp	r3, #32
 8002526:	d108      	bne.n	800253a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2221      	movs	r2, #33	; 0x21
 800252e:	4252      	negs	r2, r2
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f8b1 	bl	800269c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	fffffeff 	.word	0xfffffeff

08002548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a38      	ldr	r2, [pc, #224]	; (800267c <TIM_Base_SetConfig+0xf4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00c      	beq.n	80025ba <TIM_Base_SetConfig+0x32>
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	05db      	lsls	r3, r3, #23
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d007      	beq.n	80025ba <TIM_Base_SetConfig+0x32>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a34      	ldr	r2, [pc, #208]	; (8002680 <TIM_Base_SetConfig+0xf8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_Base_SetConfig+0x32>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a33      	ldr	r2, [pc, #204]	; (8002684 <TIM_Base_SetConfig+0xfc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d108      	bne.n	80025cc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2270      	movs	r2, #112	; 0x70
 80025be:	4393      	bics	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <TIM_Base_SetConfig+0xf4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01c      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	05db      	lsls	r3, r3, #23
 80025da:	429a      	cmp	r2, r3
 80025dc:	d017      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a27      	ldr	r2, [pc, #156]	; (8002680 <TIM_Base_SetConfig+0xf8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a26      	ldr	r2, [pc, #152]	; (8002684 <TIM_Base_SetConfig+0xfc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00f      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a25      	ldr	r2, [pc, #148]	; (8002688 <TIM_Base_SetConfig+0x100>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a24      	ldr	r2, [pc, #144]	; (800268c <TIM_Base_SetConfig+0x104>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <TIM_Base_SetConfig+0x108>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0x86>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <TIM_Base_SetConfig+0x10c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <TIM_Base_SetConfig+0x110>)
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	4393      	bics	r3, r2
 8002626:	001a      	movs	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <TIM_Base_SetConfig+0xf4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00b      	beq.n	8002666 <TIM_Base_SetConfig+0xde>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <TIM_Base_SetConfig+0x104>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d007      	beq.n	8002666 <TIM_Base_SetConfig+0xde>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <TIM_Base_SetConfig+0x108>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <TIM_Base_SetConfig+0xde>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <TIM_Base_SetConfig+0x10c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d103      	bne.n	800266e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	615a      	str	r2, [r3, #20]
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40002000 	.word	0x40002000
 800268c:	40014000 	.word	0x40014000
 8002690:	40014400 	.word	0x40014400
 8002694:	40014800 	.word	0x40014800
 8002698:	fffffcff 	.word	0xfffffcff

0800269c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}

080026cc <__NVIC_SetPriority>:
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	0002      	movs	r2, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b7f      	cmp	r3, #127	; 0x7f
 80026e0:	d828      	bhi.n	8002734 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e2:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <__NVIC_SetPriority+0xd4>)
 80026e4:	1dfb      	adds	r3, r7, #7
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	33c0      	adds	r3, #192	; 0xc0
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	589b      	ldr	r3, [r3, r2]
 80026f2:	1dfa      	adds	r2, r7, #7
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	0011      	movs	r1, r2
 80026f8:	2203      	movs	r2, #3
 80026fa:	400a      	ands	r2, r1
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	21ff      	movs	r1, #255	; 0xff
 8002700:	4091      	lsls	r1, r2
 8002702:	000a      	movs	r2, r1
 8002704:	43d2      	mvns	r2, r2
 8002706:	401a      	ands	r2, r3
 8002708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	401a      	ands	r2, r3
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	0018      	movs	r0, r3
 8002718:	2303      	movs	r3, #3
 800271a:	4003      	ands	r3, r0
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002720:	481f      	ldr	r0, [pc, #124]	; (80027a0 <__NVIC_SetPriority+0xd4>)
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b25b      	sxtb	r3, r3
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	430a      	orrs	r2, r1
 800272c:	33c0      	adds	r3, #192	; 0xc0
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	501a      	str	r2, [r3, r0]
}
 8002732:	e031      	b.n	8002798 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <__NVIC_SetPriority+0xd8>)
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	0019      	movs	r1, r3
 800273c:	230f      	movs	r3, #15
 800273e:	400b      	ands	r3, r1
 8002740:	3b08      	subs	r3, #8
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3306      	adds	r3, #6
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	18d3      	adds	r3, r2, r3
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1dfa      	adds	r2, r7, #7
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	0011      	movs	r1, r2
 8002754:	2203      	movs	r2, #3
 8002756:	400a      	ands	r2, r1
 8002758:	00d2      	lsls	r2, r2, #3
 800275a:	21ff      	movs	r1, #255	; 0xff
 800275c:	4091      	lsls	r1, r2
 800275e:	000a      	movs	r2, r1
 8002760:	43d2      	mvns	r2, r2
 8002762:	401a      	ands	r2, r3
 8002764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	401a      	ands	r2, r3
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	0018      	movs	r0, r3
 8002774:	2303      	movs	r3, #3
 8002776:	4003      	ands	r3, r0
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800277c:	4809      	ldr	r0, [pc, #36]	; (80027a4 <__NVIC_SetPriority+0xd8>)
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	001c      	movs	r4, r3
 8002784:	230f      	movs	r3, #15
 8002786:	4023      	ands	r3, r4
 8002788:	3b08      	subs	r3, #8
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	430a      	orrs	r2, r1
 800278e:	3306      	adds	r3, #6
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	18c3      	adds	r3, r0, r3
 8002794:	3304      	adds	r3, #4
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b003      	add	sp, #12
 800279e:	bd90      	pop	{r4, r7, pc}
 80027a0:	e000e100 	.word	0xe000e100
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SysTick_Handler+0x1c>)
 80027ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027b0:	f001 fb90 	bl	8003ed4 <xTaskGetSchedulerState>
 80027b4:	0003      	movs	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80027ba:	f002 f85d 	bl	8004878 <xPortSysTickHandler>
  }
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80027cc:	2305      	movs	r3, #5
 80027ce:	425b      	negs	r3, r3
 80027d0:	2100      	movs	r1, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7ff ff7a 	bl	80026cc <__NVIC_SetPriority>
#endif
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e6:	f3ef 8305 	mrs	r3, IPSR
 80027ea:	603b      	str	r3, [r7, #0]
  return(result);
 80027ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027f2:	2306      	movs	r3, #6
 80027f4:	425b      	negs	r3, r3
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	e00c      	b.n	8002814 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <osKernelInitialize+0x40>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <osKernelInitialize+0x40>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	e002      	b.n	8002814 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800280e:	2301      	movs	r3, #1
 8002810:	425b      	negs	r3, r3
 8002812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	2000002c 	.word	0x2000002c

08002824 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282a:	f3ef 8305 	mrs	r3, IPSR
 800282e:	603b      	str	r3, [r7, #0]
  return(result);
 8002830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002836:	2306      	movs	r3, #6
 8002838:	425b      	negs	r3, r3
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	e010      	b.n	8002860 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <osKernelStart+0x48>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d109      	bne.n	800285a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002846:	f7ff ffbf 	bl	80027c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <osKernelStart+0x48>)
 800284c:	2202      	movs	r2, #2
 800284e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002850:	f000 ff6e 	bl	8003730 <vTaskStartScheduler>
      stat = osOK;
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	e002      	b.n	8002860 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800285a:	2301      	movs	r3, #1
 800285c:	425b      	negs	r3, r3
 800285e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b002      	add	sp, #8
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	2000002c 	.word	0x2000002c

08002870 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af04      	add	r7, sp, #16
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002880:	f3ef 8305 	mrs	r3, IPSR
 8002884:	617b      	str	r3, [r7, #20]
  return(result);
 8002886:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002888:	2b00      	cmp	r3, #0
 800288a:	d000      	beq.n	800288e <osThreadNew+0x1e>
 800288c:	e081      	b.n	8002992 <osThreadNew+0x122>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d100      	bne.n	8002896 <osThreadNew+0x26>
 8002894:	e07d      	b.n	8002992 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800289a:	2318      	movs	r3, #24
 800289c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	425b      	negs	r3, r3
 80028a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d044      	beq.n	8002938 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <osThreadNew+0x4c>
        name = attr->name;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <osThreadNew+0x70>
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b38      	cmp	r3, #56	; 0x38
 80028d4:	d804      	bhi.n	80028e0 <osThreadNew+0x70>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	d001      	beq.n	80028e4 <osThreadNew+0x74>
        return (NULL);
 80028e0:	2300      	movs	r3, #0
 80028e2:	e057      	b.n	8002994 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <osThreadNew+0xaa>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b5b      	cmp	r3, #91	; 0x5b
 8002902:	d90a      	bls.n	800291a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <osThreadNew+0xaa>
        mem = 1;
 8002914:	2301      	movs	r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e010      	b.n	800293c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <osThreadNew+0xcc>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <osThreadNew+0xcc>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <osThreadNew+0xcc>
          mem = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e001      	b.n	800293c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d112      	bne.n	8002968 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800294a:	68bd      	ldr	r5, [r7, #8]
 800294c:	6a3c      	ldr	r4, [r7, #32]
 800294e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	9201      	str	r2, [sp, #4]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	002b      	movs	r3, r5
 800295c:	0022      	movs	r2, r4
 800295e:	f000 fd3e 	bl	80033de <xTaskCreateStatic>
 8002962:	0003      	movs	r3, r0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e014      	b.n	8002992 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d111      	bne.n	8002992 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	b29a      	uxth	r2, r3
 8002972:	68bc      	ldr	r4, [r7, #8]
 8002974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	2310      	movs	r3, #16
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	0023      	movs	r3, r4
 8002984:	f000 fd6f 	bl	8003466 <xTaskCreate>
 8002988:	0003      	movs	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <osThreadNew+0x122>
            hTask = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002992:	693b      	ldr	r3, [r7, #16]
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b00a      	add	sp, #40	; 0x28
 800299a:	bdb0      	pop	{r4, r5, r7, pc}

0800299c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029a4:	f3ef 8305 	mrs	r3, IPSR
 80029a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <osDelay+0x1c>
    stat = osErrorISR;
 80029b0:	2306      	movs	r3, #6
 80029b2:	425b      	negs	r3, r3
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e008      	b.n	80029ca <osDelay+0x2e>
  }
  else {
    stat = osOK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <osDelay+0x2e>
      vTaskDelay(ticks);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 fe8d 	bl	80036e4 <vTaskDelay>
    }
  }

  return (stat);
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a06      	ldr	r2, [pc, #24]	; (80029fc <vApplicationGetIdleTaskMemory+0x28>)
 80029e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80029ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	601a      	str	r2, [r3, #0]
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	20000030 	.word	0x20000030
 8002a00:	2000008c 	.word	0x2000008c

08002a04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <vApplicationGetTimerTaskMemory+0x28>)
 8002a14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b004      	add	sp, #16
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000028c 	.word	0x2000028c
 8002a30:	200002e8 	.word	0x200002e8

08002a34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3308      	adds	r3, #8
 8002a40:	001a      	movs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4252      	negs	r2, r2
 8002a4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3308      	adds	r3, #8
 8002a52:	001a      	movs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	001a      	movs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b002      	add	sp, #8
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b004      	add	sp, #16
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3301      	adds	r3, #1
 8002ade:	d103      	bne.n	8002ae8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	e00c      	b.n	8002b02 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3308      	adds	r3, #8
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e002      	b.n	8002af6 <vListInsert+0x2c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d2f6      	bcs.n	8002af0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6852      	ldr	r2, [r2, #4]
 8002b56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d103      	bne.n	8002b6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1e5a      	subs	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <xQueueGenericReset+0x18>
 8002b9a:	b672      	cpsid	i
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002b9e:	f001 fe0f 	bl	80047c0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	434b      	muls	r3, r1
 8002bb0:	18d2      	adds	r2, r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	1e59      	subs	r1, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	434b      	muls	r3, r1
 8002bd4:	18d2      	adds	r2, r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2244      	movs	r2, #68	; 0x44
 8002bde:	21ff      	movs	r1, #255	; 0xff
 8002be0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2245      	movs	r2, #69	; 0x45
 8002be6:	21ff      	movs	r1, #255	; 0xff
 8002be8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3310      	adds	r3, #16
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 ffd7 	bl	8003bb0 <xTaskRemoveFromEventList>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d00c      	beq.n	8002c20 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c06:	f001 fdcb 	bl	80047a0 <vPortYield>
 8002c0a:	e009      	b.n	8002c20 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff0f 	bl	8002a34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff ff0a 	bl	8002a34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c20:	f001 fde0 	bl	80047e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c2e:	b590      	push	{r4, r7, lr}
 8002c30:	b089      	sub	sp, #36	; 0x24
 8002c32:	af02      	add	r7, sp, #8
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <xQueueGenericCreateStatic+0x18>
 8002c42:	b672      	cpsid	i
 8002c44:	e7fe      	b.n	8002c44 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <xQueueGenericCreateStatic+0x22>
 8002c4c:	b672      	cpsid	i
 8002c4e:	e7fe      	b.n	8002c4e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <xQueueGenericCreateStatic+0x2e>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <xQueueGenericCreateStatic+0x32>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <xQueueGenericCreateStatic+0x34>
 8002c60:	2300      	movs	r3, #0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericCreateStatic+0x3c>
 8002c66:	b672      	cpsid	i
 8002c68:	e7fe      	b.n	8002c68 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <xQueueGenericCreateStatic+0x48>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <xQueueGenericCreateStatic+0x4c>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <xQueueGenericCreateStatic+0x4e>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <xQueueGenericCreateStatic+0x56>
 8002c80:	b672      	cpsid	i
 8002c82:	e7fe      	b.n	8002c82 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c84:	2350      	movs	r3, #80	; 0x50
 8002c86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b50      	cmp	r3, #80	; 0x50
 8002c8c:	d001      	beq.n	8002c92 <xQueueGenericCreateStatic+0x64>
 8002c8e:	b672      	cpsid	i
 8002c90:	e7fe      	b.n	8002c90 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c92:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2246      	movs	r2, #70	; 0x46
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ca6:	2328      	movs	r3, #40	; 0x28
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781c      	ldrb	r4, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	0023      	movs	r3, r4
 8002cb8:	f000 f805 	bl	8002cc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cbc:	697b      	ldr	r3, [r7, #20]
	}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b007      	add	sp, #28
 8002cc4:	bd90      	pop	{r4, r7, pc}

08002cc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	1cfb      	adds	r3, r7, #3
 8002cd6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e002      	b.n	8002cec <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7ff ff42 	bl	8002b86 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1cfa      	adds	r2, r7, #3
 8002d06:	214c      	movs	r1, #76	; 0x4c
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b004      	add	sp, #16
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <xQueueGenericSend+0x20>
 8002d30:	b672      	cpsid	i
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSend+0x2e>
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSend+0x32>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSend+0x34>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <xQueueGenericSend+0x3c>
 8002d4c:	b672      	cpsid	i
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x4a>
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x4e>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x50>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <xQueueGenericSend+0x58>
 8002d68:	b672      	cpsid	i
 8002d6a:	e7fe      	b.n	8002d6a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d6c:	f001 f8b2 	bl	8003ed4 <xTaskGetSchedulerState>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d102      	bne.n	8002d7a <xQueueGenericSend+0x66>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <xQueueGenericSend+0x6a>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSend+0x6c>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <xQueueGenericSend+0x74>
 8002d84:	b672      	cpsid	i
 8002d86:	e7fe      	b.n	8002d86 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d88:	f001 fd1a 	bl	80047c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d302      	bcc.n	8002d9e <xQueueGenericSend+0x8a>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d11e      	bne.n	8002ddc <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 f9a2 	bl	80030ee <prvCopyDataToQueue>
 8002daa:	0003      	movs	r3, r0
 8002dac:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fef8 	bl	8003bb0 <xTaskRemoveFromEventList>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d007      	beq.n	8002dd4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dc4:	f001 fcec 	bl	80047a0 <vPortYield>
 8002dc8:	e004      	b.n	8002dd4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dd0:	f001 fce6 	bl	80047a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dd4:	f001 fd06 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e05b      	b.n	8002e94 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002de2:	f001 fcff 	bl	80047e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e054      	b.n	8002e94 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002df0:	2314      	movs	r3, #20
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 ff37 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dfe:	f001 fcf1 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e02:	f000 fce9 	bl	80037d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e06:	f001 fcdb 	bl	80047c0 <vPortEnterCritical>
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	2244      	movs	r2, #68	; 0x44
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	d103      	bne.n	8002e1e <xQueueGenericSend+0x10a>
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2244      	movs	r2, #68	; 0x44
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2245      	movs	r2, #69	; 0x45
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	d103      	bne.n	8002e32 <xQueueGenericSend+0x11e>
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	2245      	movs	r2, #69	; 0x45
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]
 8002e32:	f001 fcd7 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e36:	1d3a      	adds	r2, r7, #4
 8002e38:	2314      	movs	r3, #20
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 ff26 	bl	8003c90 <xTaskCheckForTimeOut>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d11e      	bne.n	8002e86 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fa54 	bl	80032f8 <prvIsQueueFull>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d011      	beq.n	8002e78 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	3310      	adds	r3, #16
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fe63 	bl	8003b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 f9d3 	bl	8003210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e6a:	f000 fcc1 	bl	80037f0 <xTaskResumeAll>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d18a      	bne.n	8002d88 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002e72:	f001 fc95 	bl	80047a0 <vPortYield>
 8002e76:	e787      	b.n	8002d88 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f9c8 	bl	8003210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e80:	f000 fcb6 	bl	80037f0 <xTaskResumeAll>
 8002e84:	e780      	b.n	8002d88 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f9c1 	bl	8003210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e8e:	f000 fcaf 	bl	80037f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b00a      	add	sp, #40	; 0x28
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueGenericSendFromISR+0x1c>
 8002eb4:	b672      	cpsid	i
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSendFromISR+0x2a>
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSendFromISR+0x2e>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSendFromISR+0x30>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <xQueueGenericSendFromISR+0x38>
 8002ed0:	b672      	cpsid	i
 8002ed2:	e7fe      	b.n	8002ed2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSendFromISR+0x46>
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSendFromISR+0x4a>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSendFromISR+0x4c>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <xQueueGenericSendFromISR+0x54>
 8002eec:	b672      	cpsid	i
 8002eee:	e7fe      	b.n	8002eee <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ef0:	f001 fc90 	bl	8004814 <ulSetInterruptMaskFromISR>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <xQueueGenericSendFromISR+0x6e>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d131      	bne.n	8002f6e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f0a:	241b      	movs	r4, #27
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	6a3a      	ldr	r2, [r7, #32]
 8002f10:	2145      	movs	r1, #69	; 0x45
 8002f12:	5c52      	ldrb	r2, [r2, r1]
 8002f14:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f8e3 	bl	80030ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	d111      	bne.n	8002f56 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	3324      	adds	r3, #36	; 0x24
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fe36 	bl	8003bb0 <xTaskRemoveFromEventList>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d00f      	beq.n	8002f68 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e008      	b.n	8002f68 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f56:	231b      	movs	r3, #27
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	b259      	sxtb	r1, r3
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2245      	movs	r2, #69	; 0x45
 8002f66:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8002f6c:	e001      	b.n	8002f72 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 fc53 	bl	8004820 <vClearInterruptMaskFromISR>

	return xReturn;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b00b      	add	sp, #44	; 0x2c
 8002f82:	bd90      	pop	{r4, r7, pc}

08002f84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <xQueueReceive+0x1e>
 8002f9e:	b672      	cpsid	i
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d103      	bne.n	8002fb0 <xQueueReceive+0x2c>
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <xQueueReceive+0x30>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <xQueueReceive+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <xQueueReceive+0x3a>
 8002fba:	b672      	cpsid	i
 8002fbc:	e7fe      	b.n	8002fbc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fbe:	f000 ff89 	bl	8003ed4 <xTaskGetSchedulerState>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d102      	bne.n	8002fcc <xQueueReceive+0x48>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <xQueueReceive+0x4c>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <xQueueReceive+0x4e>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <xQueueReceive+0x56>
 8002fd6:	b672      	cpsid	i
 8002fd8:	e7fe      	b.n	8002fd8 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fda:	f001 fbf1 	bl	80047c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01a      	beq.n	8003020 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f8e7 	bl	80031c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	3310      	adds	r3, #16
 800300a:	0018      	movs	r0, r3
 800300c:	f000 fdd0 	bl	8003bb0 <xTaskRemoveFromEventList>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d001      	beq.n	8003018 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003014:	f001 fbc4 	bl	80047a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003018:	f001 fbe4 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	e062      	b.n	80030e6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003026:	f001 fbdd 	bl	80047e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800302a:	2300      	movs	r3, #0
 800302c:	e05b      	b.n	80030e6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003034:	2314      	movs	r3, #20
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	0018      	movs	r0, r3
 800303a:	f000 fe15 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800303e:	2301      	movs	r3, #1
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003042:	f001 fbcf 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003046:	f000 fbc7 	bl	80037d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800304a:	f001 fbb9 	bl	80047c0 <vPortEnterCritical>
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2244      	movs	r2, #68	; 0x44
 8003052:	5c9b      	ldrb	r3, [r3, r2]
 8003054:	b25b      	sxtb	r3, r3
 8003056:	3301      	adds	r3, #1
 8003058:	d103      	bne.n	8003062 <xQueueReceive+0xde>
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2244      	movs	r2, #68	; 0x44
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	2245      	movs	r2, #69	; 0x45
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	b25b      	sxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	d103      	bne.n	8003076 <xQueueReceive+0xf2>
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2245      	movs	r2, #69	; 0x45
 8003072:	2100      	movs	r1, #0
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	f001 fbb5 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800307a:	1d3a      	adds	r2, r7, #4
 800307c:	2314      	movs	r3, #20
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	0011      	movs	r1, r2
 8003082:	0018      	movs	r0, r3
 8003084:	f000 fe04 	bl	8003c90 <xTaskCheckForTimeOut>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d11e      	bne.n	80030ca <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	0018      	movs	r0, r3
 8003090:	f000 f91c 	bl	80032cc <prvIsQueueEmpty>
 8003094:	1e03      	subs	r3, r0, #0
 8003096:	d011      	beq.n	80030bc <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 fd41 	bl	8003b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 f8b1 	bl	8003210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030ae:	f000 fb9f 	bl	80037f0 <xTaskResumeAll>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d191      	bne.n	8002fda <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80030b6:	f001 fb73 	bl	80047a0 <vPortYield>
 80030ba:	e78e      	b.n	8002fda <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 f8a6 	bl	8003210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030c4:	f000 fb94 	bl	80037f0 <xTaskResumeAll>
 80030c8:	e787      	b.n	8002fda <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 f89f 	bl	8003210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030d2:	f000 fb8d 	bl	80037f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 f8f7 	bl	80032cc <prvIsQueueEmpty>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d100      	bne.n	80030e4 <xQueueReceive+0x160>
 80030e2:	e77a      	b.n	8002fda <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b00a      	add	sp, #40	; 0x28
 80030ec:	bd80      	pop	{r7, pc}

080030ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d14e      	bne.n	80031b2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 fef7 	bl	8003f0c <xTaskPriorityDisinherit>
 800311e:	0003      	movs	r3, r0
 8003120:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	e043      	b.n	80031b2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d119      	bne.n	8003164 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6858      	ldr	r0, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0019      	movs	r1, r3
 800313c:	f001 fdae 	bl	8004c9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	18d2      	adds	r2, r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d32b      	bcc.n	80031b2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e026      	b.n	80031b2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68d8      	ldr	r0, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0019      	movs	r1, r3
 8003170:	f001 fd94 	bl	8004c9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	425b      	negs	r3, r3
 800317e:	18d2      	adds	r2, r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d207      	bcs.n	80031a0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	425b      	negs	r3, r3
 800319a:	18d2      	adds	r2, r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d105      	bne.n	80031b2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031ba:	697b      	ldr	r3, [r7, #20]
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b006      	add	sp, #24
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	18d2      	adds	r2, r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d303      	bcc.n	80031f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68d9      	ldr	r1, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	0018      	movs	r0, r3
 8003204:	f001 fd4a 	bl	8004c9c <memcpy>
	}
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003218:	f001 fad2 	bl	80047c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800321c:	230f      	movs	r3, #15
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	2145      	movs	r1, #69	; 0x45
 8003224:	5c52      	ldrb	r2, [r2, r1]
 8003226:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003228:	e013      	b.n	8003252 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3324      	adds	r3, #36	; 0x24
 8003236:	0018      	movs	r0, r3
 8003238:	f000 fcba 	bl	8003bb0 <xTaskRemoveFromEventList>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d001      	beq.n	8003244 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003240:	f000 fd76 	bl	8003d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003244:	210f      	movs	r1, #15
 8003246:	187b      	adds	r3, r7, r1
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3b01      	subs	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	187b      	adds	r3, r7, r1
 8003250:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003252:	230f      	movs	r3, #15
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b25b      	sxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	dce5      	bgt.n	800322a <prvUnlockQueue+0x1a>
 800325e:	e000      	b.n	8003262 <prvUnlockQueue+0x52>
					break;
 8003260:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2245      	movs	r2, #69	; 0x45
 8003266:	21ff      	movs	r1, #255	; 0xff
 8003268:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800326a:	f001 fabb 	bl	80047e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800326e:	f001 faa7 	bl	80047c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003272:	230e      	movs	r3, #14
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	2144      	movs	r1, #68	; 0x44
 800327a:	5c52      	ldrb	r2, [r2, r1]
 800327c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800327e:	e013      	b.n	80032a8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d016      	beq.n	80032b6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3310      	adds	r3, #16
 800328c:	0018      	movs	r0, r3
 800328e:	f000 fc8f 	bl	8003bb0 <xTaskRemoveFromEventList>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d001      	beq.n	800329a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003296:	f000 fd4b 	bl	8003d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800329a:	210e      	movs	r1, #14
 800329c:	187b      	adds	r3, r7, r1
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032a8:	230e      	movs	r3, #14
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	dce5      	bgt.n	8003280 <prvUnlockQueue+0x70>
 80032b4:	e000      	b.n	80032b8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80032b6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2244      	movs	r2, #68	; 0x44
 80032bc:	21ff      	movs	r1, #255	; 0xff
 80032be:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80032c0:	f001 fa90 	bl	80047e4 <vPortExitCritical>
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}

080032cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032d4:	f001 fa74 	bl	80047c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e001      	b.n	80032ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ea:	f001 fa7b 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b004      	add	sp, #16
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003300:	f001 fa5e 	bl	80047c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	429a      	cmp	r2, r3
 800330e:	d102      	bne.n	8003316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e001      	b.n	800331a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800331a:	f001 fa63 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b004      	add	sp, #16
 8003326:	bd80      	pop	{r7, pc}

08003328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e015      	b.n	8003364 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <vQueueAddToRegistry+0x4c>)
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	00d2      	lsls	r2, r2, #3
 800333e:	58d3      	ldr	r3, [r2, r3]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10c      	bne.n	800335e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <vQueueAddToRegistry+0x4c>)
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	00d2      	lsls	r2, r2, #3
 800334a:	6839      	ldr	r1, [r7, #0]
 800334c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <vQueueAddToRegistry+0x4c>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	18d3      	adds	r3, r2, r3
 8003356:	3304      	adds	r3, #4
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800335c:	e006      	b.n	800336c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3301      	adds	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d9e6      	bls.n	8003338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b004      	add	sp, #16
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200019f0 	.word	0x200019f0

08003378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003388:	f001 fa1a 	bl	80047c0 <vPortEnterCritical>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2244      	movs	r2, #68	; 0x44
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	b25b      	sxtb	r3, r3
 8003394:	3301      	adds	r3, #1
 8003396:	d103      	bne.n	80033a0 <vQueueWaitForMessageRestricted+0x28>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2244      	movs	r2, #68	; 0x44
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2245      	movs	r2, #69	; 0x45
 80033a4:	5c9b      	ldrb	r3, [r3, r2]
 80033a6:	b25b      	sxtb	r3, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	d103      	bne.n	80033b4 <vQueueWaitForMessageRestricted+0x3c>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2245      	movs	r2, #69	; 0x45
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]
 80033b4:	f001 fa16 	bl	80047e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3324      	adds	r3, #36	; 0x24
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fbcb 	bl	8003b64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff ff1d 	bl	8003210 <prvUnlockQueue>
	}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b006      	add	sp, #24
 80033dc:	bd80      	pop	{r7, pc}

080033de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033de:	b590      	push	{r4, r7, lr}
 80033e0:	b08d      	sub	sp, #52	; 0x34
 80033e2:	af04      	add	r7, sp, #16
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <xTaskCreateStatic+0x18>
 80033f2:	b672      	cpsid	i
 80033f4:	e7fe      	b.n	80033f4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <xTaskCreateStatic+0x22>
 80033fc:	b672      	cpsid	i
 80033fe:	e7fe      	b.n	80033fe <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003400:	235c      	movs	r3, #92	; 0x5c
 8003402:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b5c      	cmp	r3, #92	; 0x5c
 8003408:	d001      	beq.n	800340e <xTaskCreateStatic+0x30>
 800340a:	b672      	cpsid	i
 800340c:	e7fe      	b.n	800340c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800340e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <xTaskCreateStatic+0x7a>
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01d      	beq.n	8003458 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003424:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2259      	movs	r2, #89	; 0x59
 800342a:	2102      	movs	r1, #2
 800342c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800342e:	683c      	ldr	r4, [r7, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	2300      	movs	r3, #0
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	2318      	movs	r3, #24
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	0023      	movs	r3, r4
 800344a:	f000 f859 	bl	8003500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f8df 	bl	8003614 <prvAddNewTaskToReadyList>
 8003456:	e001      	b.n	800345c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800345c:	69bb      	ldr	r3, [r7, #24]
	}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b009      	add	sp, #36	; 0x24
 8003464:	bd90      	pop	{r4, r7, pc}

08003466 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b08d      	sub	sp, #52	; 0x34
 800346a:	af04      	add	r7, sp, #16
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	1dbb      	adds	r3, r7, #6
 8003474:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003476:	1dbb      	adds	r3, r7, #6
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	0018      	movs	r0, r3
 800347e:	f001 fa37 	bl	80048f0 <pvPortMalloc>
 8003482:	0003      	movs	r3, r0
 8003484:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800348c:	205c      	movs	r0, #92	; 0x5c
 800348e:	f001 fa2f 	bl	80048f0 <pvPortMalloc>
 8003492:	0003      	movs	r3, r0
 8003494:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
 80034a2:	e006      	b.n	80034b2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f001 face 	bl	8004a48 <vPortFree>
 80034ac:	e001      	b.n	80034b2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01a      	beq.n	80034ee <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2259      	movs	r2, #89	; 0x59
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034c0:	1dbb      	adds	r3, r7, #6
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	683c      	ldr	r4, [r7, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	9303      	str	r3, [sp, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	0023      	movs	r3, r4
 80034dc:	f000 f810 	bl	8003500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 f896 	bl	8003614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	e002      	b.n	80034f4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ee:	2301      	movs	r3, #1
 80034f0:	425b      	negs	r3, r3
 80034f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034f4:	69bb      	ldr	r3, [r7, #24]
	}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b009      	add	sp, #36	; 0x24
 80034fc:	bd90      	pop	{r4, r7, pc}
	...

08003500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	001a      	movs	r2, r3
 8003518:	21a5      	movs	r1, #165	; 0xa5
 800351a:	f001 fbc8 	bl	8004cae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	493a      	ldr	r1, [pc, #232]	; (8003610 <prvInitialiseNewTask+0x110>)
 8003526:	468c      	mov	ip, r1
 8003528:	4463      	add	r3, ip
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	18d3      	adds	r3, r2, r3
 800352e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2207      	movs	r2, #7
 8003534:	4393      	bics	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2207      	movs	r2, #7
 800353c:	4013      	ands	r3, r2
 800353e:	d001      	beq.n	8003544 <prvInitialiseNewTask+0x44>
 8003540:	b672      	cpsid	i
 8003542:	e7fe      	b.n	8003542 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d020      	beq.n	800358c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e013      	b.n	8003578 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	18d3      	adds	r3, r2, r3
 8003556:	7818      	ldrb	r0, [r3, #0]
 8003558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355a:	2134      	movs	r1, #52	; 0x34
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	18d3      	adds	r3, r2, r3
 8003560:	185b      	adds	r3, r3, r1
 8003562:	1c02      	adds	r2, r0, #0
 8003564:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	18d3      	adds	r3, r2, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3301      	adds	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	d9e8      	bls.n	8003550 <prvInitialiseNewTask+0x50>
 800357e:	e000      	b.n	8003582 <prvInitialiseNewTask+0x82>
			{
				break;
 8003580:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	2243      	movs	r2, #67	; 0x43
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]
 800358a:	e003      	b.n	8003594 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	2234      	movs	r2, #52	; 0x34
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	2b37      	cmp	r3, #55	; 0x37
 8003598:	d901      	bls.n	800359e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800359a:	2337      	movs	r3, #55	; 0x37
 800359c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	6a3a      	ldr	r2, [r7, #32]
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	6a3a      	ldr	r2, [r7, #32]
 80035a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	2200      	movs	r2, #0
 80035ae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	3304      	adds	r3, #4
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fa5b 	bl	8002a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	3318      	adds	r3, #24
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fa56 	bl	8002a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2238      	movs	r2, #56	; 0x38
 80035ce:	1ad2      	subs	r2, r2, r3
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	2200      	movs	r2, #0
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	2258      	movs	r2, #88	; 0x58
 80035e4:	2100      	movs	r1, #0
 80035e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	68f9      	ldr	r1, [r7, #12]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f001 f84e 	bl	8004690 <pxPortInitialiseStack>
 80035f4:	0002      	movs	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b006      	add	sp, #24
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	3fffffff 	.word	0x3fffffff

08003614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800361c:	f001 f8d0 	bl	80047c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <prvAddNewTaskToReadyList+0xb8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	4b29      	ldr	r3, [pc, #164]	; (80036cc <prvAddNewTaskToReadyList+0xb8>)
 8003628:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003632:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <prvAddNewTaskToReadyList+0xb8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d110      	bne.n	8003662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003640:	f000 fb90 	bl	8003d64 <prvInitialiseTaskLists>
 8003644:	e00d      	b.n	8003662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <prvAddNewTaskToReadyList+0xc0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	429a      	cmp	r2, r3
 800365a:	d802      	bhi.n	8003662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <prvAddNewTaskToReadyList+0xc4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <prvAddNewTaskToReadyList+0xc4>)
 800366a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <prvAddNewTaskToReadyList+0xc4>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <prvAddNewTaskToReadyList+0xc8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d903      	bls.n	8003688 <prvAddNewTaskToReadyList+0x74>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <prvAddNewTaskToReadyList+0xc8>)
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	0013      	movs	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	189b      	adds	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <prvAddNewTaskToReadyList+0xcc>)
 8003696:	189a      	adds	r2, r3, r2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	0019      	movs	r1, r3
 800369e:	0010      	movs	r0, r2
 80036a0:	f7ff f9f1 	bl	8002a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036a4:	f001 f89e 	bl	80047e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <prvAddNewTaskToReadyList+0xc0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d201      	bcs.n	80036c2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036be:	f001 f86f 	bl	80047a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000bbc 	.word	0x20000bbc
 80036d0:	200006e8 	.word	0x200006e8
 80036d4:	20000bc8 	.word	0x20000bc8
 80036d8:	20000bd8 	.word	0x20000bd8
 80036dc:	20000bc4 	.word	0x20000bc4
 80036e0:	200006ec 	.word	0x200006ec

080036e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <vTaskDelay+0x48>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <vTaskDelay+0x1e>
 80036fe:	b672      	cpsid	i
 8003700:	e7fe      	b.n	8003700 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003702:	f000 f869 	bl	80037d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2100      	movs	r1, #0
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fc5a 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003710:	f000 f86e 	bl	80037f0 <xTaskResumeAll>
 8003714:	0003      	movs	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800371e:	f001 f83f 	bl	80047a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000be4 	.word	0x20000be4

08003730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800373e:	003a      	movs	r2, r7
 8003740:	1d39      	adds	r1, r7, #4
 8003742:	2308      	movs	r3, #8
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff f944 	bl	80029d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800374c:	683c      	ldr	r4, [r7, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <vTaskStartScheduler+0x90>)
 8003754:	481b      	ldr	r0, [pc, #108]	; (80037c4 <vTaskStartScheduler+0x94>)
 8003756:	9202      	str	r2, [sp, #8]
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	2300      	movs	r3, #0
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	0022      	movs	r2, r4
 8003762:	f7ff fe3c 	bl	80033de <xTaskCreateStatic>
 8003766:	0002      	movs	r2, r0
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <vTaskStartScheduler+0x98>)
 800376a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <vTaskStartScheduler+0x98>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003774:	2301      	movs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e001      	b.n	800377e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d103      	bne.n	800378c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003784:	f000 fc72 	bl	800406c <xTimerCreateTimerTask>
 8003788:	0003      	movs	r3, r0
 800378a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10d      	bne.n	80037ae <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003792:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <vTaskStartScheduler+0x9c>)
 8003796:	2201      	movs	r2, #1
 8003798:	4252      	negs	r2, r2
 800379a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <vTaskStartScheduler+0xa0>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <vTaskStartScheduler+0xa4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037a8:	f000 ffd6 	bl	8004758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037ac:	e004      	b.n	80037b8 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d101      	bne.n	80037b8 <vTaskStartScheduler+0x88>
 80037b4:	b672      	cpsid	i
 80037b6:	e7fe      	b.n	80037b6 <vTaskStartScheduler+0x86>
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b005      	add	sp, #20
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	08004cf4 	.word	0x08004cf4
 80037c4:	08003d45 	.word	0x08003d45
 80037c8:	20000be0 	.word	0x20000be0
 80037cc:	20000bdc 	.word	0x20000bdc
 80037d0:	20000bc8 	.word	0x20000bc8
 80037d4:	20000bc0 	.word	0x20000bc0

080037d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <vTaskSuspendAll+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	4b02      	ldr	r3, [pc, #8]	; (80037ec <vTaskSuspendAll+0x14>)
 80037e4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000be4 	.word	0x20000be4

080037f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <xTaskResumeAll+0xf8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <xTaskResumeAll+0x1a>
 8003806:	b672      	cpsid	i
 8003808:	e7fe      	b.n	8003808 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800380a:	f000 ffd9 	bl	80047c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <xTaskResumeAll+0xf8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <xTaskResumeAll+0xf8>)
 8003816:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003818:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <xTaskResumeAll+0xf8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d15b      	bne.n	80038d8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <xTaskResumeAll+0xfc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d057      	beq.n	80038d8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003828:	e02f      	b.n	800388a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <xTaskResumeAll+0x100>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3318      	adds	r3, #24
 8003836:	0018      	movs	r0, r3
 8003838:	f7ff f97d 	bl	8002b36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3304      	adds	r3, #4
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff f978 	bl	8002b36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <xTaskResumeAll+0x104>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d903      	bls.n	800385a <xTaskResumeAll+0x6a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <xTaskResumeAll+0x104>)
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	0013      	movs	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	189b      	adds	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4a24      	ldr	r2, [pc, #144]	; (80038f8 <xTaskResumeAll+0x108>)
 8003868:	189a      	adds	r2, r3, r2
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	0019      	movs	r1, r3
 8003870:	0010      	movs	r0, r2
 8003872:	f7ff f908 	bl	8002a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <xTaskResumeAll+0x10c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003884:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <xTaskResumeAll+0x110>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800388a:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <xTaskResumeAll+0x100>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1cb      	bne.n	800382a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003898:	f000 fafe 	bl	8003e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <xTaskResumeAll+0x114>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00f      	beq.n	80038c8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038a8:	f000 f83c 	bl	8003924 <xTaskIncrementTick>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d002      	beq.n	80038b6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <xTaskResumeAll+0x110>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f2      	bne.n	80038a8 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <xTaskResumeAll+0x114>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <xTaskResumeAll+0x110>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038d4:	f000 ff64 	bl	80047a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038d8:	f000 ff84 	bl	80047e4 <vPortExitCritical>

	return xAlreadyYielded;
 80038dc:	68bb      	ldr	r3, [r7, #8]
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000be4 	.word	0x20000be4
 80038ec:	20000bbc 	.word	0x20000bbc
 80038f0:	20000b7c 	.word	0x20000b7c
 80038f4:	20000bc4 	.word	0x20000bc4
 80038f8:	200006ec 	.word	0x200006ec
 80038fc:	200006e8 	.word	0x200006e8
 8003900:	20000bd0 	.word	0x20000bd0
 8003904:	20000bcc 	.word	0x20000bcc

08003908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <xTaskGetTickCount+0x18>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003914:	687b      	ldr	r3, [r7, #4]
}
 8003916:	0018      	movs	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	20000bc0 	.word	0x20000bc0

08003924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392e:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <xTaskIncrementTick+0x134>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d000      	beq.n	8003938 <xTaskIncrementTick+0x14>
 8003936:	e084      	b.n	8003a42 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003938:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <xTaskIncrementTick+0x138>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003940:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <xTaskIncrementTick+0x138>)
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d117      	bne.n	800397c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800394c:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <xTaskIncrementTick+0x13c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <xTaskIncrementTick+0x36>
 8003956:	b672      	cpsid	i
 8003958:	e7fe      	b.n	8003958 <xTaskIncrementTick+0x34>
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <xTaskIncrementTick+0x13c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	4b40      	ldr	r3, [pc, #256]	; (8003a64 <xTaskIncrementTick+0x140>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b3e      	ldr	r3, [pc, #248]	; (8003a60 <xTaskIncrementTick+0x13c>)
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <xTaskIncrementTick+0x140>)
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <xTaskIncrementTick+0x144>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <xTaskIncrementTick+0x144>)
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f000 fa8e 	bl	8003e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800397c:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <xTaskIncrementTick+0x148>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	429a      	cmp	r2, r3
 8003984:	d349      	bcc.n	8003a1a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003986:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <xTaskIncrementTick+0x13c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <xTaskIncrementTick+0x148>)
 8003992:	2201      	movs	r2, #1
 8003994:	4252      	negs	r2, r2
 8003996:	601a      	str	r2, [r3, #0]
					break;
 8003998:	e03f      	b.n	8003a1a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <xTaskIncrementTick+0x13c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d203      	bcs.n	80039ba <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <xTaskIncrementTick+0x148>)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039b8:	e02f      	b.n	8003a1a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3304      	adds	r3, #4
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff f8b9 	bl	8002b36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3318      	adds	r3, #24
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff f8b0 	bl	8002b36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <xTaskIncrementTick+0x14c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d903      	bls.n	80039ea <xTaskIncrementTick+0xc6>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <xTaskIncrementTick+0x14c>)
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	0013      	movs	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <xTaskIncrementTick+0x150>)
 80039f8:	189a      	adds	r2, r3, r2
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3304      	adds	r3, #4
 80039fe:	0019      	movs	r1, r3
 8003a00:	0010      	movs	r0, r2
 8003a02:	f7ff f840 	bl	8002a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <xTaskIncrementTick+0x154>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d3b8      	bcc.n	8003986 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003a14:	2301      	movs	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a18:	e7b5      	b.n	8003986 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <xTaskIncrementTick+0x154>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4914      	ldr	r1, [pc, #80]	; (8003a74 <xTaskIncrementTick+0x150>)
 8003a22:	0013      	movs	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	585b      	ldr	r3, [r3, r1]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d901      	bls.n	8003a34 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <xTaskIncrementTick+0x158>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e004      	b.n	8003a4c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <xTaskIncrementTick+0x15c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <xTaskIncrementTick+0x15c>)
 8003a4a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a4c:	697b      	ldr	r3, [r7, #20]
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b006      	add	sp, #24
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000be4 	.word	0x20000be4
 8003a5c:	20000bc0 	.word	0x20000bc0
 8003a60:	20000b74 	.word	0x20000b74
 8003a64:	20000b78 	.word	0x20000b78
 8003a68:	20000bd4 	.word	0x20000bd4
 8003a6c:	20000bdc 	.word	0x20000bdc
 8003a70:	20000bc4 	.word	0x20000bc4
 8003a74:	200006ec 	.word	0x200006ec
 8003a78:	200006e8 	.word	0x200006e8
 8003a7c:	20000bd0 	.word	0x20000bd0
 8003a80:	20000bcc 	.word	0x20000bcc

08003a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <vTaskSwitchContext+0x90>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <vTaskSwitchContext+0x94>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a98:	e037      	b.n	8003b0a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003a9a:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <vTaskSwitchContext+0x94>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <vTaskSwitchContext+0x98>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	e007      	b.n	8003ab8 <vTaskSwitchContext+0x34>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <vTaskSwitchContext+0x2e>
 8003aae:	b672      	cpsid	i
 8003ab0:	e7fe      	b.n	8003ab0 <vTaskSwitchContext+0x2c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	4919      	ldr	r1, [pc, #100]	; (8003b20 <vTaskSwitchContext+0x9c>)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	0013      	movs	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	585b      	ldr	r3, [r3, r1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ee      	beq.n	8003aa8 <vTaskSwitchContext+0x24>
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	0013      	movs	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	189b      	adds	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <vTaskSwitchContext+0x9c>)
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	3308      	adds	r3, #8
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d104      	bne.n	8003afa <vTaskSwitchContext+0x76>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <vTaskSwitchContext+0xa0>)
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <vTaskSwitchContext+0x98>)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000be4 	.word	0x20000be4
 8003b18:	20000bd0 	.word	0x20000bd0
 8003b1c:	20000bc4 	.word	0x20000bc4
 8003b20:	200006ec 	.word	0x200006ec
 8003b24:	200006e8 	.word	0x200006e8

08003b28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <vTaskPlaceOnEventList+0x14>
 8003b38:	b672      	cpsid	i
 8003b3a:	e7fe      	b.n	8003b3a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <vTaskPlaceOnEventList+0x38>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3318      	adds	r3, #24
 8003b42:	001a      	movs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0011      	movs	r1, r2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7fe ffbe 	bl	8002aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2101      	movs	r1, #1
 8003b52:	0018      	movs	r0, r3
 8003b54:	f000 fa36 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	200006e8 	.word	0x200006e8

08003b64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <vTaskPlaceOnEventListRestricted+0x16>
 8003b76:	b672      	cpsid	i
 8003b78:	e7fe      	b.n	8003b78 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <vTaskPlaceOnEventListRestricted+0x48>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	001a      	movs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0011      	movs	r1, r2
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7fe ff7d 	bl	8002a86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8003b92:	2301      	movs	r3, #1
 8003b94:	425b      	negs	r3, r3
 8003b96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fa10 	bl	8003fc4 <prvAddCurrentTaskToDelayedList>
	}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	200006e8 	.word	0x200006e8

08003bb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <xTaskRemoveFromEventList+0x1a>
 8003bc6:	b672      	cpsid	i
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3318      	adds	r3, #24
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fe ffb1 	bl	8002b36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <xTaskRemoveFromEventList+0xa0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11d      	bne.n	8003c18 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3304      	adds	r3, #4
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7fe ffa8 	bl	8002b36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <xTaskRemoveFromEventList+0xa4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d903      	bls.n	8003bfa <xTaskRemoveFromEventList+0x4a>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <xTaskRemoveFromEventList+0xa4>)
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	0013      	movs	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <xTaskRemoveFromEventList+0xa8>)
 8003c08:	189a      	adds	r2, r3, r2
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	0019      	movs	r1, r3
 8003c10:	0010      	movs	r0, r2
 8003c12:	f7fe ff38 	bl	8002a86 <vListInsertEnd>
 8003c16:	e007      	b.n	8003c28 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <xTaskRemoveFromEventList+0xac>)
 8003c20:	0011      	movs	r1, r2
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fe ff2f 	bl	8002a86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <xTaskRemoveFromEventList+0xb0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d905      	bls.n	8003c42 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <xTaskRemoveFromEventList+0xb4>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e001      	b.n	8003c46 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b004      	add	sp, #16
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000be4 	.word	0x20000be4
 8003c54:	20000bc4 	.word	0x20000bc4
 8003c58:	200006ec 	.word	0x200006ec
 8003c5c:	20000b7c 	.word	0x20000b7c
 8003c60:	200006e8 	.word	0x200006e8
 8003c64:	20000bd0 	.word	0x20000bd0

08003c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <vTaskInternalSetTimeOutState+0x20>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <vTaskInternalSetTimeOutState+0x24>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000bd4 	.word	0x20000bd4
 8003c8c:	20000bc0 	.word	0x20000bc0

08003c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <xTaskCheckForTimeOut+0x14>
 8003ca0:	b672      	cpsid	i
 8003ca2:	e7fe      	b.n	8003ca2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xTaskCheckForTimeOut+0x1e>
 8003caa:	b672      	cpsid	i
 8003cac:	e7fe      	b.n	8003cac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003cae:	f000 fd87 	bl	80047c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <xTaskCheckForTimeOut+0x98>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e024      	b.n	8003d1a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <xTaskCheckForTimeOut+0x9c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d007      	beq.n	8003cec <xTaskCheckForTimeOut+0x5c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e016      	b.n	8003d1a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d20c      	bcs.n	8003d10 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff ffaf 	bl	8003c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e004      	b.n	8003d1a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003d1a:	f000 fd63 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8003d1e:	697b      	ldr	r3, [r7, #20]
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b006      	add	sp, #24
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000bc0 	.word	0x20000bc0
 8003d2c:	20000bd4 	.word	0x20000bd4

08003d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <vTaskMissedYield+0x10>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000bd0 	.word	0x20000bd0

08003d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d4c:	f000 f84e 	bl	8003dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <prvIdleTask+0x1c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d9f9      	bls.n	8003d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d58:	f000 fd22 	bl	80047a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003d5c:	e7f6      	b.n	8003d4c <prvIdleTask+0x8>
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	200006ec 	.word	0x200006ec

08003d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	e00c      	b.n	8003d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	0013      	movs	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <prvInitialiseTaskLists+0x68>)
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7fe fe58 	bl	8002a34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3301      	adds	r3, #1
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b37      	cmp	r3, #55	; 0x37
 8003d8e:	d9ef      	bls.n	8003d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <prvInitialiseTaskLists+0x6c>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fe fe4e 	bl	8002a34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <prvInitialiseTaskLists+0x70>)
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fe fe4a 	bl	8002a34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <prvInitialiseTaskLists+0x74>)
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fe fe46 	bl	8002a34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <prvInitialiseTaskLists+0x78>)
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7fe fe42 	bl	8002a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <prvInitialiseTaskLists+0x7c>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fe fe3e 	bl	8002a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <prvInitialiseTaskLists+0x80>)
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <prvInitialiseTaskLists+0x6c>)
 8003dbc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvInitialiseTaskLists+0x84>)
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <prvInitialiseTaskLists+0x70>)
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200006ec 	.word	0x200006ec
 8003dd0:	20000b4c 	.word	0x20000b4c
 8003dd4:	20000b60 	.word	0x20000b60
 8003dd8:	20000b7c 	.word	0x20000b7c
 8003ddc:	20000b90 	.word	0x20000b90
 8003de0:	20000ba8 	.word	0x20000ba8
 8003de4:	20000b74 	.word	0x20000b74
 8003de8:	20000b78 	.word	0x20000b78

08003dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df2:	e01a      	b.n	8003e2a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003df4:	f000 fce4 	bl	80047c0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <prvCheckTasksWaitingTermination+0x50>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7fe fe96 	bl	8002b36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e12:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <prvCheckTasksWaitingTermination+0x58>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <prvCheckTasksWaitingTermination+0x58>)
 8003e1c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003e1e:	f000 fce1 	bl	80047e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f80f 	bl	8003e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <prvCheckTasksWaitingTermination+0x58>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e0      	bne.n	8003df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000b90 	.word	0x20000b90
 8003e40:	20000bbc 	.word	0x20000bbc
 8003e44:	20000ba4 	.word	0x20000ba4

08003e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2259      	movs	r2, #89	; 0x59
 8003e54:	5c9b      	ldrb	r3, [r3, r2]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 fdf2 	bl	8004a48 <vPortFree>
				vPortFree( pxTCB );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 fdee 	bl	8004a48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e6c:	e010      	b.n	8003e90 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2259      	movs	r2, #89	; 0x59
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d104      	bne.n	8003e82 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fde4 	bl	8004a48 <vPortFree>
	}
 8003e80:	e006      	b.n	8003e90 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2259      	movs	r2, #89	; 0x59
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d001      	beq.n	8003e90 <prvDeleteTCB+0x48>
 8003e8c:	b672      	cpsid	i
 8003e8e:	e7fe      	b.n	8003e8e <prvDeleteTCB+0x46>
	}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvResetNextTaskUnblockTime+0x34>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <prvResetNextTaskUnblockTime+0x38>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4252      	negs	r2, r2
 8003eae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eb0:	e008      	b.n	8003ec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <prvResetNextTaskUnblockTime+0x34>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <prvResetNextTaskUnblockTime+0x38>)
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000b74 	.word	0x20000b74
 8003ed0:	20000bdc 	.word	0x20000bdc

08003ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <xTaskGetSchedulerState+0x30>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	e008      	b.n	8003efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <xTaskGetSchedulerState+0x34>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	e001      	b.n	8003efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003efa:	687b      	ldr	r3, [r7, #4]
	}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000bc8 	.word	0x20000bc8
 8003f08:	20000be4 	.word	0x20000be4

08003f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d044      	beq.n	8003fac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <xTaskPriorityDisinherit+0xac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <xTaskPriorityDisinherit+0x24>
 8003f2c:	b672      	cpsid	i
 8003f2e:	e7fe      	b.n	8003f2e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <xTaskPriorityDisinherit+0x30>
 8003f38:	b672      	cpsid	i
 8003f3a:	e7fe      	b.n	8003f3a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d02c      	beq.n	8003fac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d128      	bne.n	8003fac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7fe fde9 	bl	8002b36 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	2238      	movs	r2, #56	; 0x38
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <xTaskPriorityDisinherit+0xb0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d903      	bls.n	8003f8c <xTaskPriorityDisinherit+0x80>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <xTaskPriorityDisinherit+0xb0>)
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	0013      	movs	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <xTaskPriorityDisinherit+0xb4>)
 8003f9a:	189a      	adds	r2, r3, r2
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	0010      	movs	r0, r2
 8003fa4:	f7fe fd6f 	bl	8002a86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fac:	68fb      	ldr	r3, [r7, #12]
	}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b004      	add	sp, #16
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	200006e8 	.word	0x200006e8
 8003fbc:	20000bc4 	.word	0x20000bc4
 8003fc0:	200006ec 	.word	0x200006ec

08003fc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd4:	4b20      	ldr	r3, [pc, #128]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fe fdab 	bl	8002b36 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	d10b      	bne.n	8003ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fe fd45 	bl	8002a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ffc:	e026      	b.n	800404c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	18d3      	adds	r3, r2, r3
 8004004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d209      	bcs.n	800402a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3304      	adds	r3, #4
 8004020:	0019      	movs	r1, r3
 8004022:	0010      	movs	r0, r2
 8004024:	f7fe fd51 	bl	8002aca <vListInsert>
}
 8004028:	e010      	b.n	800404c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <prvAddCurrentTaskToDelayedList+0x94>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3304      	adds	r3, #4
 8004034:	0019      	movs	r1, r3
 8004036:	0010      	movs	r0, r2
 8004038:	f7fe fd47 	bl	8002aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d202      	bcs.n	800404c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	601a      	str	r2, [r3, #0]
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000bc0 	.word	0x20000bc0
 8004058:	200006e8 	.word	0x200006e8
 800405c:	20000ba8 	.word	0x20000ba8
 8004060:	20000b78 	.word	0x20000b78
 8004064:	20000b74 	.word	0x20000b74
 8004068:	20000bdc 	.word	0x20000bdc

0800406c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004076:	f000 fac9 	bl	800460c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <xTimerCreateTimerTask+0x6c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800408a:	003a      	movs	r2, r7
 800408c:	1d39      	adds	r1, r7, #4
 800408e:	2308      	movs	r3, #8
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	0018      	movs	r0, r3
 8004094:	f7fe fcb6 	bl	8002a04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004098:	683c      	ldr	r4, [r7, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	490f      	ldr	r1, [pc, #60]	; (80040dc <xTimerCreateTimerTask+0x70>)
 80040a0:	480f      	ldr	r0, [pc, #60]	; (80040e0 <xTimerCreateTimerTask+0x74>)
 80040a2:	9202      	str	r2, [sp, #8]
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	2302      	movs	r3, #2
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	0022      	movs	r2, r4
 80040ae:	f7ff f996 	bl	80033de <xTaskCreateStatic>
 80040b2:	0002      	movs	r2, r0
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <xTimerCreateTimerTask+0x78>)
 80040b6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <xTimerCreateTimerTask+0x78>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80040c0:	2301      	movs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <xTimerCreateTimerTask+0x62>
 80040ca:	b672      	cpsid	i
 80040cc:	e7fe      	b.n	80040cc <xTimerCreateTimerTask+0x60>
	return xReturn;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b005      	add	sp, #20
 80040d6:	bd90      	pop	{r4, r7, pc}
 80040d8:	20000c18 	.word	0x20000c18
 80040dc:	08004cfc 	.word	0x08004cfc
 80040e0:	08004205 	.word	0x08004205
 80040e4:	20000c1c 	.word	0x20000c1c

080040e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b08b      	sub	sp, #44	; 0x2c
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <xTimerGenericCommand+0x1c>
 8004100:	b672      	cpsid	i
 8004102:	e7fe      	b.n	8004102 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004104:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <xTimerGenericCommand+0x90>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d030      	beq.n	800416e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800410c:	2414      	movs	r4, #20
 800410e:	193b      	adds	r3, r7, r4
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004114:	193b      	adds	r3, r7, r4
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800411a:	193b      	adds	r3, r7, r4
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b05      	cmp	r3, #5
 8004124:	dc19      	bgt.n	800415a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004126:	f7ff fed5 	bl	8003ed4 <xTaskGetSchedulerState>
 800412a:	0003      	movs	r3, r0
 800412c:	2b02      	cmp	r3, #2
 800412e:	d109      	bne.n	8004144 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <xTimerGenericCommand+0x90>)
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004136:	1939      	adds	r1, r7, r4
 8004138:	2300      	movs	r3, #0
 800413a:	f7fe fdeb 	bl	8002d14 <xQueueGenericSend>
 800413e:	0003      	movs	r3, r0
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	e014      	b.n	800416e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <xTimerGenericCommand+0x90>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	2314      	movs	r3, #20
 800414a:	18f9      	adds	r1, r7, r3
 800414c:	2300      	movs	r3, #0
 800414e:	2200      	movs	r2, #0
 8004150:	f7fe fde0 	bl	8002d14 <xQueueGenericSend>
 8004154:	0003      	movs	r3, r0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	e009      	b.n	800416e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <xTimerGenericCommand+0x90>)
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	2314      	movs	r3, #20
 8004162:	18f9      	adds	r1, r7, r3
 8004164:	2300      	movs	r3, #0
 8004166:	f7fe fe99 	bl	8002e9c <xQueueGenericSendFromISR>
 800416a:	0003      	movs	r3, r0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b00b      	add	sp, #44	; 0x2c
 8004176:	bd90      	pop	{r4, r7, pc}
 8004178:	20000c18 	.word	0x20000c18

0800417c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <prvProcessExpiredTimer+0x84>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3304      	adds	r3, #4
 8004194:	0018      	movs	r0, r3
 8004196:	f7fe fcce 	bl	8002b36 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2228      	movs	r2, #40	; 0x28
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	001a      	movs	r2, r3
 80041a2:	2304      	movs	r3, #4
 80041a4:	4013      	ands	r3, r2
 80041a6:	d019      	beq.n	80041dc <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	18d1      	adds	r1, r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f8c3 	bl	8004340 <prvInsertTimerInActiveList>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d017      	beq.n	80041ee <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2300      	movs	r3, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	f7ff ff8d 	bl	80040e8 <xTimerGenericCommand>
 80041ce:	0003      	movs	r3, r0
 80041d0:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <prvProcessExpiredTimer+0x72>
 80041d8:	b672      	cpsid	i
 80041da:	e7fe      	b.n	80041da <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2228      	movs	r2, #40	; 0x28
 80041e0:	5c9b      	ldrb	r3, [r3, r2]
 80041e2:	2201      	movs	r2, #1
 80041e4:	4393      	bics	r3, r2
 80041e6:	b2d9      	uxtb	r1, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2228      	movs	r2, #40	; 0x28
 80041ec:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	0010      	movs	r0, r2
 80041f6:	4798      	blx	r3
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000c10 	.word	0x20000c10

08004204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800420c:	2308      	movs	r3, #8
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	0018      	movs	r0, r3
 8004212:	f000 f853 	bl	80042bc <prvGetNextExpireTime>
 8004216:	0003      	movs	r3, r0
 8004218:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f000 f803 	bl	800422c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004226:	f000 f8cd 	bl	80043c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800422a:	e7ef      	b.n	800420c <prvTimerTask+0x8>

0800422c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004236:	f7ff facf 	bl	80037d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423a:	2308      	movs	r3, #8
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f85e 	bl	8004300 <prvSampleTimeNow>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12b      	bne.n	80042a6 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10c      	bne.n	800426e <prvProcessTimerOrBlockTask+0x42>
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	429a      	cmp	r2, r3
 800425a:	d808      	bhi.n	800426e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800425c:	f7ff fac8 	bl	80037f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0011      	movs	r1, r2
 8004266:	0018      	movs	r0, r3
 8004268:	f7ff ff88 	bl	800417c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800426c:	e01d      	b.n	80042aa <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <prvProcessTimerOrBlockTask+0x88>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <prvProcessTimerOrBlockTask+0x56>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <prvProcessTimerOrBlockTask+0x58>
 8004282:	2300      	movs	r3, #0
 8004284:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <prvProcessTimerOrBlockTask+0x8c>)
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	0019      	movs	r1, r3
 8004294:	f7ff f870 	bl	8003378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004298:	f7ff faaa 	bl	80037f0 <xTaskResumeAll>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d104      	bne.n	80042aa <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80042a0:	f000 fa7e 	bl	80047a0 <vPortYield>
}
 80042a4:	e001      	b.n	80042aa <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80042a6:	f7ff faa3 	bl	80037f0 <xTaskResumeAll>
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20000c14 	.word	0x20000c14
 80042b8:	20000c18 	.word	0x20000c18

080042bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <prvGetNextExpireTime+0x40>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <prvGetNextExpireTime+0x16>
 80042ce:	2201      	movs	r2, #1
 80042d0:	e000      	b.n	80042d4 <prvGetNextExpireTime+0x18>
 80042d2:	2200      	movs	r2, #0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <prvGetNextExpireTime+0x40>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e001      	b.n	80042f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042f0:	68fb      	ldr	r3, [r7, #12]
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b004      	add	sp, #16
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	20000c10 	.word	0x20000c10

08004300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004308:	f7ff fafe 	bl	8003908 <xTaskGetTickCount>
 800430c:	0003      	movs	r3, r0
 800430e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <prvSampleTimeNow+0x3c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	429a      	cmp	r2, r3
 8004318:	d205      	bcs.n	8004326 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800431a:	f000 f919 	bl	8004550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e002      	b.n	800432c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <prvSampleTimeNow+0x3c>)
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b004      	add	sp, #16
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000c20 	.word	0x20000c20

08004340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d812      	bhi.n	800438c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	1ad2      	subs	r2, r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e01b      	b.n	80043b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <prvInsertTimerInActiveList+0x7c>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3304      	adds	r3, #4
 8004382:	0019      	movs	r1, r3
 8004384:	0010      	movs	r0, r2
 8004386:	f7fe fba0 	bl	8002aca <vListInsert>
 800438a:	e012      	b.n	80043b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d206      	bcs.n	80043a2 <prvInsertTimerInActiveList+0x62>
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e007      	b.n	80043b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <prvInsertTimerInActiveList+0x80>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3304      	adds	r3, #4
 80043aa:	0019      	movs	r1, r3
 80043ac:	0010      	movs	r0, r2
 80043ae:	f7fe fb8c 	bl	8002aca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043b2:	697b      	ldr	r3, [r7, #20]
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b006      	add	sp, #24
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000c14 	.word	0x20000c14
 80043c0:	20000c10 	.word	0x20000c10

080043c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b08d      	sub	sp, #52	; 0x34
 80043c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ca:	e0ac      	b.n	8004526 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043cc:	2208      	movs	r2, #8
 80043ce:	18bb      	adds	r3, r7, r2
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da0f      	bge.n	80043f6 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043d6:	18bb      	adds	r3, r7, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <prvProcessReceivedCommands+0x22>
 80043e2:	b672      	cpsid	i
 80043e4:	e7fe      	b.n	80043e4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	6858      	ldr	r0, [r3, #4]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	0019      	movs	r1, r3
 80043f4:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043f6:	2208      	movs	r2, #8
 80043f8:	18bb      	adds	r3, r7, r2
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	da00      	bge.n	8004402 <prvProcessReceivedCommands+0x3e>
 8004400:	e090      	b.n	8004524 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004402:	18bb      	adds	r3, r7, r2
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	3304      	adds	r3, #4
 8004414:	0018      	movs	r0, r3
 8004416:	f7fe fb8e 	bl	8002b36 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff ff6f 	bl	8004300 <prvSampleTimeNow>
 8004422:	0003      	movs	r3, r0
 8004424:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004426:	2308      	movs	r3, #8
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b09      	cmp	r3, #9
 800442e:	d900      	bls.n	8004432 <prvProcessReceivedCommands+0x6e>
 8004430:	e079      	b.n	8004526 <prvProcessReceivedCommands+0x162>
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	4b44      	ldr	r3, [pc, #272]	; (8004548 <prvProcessReceivedCommands+0x184>)
 8004436:	18d3      	adds	r3, r2, r3
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2228      	movs	r2, #40	; 0x28
 8004440:	5c9b      	ldrb	r3, [r3, r2]
 8004442:	2201      	movs	r2, #1
 8004444:	4313      	orrs	r3, r2
 8004446:	b2d9      	uxtb	r1, r3
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2228      	movs	r2, #40	; 0x28
 800444c:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800444e:	2408      	movs	r4, #8
 8004450:	193b      	adds	r3, r7, r4
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	18d1      	adds	r1, r2, r3
 800445a:	193b      	adds	r3, r7, r4
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	6a38      	ldr	r0, [r7, #32]
 8004462:	f7ff ff6d 	bl	8004340 <prvInsertTimerInActiveList>
 8004466:	1e03      	subs	r3, r0, #0
 8004468:	d05d      	beq.n	8004526 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	0010      	movs	r0, r2
 8004472:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	2228      	movs	r2, #40	; 0x28
 8004478:	5c9b      	ldrb	r3, [r3, r2]
 800447a:	001a      	movs	r2, r3
 800447c:	2304      	movs	r3, #4
 800447e:	4013      	ands	r3, r2
 8004480:	d051      	beq.n	8004526 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004482:	193b      	adds	r3, r7, r4
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	18d2      	adds	r2, r2, r3
 800448c:	6a38      	ldr	r0, [r7, #32]
 800448e:	2300      	movs	r3, #0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	2100      	movs	r1, #0
 8004496:	f7ff fe27 	bl	80040e8 <xTimerGenericCommand>
 800449a:	0003      	movs	r3, r0
 800449c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d140      	bne.n	8004526 <prvProcessReceivedCommands+0x162>
 80044a4:	b672      	cpsid	i
 80044a6:	e7fe      	b.n	80044a6 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2228      	movs	r2, #40	; 0x28
 80044ac:	5c9b      	ldrb	r3, [r3, r2]
 80044ae:	2201      	movs	r2, #1
 80044b0:	4393      	bics	r3, r2
 80044b2:	b2d9      	uxtb	r1, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2228      	movs	r2, #40	; 0x28
 80044b8:	5499      	strb	r1, [r3, r2]
					break;
 80044ba:	e034      	b.n	8004526 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2228      	movs	r2, #40	; 0x28
 80044c0:	5c9b      	ldrb	r3, [r3, r2]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	b2d9      	uxtb	r1, r3
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	2228      	movs	r2, #40	; 0x28
 80044cc:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044ce:	2308      	movs	r3, #8
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <prvProcessReceivedCommands+0x120>
 80044e0:	b672      	cpsid	i
 80044e2:	e7fe      	b.n	80044e2 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	18d1      	adds	r1, r2, r3
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	6a38      	ldr	r0, [r7, #32]
 80044f2:	f7ff ff25 	bl	8004340 <prvInsertTimerInActiveList>
					break;
 80044f6:	e016      	b.n	8004526 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2228      	movs	r2, #40	; 0x28
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	001a      	movs	r2, r3
 8004500:	2302      	movs	r3, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d104      	bne.n	8004510 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	0018      	movs	r0, r3
 800450a:	f000 fa9d 	bl	8004a48 <vPortFree>
 800450e:	e00a      	b.n	8004526 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	2228      	movs	r2, #40	; 0x28
 8004514:	5c9b      	ldrb	r3, [r3, r2]
 8004516:	2201      	movs	r2, #1
 8004518:	4393      	bics	r3, r2
 800451a:	b2d9      	uxtb	r1, r3
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2228      	movs	r2, #40	; 0x28
 8004520:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004522:	e000      	b.n	8004526 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004524:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <prvProcessReceivedCommands+0x188>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2208      	movs	r2, #8
 800452c:	18b9      	adds	r1, r7, r2
 800452e:	2200      	movs	r2, #0
 8004530:	0018      	movs	r0, r3
 8004532:	f7fe fd27 	bl	8002f84 <xQueueReceive>
 8004536:	1e03      	subs	r3, r0, #0
 8004538:	d000      	beq.n	800453c <prvProcessReceivedCommands+0x178>
 800453a:	e747      	b.n	80043cc <prvProcessReceivedCommands+0x8>
	}
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b00b      	add	sp, #44	; 0x2c
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	08004db4 	.word	0x08004db4
 800454c:	20000c18 	.word	0x20000c18

08004550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004556:	e041      	b.n	80045dc <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004558:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <prvSwitchTimerLists+0xb4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <prvSwitchTimerLists+0xb4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3304      	adds	r3, #4
 8004570:	0018      	movs	r0, r3
 8004572:	f7fe fae0 	bl	8002b36 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	0010      	movs	r0, r2
 800457e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2228      	movs	r2, #40	; 0x28
 8004584:	5c9b      	ldrb	r3, [r3, r2]
 8004586:	001a      	movs	r2, r3
 8004588:	2304      	movs	r3, #4
 800458a:	4013      	ands	r3, r2
 800458c:	d026      	beq.n	80045dc <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	18d3      	adds	r3, r2, r3
 8004596:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	429a      	cmp	r2, r3
 800459e:	d90e      	bls.n	80045be <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <prvSwitchTimerLists+0xb4>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3304      	adds	r3, #4
 80045b4:	0019      	movs	r1, r3
 80045b6:	0010      	movs	r0, r2
 80045b8:	f7fe fa87 	bl	8002aca <vListInsert>
 80045bc:	e00e      	b.n	80045dc <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	f7ff fd8d 	bl	80040e8 <xTimerGenericCommand>
 80045ce:	0003      	movs	r3, r0
 80045d0:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <prvSwitchTimerLists+0x8c>
 80045d8:	b672      	cpsid	i
 80045da:	e7fe      	b.n	80045da <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <prvSwitchTimerLists+0xb4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1b8      	bne.n	8004558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <prvSwitchTimerLists+0xb4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <prvSwitchTimerLists+0xb8>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <prvSwitchTimerLists+0xb4>)
 80045f2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <prvSwitchTimerLists+0xb8>)
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	20000c10 	.word	0x20000c10
 8004608:	20000c14 	.word	0x20000c14

0800460c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004612:	f000 f8d5 	bl	80047c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <prvCheckForValidListAndQueue+0x64>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d123      	bne.n	8004666 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <prvCheckForValidListAndQueue+0x68>)
 8004620:	0018      	movs	r0, r3
 8004622:	f7fe fa07 	bl	8002a34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <prvCheckForValidListAndQueue+0x6c>)
 8004628:	0018      	movs	r0, r3
 800462a:	f7fe fa03 	bl	8002a34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <prvCheckForValidListAndQueue+0x70>)
 8004630:	4a10      	ldr	r2, [pc, #64]	; (8004674 <prvCheckForValidListAndQueue+0x68>)
 8004632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <prvCheckForValidListAndQueue+0x74>)
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <prvCheckForValidListAndQueue+0x6c>)
 8004638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <prvCheckForValidListAndQueue+0x78>)
 800463c:	4a12      	ldr	r2, [pc, #72]	; (8004688 <prvCheckForValidListAndQueue+0x7c>)
 800463e:	2100      	movs	r1, #0
 8004640:	9100      	str	r1, [sp, #0]
 8004642:	2110      	movs	r1, #16
 8004644:	200a      	movs	r0, #10
 8004646:	f7fe faf2 	bl	8002c2e <xQueueGenericCreateStatic>
 800464a:	0002      	movs	r2, r0
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <prvCheckForValidListAndQueue+0x64>)
 800464e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <prvCheckForValidListAndQueue+0x64>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <prvCheckForValidListAndQueue+0x64>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <prvCheckForValidListAndQueue+0x80>)
 800465e:	0011      	movs	r1, r2
 8004660:	0018      	movs	r0, r3
 8004662:	f7fe fe61 	bl	8003328 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004666:	f000 f8bd 	bl	80047e4 <vPortExitCritical>
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000c18 	.word	0x20000c18
 8004674:	20000be8 	.word	0x20000be8
 8004678:	20000bfc 	.word	0x20000bfc
 800467c:	20000c10 	.word	0x20000c10
 8004680:	20000c14 	.word	0x20000c14
 8004684:	20000cc4 	.word	0x20000cc4
 8004688:	20000c24 	.word	0x20000c24
 800468c:	08004d04 	.word	0x08004d04

08004690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b04      	subs	r3, #4
 80046a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	0452      	lsls	r2, r2, #17
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046bc:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <pxPortInitialiseStack+0x50>)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b14      	subs	r3, #20
 80046c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b20      	subs	r3, #32
 80046d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046d4:	68fb      	ldr	r3, [r7, #12]
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b004      	add	sp, #16
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	080046e5 	.word	0x080046e5

080046e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <prvTaskExitError+0x2c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	d001      	beq.n	80046fa <prvTaskExitError+0x16>
 80046f6:	b672      	cpsid	i
 80046f8:	e7fe      	b.n	80046f8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80046fa:	b672      	cpsid	i
	while( ulDummy == 0 )
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0fc      	beq.n	80046fe <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	2000000c 	.word	0x2000000c

08004714 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004720:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <pxCurrentTCBConst2>)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	3020      	adds	r0, #32
 8004728:	f380 8809 	msr	PSP, r0
 800472c:	2002      	movs	r0, #2
 800472e:	f380 8814 	msr	CONTROL, r0
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004738:	46ae      	mov	lr, r5
 800473a:	bc08      	pop	{r3}
 800473c:	bc04      	pop	{r2}
 800473e:	b662      	cpsie	i
 8004740:	4718      	bx	r3
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46c0      	nop			; (mov r8, r8)

08004750 <pxCurrentTCBConst2>:
 8004750:	200006e8 	.word	0x200006e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	46c0      	nop			; (mov r8, r8)

08004758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <xPortStartScheduler+0x40>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <xPortStartScheduler+0x40>)
 8004762:	21ff      	movs	r1, #255	; 0xff
 8004764:	0409      	lsls	r1, r1, #16
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <xPortStartScheduler+0x40>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <xPortStartScheduler+0x40>)
 8004770:	21ff      	movs	r1, #255	; 0xff
 8004772:	0609      	lsls	r1, r1, #24
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004778:	f000 f898 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <xPortStartScheduler+0x44>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004782:	f7ff ffcd 	bl	8004720 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004786:	f7ff f97d 	bl	8003a84 <vTaskSwitchContext>
	prvTaskExitError();
 800478a:	f7ff ffab 	bl	80046e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800478e:	2300      	movs	r3, #0
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	e000ed20 	.word	0xe000ed20
 800479c:	2000000c 	.word	0x2000000c

080047a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <vPortYield+0x1c>)
 80047a6:	2280      	movs	r2, #128	; 0x80
 80047a8:	0552      	lsls	r2, r2, #21
 80047aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80047ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047b0:	f3bf 8f6f 	isb	sy
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80047c4:	b672      	cpsid	i
	uxCriticalNesting++;
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <vPortEnterCritical+0x20>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <vPortEnterCritical+0x20>)
 80047ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80047d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80047d4:	f3bf 8f6f 	isb	sy
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	2000000c 	.word	0x2000000c

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <vPortExitCritical+0x2c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <vPortExitCritical+0x10>
 80047f0:	b672      	cpsid	i
 80047f2:	e7fe      	b.n	80047f2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <vPortExitCritical+0x2c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1e5a      	subs	r2, r3, #1
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <vPortExitCritical+0x2c>)
 80047fc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <vPortExitCritical+0x2c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d100      	bne.n	8004808 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8004806:	b662      	cpsie	i
	}
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	2000000c 	.word	0x2000000c

08004814 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004814:	f3ef 8010 	mrs	r0, PRIMASK
 8004818:	b672      	cpsid	i
 800481a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	0018      	movs	r0, r3

08004820 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004820:	f380 8810 	msr	PRIMASK, r0
 8004824:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004826:	46c0      	nop			; (mov r8, r8)
	...

08004830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004830:	f3ef 8009 	mrs	r0, PSP
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <pxCurrentTCBConst>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	3820      	subs	r0, #32
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800483e:	4644      	mov	r4, r8
 8004840:	464d      	mov	r5, r9
 8004842:	4656      	mov	r6, sl
 8004844:	465f      	mov	r7, fp
 8004846:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004848:	b508      	push	{r3, lr}
 800484a:	b672      	cpsid	i
 800484c:	f7ff f91a 	bl	8003a84 <vTaskSwitchContext>
 8004850:	b662      	cpsie	i
 8004852:	bc0c      	pop	{r2, r3}
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	6808      	ldr	r0, [r1, #0]
 8004858:	3010      	adds	r0, #16
 800485a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800485c:	46a0      	mov	r8, r4
 800485e:	46a9      	mov	r9, r5
 8004860:	46b2      	mov	sl, r6
 8004862:	46bb      	mov	fp, r7
 8004864:	f380 8809 	msr	PSP, r0
 8004868:	3820      	subs	r0, #32
 800486a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800486c:	4718      	bx	r3
 800486e:	46c0      	nop			; (mov r8, r8)

08004870 <pxCurrentTCBConst>:
 8004870:	200006e8 	.word	0x200006e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46c0      	nop			; (mov r8, r8)

08004878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800487e:	f7ff ffc9 	bl	8004814 <ulSetInterruptMaskFromISR>
 8004882:	0003      	movs	r3, r0
 8004884:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004886:	f7ff f84d 	bl	8003924 <xTaskIncrementTick>
 800488a:	1e03      	subs	r3, r0, #0
 800488c:	d003      	beq.n	8004896 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <xPortSysTickHandler+0x30>)
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	0552      	lsls	r2, r2, #21
 8004894:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff ffc1 	bl	8004820 <vClearInterruptMaskFromISR>
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	22fa      	movs	r2, #250	; 0xfa
 80048c2:	0091      	lsls	r1, r2, #2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7fb fc1f 	bl	8000108 <__udivsi3>
 80048ca:	0003      	movs	r3, r0
 80048cc:	001a      	movs	r2, r3
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048d0:	3a01      	subs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048d6:	2207      	movs	r2, #7
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	e000e010 	.word	0xe000e010
 80048e4:	e000e018 	.word	0xe000e018
 80048e8:	20000000 	.word	0x20000000
 80048ec:	e000e014 	.word	0xe000e014

080048f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80048fc:	f7fe ff6c 	bl	80037d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004900:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <pvPortMalloc+0x140>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004908:	f000 f8ec 	bl	8004ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800490c:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <pvPortMalloc+0x144>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4013      	ands	r3, r2
 8004914:	d000      	beq.n	8004918 <pvPortMalloc+0x28>
 8004916:	e07e      	b.n	8004a16 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d012      	beq.n	8004944 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800491e:	2208      	movs	r2, #8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	189b      	adds	r3, r3, r2
 8004924:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2207      	movs	r2, #7
 800492a:	4013      	ands	r3, r2
 800492c:	d00a      	beq.n	8004944 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2207      	movs	r2, #7
 8004932:	4393      	bics	r3, r2
 8004934:	3308      	adds	r3, #8
 8004936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2207      	movs	r2, #7
 800493c:	4013      	ands	r3, r2
 800493e:	d001      	beq.n	8004944 <pvPortMalloc+0x54>
 8004940:	b672      	cpsid	i
 8004942:	e7fe      	b.n	8004942 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d065      	beq.n	8004a16 <pvPortMalloc+0x126>
 800494a:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <pvPortMalloc+0x148>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d860      	bhi.n	8004a16 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004954:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <pvPortMalloc+0x14c>)
 8004956:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004958:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <pvPortMalloc+0x14c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800495e:	e004      	b.n	800496a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d903      	bls.n	800497c <pvPortMalloc+0x8c>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f1      	bne.n	8004960 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800497c:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <pvPortMalloc+0x140>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	429a      	cmp	r2, r3
 8004984:	d047      	beq.n	8004a16 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2208      	movs	r2, #8
 800498c:	189b      	adds	r3, r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	1ad2      	subs	r2, r2, r3
 80049a0:	2308      	movs	r3, #8
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d916      	bls.n	80049d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2207      	movs	r2, #7
 80049b4:	4013      	ands	r3, r2
 80049b6:	d001      	beq.n	80049bc <pvPortMalloc+0xcc>
 80049b8:	b672      	cpsid	i
 80049ba:	e7fe      	b.n	80049ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f000 f8e7 	bl	8004ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049d6:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <pvPortMalloc+0x148>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <pvPortMalloc+0x148>)
 80049e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <pvPortMalloc+0x148>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <pvPortMalloc+0x150>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d203      	bcs.n	80049f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <pvPortMalloc+0x148>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <pvPortMalloc+0x150>)
 80049f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <pvPortMalloc+0x144>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <pvPortMalloc+0x154>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <pvPortMalloc+0x154>)
 8004a14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a16:	f7fe feeb 	bl	80037f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2207      	movs	r2, #7
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d001      	beq.n	8004a26 <pvPortMalloc+0x136>
 8004a22:	b672      	cpsid	i
 8004a24:	e7fe      	b.n	8004a24 <pvPortMalloc+0x134>
	return pvReturn;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b006      	add	sp, #24
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	2000191c 	.word	0x2000191c
 8004a34:	20001930 	.word	0x20001930
 8004a38:	20001920 	.word	0x20001920
 8004a3c:	20001914 	.word	0x20001914
 8004a40:	20001924 	.word	0x20001924
 8004a44:	20001928 	.word	0x20001928

08004a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d03a      	beq.n	8004ad0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	18d3      	adds	r3, r2, r3
 8004a62:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <vPortFree+0x90>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4013      	ands	r3, r2
 8004a72:	d101      	bne.n	8004a78 <vPortFree+0x30>
 8004a74:	b672      	cpsid	i
 8004a76:	e7fe      	b.n	8004a76 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <vPortFree+0x3c>
 8004a80:	b672      	cpsid	i
 8004a82:	e7fe      	b.n	8004a82 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <vPortFree+0x90>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d01f      	beq.n	8004ad0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11b      	bne.n	8004ad0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <vPortFree+0x90>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004aa8:	f7fe fe96 	bl	80037d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <vPortFree+0x94>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	18d2      	adds	r2, r2, r3
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <vPortFree+0x94>)
 8004ab8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 f871 	bl	8004ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <vPortFree+0x98>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <vPortFree+0x98>)
 8004aca:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8004acc:	f7fe fe90 	bl	80037f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20001930 	.word	0x20001930
 8004adc:	20001920 	.word	0x20001920
 8004ae0:	2000192c 	.word	0x2000192c

08004ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aea:	23c0      	movs	r3, #192	; 0xc0
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004af0:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <prvHeapInit+0xa8>)
 8004af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2207      	movs	r2, #7
 8004af8:	4013      	ands	r3, r2
 8004afa:	d00c      	beq.n	8004b16 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3307      	adds	r3, #7
 8004b00:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2207      	movs	r2, #7
 8004b06:	4393      	bics	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <prvHeapInit+0xa8>)
 8004b12:	18d3      	adds	r3, r2, r3
 8004b14:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <prvHeapInit+0xac>)
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <prvHeapInit+0xac>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	18d3      	adds	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b2e:	2208      	movs	r2, #8
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2207      	movs	r2, #7
 8004b3a:	4393      	bics	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <prvHeapInit+0xb0>)
 8004b42:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <prvHeapInit+0xb0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <prvHeapInit+0xb0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <prvHeapInit+0xb0>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvHeapInit+0xb4>)
 8004b70:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <prvHeapInit+0xb8>)
 8004b78:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <prvHeapInit+0xbc>)
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	0612      	lsls	r2, r2, #24
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b004      	add	sp, #16
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	20000d14 	.word	0x20000d14
 8004b90:	20001914 	.word	0x20001914
 8004b94:	2000191c 	.word	0x2000191c
 8004b98:	20001924 	.word	0x20001924
 8004b9c:	20001920 	.word	0x20001920
 8004ba0:	20001930 	.word	0x20001930

08004ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <prvInsertBlockIntoFreeList+0xa8>)
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e002      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x14>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d8f7      	bhi.n	8004bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	18d3      	adds	r3, r2, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d108      	bne.n	8004be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	18d2      	adds	r2, r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	18d2      	adds	r2, r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d118      	bne.n	8004c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <prvInsertBlockIntoFreeList+0xac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d00d      	beq.n	8004c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	18d2      	adds	r2, r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e008      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <prvInsertBlockIntoFreeList+0xac>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e003      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d002      	beq.n	8004c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b004      	add	sp, #16
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	20001914 	.word	0x20001914
 8004c50:	2000191c 	.word	0x2000191c

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	2600      	movs	r6, #0
 8004c58:	4d0c      	ldr	r5, [pc, #48]	; (8004c8c <__libc_init_array+0x38>)
 8004c5a:	4c0d      	ldr	r4, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	2600      	movs	r6, #0
 8004c66:	f000 f82b 	bl	8004cc0 <_init>
 8004c6a:	4d0a      	ldr	r5, [pc, #40]	; (8004c94 <__libc_init_array+0x40>)
 8004c6c:	4c0a      	ldr	r4, [pc, #40]	; (8004c98 <__libc_init_array+0x44>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	00b3      	lsls	r3, r6, #2
 8004c7a:	58eb      	ldr	r3, [r5, r3]
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	00b3      	lsls	r3, r6, #2
 8004c84:	58eb      	ldr	r3, [r5, r3]
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08004ddc 	.word	0x08004ddc
 8004c90:	08004ddc 	.word	0x08004ddc
 8004c94:	08004ddc 	.word	0x08004ddc
 8004c98:	08004de0 	.word	0x08004de0

08004c9c <memcpy>:
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d100      	bne.n	8004ca6 <memcpy+0xa>
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	5ccc      	ldrb	r4, [r1, r3]
 8004ca8:	54c4      	strb	r4, [r0, r3]
 8004caa:	3301      	adds	r3, #1
 8004cac:	e7f8      	b.n	8004ca0 <memcpy+0x4>

08004cae <memset>:
 8004cae:	0003      	movs	r3, r0
 8004cb0:	1882      	adds	r2, r0, r2
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <memset+0xa>
 8004cb6:	4770      	bx	lr
 8004cb8:	7019      	strb	r1, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	e7f9      	b.n	8004cb2 <memset+0x4>
	...

08004cc0 <_init>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr

08004ccc <_fini>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr
